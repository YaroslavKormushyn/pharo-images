OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:01:04.825315+03:00' ],		#prior : OmReference [ 'Pharo7.0-SNAPSHOT-32bit-442fd72.b862n2fs93igysiqrw4o8a3pw', '7' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult first: ((COOSparseMatrixNode new row: 0 column: 0 value: 0) rightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/10/2019 14:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 11:01',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:13:54.503315+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 11:01',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 11:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:26:37.147315+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ].\r\toperationWindow createWindowGroup\r\t\taddWindow: resultWindow',			#stamp : 'YaroslavKormushyn 4/11/2019 14:07',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ \r\t\t\r\t\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tcomposer view addElement: (COOSparseMatrixVisualizer new getElementShape elementOn: leftMatrixMarker).\r\tcomposer group: #leftMarker.\r\tcomposer view addElement: (COOSparseMatrixVisualizer new getElementShape elementOn: rightMatrixMarker).\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ].\r\toperationWindow createWindowGroup addWindow: resultWindow',			#stamp : 'YaroslavKormushyn 4/12/2019 11:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:27:30.641315+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ \r\t\t\r\t\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tcomposer view addElement: (COOSparseMatrixVisualizer new getElementShape elementOn: leftMatrixMarker).\r\tcomposer group: #leftMarker.\r\tcomposer view addElement: (COOSparseMatrixVisualizer new getElementShape elementOn: rightMatrixMarker).\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ].\r\toperationWindow createWindowGroup addWindow: resultWindow',			#stamp : 'YaroslavKormushyn 4/12/2019 11:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tcomposer view\r\t\taddElement:\r\t\t\t(COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: leftMatrixMarker).\r\tcomposer group: #leftMarker.\r\tcomposer view\r\t\taddElement:\r\t\t\t(COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: rightMatrixMarker).\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ].\r\t"operationWindow createWindowGroup addWindow: resultWindow"',			#stamp : 'YaroslavKormushyn 4/12/2019 11:27',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:28:54.396315+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tcomposer view\r\t\taddElement:\r\t\t\t(COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: leftMatrixMarker).\r\tcomposer group: #leftMarker.\r\tcomposer view\r\t\taddElement:\r\t\t\t(COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: rightMatrixMarker).\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ].\r\t"operationWindow createWindowGroup addWindow: resultWindow"',			#stamp : 'YaroslavKormushyn 4/12/2019 11:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ \r\t\tself halt.leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tcomposer view\r\t\taddElement:\r\t\t\t(COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: leftMatrixMarker).\r\tcomposer group: #leftMarker.\r\tcomposer view\r\t\taddElement:\r\t\t\t(COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: rightMatrixMarker).\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]\r\t"operationWindow createWindowGroup addWindow: resultWindow"',			#stamp : 'YaroslavKormushyn 4/12/2019 11:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:40:08.924315+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ \r\t\tself halt.leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tcomposer view\r\t\taddElement:\r\t\t\t(COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: leftMatrixMarker).\r\tcomposer group: #leftMarker.\r\tcomposer view\r\t\taddElement:\r\t\t\t(COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: rightMatrixMarker).\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]\r\t"operationWindow createWindowGroup addWindow: resultWindow"',			#stamp : 'YaroslavKormushyn 4/12/2019 11:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement|\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ \r\t\tself halt.leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: leftMatrixMarker).\r\t\t\t\tcomposer view\r\t\taddElement:leftMarkerElement\r\t\t\t.\r\tRTGridLayout onElement: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: rightMatrixMarker).\r\tcomposer view\r\t\taddElement:\r\t\t\trightMarkerElement.\r\t\t\tRTGridLayout onElement: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]\r\t"operationWindow createWindowGroup addWindow: resultWindow"',			#stamp : 'YaroslavKormushyn 4/12/2019 11:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:43:36.609315+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement|\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ \r\t\tself halt.leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: leftMatrixMarker).\r\t\t\t\tcomposer view\r\t\taddElement:leftMarkerElement\r\t\t\t.\r\tRTGridLayout onElement: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new getElementShape\r\t\t\t\telementOn: rightMatrixMarker).\r\tcomposer view\r\t\taddElement:\r\t\t\trightMarkerElement.\r\t\t\tRTGridLayout onElement: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]\r\t"operationWindow createWindowGroup addWindow: resultWindow"',			#stamp : 'YaroslavKormushyn 4/12/2019 11:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ self halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := COOSparseMatrixVisualizer new getElementShape\r\t\telementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := COOSparseMatrixVisualizer new getElementShape\r\t\telementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 11:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:46:46.470315+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'groupToExisting:',			#protocol : #public-layout,			#sourceCode : 'groupToExisting: aName\r\t"Define a new group with the elements added to the view"\r\r\t| group |\r\tgroup := self newElementsAsGroup.\r\tgroups add: group.\r\tmapping at: aName put: group',			#stamp : 'YaroslavKormushyn 4/12/2019 11:46',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T11:47:44.823315+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'groupToExisting:',			#protocol : #public-layout,			#sourceCode : 'groupToExisting: aName\r\t"Define a new group with the elements added to the view"\r\r\t| group |\r\tgroup := self newElementsAsGroup.\r\tgroups add: group.\r\tmapping at: aName put: group',			#stamp : 'YaroslavKormushyn 4/12/2019 11:46',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'groupToExisting:',			#protocol : #public-layout,			#sourceCode : 'groupToExisting: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| group |\r\tgroup := self newElementsAsGroup.\r\tgroups add: group.\r\tmapping at: aName put: group',			#stamp : 'YaroslavKormushyn 4/12/2019 11:47',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T12:25:15.694315+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'groupToExisting:',			#protocol : #public-layout,			#sourceCode : 'groupToExisting: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| group |\r\tgroup := self newElementsAsGroup.\r\tgroups add: group.\r\tmapping at: aName put: group',			#stamp : 'YaroslavKormushyn 4/12/2019 11:47',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'groupToExisting:',			#protocol : #public-layout,			#sourceCode : 'groupToExisting: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [mapping at: aName] on: KeyNotFound do: [ KeyNotFound signal: \'No group with \', aName, \' was found\' ].\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/12/2019 12:25',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T12:28:37.614315+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ self halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := COOSparseMatrixVisualizer new getElementShape\r\t\telementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := COOSparseMatrixVisualizer new getElementShape\r\t\telementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 11:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ self halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := COOSparseMatrixVisualizer new getElementShape\r\t\telementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := COOSparseMatrixVisualizer new getElementShape\r\t\telementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 12:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T12:32:52.725315+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 11:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\t"composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 12:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T12:46:09.676315+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ self halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := COOSparseMatrixVisualizer new getElementShape\r\t\telementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := COOSparseMatrixVisualizer new getElementShape\r\t\telementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 12:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ self halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new elementSize: 100) getElementShape\r\t\telementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new elementSize: 100) getElementShape\r\t\telementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 12:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T13:10:16.424315+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixVisualizer,				#isMetaSide : false			},			#name : #'getElementShapeScaled:',			#protocol : #private,			#sourceCode : 'getElementShapeScaled: scale\r\t| comp box valueLabel indexLabel |\r\tcomp := RTCompositeShape new.\r\tbox := RTBox new\r\t\tcolor: Color blue;\r\t\tsize: elementSize * scale.\r\tvalueLabel := RTLabel new\r\theight: RTLabel defaultFontSize * scale;\r\t\ttext: [ :el | el value ];\r\t\tcolor: Color white.\r\tindexLabel := RTLabel new\r\t\theight: 5 * scale;\r\t\ttext: [ :el | el row @ el column ];\r\t\tcolor: Color white.\r\tcomp\r\t\tadd: box;\r\t\tadd: valueLabel;\r\t\tadd: indexLabel translateBy: 0 @ (10 * scale).\r\t^ comp',			#stamp : 'YaroslavKormushyn 4/12/2019 13:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T13:11:36.299315+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ self halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new elementSize: 100) getElementShape\r\t\telementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new elementSize: 100) getElementShape\r\t\telementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 12:46',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ self halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 13:11',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T13:52:02.987315+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ self halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 13:11',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ \r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tself halt.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 13:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T13:52:39.648315+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ \r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tself halt.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 13:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\t\r\t\t\t\t\t\t\t\t\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 13:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T14:05:50.483315+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\rcomposer removeGroup: group.\r\t\t\t\t\t\t\t\t\tMatrixVisualizer on: model withView: composer view.\r\t\t\t\t\t\t\t\t\tcomposer group: group.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/12/2019 14:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T14:07:40.957315+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\t\r\t\t\t\t\t\t\t\t\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 13:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 14:07',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-12T14:14:55.058315+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 14:07',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 14:14',			#package : #LNU-SparseMatrix		}	}}