OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T12:09:34.706705+03:00' ],		#prior : OmReference [ 'Pharo7.0-SNAPSHOT-32bit-442fd72.175p5wwow31u893t6trumwu0l', '1' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tself halt.\r\tcomposer move: #result below: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/1/2019 23:29',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tself halt.\r\tcomposer move: #result below: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T12:16:15.002705+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tself halt.\r\tcomposer move: #result below: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:09',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tself halt.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:16',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T12:18:14.245705+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tself halt.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:16',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T12:27:30.785705+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:27',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T12:28:54.604705+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T12:40:25.653705+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T13:15:20.987705+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 12:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 13:15',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T13:18:02.377705+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 13:15',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 13:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T13:54:29.342705+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 13:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red. ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 13:54',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T14:06:46.423705+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red. ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 13:54',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. \r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color yellow.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:06',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T14:08:03.952705+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\t"self halt.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tself halt.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. \r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color yellow.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:06',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. \r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color yellow.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T14:39:02.527705+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\t\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\t\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\t"MatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t"composer move: #result onTheRightOf: #right.\r\tcomposer nameGroup: #result as: \'result\'.\r\t"composer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red. \r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color yellow.\rcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right) elementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate. ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:08',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\t\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\t\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\t\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T14:39:54.440705+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\t\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\t\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\t\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:39',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T14:40:06.991705+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:39',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T14:40:54.046705+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T14:43:02.779705+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.(Delay forSeconds: 1) wait.].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ]] fork.\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T14:46:08.429705+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ]] fork.\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ]] fork.\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T15:09:16.843705+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T15:10:09.069705+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:09',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T15:10:14.682705+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T15:28:03.428705+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'setColor:for:in:',			#protocol : #'as yet unclassified',			#sourceCode : 'setColor: color for: element in: aView\r',			#stamp : 'YaroslavKormushyn 4/7/2019 15:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T15:28:03.431705+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'setColor:for:in:',			#protocol : #'as yet unclassified',			#sourceCode : 'setColor: color for: element in: aView\r',			#stamp : 'YaroslavKormushyn 4/7/2019 15:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'setColor:for:in:',			#protocol : #initialization,			#sourceCode : 'setColor: color for: element in: aView\r',			#stamp : 'YaroslavKormushyn 4/7/2019 15:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T15:30:53.049705+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer view addMenu: \'Resume\' callback: [ semaphore signal ].\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer view open.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tcomposer removeGroup: #right.\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer removeAllBackgrounds.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view signalUpdate.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ]] fork.\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 14:46',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'; nameGroup: #right as: \'right\'.composer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t\t\t\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[head rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t\tsemaphore wait.\r\t^ result] fork',			#stamp : 'YaroslavKormushyn 4/7/2019 15:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T23:04:30.492705+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer nameGroup: #left as: \'left\'; nameGroup: #right as: \'right\'.composer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t\t\t\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[head rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t\tsemaphore wait.\r\t^ result] fork',			#stamp : 'YaroslavKormushyn 4/7/2019 15:30',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer\r\t\tnameGroup: #left as: \'left\';\r\t\tnameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result ] fork',			#stamp : 'YaroslavKormushyn 4/7/2019 23:04',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T23:05:05.906705+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer\r\t\tnameGroup: #left as: \'left\';\r\t\tnameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result ] fork',			#stamp : 'YaroslavKormushyn 4/7/2019 23:04',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer\r\t\tnameGroup: #left as: \'left\'.\r\t\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result ] fork',			#stamp : 'YaroslavKormushyn 4/7/2019 23:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T23:06:45.100705+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer\r\t\tnameGroup: #left as: \'left\'.\r\t\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result ] fork',			#stamp : 'YaroslavKormushyn 4/7/2019 23:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result ] fork',			#stamp : 'YaroslavKormushyn 4/7/2019 23:06',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T23:08:36.641705+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result ] fork',			#stamp : 'YaroslavKormushyn 4/7/2019 23:06',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail. ] fork.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 23:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T23:19:40.932705+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail. ] fork.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 23:08',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\t"head rightNeighbour leftNeighbour: nil."\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail ] fork.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 23:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T23:21:27.483705+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\t"head rightNeighbour leftNeighbour: nil."\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail ] fork.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 23:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail ] fork.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 23:21',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T23:22:56.593705+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| home result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\thome := thisContext sender sender.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t( aCOOSparseMatrix isEmpty or: [ self isEmpty ] )\r\t\tifTrue: [ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\tresult := self class rows: rowNumber columns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\t\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\t\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t\r\tself withEscaper: [ :end | \t\r\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ] whileTrue: [ \r\t\t\t\tself withEscaper: [ :outer |\r\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t rightMatrixMarker := transposed first. ].\r\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\r\t\t\t\t\tself withEscaper: [ :next | \r\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn  ] ] ] ] \r\t\t\t\t\twhileTrue: [ \r\t\t\t\t\tpriorityColumn := { leftMatrixMarker column . rightMatrixMarker column } max.\r\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t[rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\r\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\t\t\t\t\t\r\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn \r\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tsum := sum + ( leftMatrixMarker value * rightMatrixMarker value ).\r\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour]\r\t\t\t\t\t\tifFalse: [\r\t\t\t\t\t\t\tpriorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0] \r\t\t\t\t\t\t\t].\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t newNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0]\r\t\t\t\t\t\t] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult first: head rightNeighbour; last: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 3/31/2019 13:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 23:22',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-07T23:25:13.052705+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t[ self\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal ] fork.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail ] fork.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 23:21',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| semaphore composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tsemaphore := Semaphore new.\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: transposed withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer view open.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\tcolor: Color red.\r\trightMatrixMarker := transposed first.\r\t((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\tcolor: Color red.\r\tcomposer view signalUpdate.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\telementFromModel: transposed first) color: Color red.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #right) elementFromModel: rightMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ ((composer getGroup: #left) elementFromModel: leftMatrixMarker)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color yellow.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color blue.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #left)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: leftMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\t((composer getGroup: #right)\r\t\t\t\t\t\t\t\t\t\t\t\t\t\telementFromModel: rightMatrixMarker) color: Color red.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\tsemaphore signal.\r\t"nil the reference to dummy head"\r\t[ semaphore wait.\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail ] fork.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/7/2019 23:25',			#package : #LNU-SparseMatrix		}	}}