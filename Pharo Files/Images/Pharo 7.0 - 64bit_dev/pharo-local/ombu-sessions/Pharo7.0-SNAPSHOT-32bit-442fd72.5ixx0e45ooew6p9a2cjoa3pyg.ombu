OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T13:13:12.988024+03:00' ],		#prior : OmReference [ 'Pharo7.0-SNAPSHOT-32bit-442fd72.aolbtafig41eyqlprt0jp019t', '26' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ \r\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ \r\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer. \r\t\t\t\t\t(Delay forSeconds: 1) wait.]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first ]\r\t\t\t\t\t\tifFalse: [ result\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first ].\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/9/2019 18:54',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first ]\r\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first ].\r\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait. ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ \r\t\t\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t self activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait. ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t(Delay forSeconds: 1) wait. ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ \r\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ \r\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 13:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T13:48:37.124024+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlight: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color blue]on: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlight: model in: group on: composer\r\t[ ((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/10/2019 13:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:06:24.472024+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first ]\r\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first ].\r\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait. ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ \r\t\t\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t self activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait. ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t(Delay forSeconds: 1) wait. ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ \r\t\t\tself highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ \r\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 13:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) title: \'Result\'.\r\tresultView open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate. ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate. ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate. ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate. ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:06',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:13:25.644024+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aCOOSparseMatrix\r\t| comp nodes elements |\r\tcomp := self getElementShape.\r\tnodes := aCOOSparseMatrix elementsAsCollection.\r\telements := comp elementsOn: nodes.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 4/1/2019 16:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aCOOSparseMatrix\r\t| comp nodes elements |\r\tcomp := self getElementShape.\r\tnodes := aCOOSparseMatrix elementsAsCollection.\r\tnodes isEmpty ifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: nodes.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 4/10/2019 14:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:19:22.571024+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #private,			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 4/1/2019 15:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #private,			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 4/10/2019 14:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:24:24.702024+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult first: (COOSparseMatrixNode new rightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/9/2019 18:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult first: ((COOSparseMatrixNode new row: 0 column: 0 value: 0) rightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/10/2019 14:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:24:54.187024+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) title: \'Result\'.\r\tresultView open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate. ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate. ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate. ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate. ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:06',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view title: \'Result\'.\r\tresultView open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:25:58.889024+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixVisualizer,				#isMetaSide : false			},			#name : #view,			#protocol : #'as yet unclassified',			#sourceCode : 'view\r^ view',			#stamp : 'YaroslavKormushyn 4/10/2019 14:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:25:58.902024+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixVisualizer,				#isMetaSide : false			},			#name : #view,			#protocol : #'as yet unclassified',			#sourceCode : 'view\r^ view',			#stamp : 'YaroslavKormushyn 4/10/2019 14:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixVisualizer,				#isMetaSide : false			},			#name : #view,			#protocol : #accessing,			#sourceCode : 'view\r^ view',			#stamp : 'YaroslavKormushyn 4/10/2019 14:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:27:30.642024+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view title: \'Result\'.\r\tresultView open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view openTitled: \'Result\'.\r\tresultView open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:27',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:27:56.611024+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view openTitled: \'Result\'.\r\tresultView open.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:27',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:29:28.817024+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:29',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:32:19.631024+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:29',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:32:43.742024+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clear.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clear.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clear.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:32',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T14:59:47.363024+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view open.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:32',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait. ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait. ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T15:04:14.339024+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixNode,				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 4/10/2019 15:04',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T15:04:14.355024+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixNode,				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 4/10/2019 15:04',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixNode,				#isMetaSide : false			},			#name : #copy,			#protocol : #copying,			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 4/10/2019 15:04',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T15:12:01.502024+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait. ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait. ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 14:59',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := leftMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 15:12',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-10T15:12:06.386024+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := leftMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 15:12',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := leftMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 15:12',			#package : #LNU-SparseMatrix		}	}}