OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-03-31T13:14:31.964103+03:00' ],		#prior : OmReference [ 'Pharo7.0-SNAPSHOT-32bit-442fd72.531u76qvc85ycbaku8mn1htbl', '7' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'multiply:by:',			#protocol : #'instance creation',			#sourceCode : 'multiply: leftMatrix by: rightMatrix\r\t| composer innerContext |\r\tcomposer := RTComposer new.\r\tcomposer gap: 35.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'second\'.\r\tinnerContext := [ leftMatrix * rightMatrix ].\r\tinnerContext := innerContext value.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 3/29/2019 12:14',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'multiply:by:',			#protocol : #'instance creation',			#sourceCode : 'multiply: leftMatrix by: rightMatrix\r\t| composer innerContext |\r\tcomposer := RTComposer new.\r\tcomposer gap: 35.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'second\'.\r\tinnerContext := [ leftMatrix * rightMatrix ].\r\tinnerContext := innerContext fork.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 3/31/2019 13:14',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-03-31T13:49:38.555103+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\t\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t( aCOOSparseMatrix isEmpty or: [ self isEmpty ] )\r\t\tifTrue: [ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\tresult := self class rows: rowNumber columns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\t\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\t\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t\r\tself withEscaper: [ :end | \t\r\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ] whileTrue: [ \r\t\t\t\tself withEscaper: [ :outer |\r\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t rightMatrixMarker := transposed first. ].\r\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\r\t\t\t\t\tself withEscaper: [ :next | \r\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn  ] ] ] ] \r\t\t\t\t\twhileTrue: [ \r\t\t\t\t\tpriorityColumn := { leftMatrixMarker column . rightMatrixMarker column } max.\r\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t[rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\r\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\t\t\t\t\t\r\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn \r\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tsum := sum + ( leftMatrixMarker value * rightMatrixMarker value ).\r\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour]\r\t\t\t\t\t\tifFalse: [\r\t\t\t\t\t\t\tpriorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0] \r\t\t\t\t\t\t\t].\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t newNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0]\r\t\t\t\t\t\t] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult first: head rightNeighbour; last: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/29/2018 01:15:11',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tthisContext sender sender composer.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t( aCOOSparseMatrix isEmpty or: [ self isEmpty ] )\r\t\tifTrue: [ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\tresult := self class rows: rowNumber columns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\t\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\t\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t\r\tself withEscaper: [ :end | \t\r\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ] whileTrue: [ \r\t\t\t\tself withEscaper: [ :outer |\r\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t rightMatrixMarker := transposed first. ].\r\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\r\t\t\t\t\tself withEscaper: [ :next | \r\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn  ] ] ] ] \r\t\t\t\t\twhileTrue: [ \r\t\t\t\t\tpriorityColumn := { leftMatrixMarker column . rightMatrixMarker column } max.\r\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t[rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\r\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\t\t\t\t\t\r\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn \r\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tsum := sum + ( leftMatrixMarker value * rightMatrixMarker value ).\r\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour]\r\t\t\t\t\t\tifFalse: [\r\t\t\t\t\t\t\tpriorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0] \r\t\t\t\t\t\t\t].\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t newNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0]\r\t\t\t\t\t\t] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult first: head rightNeighbour; last: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 3/31/2019 13:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-03-31T13:50:39.543103+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tthisContext sender sender composer.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t( aCOOSparseMatrix isEmpty or: [ self isEmpty ] )\r\t\tifTrue: [ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\tresult := self class rows: rowNumber columns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\t\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\t\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t\r\tself withEscaper: [ :end | \t\r\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ] whileTrue: [ \r\t\t\t\tself withEscaper: [ :outer |\r\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t rightMatrixMarker := transposed first. ].\r\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\r\t\t\t\t\tself withEscaper: [ :next | \r\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn  ] ] ] ] \r\t\t\t\t\twhileTrue: [ \r\t\t\t\t\tpriorityColumn := { leftMatrixMarker column . rightMatrixMarker column } max.\r\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t[rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\r\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\t\t\t\t\t\r\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn \r\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tsum := sum + ( leftMatrixMarker value * rightMatrixMarker value ).\r\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour]\r\t\t\t\t\t\tifFalse: [\r\t\t\t\t\t\t\tpriorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0] \r\t\t\t\t\t\t\t].\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t newNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0]\r\t\t\t\t\t\t] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult first: head rightNeighbour; last: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 3/31/2019 13:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| home result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\thome := thisContext sender sender.\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t( aCOOSparseMatrix isEmpty or: [ self isEmpty ] )\r\t\tifTrue: [ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\tresult := self class rows: rowNumber columns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\t\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\t\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\t\r\tself withEscaper: [ :end | \t\r\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ] whileTrue: [ \r\t\t\t\tself withEscaper: [ :outer |\r\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t rightMatrixMarker := transposed first. ].\r\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\r\t\t\t\t\tself withEscaper: [ :next | \r\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn  ] ] ] ] \r\t\t\t\t\twhileTrue: [ \r\t\t\t\t\tpriorityColumn := { leftMatrixMarker column . rightMatrixMarker column } max.\r\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow \r\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t[rightMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\r\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\t\t\t\t\t\r\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t[ rightMatrixMarker isNotNil \r\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn \r\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\r\t\t\t\t\trightMatrixMarker isNil \r\t\t\t\t\t\tifTrue: [  \r\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil \r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\r\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\tleftMatrixMarker isNil \r\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\tnext value].\r\t\t\t\t\t\t\r\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\r\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tsum := sum + ( leftMatrixMarker value * rightMatrixMarker value ).\r\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour]\r\t\t\t\t\t\tifFalse: [\r\t\t\t\t\t\t\tpriorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\tnewNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0] \r\t\t\t\t\t\t\t].\r\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t newNode := COOSparseMatrixNode row: currentLeftRow column: currentRightColumn value: sum.\r\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\tsum := 0]\r\t\t\t\t\t\t] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult first: head rightNeighbour; last: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 3/31/2019 13:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-01T00:06:52.726103+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\t\r\tcomposer := RTComposer new.\r\tcomposer gap: 35.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'second\'.\r\tcomposer view open.\r\t\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: aCOOSparseMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\t\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil and: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormushyn 4/1/2019 00:06',			#package : #LNU-SparseMatrix		}	}}