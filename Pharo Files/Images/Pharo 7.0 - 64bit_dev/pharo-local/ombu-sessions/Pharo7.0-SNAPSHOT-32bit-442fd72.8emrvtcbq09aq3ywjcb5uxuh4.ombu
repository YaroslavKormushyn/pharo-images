OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T19:56:00.465032+03:00' ],		#prior : OmReference [ 'Pharo7.0-SNAPSHOT-32bit-442fd72.3rq1pblr412s8852716cuezyz', '20' ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTShapedObject,				#isMetaSide : false			},			#name : #'updateModelAndRedraw:',			#protocol : #accessing,			#sourceCode : 'updateModelAndRedraw: anObject\r\t"anObject could be any Smalltalk object. Shapes are computed based on that object"\rself model: anObject.\r\t\t\t\t\t\t\t\t\tself update.\r\t\t\t\t\t\t\t\t\tself trachelShape relayout',			#stamp : 'YaroslavKormushyn 4/26/2019 19:56',			#package : #Roassal2-Core		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T20:13:28.819032+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement model: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement model: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer view signalUpdate.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/12/2019 14:14',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T20:35:44.309032+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:35',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T20:41:41.938032+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 20:41',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T20:42:19.067032+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 20:41',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\tview removeElements: existingGroup.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 20:42',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T20:48:15.123032+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCompositeShape,				#isMetaSide : false			},			#name : #relayoutRelative,			#protocol : #'public - layout',			#sourceCode : 'relayoutRelative\r\t"This methods places the contained shapes according to the specified layout"\r\r\t| first |\r\tfirst := self firstShape.\r\tshapeAndOffsets\r\t\tdo: [ :shapeAndOffset | \r\t\t\tshapeAndOffset first\r\t\t\t\ttranslateBy: shapeAndOffset second ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #Trachel		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T20:48:46.652032+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTShapedObject,				#isMetaSide : false			},			#name : #'updateModelAndRedraw:',			#protocol : #accessing,			#sourceCode : 'updateModelAndRedraw: anObject\r\t"anObject could be any Smalltalk object. Shapes are computed based on that object"\rself model: anObject.\r\t\t\t\t\t\t\t\t\tself update.\r\t\t\t\t\t\t\t\t\tself trachelShape relayout',			#stamp : 'YaroslavKormushyn 4/26/2019 19:56',			#package : #Roassal2-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTShapedObject,				#isMetaSide : false			},			#name : #'updateModelAndRedraw:',			#protocol : #accessing,			#sourceCode : 'updateModelAndRedraw: anObject\r\t"anObject could be any Smalltalk object. Shapes are computed based on that object"\r\r\tself model: anObject.\r\tself update.\r\tself trachelShape relayoutRelative',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #Roassal2-Core		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T21:03:11.177032+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\rcomposer removeGroup: group.\r\t\t\t\t\t\t\t\t\tMatrixVisualizer on: model withView: composer view.\r\t\t\t\t\t\t\t\t\tcomposer group: group.\r\t\t\t\t\t\t\t\t\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/12/2019 14:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\r\tMatrixVisualizer on: model withView: composer view.\r\tcomposer replaceExistingGroup: group.\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T21:03:35.634032+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:35',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T21:24:38.852032+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\tview removeElements: existingGroup.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 20:42',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\tview removeElements: existingGroup elements.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 21:24',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T21:26:26.587032+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 21:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T21:48:54.773032+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\tview removeElements: existingGroup elements.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 21:24',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\texistingGroup remove.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 21:48',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T21:52:37.598032+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\texistingGroup remove.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 21:48',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #public-layout,			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\texistingGroup remove; removeAll.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormushyn 4/26/2019 21:52',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T22:21:51.387032+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tresult ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 21:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 22:21',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T22:25:00.007032+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\tresultView := (MatrixVisualizer on: result) view.\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\tresultWindow close ]',			#stamp : 'YaroslavKormushyn 4/26/2019 22:21',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer ]\r\t\tnewProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\t"resultWindow close" ]',			#stamp : 'YaroslavKormushyn 4/26/2019 22:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T22:25:07.127032+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tself halt.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer ]\r\t\tnewProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close.\r\t\t\t"resultWindow close" ]',			#stamp : 'YaroslavKormushyn 4/26/2019 22:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer ]\r\t\tnewProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\t"resultWindow close" ]',			#stamp : 'YaroslavKormushyn 4/26/2019 22:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T22:34:27.909032+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer ]\r\t\tnewProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\t"resultWindow close" ]',			#stamp : 'YaroslavKormushyn 4/26/2019 22:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ]\r\t\tnewProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\t"resultWindow close" ]',			#stamp : 'YaroslavKormushyn 4/26/2019 22:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T22:52:56.472032+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ]\r\t\tnewProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\t"resultWindow close" ]',			#stamp : 'YaroslavKormushyn 4/26/2019 22:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\t"resultWindow close" ].\r\t\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 22:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:16:16.079032+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\toperationWindow := composer view openTitled: \'Multiplication\'.\r\t"resultWindow := resultView openTitled: \'Result\'."\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ "operationWindow createWindowGroup addWindow: resultWindow"\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\t"resultWindow close" ].\r\t\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 22:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:16',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:17:02.972032+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:16',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view addMenu: \'Stop\' callback: [ operationProcess terminate ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:23:23.699032+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationProcess := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ] newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view addMenu: \'Stop\' callback: [ operationProcess terminate ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\roperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:23',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:25:38.064032+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\roperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:23',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:37:46.424032+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpCategoryAddition {		#classCategoryName : #LNU-SparseMatrix-Data-Extensions,		#affectedPackageName : #LNU-SparseMatrix	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:40:29.869032+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #arithmetic,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := leftMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 15:12',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #extensions,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := leftMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 15:12',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:47:37.875032+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #extensions,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := leftMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 15:12',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := leftMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 15:12',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:47:37.917032+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addAnimated:',			#protocol : #extensions,			#sourceCode : 'addAnimated: aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode composer resultView |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tcomposer := self getSelfViewWith: aCOOMatrix result: result.\r\tcomposer view openTitled: \'Addition\'.\r\tresultView := (MatrixVisualizer on: result) view.\r\tresultView openTitled: \'Result\'.\r\t[ leftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\t(Delay forSeconds: 1) wait.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\tresult first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\tresult first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tresult\r\t\t\t\t\t\t\t\tfirst:\r\t\t\t\t\t\t\t\t\t(rightMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first.\r\t\t\t\t\t\t\tresultView clean.\r\t\t\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifFalse: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\tnewNode := leftMatrixMarker copy\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tresultView clean.\r\t\t\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\t\t\tresultView signalUpdate.\r\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := leftMatrixMarker copy.\r\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ self highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t(Delay forSeconds: 1) wait.\r\t\t\tnewNode := rightMatrixMarker copy.\r\t\t\tself deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\r\t"remove the dummy head if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresultView clean.\r\t\t\tMatrixVisualizer on: result withView: resultView.\r\t\t\tresultView signalUpdate.\r\t\t\t(Delay forSeconds: 1) wait ].\r\tresult ] fork',			#stamp : 'YaroslavKormushyn 4/10/2019 15:12',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:47:37.920032+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #COOSparseMatrix\r\tinstanceVariableNames: \'first last rowNumber columnNumber\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Data\''			},			#name : #COOSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #first,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #last,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #rowNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #columnNumber,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'COOSparseMatrix class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'COOSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a sparse matrix of numbers.\r\rI store a low-density table of numbers. l know my size, first and last element in the table as a sequence of rows left to right.\r\rMy main collaborator is COOMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnNumbers\r- rowNumbers\r- at: at:\r- at:at:put:\r- copy\r- removeAt:at:\r- transpose\r- copy\r- withAll:\r\rInstance creation:\r1) An empty matrix of size [ number_of_rows x number_of_columns ]\r- COOSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- COOSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tcolumnNumber:\t\t<SmallInteger>\r\trowNumber:\t\t\t<SmallInteger>\r\tfirst:\t\t\t\t<COOMatrixNode>\r\tlast:\t\t\t\t\t<COOMatrixNode>\r\rImplementation Points\rMy internal representation of values is a sorted linked list, each node represented by COOSparseMatrixNode.',				#stamp : 'YaroslavKormushyn 4/18/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Data,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#protocol : #extensions	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:48:33.762032+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #extensions,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:49:22.856032+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #COOSparseMatrix\r\tinstanceVariableNames: \'first last rowNumber columnNumber\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Data\''			},			#name : #COOSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #first,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #last,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #rowNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #columnNumber,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'COOSparseMatrix class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'COOSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a sparse matrix of numbers.\r\rI store a low-density table of numbers. l know my size, first and last element in the table as a sequence of rows left to right.\r\rMy main collaborator is COOMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnNumbers\r- rowNumbers\r- at: at:\r- at:at:put:\r- copy\r- removeAt:at:\r- transpose\r- copy\r- withAll:\r\rInstance creation:\r1) An empty matrix of size [ number_of_rows x number_of_columns ]\r- COOSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- COOSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tcolumnNumber:\t\t<SmallInteger>\r\trowNumber:\t\t\t<SmallInteger>\r\tfirst:\t\t\t\t<COOMatrixNode>\r\tlast:\t\t\t\t\t<COOMatrixNode>\r\rImplementation Points\rMy internal representation of values is a sorted linked list, each node represented by COOSparseMatrixNode.',				#stamp : 'YaroslavKormushyn 4/18/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Data,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#protocol : #extensions	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:49:22.985032+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #extensions,			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:25',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:25',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:54:55.602032+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'activate:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'activate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model) color: Color red]\ron: Error do: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'activate:in:on:',			#protocol : #extensions,			#sourceCode : 'activate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model) color: Color red]\ron: Error do: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:55:49.869032+03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'deactivate:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'deactivate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color blue]on: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'deactivate:in:on:',			#protocol : #extensions,			#sourceCode : 'deactivate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color blue]on: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:55:53.607032+03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #private,			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 4/10/2019 14:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #extensions,			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 4/10/2019 14:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:02.938032+03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #extensions,			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:06.999032+03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\t"composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 12:32',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #extensions,			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\t"composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 12:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:10.696032+03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlight: model in: group on: composer\r\t[ ((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/10/2019 13:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #extensions,			#sourceCode : 'highlight: model in: group on: composer\r\t[ ((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/10/2019 13:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:22.062032+03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\r\tMatrixVisualizer on: model withView: composer view.\r\tcomposer replaceExistingGroup: group.\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #extensions,			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\r\tMatrixVisualizer on: model withView: composer view.\r\tcomposer replaceExistingGroup: group.\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:29.943032+03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'setColor:for:in:',			#protocol : #initialization,			#sourceCode : 'setColor: color for: element in: aView\r',			#stamp : 'YaroslavKormushyn 4/7/2019 15:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'setColor:for:in:',			#protocol : #'as yet unclassified',			#sourceCode : 'setColor: color for: element in: aView\r',			#stamp : 'YaroslavKormushyn 4/7/2019 15:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:29.983032+03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'setColor:for:in:',			#protocol : #initialization,			#sourceCode : 'setColor: color for: element in: aView\r',			#stamp : 'YaroslavKormushyn 4/7/2019 15:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:29.986032+03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #COOSparseMatrix\r\tinstanceVariableNames: \'first last rowNumber columnNumber\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Data\''			},			#name : #COOSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #first,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #last,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #rowNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #columnNumber,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'COOSparseMatrix class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'COOSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a sparse matrix of numbers.\r\rI store a low-density table of numbers. l know my size, first and last element in the table as a sequence of rows left to right.\r\rMy main collaborator is COOMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnNumbers\r- rowNumbers\r- at: at:\r- at:at:put:\r- copy\r- removeAt:at:\r- transpose\r- copy\r- withAll:\r\rInstance creation:\r1) An empty matrix of size [ number_of_rows x number_of_columns ]\r- COOSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- COOSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tcolumnNumber:\t\t<SmallInteger>\r\trowNumber:\t\t\t<SmallInteger>\r\tfirst:\t\t\t\t<COOMatrixNode>\r\tlast:\t\t\t\t\t<COOMatrixNode>\r\rImplementation Points\rMy internal representation of values is a sorted linked list, each node represented by COOSparseMatrixNode.',				#stamp : 'YaroslavKormushyn 4/18/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Data,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#protocol : #initialization	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:51.220032+03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #extensions,			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\t"composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 12:32',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\t"composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 12:32',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:51.229032+03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #extensions,			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:51.309032+03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #extensions,			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\r\tMatrixVisualizer on: model withView: composer view.\r\tcomposer replaceExistingGroup: group.\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\r\tMatrixVisualizer on: model withView: composer view.\r\tcomposer replaceExistingGroup: group.\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:51.317032+03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'activate:in:on:',			#protocol : #extensions,			#sourceCode : 'activate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model) color: Color red]\ron: Error do: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:17',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'activate:in:on:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'activate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model) color: Color red]\ron: Error do: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:17',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:51.323032+03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #extensions,			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 4/10/2019 14:19',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 4/10/2019 14:19',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:51.330032+03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #extensions,			#sourceCode : 'highlight: model in: group on: composer\r\t[ ((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/10/2019 13:48',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'highlight: model in: group on: composer\r\t[ ((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/10/2019 13:48',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:51.331032+03:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #COOSparseMatrix\r\tinstanceVariableNames: \'first last rowNumber columnNumber\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Data\''			},			#name : #COOSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #first,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #last,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #rowNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #columnNumber,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'COOSparseMatrix class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'COOSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a sparse matrix of numbers.\r\rI store a low-density table of numbers. l know my size, first and last element in the table as a sequence of rows left to right.\r\rMy main collaborator is COOMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnNumbers\r- rowNumbers\r- at: at:\r- at:at:put:\r- copy\r- removeAt:at:\r- transpose\r- copy\r- withAll:\r\rInstance creation:\r1) An empty matrix of size [ number_of_rows x number_of_columns ]\r- COOSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- COOSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tcolumnNumber:\t\t<SmallInteger>\r\trowNumber:\t\t\t<SmallInteger>\r\tfirst:\t\t\t\t<COOMatrixNode>\r\tlast:\t\t\t\t\t<COOMatrixNode>\r\rImplementation Points\rMy internal representation of values is a sorted linked list, each node represented by COOSparseMatrixNode.',				#stamp : 'YaroslavKormushyn 4/18/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Data,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#protocol : #extensions	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-26T23:56:51.402032+03:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'deactivate:in:on:',			#protocol : #extensions,			#sourceCode : 'deactivate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color blue]on: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:18',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'deactivate:in:on:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'deactivate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color blue]on: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:18',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:00:50.930032+03:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCompositeShape,				#isMetaSide : false			},			#name : #relayoutRelative,			#protocol : #'public - layout',			#sourceCode : 'relayoutRelative\r\t"This methods places the contained shapes according to the specified layout"\r\r\t| first |\r\tfirst := self firstShape.\r\tshapeAndOffsets\r\t\tdo: [ :shapeAndOffset | \r\t\t\tshapeAndOffset first\r\t\t\t\ttranslateBy: shapeAndOffset second ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #Trachel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCompositeShape,				#isMetaSide : false			},			#name : #relayoutRelative,			#protocol : #extensions,			#sourceCode : 'relayoutRelative\r\t"This methods places the contained shapes according to the specified layout"\r\r\t| first |\r\tfirst := self firstShape.\r\tshapeAndOffsets\r\t\tdo: [ :shapeAndOffset | \r\t\t\tshapeAndOffset first\r\t\t\t\ttranslateBy: shapeAndOffset second ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #Trachel		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:01:04.110032+03:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TRShape',				#traitCompositionSource : '{}',				#definitionSource : 'TRShape subclass: #TRCompositeShape\r\tinstanceVariableNames: \'shapeAndOffsets\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Trachel-Shapes\''			},			#name : #TRCompositeShape,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TRCompositeShape,						#isMetaSide : false					},					#name : #shapeAndOffsets,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'TRCompositeShape class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'TRCompositeShape class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TRCompositeShape,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Trachel-Shapes,			#package : #Trachel,			#sharedPools : OrderedCollection [ ]		},		#protocol : #extensions	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:01:04.359032+03:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCompositeShape,				#isMetaSide : false			},			#name : #relayoutRelative,			#protocol : #extensions,			#sourceCode : 'relayoutRelative\r\t"This methods places the contained shapes according to the specified layout"\r\r\t| first |\r\tfirst := self firstShape.\r\tshapeAndOffsets\r\t\tdo: [ :shapeAndOffset | \r\t\t\tshapeAndOffset first\r\t\t\t\ttranslateBy: shapeAndOffset second ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #LNU-SparseMatrix-Extensions		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCompositeShape,				#isMetaSide : false			},			#name : #relayoutRelative,			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'relayoutRelative\r\t"This methods places the contained shapes according to the specified layout"\r\r\t| first |\r\tfirst := self firstShape.\r\tshapeAndOffsets\r\t\tdo: [ :shapeAndOffset | \r\t\t\tshapeAndOffset first\r\t\t\t\ttranslateBy: shapeAndOffset second ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #LNU-SparseMatrix-Extensions		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:26.883032+03:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\t"composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 12:32',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\t"composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/12/2019 12:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:26.891032+03:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormushyn 4/7/2019 15:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:26.963032+03:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\r\tMatrixVisualizer on: model withView: composer view.\r\tcomposer replaceExistingGroup: group.\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\r\tMatrixVisualizer on: model withView: composer view.\r\tcomposer replaceExistingGroup: group.\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/26/2019 21:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:26.970032+03:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'activate:in:on:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'activate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model) color: Color red]\ron: Error do: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'activate:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'activate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model) color: Color red]\ron: Error do: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:26.975032+03:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 4/10/2019 14:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #'as yet unclassified',			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 4/10/2019 14:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:26.980032+03:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'highlight: model in: group on: composer\r\t[ ((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/10/2019 13:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlight: model in: group on: composer\r\t[ ((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/10/2019 13:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:26.984032+03:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'deactivate:in:on:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'deactivate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color blue]on: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'deactivate:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'deactivate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color blue]on: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'YaroslavKormushyn 4/9/2019 18:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:26.986032+03:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #COOSparseMatrix\r\tinstanceVariableNames: \'first last rowNumber columnNumber\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Data\''			},			#name : #COOSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #first,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #last,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #rowNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #columnNumber,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'COOSparseMatrix class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'COOSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a sparse matrix of numbers.\r\rI store a low-density table of numbers. l know my size, first and last element in the table as a sequence of rows left to right.\r\rMy main collaborator is COOMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnNumbers\r- rowNumbers\r- at: at:\r- at:at:put:\r- copy\r- removeAt:at:\r- transpose\r- copy\r- withAll:\r\rInstance creation:\r1) An empty matrix of size [ number_of_rows x number_of_columns ]\r- COOSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- COOSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tcolumnNumber:\t\t<SmallInteger>\r\trowNumber:\t\t\t<SmallInteger>\r\tfirst:\t\t\t\t<COOMatrixNode>\r\tlast:\t\t\t\t\t<COOMatrixNode>\r\rImplementation Points\rMy internal representation of values is a sorted linked list, each node represented by COOSparseMatrixNode.',				#stamp : 'YaroslavKormushyn 4/18/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Data,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*LNU-SparseMatrix-Extensions'	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:02:27.083032+03:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormushyn 4/26/2019 23:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:03:36.174032+03:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TRShape',				#traitCompositionSource : '{}',				#definitionSource : 'TRShape subclass: #TRCompositeShape\r\tinstanceVariableNames: \'shapeAndOffsets\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Trachel-Shapes\''			},			#name : #TRCompositeShape,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TRCompositeShape,						#isMetaSide : false					},					#name : #shapeAndOffsets,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'TRCompositeShape class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'TRCompositeShape class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TRCompositeShape,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Trachel-Shapes,			#package : #Trachel,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*LNU-SparseMatrix-Extensions'	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:03:36.190032+03:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCompositeShape,				#isMetaSide : false			},			#name : #relayoutRelative,			#protocol : #'*LNU-SparseMatrix-Extensions',			#sourceCode : 'relayoutRelative\r\t"This methods places the contained shapes according to the specified layout"\r\r\t| first |\r\tfirst := self firstShape.\r\tshapeAndOffsets\r\t\tdo: [ :shapeAndOffset | \r\t\t\tshapeAndOffset first\r\t\t\t\ttranslateBy: shapeAndOffset second ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCompositeShape,				#isMetaSide : false			},			#name : #relayoutRelative,			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'relayoutRelative\r\t"This methods places the contained shapes according to the specified layout"\r\r\t| first |\r\tfirst := self firstShape.\r\tshapeAndOffsets\r\t\tdo: [ :shapeAndOffset | \r\t\t\tshapeAndOffset first\r\t\t\t\ttranslateBy: shapeAndOffset second ]',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:04:05.601032+03:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTAbstractLine,				#isMetaSide : false			},			#name : #withHorizontalRightAttachPoint,			#protocol : #'as yet unclassified',			#sourceCode : '"protocol: attach point"\rwithHorizontalRightAttachPoint\r\t| ap |\r\tap := RTHorizontalRightAttachPoint new.\r\tself attachPoint: ap.\r\t^ ap',			#stamp : 'YaroslavKormushyn 2/24/2019 17:31',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTAbstractLine,				#isMetaSide : false			},			#name : #withHorizontalRightAttachPoint,			#protocol : #'*LNU-SparseMatrix',			#sourceCode : '"protocol: attach point"\rwithHorizontalRightAttachPoint\r\t| ap |\r\tap := RTHorizontalRightAttachPoint new.\r\tself attachPoint: ap.\r\t^ ap',			#stamp : 'YaroslavKormushyn 2/24/2019 17:31',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:04:26.721032+03:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTAbstractLine,				#isMetaSide : false			},			#name : #withVerticalBottomAttachPoint,			#protocol : #'as yet unclassified',			#sourceCode : '"protocol: attach point"\rwithVerticalBottomAttachPoint\r\t| ap |\r\tap := RTVerticalBottomAttachPoint new.\r\tself attachPoint: ap.\r\t^ ap',			#stamp : 'YaroslavKormushyn 2/24/2019 17:32',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTAbstractLine,				#isMetaSide : false			},			#name : #withVerticalBottomAttachPoint,			#protocol : #'*LNU-SparseMatrix',			#sourceCode : '"protocol: attach point"\rwithVerticalBottomAttachPoint\r\t| ap |\r\tap := RTVerticalBottomAttachPoint new.\r\tself attachPoint: ap.\r\t^ ap',			#stamp : 'YaroslavKormushyn 2/24/2019 17:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:04:50.954032+03:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTMultiLine,				#isMetaSide : false			},			#name : #'orthoHorizontalBalanceTo:withOffset:',			#protocol : #'as yet unclassified',			#sourceCode : '"protocol: public - configuration"\rorthoHorizontalBalanceTo: balance withOffset: offset\r\t"0 = level of fromPoint\r\t 0.5 = middle\r\t 1 = level of toPoint\r\t offset = Number to add to x"\r\r\tself\r\t\tblock: [ :fromPoint :toPoint | \r\t\t\t| midx |\r\t\t\tmidx := toPoint x * balance + (fromPoint x * (1 - balance)) + offset.\r\t\t\tArray\r\t\t\t\twith: fromPoint\r\t\t\t\twith: midx @ fromPoint y\r\t\t\t\twith: midx @ toPoint y\r\t\t\t\twith: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 17:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTMultiLine,				#isMetaSide : false			},			#name : #'orthoHorizontalBalanceTo:withOffset:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : '"protocol: public - configuration"\rorthoHorizontalBalanceTo: balance withOffset: offset\r\t"0 = level of fromPoint\r\t 0.5 = middle\r\t 1 = level of toPoint\r\t offset = Number to add to x"\r\r\tself\r\t\tblock: [ :fromPoint :toPoint | \r\t\t\t| midx |\r\t\t\tmidx := toPoint x * balance + (fromPoint x * (1 - balance)) + offset.\r\t\t\tArray\r\t\t\t\twith: fromPoint\r\t\t\t\twith: midx @ fromPoint y\r\t\t\t\twith: midx @ toPoint y\r\t\t\t\twith: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 17:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:05:02.137032+03:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTMultiLine,				#isMetaSide : false			},			#name : #'orthoHorizontalBalancedToBottomWithOffset:',			#protocol : #'as yet unclassified',			#sourceCode : '"protocol: public - configuration"\rorthoHorizontalBalancedToBottomWithOffset: offset\r\tself\r\t\tblock: [ :fromPoint :toPoint | \r\t\t\t| midx |\r\t\t\tmidx := { toPoint x . fromPoint x } max + offset.\r\t\t\tArray\r\t\t\t\twith: fromPoint\r\t\t\t\twith: midx @ fromPoint y\r\t\t\t\twith: midx @ toPoint y\r\t\t\t\twith: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 17:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTMultiLine,				#isMetaSide : false			},			#name : #'orthoHorizontalBalancedToBottomWithOffset:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : '"protocol: public - configuration"\rorthoHorizontalBalancedToBottomWithOffset: offset\r\tself\r\t\tblock: [ :fromPoint :toPoint | \r\t\t\t| midx |\r\t\t\tmidx := { toPoint x . fromPoint x } max + offset.\r\t\t\tArray\r\t\t\t\twith: fromPoint\r\t\t\t\twith: midx @ fromPoint y\r\t\t\t\twith: midx @ toPoint y\r\t\t\t\twith: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 17:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:05:10.981032+03:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTMultiLine,				#isMetaSide : false			},			#name : #'orthoVerticalBalanceTo:withOffset:',			#protocol : #'as yet unclassified',			#sourceCode : '"protocol: public - configuration"\rorthoVerticalBalanceTo: balance withOffset: offset\r\t"0 = level of fromPoint\r\t 0.5 = middle\r\t 1 = level of toPoint\r\toffset = Number to add to mid y"\r\r\tself\r\t\tblock: [ :fromPoint :toPoint | \r\t\t\t| midy |\r\t\t\tmidy := toPoint y * balance + (fromPoint y * (1 - balance)) + offset.\r\t\t\tArray\r\t\t\t\twith: fromPoint\r\t\t\t\twith: fromPoint x @ midy\r\t\t\t\twith: toPoint x @ midy\r\t\t\t\twith: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 17:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTMultiLine,				#isMetaSide : false			},			#name : #'orthoVerticalBalanceTo:withOffset:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : '"protocol: public - configuration"\rorthoVerticalBalanceTo: balance withOffset: offset\r\t"0 = level of fromPoint\r\t 0.5 = middle\r\t 1 = level of toPoint\r\toffset = Number to add to mid y"\r\r\tself\r\t\tblock: [ :fromPoint :toPoint | \r\t\t\t| midy |\r\t\t\tmidy := toPoint y * balance + (fromPoint y * (1 - balance)) + offset.\r\t\t\tArray\r\t\t\t\twith: fromPoint\r\t\t\t\twith: fromPoint x @ midy\r\t\t\t\twith: toPoint x @ midy\r\t\t\t\twith: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 17:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:05:19.253032+03:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTMultiLine,				#isMetaSide : false			},			#name : #'orthoVerticalBalancedToRightWithOffset:',			#protocol : #'as yet unclassified',			#sourceCode : 'orthoVerticalBalancedToRightWithOffset: offset\r\tself\r\t\tblock: [ :fromPoint :toPoint | \r\t\t\t| midy |\r\t\t\tmidy := {toPoint y.\r\t\t\tfromPoint y} max + offset.\r\t\t\tArray\r\t\t\t\twith: fromPoint\r\t\t\t\twith: fromPoint x @ midy\r\t\t\t\twith: toPoint x @ midy\r\t\t\t\twith: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 19:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTMultiLine,				#isMetaSide : false			},			#name : #'orthoVerticalBalancedToRightWithOffset:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'orthoVerticalBalancedToRightWithOffset: offset\r\tself\r\t\tblock: [ :fromPoint :toPoint | \r\t\t\t| midy |\r\t\t\tmidy := {toPoint y.\r\t\t\tfromPoint y} max + offset.\r\t\t\tArray\r\t\t\t\twith: fromPoint\r\t\t\t\twith: fromPoint x @ midy\r\t\t\t\twith: toPoint x @ midy\r\t\t\t\twith: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 19:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:05:42.013032+03:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpProtocolRemoval {		#behavior : RGMetaclassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'RTMultiLine class\r\tinstanceVariableNames: \'\'',				#traitCompositionSource : '{}'			},			#name : #'RTMultiLine class',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#baseClass : RGClassDefinition {				#annotations : IdentityDictionary {					#superclassName : 'RTAbstractLine',					#traitCompositionSource : '{}',					#definitionSource : 'RTAbstractLine subclass: #RTMultiLine\r\tinstanceVariableNames: \'blockProducingPath\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Roassal2-Core-Shapes\''				},				#name : #RTMultiLine,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #RTMultiLine,							#isMetaSide : false						},						#name : #blockProducingPath,						#parent : @12					}				],				#metaClass : @7,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #RTMultiLine,						#isMetaSide : false					},					#parent : @12,					#content : 'A RTMultiLine represents \r\rInstance Variables\r\tblockProducingPath:\t\t<Block>   a two arg block that produces the path. The block has to return the collection of points\r\rblockProducingPath\r\t- xxxxx\r',					#stamp : ''				},				#classVariables : OrderedCollection [ ],				#category : #Roassal2-Core-Shapes,				#package : #Roassal2-Core,				#sharedPools : OrderedCollection [ ]			}		},		#protocol : #'public - configuration'	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:05:42.136032+03:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RTMultiLine class',				#isMetaSide : true			},			#name : #'orthoVerticalBalanceTo:',			#protocol : #'public - configuration',			#sourceCode : '"protocol: public - configuration"\rorthoVerticalBalanceTo: balance\r    "0 = level of fromPoint\r     0.5 = middle\r     1 = level of toPoint"\r\r    self\r        block: [ :fromPoint :toPoint | \r            | midy |\r            midy := toPoint y * balance + (fromPoint y * (1 - balance)).\r            Array\r                with: fromPoint\r                with: fromPoint x @ midy\r                with: toPoint x @ midy\r                with: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 17:35',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RTMultiLine class',				#isMetaSide : true			},			#name : #'orthoVerticalBalanceTo:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : '"protocol: public - configuration"\rorthoVerticalBalanceTo: balance\r    "0 = level of fromPoint\r     0.5 = middle\r     1 = level of toPoint"\r\r    self\r        block: [ :fromPoint :toPoint | \r            | midy |\r            midy := toPoint y * balance + (fromPoint y * (1 - balance)).\r            Array\r                with: fromPoint\r                with: fromPoint x @ midy\r                with: toPoint x @ midy\r                with: toPoint ]',			#stamp : 'YaroslavKormushyn 2/24/2019 17:35',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:06:00.171032+03:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTShapedObject,				#isMetaSide : false			},			#name : #'updateModelAndRedraw:',			#protocol : #accessing,			#sourceCode : 'updateModelAndRedraw: anObject\r\t"anObject could be any Smalltalk object. Shapes are computed based on that object"\r\r\tself model: anObject.\r\tself update.\r\tself trachelShape relayoutRelative',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTShapedObject,				#isMetaSide : false			},			#name : #'updateModelAndRedraw:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'updateModelAndRedraw: anObject\r\t"anObject could be any Smalltalk object. Shapes are computed based on that object"\r\r\tself model: anObject.\r\tself update.\r\tself trachelShape relayoutRelative',			#stamp : 'YaroslavKormushyn 4/26/2019 20:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-04-27T00:08:52.436032+03:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'LNU-SparseMatrix-YaroslavKormushyn.1524953714',		#repositoryDescription : 'C:\\Users\\yaroslav\\Documents\\Coursework\\University\\Coursework\\Pharo Sparse Matrix\\Pharo Files\\Images\\Pharo 7.0 - 64bit_dev\\pharo-local\\package-cache'	}}