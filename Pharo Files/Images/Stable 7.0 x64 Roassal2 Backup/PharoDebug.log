THERE_BE_DRAGONS_HERE
Error: Convert matrix
5 May 2019 3:30:39.47363 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	a COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		result: 	nil
		newNode: 	nil
		continue: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#+
		anArray: 	an Array(a COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode continue...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#+
		linkCount: 	25


[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
a subclass of COOSparseMatrix>>+
ReflectiveMethod>>run:with:in:
[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 3:30:57.26663 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(903808512)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(903808512)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1049233664)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(903808512)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@354)
		owner: 	a TransformWithLayoutMorph(87034880)
		submorphs: 	an Array(a RubCursor(189942528) a RubPrimarySelectionMorph(269020672...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (133121024) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1005764864)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(189942528)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(763788800))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1049233664)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	470539
		lastStepMessage: 	nil
		lastCycleTime: 	470564
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	470539
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	470539
		lastStepMessage: 	nil
		lastCycleTime: 	470564
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	470539
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	470539
		lastStepMessage: 	nil
		lastCycleTime: 	470564
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	470539
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary varTHERE_BE_DRAGONS_HERE
Error: Convert matrix
5 May 2019 3:31:43.95763 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	a COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		result: 	nil
		newNode: 	nil
		continue: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#+
		anArray: 	an Array(a COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode continue...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#+
		linkCount: 	25


[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
a subclass of COOSparseMatrix>>+
ReflectiveMethod>>run:with:in:
[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 3:31:59.57163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(903808512)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(903808512)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1049233664)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(903808512)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@354)
		owner: 	a TransformWithLayoutMorph(87034880)
		submorphs: 	an Array(a RubCursor(189942528) a RubPrimarySelectionMorph(269020672...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (133121024) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1005764864)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(189942528)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(911566848))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1049233664)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	535041
		lastStepMessage: 	nil
		lastCycleTime: 	535069
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	535041
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	535041
		lastStepMessage: 	nil
		lastCycleTime: 	535069
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	535041
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	535041
		lastStepMessage: 	nil
		lastCycleTime: 	535069
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	535041
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Convert matrix
5 May 2019 3:32:39.39163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	a COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		result: 	nil
		newNode: 	nil
		continue: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#+
		anArray: 	an Array(a COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode continue...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#+
		linkCount: 	25


[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
a subclass of COOSparseMatrix>>+
ReflectiveMethod>>run:with:in:
[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 3:32:53.51363 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(903808512)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(903808512)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1049233664)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(903808512)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@354)
		owner: 	a TransformWithLayoutMorph(87034880)
		submorphs: 	an Array(a RubCursor(189942528) a RubPrimarySelectionMorph(269020672...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (133121024) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1005764864)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(189942528)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(926874368))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1049233664)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	590443
		lastStepMessage: 	nil
		lastCycleTime: 	590510
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	590443
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	590443
		lastStepMessage: 	nil
		lastCycleTime: 	590510
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	590443
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	590443
		lastStepMessage: 	nil
		lastCycleTime: 	590510
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(189942528)))
		lastAlarmTime: 	590443
		menuBuilder: 	nil
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrix not found in WeakKeyDictionary
5 May 2019 3:36:42.76663 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix )
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a subclass of COOSparseMatrix->an a subclass of COO...etc...
		expired: 	0
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>at:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix )
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a subclass of COOSparseMatrix->an a subclass of COO...etc...
		expired: 	0
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>at:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix )
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a subclass of COOSparseMatrix->an a subclass of COO...etc...
		expired: 	0
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>at:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix )
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a subclass of COOSparseMatrix->an a subclass of COO...etc...
		expired: 	0
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>soleInstanceOf:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anAnonymousClass: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ :c | 
| object anonMethodNode anonNodes |
object := anonSubclassesBuilder soleInstanceOf: c.
anonMethodNode := (c >> selector) ast.

"Getting all nodes in the method with links,
			they are instance specific because located 
			in the sole instance of a anonymous class"
anonNodes := anonMethodNode allChildren select: [ :n | n hasLinks ].

"We remove the existing links"
anonNodes
	do: [ :node | 
		node links
			do: [ :link | self uninstall: link fromNode: node forObject: object ] ].

"We remove links from the anonymous method node if any"
anonMethodNode hasLinks
	ifTrue: [ anonMethodNode links
			do:
				[ :link | self uninstall: link fromNode: anonMethodNode forObject: object ].
		anonMethodNode links removeAll ] ] in MetaLinkInstaller>>removeAllAnonymousNodesIn:fromAnonSubclassesOf:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		methodNode: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode c...etc...
		aClass: 	COOSparseMatrix
		selector: 	#+
		anonClassesWithSelector: 	an OrderedCollection(a subclass of COOSparseMatrix a s...etc...
		c: 	a subclass of COOSparseMatrix
		object: 	nil
		anonMethodNode: 	nil
		anonNodes: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


OrderedCollection>>do:
	Receiver: an OrderedCollection(a subclass of COOSparseMatrix a subclass of COOSparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ :c | 
| object anonMethodNode anonNodes |
object := anonSubclassesBui...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{a subclass of COOSparseMatrix. a subclass of COOSparseMatrix}
		firstIndex: 	1
		lastIndex: 	2


MetaLinkInstaller>>removeAllAnonymousNodesIn:fromAnonSubclassesOf:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		methodNode: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode c...etc...
		aClass: 	COOSparseMatrix
		selector: 	#+
		anonClassesWithSelector: 	an OrderedCollection(a subclass of COOSparseMatrix a s...etc...
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>methodChanged:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMethodChanged: 	a MethodModified
		methodNode: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode c...etc...
		methodClass: 	COOSparseMatrix
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		anObject: 	a MethodModified
		strongReceiver: 	a MetaLinkInstaller
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		arg: 	a MethodModified
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		arg1: 	a MethodModified
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
		startIndex: 	1
		index: 	8
		subscription: 	a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: ...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: ...etc...
		index: 	8
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(a WeakAnnouncementSubscription(a WeakMessageS...etc...
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		announcement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>methodChangedFrom:to:oldProtocol:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		oldMethod: 	COOSparseMatrix>>#+
		newMethod: 	COOSparseMatrix>>#+
		oldProtocol: 	#arithmetic
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


COOSparseMatrix class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		selector: 	#+
		compiledMethod: 	COOSparseMatrix>>#+
		category: 	#arithmetic
		priorMethodOrNil: 	COOSparseMatrix>>#+
		priorOriginOrNil: 	COOSparseMatrix
		oldProtocol: 	#arithmetic
		newProtocol: 	#arithmetic
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


COOSparseMatrix class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		text: 	a Text for '+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result new...etc...
		category: 	#arithmetic
		changeStamp: 	'YaroslavKormushyn 5/5/201THERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrix not found in WeakKeyDictionary
5 May 2019 3:37:49.50063 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix )
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a subclass of COOSparseMatrix->an a subclass of COO...etc...
		expired: 	0
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>at:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix )
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a subclass of COOSparseMatrix->an a subclass of COO...etc...
		expired: 	0
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>at:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix )
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a subclass of COOSparseMatrix->an a subclass of COO...etc...
		expired: 	0
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>at:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix )
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a subclass of COOSparseMatrix->an a subclass of COO...etc...
		expired: 	0
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>soleInstanceOf:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anAnonymousClass: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ :c | 
| object anonMethodNode anonNodes |
object := anonSubclassesBuilder soleInstanceOf: c.
anonMethodNode := (c >> selector) ast.

"Getting all nodes in the method with links,
			they are instance specific because located 
			in the sole instance of a anonymous class"
anonNodes := anonMethodNode allChildren select: [ :n | n hasLinks ].

"We remove the existing links"
anonNodes
	do: [ :node | 
		node links
			do: [ :link | self uninstall: link fromNode: node forObject: object ] ].

"We remove links from the anonymous method node if any"
anonMethodNode hasLinks
	ifTrue: [ anonMethodNode links
			do:
				[ :link | self uninstall: link fromNode: anonMethodNode forObject: object ].
		anonMethodNode links removeAll ] ] in MetaLinkInstaller>>removeAllAnonymousNodesIn:fromAnonSubclassesOf:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		methodNode: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode c...etc...
		aClass: 	COOSparseMatrix
		selector: 	#+
		anonClassesWithSelector: 	an OrderedCollection(a subclass of COOSparseMatrix a s...etc...
		c: 	a subclass of COOSparseMatrix
		object: 	nil
		anonMethodNode: 	nil
		anonNodes: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


OrderedCollection>>do:
	Receiver: an OrderedCollection(a subclass of COOSparseMatrix a subclass of COOSparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ :c | 
| object anonMethodNode anonNodes |
object := anonSubclassesBui...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{a subclass of COOSparseMatrix. a subclass of COOSparseMatrix}
		firstIndex: 	1
		lastIndex: 	2


MetaLinkInstaller>>removeAllAnonymousNodesIn:fromAnonSubclassesOf:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		methodNode: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode c...etc...
		aClass: 	COOSparseMatrix
		selector: 	#+
		anonClassesWithSelector: 	an OrderedCollection(a subclass of COOSparseMatrix a s...etc...
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>methodChanged:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMethodChanged: 	a MethodModified
		methodNode: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode c...etc...
		methodClass: 	COOSparseMatrix
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		anObject: 	a MethodModified
		strongReceiver: 	a MetaLinkInstaller
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		arg: 	a MethodModified
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		arg1: 	a MethodModified
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
		startIndex: 	1
		index: 	8
		subscription: 	a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: ...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: ...etc...
		index: 	8
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(a WeakAnnouncementSubscription(a WeakMessageS...etc...
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		announcement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>methodChangedFrom:to:oldProtocol:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		oldMethod: 	COOSparseMatrix>>#+
		newMethod: 	COOSparseMatrix>>#+
		oldProtocol: 	#arithmetic
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


COOSparseMatrix class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		selector: 	#+
		compiledMethod: 	COOSparseMatrix>>#+
		category: 	#arithmetic
		priorMethodOrNil: 	COOSparseMatrix>>#+
		priorOriginOrNil: 	COOSparseMatrix
		oldProtocol: 	#arithmetic
		newProtocol: 	#arithmetic
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


COOSparseMatrix class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		text: 	a Text for '+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result new...etc...
		category: 	#arithmetic
		changeStamp: 	'YaroslavKormushyn 5/5/2019 15:37'
		requestor: 	a RubScrolledTextMorph(857678592)
		logSource: 	true
		method: 	COOSparseMatrix>>#+
		selector: 	#+
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


COOSparseMatrix class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		text: 	a Text for '+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result new...etc...
		category: 	#arithmetic
		changeStamp: 	'YaroslavKormushyn 5/5/2019 15:37'
		requestor: 	a RubScrolledTextMorph(857678592)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


COOSparseMatrix class(ClassDescription)>>compile:classified:notifying:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		text: 	a Text for '+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result new...etc...
		category: 	#arithmetic
		requestor: 	a RubScrolledTextMorph(857678592)
		stamp: 	'YaroslavKormushyn 5/5/2019 15:37'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


ClyMethodCodeEditorToolMorph>>applyChanges
	Receiver: a ClyMethodCodeEditorToolMorph(209100800)
	Arguments and temporary variables: 
		selector: 	nil
		methodClass: 	COOSparseMatrix
		currentMethod: 	nil
	Receiver's instance variables: 
		bounds: 	(27.0@407.0) corner: (874.0@690.0)
		owner: 	a Morph(722703616)
		submorphs: 	an Array(a ProportionalSplitterMorph(851928832) a ClyQueryViewMorph(...etc...
		fullBounds: 	(27@407) corner: (874@690)
		color: 	Color transparent
		extension: 	a MorphExtension (52288000) [other:  (kmDispatcher -> a CmdKMDispatc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(1025754624)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(487099648)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(479075584)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(857678592)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#(#arithmetic)
		extendingPackage: 	nil
		targetClasses: 	{COOSparseMatrix}
		editingMethod: 	COOSparseMatrix>>#+


[ self changesAreAboutApply.
applied := self applyChanges ] in [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyMethodCodeEditorToolMorph(209100800)
	Arguments and temporary variables: 
		applied: 	nil
	Receiver's instance variables: 
		bounds: 	(27.0@407.0) corner: (874.0@690.0)
		owner: 	a Morph(722703616)
		submorphs: 	an Array(a ProportionalSplitterMorph(851928832) a ClyQueryViewMorph(...etc...
		fullBounds: 	(27@407) corner: (874@690)
		color: 	Color transparent
		extension: 	a MorphExtension (52288000) [other:  (kmDispatcher -> a CmdKMDispatc...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(1025754624)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(487099648)
		isDiTHERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 3:46:16.58963 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil...etc...
		expired: 	7
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil...etc...
		expired: 	7
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	11
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil...etc...
		expired: 	7
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil...etc...
		expired: 	7
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	5
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil value: aValue
	value := aValue)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	2
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an a subclass of COOSparseMatrixNode an Object an ...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ "the link is set to right only according to the method code"
"lef...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


[ :link | link uninstall ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>unlink
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		link: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :link | link uninstall ]
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLi...etc...
		firstIndex: 	1
		lastIndex: 	21


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>unlink
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self unlink ] in [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>ensure:
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 
		aBlock: 	[ self unlink ]
		complete: 	true
		returnValue: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		outerContext: 	[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOS...etc...
		startpc: 	125
		numArgs: 	0


[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	121
		numArgs: 	0



--- The full stack ---
WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
WeakKeyDictionary>>removeKey:ifAbsent:
WeakKeyDictionary(Dictionary)>>removeKey:
MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
IdentitySet(Collection)>>ifEmpty:
MetaLinkInstaller>>uninstallNode:forObject:
MetaLinkInstaller>>uninstall:fromNode:forObject:
[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
IdentitySet(Set)>>do:
[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
WeakSet>>do:
MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
MetaLink>>uninstall
[ :link | link uninstall ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>unlink
OrderedCollection>>do:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>unlink
[ self unlink ] in [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>ensure:
[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 3:47:40.78563 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	6
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	6
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	4
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	6
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	6
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	4
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil value: aValue
	value := aValue nil)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	3
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an a subclass of COOSparseMatrixNode an ...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ "the link is set to right only according to the method code"
"lef...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


[ :link | link uninstall ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>unlink
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		link: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :link | link uninstall ]
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLi...etc...
		firstIndex: 	1
		lastIndex: 	21


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>unlink
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self unlink ] in [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>ensure:
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 
		aBlock: 	[ self unlink ]
		complete: 	true
		returnValue: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		outerContext: 	[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOS...etc...
		startpc: 	125
		numArgs: 	0


[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	121
		numArgs: 	0



--- The full stack ---
WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
WeakKeyDictionary>>removeKey:ifAbsent:
WeakKeyDictionary(Dictionary)>>removeKey:
MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
IdentitySet(Collection)>>ifEmpty:
MetaLinkInstaller>>uninstallNode:forObject:
MetaLinkInstaller>>uninstall:fromNode:forObject:
[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
IdentitySet(Set)>>do:
[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
WeakSet>>do:
MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
MetaLink>>uninstall
[ :link | link uninstall ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>unlink
OrderedCollection>>do:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>unlink
[ self unlink ] in [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>ensure:
[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 3:51:43.37963 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	7
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	7
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	4
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	7
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	7
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	3
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil value: aValue
	value := aValue nil nil)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	5
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an Object an Object an a subclass of COO...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ "the link is set to right only according to the method code"
"lef...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


ByteSymbol(Symbol)>>value:
	Receiver: #uninstall
	Arguments and temporary variables: 
		anObject: 	a MetaLink
	Receiver's instance variables: 
#uninstall

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...
	Arguments and temporary variables: 
		aBlock: 	#uninstall
		index: 	25
	Receiver's instance variables: 
an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...

MetaLink class>>uninstallAll
	Receiver: MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allReifications->MetaLink>>#allReifications #an...etc...
		format: 	65545
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetaLink
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Core'
		linkInstaller: 	a MetaLinkInstaller


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(33915136)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (323@31)
		owner: 	a TransformWithLayoutMorph(931481856)
		submorphs: 	an Array(a RubCursor(721148928) a RubPrimarySelectionMorph(102956108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (486670080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(263255552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(721148928)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(776056832))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(218.0@61.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1734425
		lastStepMessage: 	nil
		lastCycleTime: 	1734448
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1734425
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1734425
		lastStepMessage: 	nil
		lastCycleTime: 	1734448
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1734425
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1734425
		lastStepMessage: 	nil
		lastCycleTime: 	1734448
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1734425
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
WeakKeyDictionary>>removeKey:ifAbsent:
WeakKeyDictionary(Dictionary)>>removeKey:
MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MTHERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 3:51:53.47863 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	7
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	7
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	4
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	7
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	7
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	4
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil value: aValue
	value := aValue nil)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	5
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an Object an Object an a subclass of COO...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ "the link is set to right only according to the method code"
"lef...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


ByteSymbol(Symbol)>>value:
	Receiver: #uninstall
	Arguments and temporary variables: 
		anObject: 	a MetaLink
	Receiver's instance variables: 
#uninstall

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...
	Arguments and temporary variables: 
		aBlock: 	#uninstall
		index: 	30
	Receiver's instance variables: 
an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...

MetaLink class>>uninstallAll
	Receiver: MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allReifications->MetaLink>>#allReifications #an...etc...
		format: 	65545
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetaLink
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Core'
		linkInstaller: 	a MetaLinkInstaller


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(33915136)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (323@31)
		owner: 	a TransformWithLayoutMorph(931481856)
		submorphs: 	an Array(a RubCursor(721148928) a RubPrimarySelectionMorph(102956108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (486670080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(263255552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(721148928)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(600798720))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(210.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1744485
		lastStepMessage: 	nil
		lastCycleTime: 	1744535
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1744485
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1744485
		lastStepMessage: 	nil
		lastCycleTime: 	1744535
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1744485
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1744485
		lastStepMessage: 	nil
		lastCycleTime: 	1744535
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1744485
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
WeakKeyDictionary>>removeKey:ifAbsent:
WeakKeyDictionary(Dictionary)>>removeKey:
MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
IdentitySet(Collection)>>ifEmpty:
MetaLinkInstaller>>uninstallNode:forObject:
MetaLinkInstaller>>uninstall:fromNode:forObject:
[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
IdentitySet(Set)>>do:
[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
WeakSet>>do:
MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
MetaLink>>uninstall
ByteSymbol(Symbol)>>value:
Array(SequenceableCollection)>>do:
MetaLink class>>uninstallAll
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndTHERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 3:53:29.43763 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	8
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	8
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	4
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	8
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	8
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	2
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil value: aValue
	value := aValue nil nil nil)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	1
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an a subclass of COOSparseMatrixNode an Object an Object an ...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ "the link is set to right only according to the method code"
"lef...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


ByteSymbol(Symbol)>>value:
	Receiver: #uninstall
	Arguments and temporary variables: 
		anObject: 	a MetaLink
	Receiver's instance variables: 
#uninstall

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...
	Arguments and temporary variables: 
		aBlock: 	#uninstall
		index: 	33
	Receiver's instance variables: 
an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...

MetaLink class>>uninstallAll
	Receiver: MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allReifications->MetaLink>>#allReifications #an...etc...
		format: 	65545
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetaLink
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Core'
		linkInstaller: 	a MetaLinkInstaller


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(33915136)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (323@31)
		owner: 	a TransformWithLayoutMorph(931481856)
		submorphs: 	an Array(a RubCursor(721148928) a RubPrimarySelectionMorph(102956108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (486670080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(263255552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(721148928)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(139846912))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	1840505
		lastStepMessage: 	nil
		lastCycleTime: 	1840551
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1840505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	1840505
		lastStepMessage: 	nil
		lastCycleTime: 	1840551
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1840505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	1840505
		lastStepMessage: 	nil
		lastCycleTime: 	1840551
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1840505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
WeakKeyDictionary>>removeKey:ifAbsent:
WeakKeyDictionary(Dictionary)>>removeKey:
MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
IdentitySet(Collection)>>ifEmpty:
MetaLinkInstaller>>uninstallNode:forObject:
MetaLinkInstaller>>uninstall:fromNode:forObject:
[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
IdentitySet(Set)>>do:
[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
WeakSet>>do:
MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
MetaLink>>uninstall
ByteSymbol(Symbol)>>value:
Array(SequenceableCollection)>>do:
MetaLink class>>uninstallAll
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
ProceTHERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 3:54:32.58063 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	8
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	8
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	7
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	8
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	8
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	5
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil value: aValue
	value := aValue)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	5
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an Object an Object an a subclass of COO...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ "the link is set to right only according to the method code"
"lef...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


ByteSymbol(Symbol)>>value:
	Receiver: #uninstall
	Arguments and temporary variables: 
		anObject: 	a MetaLink
	Receiver's instance variables: 
#uninstall

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...
	Arguments and temporary variables: 
		aBlock: 	#uninstall
		index: 	37
	Receiver's instance variables: 
an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...

MetaLink class>>uninstallAll
	Receiver: MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allReifications->MetaLink>>#allReifications #an...etc...
		format: 	65545
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetaLink
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Core'
		linkInstaller: 	a MetaLinkInstaller


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(33915136)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (323@31)
		owner: 	a TransformWithLayoutMorph(931481856)
		submorphs: 	an Array(a RubCursor(721148928) a RubPrimarySelectionMorph(102956108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (486670080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(263255552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(721148928)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(579672320))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1903671
		lastStepMessage: 	nil
		lastCycleTime: 	1903695
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1903671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1903671
		lastStepMessage: 	nil
		lastCycleTime: 	1903695
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1903671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	1903671
		lastStepMessage: 	nil
		lastCycleTime: 	1903695
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	1903671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
WeakKeyDictionary>>removeKey:ifAbsent:
WeakKeyDictionary(Dictionary)>>removeKey:
MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
IdentitySet(Collection)>>ifEmpty:
MetaLinkInstaller>>uninstallNode:forObject:
MetaLinkInstaller>>uninstall:fromNode:forObject:
[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
IdentitySet(Set)>>do:
[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
WeakSet>>do:
MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
MetaLink>>uninstall
ByteSymbol(Symbol)>>value:
Array(SequenceableCollection)>>do:
MetaLink class>>uninstallAll
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
THERE_BE_DRAGONS_HERE
Error: Instances of a subclass of COOSparseMatrixNode are not indexable
5 May 2019 3:55:03.62163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of COOSparseMatrixNode(Object)>>error:
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 
		aString: 	'Instances of a subclass of COOSparseMatrixNode are not indexable'
	Receiver's instance variables: 
		row: 	4
		column: 	3
		value: 	1
		leftNeighbour: 	an a subclass of COOSparseMatrixNode
		rightNeighbour: 	nil


a subclass of COOSparseMatrixNode(Object)>>errorNotIndexable
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		row: 	4
		column: 	3
		value: 	1
		leftNeighbour: 	an a subclass of COOSparseMatrixNode
		rightNeighbour: 	nil


a subclass of COOSparseMatrixNode(Object)>>size
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		row: 	4
		column: 	3
		value: 	1
		leftNeighbour: 	an a subclass of COOSparseMatrixNode
		rightNeighbour: 	nil


[ :result | 
"withSmalltalkSearch;	
		showOnly: 50;
		helpMessage: 'Quick selection field. Given your INPUT, it executes: self select: [:each | INPUT ]'."
result isNil
	ifTrue: [ nil ]
	ifFalse: [ result size = 1
			ifTrue: [ result anyOne ]
			ifFalse: [ self species withAll: result ] ] ] in WeakSet(Collection)>>gtInspectorItemsIn:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=609419520 title=nil pane=a GLMPane(941...etc...
		result: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an Object an Object an a subclass of COO...etc...
		flag: 	an Object


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :result | 
"withSmalltalkSearch;	
		showOnly: 50;
		helpMessage: 'Quick selection field....etc...
	Arguments and temporary variables: 
		anArray: 	an Array(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		outerContext: 	WeakSet(Collection)>>gtInspectorItemsIn:
		startpc: 	179
		numArgs: 	1


BlockClosure(ProtoObject)>>glamourValue:
	Receiver: [ :result | 
"withSmalltalkSearch;	
		showOnly: 50;
		helpMessage: 'Quick selection field....etc...
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		args: 	an Array(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		outerContext: 	WeakSet(Collection)>>gtInspectorItemsIn:
		startpc: 	179
		numArgs: 	1


GLMFastListPresentation(GLMPresentation)>>strongSelection:
	Receiver: a GLMFastListPresentation(id=543761152 title='Items' pane=a GLMPane(94109184 2))
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(94109184 2)
		title: 	'Items'
		titleIcon: 	nil
		transformation: 	[ :set | set asOrderedCollection ]
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	true
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	an OrderedCollection(an a subclass of COOSparseMatrixNode...etc...
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	[ :each | GTObjectPrinter asTruncatedTextFrom: each ]
		icon: 	[ nil ]
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	true
		allowsDeselection: 	false
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		tagsBlock: 	nil
		tagsFilterBlock: 	nil
		parameters: 	a Dictionary()


[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ] in GLMMorphicFastListRenderer(GLMMorphicFTRenderer)>>initializeAnnouncementForDataSource
	Receiver: a GLMMorphicFastListRenderer
	Arguments and temporary variables: 
		ann: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastListDataSource
		tableMorph: 	a FTTableMorph(528518400)


BlockClosure>>cull:
	Receiver: [ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ]
	Arguments and temporary variables: 
		anArg: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		outerContext: 	GLMMorphicFastListRenderer(GLMMorphicFTRenderer)>>initializeAnnou...etc...
		startpc: 	199
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ]
	Arguments and temporary variables: 
		firstArg: 	a GLMTreeMorphStrongSelectionChanged
		secondArg: 	a GLMAnnouncer
	Receiver's instance variables: 
		outerContext: 	GLMMorphicFastListRenderer(GLMMorphicFTRenderer)>>initializeAnnou...etc...
		startpc: 	199
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		announcer: 	a GLMAnnouncer
		announcementClass: 	GLMTreeMorphStrongSelectionChanged
		subscriber: 	a GLMMorphicFastListRenderer
		action: 	[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSe...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
a subclass of COOSparseMatrixNode(Object)>>error:
a subclass of COOSparseMatrixNode(Object)>>errorNotIndexable
a subclass of COOSparseMatrixNode(Object)>>size
[ :result | 
"withSmalltalkSearch;	
		showOnly: 50;
		helpMessage: 'Quick selection field. Given your INPUT, it executes: self select: [:each | INPUT ]'."
result isNil
	ifTrue: [ nil ]
	ifFalse: [ result size = 1
			ifTrue: [ result anyOne ]
			ifFalse: [ self species withAll: result ] ] ] in WeakSet(Collection)>>gtInspectorItemsIn:
BlockClosure>>glamourValueWithArgs:
BlockClosure(ProtoObject)>>glamourValue:
GLMFastListPresentation(GLMPresentation)>>strongSelection:
[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ] in GLMMorphicFastListRenderer(GLMMorphicFTRenderer)>>initializeAnnouncementForDataSource
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of a subclass of COOSparseMatrixNode are not indexable
5 May 2019 3:55:04.02363 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of COOSparseMatrixNode(Object)>>error:
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 
		aString: 	'Instances of a subclass of COOSparseMatrixNode are not indexable'
	Receiver's instance variables: 
		row: 	4
		column: 	3
		value: 	1
		leftNeighbour: 	an a subclass of COOSparseMatrixNode
		rightNeighbour: 	nil


a subclass of COOSparseMatrixNode(Object)>>errorNotIndexable
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		row: 	4
		column: 	3
		value: 	1
		leftNeighbour: 	an a subclass of COOSparseMatrixNode
		rightNeighbour: 	nil


a subclass of COOSparseMatrixNode(Object)>>size
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 

	Receiver's instance variables: 
		row: 	4
		column: 	3
		value: 	1
		leftNeighbour: 	an a subclass of COOSparseMatrixNode
		rightNeighbour: 	nil


[ :result | 
"withSmalltalkSearch;	
		showOnly: 50;
		helpMessage: 'Quick selection field. Given your INPUT, it executes: self select: [:each | INPUT ]'."
result isNil
	ifTrue: [ nil ]
	ifFalse: [ result size = 1
			ifTrue: [ result anyOne ]
			ifFalse: [ self species withAll: result ] ] ] in WeakSet(Collection)>>gtInspectorItemsIn:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=609419520 title=nil pane=a GLMPane(941...etc...
		result: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an Object an Object an a subclass of COO...etc...
		flag: 	an Object


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :result | 
"withSmalltalkSearch;	
		showOnly: 50;
		helpMessage: 'Quick selection field....etc...
	Arguments and temporary variables: 
		anArray: 	an Array(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		outerContext: 	WeakSet(Collection)>>gtInspectorItemsIn:
		startpc: 	179
		numArgs: 	1


BlockClosure(ProtoObject)>>glamourValue:
	Receiver: [ :result | 
"withSmalltalkSearch;	
		showOnly: 50;
		helpMessage: 'Quick selection field....etc...
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		args: 	an Array(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		outerContext: 	WeakSet(Collection)>>gtInspectorItemsIn:
		startpc: 	179
		numArgs: 	1


GLMFastListPresentation(GLMPresentation)>>strongSelection:
	Receiver: a GLMFastListPresentation(id=543761152 title='Items' pane=a GLMPane(94109184 2))
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(94109184 2)
		title: 	'Items'
		titleIcon: 	nil
		transformation: 	[ :set | set asOrderedCollection ]
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	true
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	an OrderedCollection(an a subclass of COOSparseMatrixNode...etc...
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	[ :each | GTObjectPrinter asTruncatedTextFrom: each ]
		icon: 	[ nil ]
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	true
		allowsDeselection: 	false
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		tagsBlock: 	nil
		tagsFilterBlock: 	nil
		parameters: 	a Dictionary()


[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ] in GLMMorphicFastListRenderer(GLMMorphicFTRenderer)>>initializeAnnouncementForDataSource
	Receiver: a GLMMorphicFastListRenderer
	Arguments and temporary variables: 
		ann: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastListDataSource
		tableMorph: 	a FTTableMorph(528518400)


BlockClosure>>cull:
	Receiver: [ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ]
	Arguments and temporary variables: 
		anArg: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		outerContext: 	GLMMorphicFastListRenderer(GLMMorphicFTRenderer)>>initializeAnnou...etc...
		startpc: 	199
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ]
	Arguments and temporary variables: 
		firstArg: 	a GLMTreeMorphStrongSelectionChanged
		secondArg: 	a GLMAnnouncer
	Receiver's instance variables: 
		outerContext: 	GLMMorphicFastListRenderer(GLMMorphicFTRenderer)>>initializeAnnou...etc...
		startpc: 	199
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		announcer: 	a GLMAnnouncer
		announcementClass: 	GLMTreeMorphStrongSelectionChanged
		subscriber: 	a GLMMorphicFastListRenderer
		action: 	[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSe...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
a subclass of COOSparseMatrixNode(Object)>>error:
a subclass of COOSparseMatrixNode(Object)>>errorNotIndexable
a subclass of COOSparseMatrixNode(Object)>>size
[ :result | 
"withSmalltalkSearch;	
		showOnly: 50;
		helpMessage: 'Quick selection field. Given your INPUT, it executes: self select: [:each | INPUT ]'."
result isNil
	ifTrue: [ nil ]
	ifFalse: [ result size = 1
			ifTrue: [ result anyOne ]
			ifFalse: [ self species withAll: result ] ] ] in WeakSet(Collection)>>gtInspectorItemsIn:
BlockClosure>>glamourValueWithArgs:
BlockClosure(ProtoObject)>>glamourValue:
GLMFastListPresentation(GLMPresentation)>>strongSelection:
[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ] in GLMMorphicFastListRenderer(GLMMorphicFTRenderer)>>initializeAnnouncementForDataSource
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 3:57:07.15063 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil...etc...
		expired: 	9
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil...etc...
		expired: 	9
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	4
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil...etc...
		expired: 	9
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil->nil...etc...
		expired: 	9
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	copy
	^ self class row: row column: column value: value
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	copy
	^ self class row: row column: column value: value
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	copy
	^ self class row: row column: column value: value
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	copy
	^ self class row: row column: column value: value
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	copy
	^ self class row: row column: column value: value
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(copy
	^ self class row: row column: column value: value)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	2
		each: 	copy
	^ self class row: row column: column value: value
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil copy
	^ self class row: row column: column value: value nil...etc...


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	3
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an a subclass of COOSparseMatrixNode an ...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ self highlightModel: element inGroup: #left.
Transcript
	show: 'h...etc...
		nodes: 	an IdentitySet(copy
	^ self class row: row column: column value: value)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


ByteSymbol(Symbol)>>value:
	Receiver: #uninstall
	Arguments and temporary variables: 
		anObject: 	a MetaLink
	Receiver's instance variables: 
#uninstall

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...
	Arguments and temporary variables: 
		aBlock: 	#uninstall
		index: 	45
	Receiver's instance variables: 
an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...

MetaLink class>>uninstallAll
	Receiver: MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allReifications->MetaLink>>#allReifications #an...etc...
		format: 	65545
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetaLink
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Core'
		linkInstaller: 	a MetaLinkInstaller


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(33915136)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (323@31)
		owner: 	a TransformWithLayoutMorph(931481856)
		submorphs: 	an Array(a RubCursor(721148928) a RubPrimarySelectionMorph(102956108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (486670080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(263255552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(721148928)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(747975680))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	2058103
		lastStepMessage: 	nil
		lastCycleTime: 	2058139
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2058103
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	2058103
		lastStepMessage: 	nil
		lastCycleTime: 	2058139
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2058103
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	2058103
		lastStepMessage: 	nil
		lastCycleTime: 	2058139
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2058103
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
WeakKeyDictionary>>removeKey:ifAbsent:
WeakKeyDictionary(Dictionary)>>removeKey:
MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
IdentitySet(Collection)>>ifEmpty:
MetaLinkInstaller>>uninstallNode:forObject:
MetaLinkInstaller>>uninstall:fromNode:forObject:
[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
IdentitySet(Set)>>do:
[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
WeakSet>>do:
MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
MetaLink>>uninstall
ByteSymbol(Symbol)>>value:
Array(SequenceableCollection)>>do:
MetaLink class>>uninstallAll
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderTHERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 3:57:35.19463 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	7
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	3
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil value: aValue
	value := aValue nil nil)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	5
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an Object an Object an a subclass of COO...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ "the link is set to right only according to the method code"
"lef...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


ByteSymbol(Symbol)>>value:
	Receiver: #uninstall
	Arguments and temporary variables: 
		anObject: 	a MetaLink
	Receiver's instance variables: 
#uninstall

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...
	Arguments and temporary variables: 
		aBlock: 	#uninstall
		index: 	48
	Receiver's instance variables: 
an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...

MetaLink class>>uninstallAll
	Receiver: MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allReifications->MetaLink>>#allReifications #an...etc...
		format: 	65545
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetaLink
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Core'
		linkInstaller: 	a MetaLinkInstaller


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(33915136)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (323@31)
		owner: 	a TransformWithLayoutMorph(931481856)
		submorphs: 	an Array(a RubCursor(721148928) a RubPrimarySelectionMorph(102956108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (486670080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(263255552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(721148928)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(718530560))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	2086277
		lastStepMessage: 	nil
		lastCycleTime: 	2086321
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2086277
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	2086277
		lastStepMessage: 	nil
		lastCycleTime: 	2086321
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2086277
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(65206528) named: Pla...etc...
		lastStepTime: 	2086277
		lastStepMessage: 	nil
		lastCycleTime: 	2086321
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2086277
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
WeakKeyDictionary>>removeKey:ifAbsent:
WeakKeyDictionary(Dictionary)>>removeKey:
MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
IdentitySet(Collection)>>ifEmpty:
MetaLinkInstaller>>uninstallNode:forObject:
MetaLinkInstaller>>uninstall:fromNode:forObject:
[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
IdentitySet(Set)>>do:
[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
WeakSet>>do:
MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
MetaLink>>uninstall
ByteSymbol(Symbol)>>value:
Array(SequenceableCollection)>>do:
MetaLink class>>uninstallAll
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of WeakKeyAssociation did not understand #anyOne
5 May 2019 3:59:50.16263 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyAssociation(Object)>>doesNotUnderstand: #anyOne
	Receiver: a subclass of COOSparseMatrixNode->an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 
		aMessage: 	anyOne
		exception: 	MessageNotUnderstood: WeakKeyAssociation>>anyOne
		resumeValue: 	nil
	Receiver's instance variables: 
		value: 	an a subclass of COOSparseMatrixNode


[ :selection | 
"withSmalltalkSearch;
		showOnly: 50;
		helpMessage: 'Quick selection field. Given your INPUT, it executes: self select: [:each | INPUT ]'"
selection isNil
	ifTrue: [ nil ]
	ifFalse: [ selection size = 1
			ifTrue: [ selection anyOne value ]
			ifFalse: [ selection collect: #value ] ] ] in WeakKeyDictionary(Dictionary)>>gtInspectorItemsIn:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		composite: 	a GLMCompositePresentation(id=80582656 title=nil pane=a GLMPane(3677...etc...
		selection: 	a subclass of COOSparseMatrixNode->an a subclass of COOSparseMatrixN...etc...
	Receiver's instance variables: 
		tally: 	7
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :selection | 
"withSmalltalkSearch;
		showOnly: 50;
		helpMessage: 'Quick selection fiel...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a subclass of COOSparseMatrixNode->an a subclass of COOSparse...etc...
	Receiver's instance variables: 
		outerContext: 	WeakKeyDictionary(Dictionary)>>gtInspectorItemsIn:
		startpc: 	333
		numArgs: 	1


BlockClosure(ProtoObject)>>glamourValue:
	Receiver: [ :selection | 
"withSmalltalkSearch;
		showOnly: 50;
		helpMessage: 'Quick selection fiel...etc...
	Arguments and temporary variables: 
		anObject: 	a subclass of COOSparseMatrixNode->an a subclass of COOSparseMatrixNo...etc...
		args: 	an Array(a subclass of COOSparseMatrixNode->an a subclass of COOSparseMat...etc...
	Receiver's instance variables: 
		outerContext: 	WeakKeyDictionary(Dictionary)>>gtInspectorItemsIn:
		startpc: 	333
		numArgs: 	1


GLMFastTablePresentation(GLMPresentation)>>strongSelection:
	Receiver: a GLMFastTablePresentation(id=403438336 title='Items' pane=a GLMPane(367755008 2))
	Arguments and temporary variables: 
		anObject: 	a subclass of COOSparseMatrixNode->an a subclass of COOSparseMatrixNo...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(367755008 2)
		title: 	'Items'
		titleIcon: 	nil
		transformation: 	[ self associations ]
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	true
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection(a GLMGenericAction a GLMGenericAction)
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	an Array(a subclass of COOSparseMatrix->an a subclass of ...etc...
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	nil
		icon: 	[ nil ]
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	true
		allowsDeselection: 	false
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		columns: 	an OrderedCollection(a GLMTableColumn a GLMTableColumn)
		children: 	[ #() ]
		rootsExpanded: 	nil
		shouldShowHeader: 	true
		parameters: 	a Dictionary()


[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ] in GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>initializeAnnouncementForDataSource
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		ann: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(910775552)


BlockClosure>>cull:
	Receiver: [ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ]
	Arguments and temporary variables: 
		anArg: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		outerContext: 	GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>initializeAnno...etc...
		startpc: 	199
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ]
	Arguments and temporary variables: 
		firstArg: 	a GLMTreeMorphStrongSelectionChanged
		secondArg: 	a GLMAnnouncer
	Receiver's instance variables: 
		outerContext: 	GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>initializeAnno...etc...
		startpc: 	199
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMTreeMorphStrongSelectionChanged
	Receiver's instance variables: 
		announcer: 	a GLMAnnouncer
		announcementClass: 	GLMTreeMorphStrongSelectionChanged
		subscriber: 	a GLMMorphicFastTableRenderer
		action: 	[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSe...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
WeakKeyAssociation(Object)>>doesNotUnderstand: #anyOne
[ :selection | 
"withSmalltalkSearch;
		showOnly: 50;
		helpMessage: 'Quick selection field. Given your INPUT, it executes: self select: [:each | INPUT ]'"
selection isNil
	ifTrue: [ nil ]
	ifFalse: [ selection size = 1
			ifTrue: [ selection anyOne value ]
			ifFalse: [ selection collect: #value ] ] ] in WeakKeyDictionary(Dictionary)>>gtInspectorItemsIn:
BlockClosure>>glamourValueWithArgs:
BlockClosure(ProtoObject)>>glamourValue:
GLMFastTablePresentation(GLMPresentation)>>strongSelection:
[ :ann | 
tableModel glamourPresentation
	strongSelection: ann strongSelectionValue ] in GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>initializeAnnouncementForDataSource
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key value: aValue
	value := aValue not found in WeakKeyDictionary
5 May 2019 4:04:11.19963 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(RBAssignmentNode(first := aCOOMatrixNode)->a WeakSet(an a subclass of ...etc...
	Arguments and temporary variables: 
		aKey: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	17
		array: 	an Array(RBAssignmentNode(first := aCOOMatrixNode)->a WeakSet(an a subcl...etc...
		expired: 	0
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>at:
	Receiver: a WeakKeyDictionary(RBAssignmentNode(first := aCOOMatrixNode)->a WeakSet(an a subclass of ...etc...
	Arguments and temporary variables: 
		key: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	17
		array: 	an Array(RBAssignmentNode(first := aCOOMatrixNode)->a WeakSet(an a subcl...etc...
		expired: 	0
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>at:ifAbsent:
	Receiver: a WeakKeyDictionary(RBAssignmentNode(first := aCOOMatrixNode)->a WeakSet(an a subclass of ...etc...
	Arguments and temporary variables: 
		key: 	value: aValue
	value := aValue
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	17
		array: 	an Array(RBAssignmentNode(first := aCOOMatrixNode)->a WeakSet(an a subcl...etc...
		expired: 	0
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>at:
	Receiver: a WeakKeyDictionary(RBAssignmentNode(first := aCOOMatrixNode)->a WeakSet(an a subclass of ...etc...
	Arguments and temporary variables: 
		key: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	17
		array: 	an Array(RBAssignmentNode(first := aCOOMatrixNode)->a WeakSet(an a subcl...etc...
		expired: 	0
		finalizer: 	nil


MetaLinkNodesMapper>>removeNode:forObject:
	Receiver: a MetaLinkNodesMapper
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		nodesForObjects: 	a WeakKeyDictionary(a COOSparseMatrix->an IdentitySet() a COOS...etc...
		objectsForNodes: 	a WeakKeyDictionary(RBAssignmentNode(first := aCOOMatrixNode)-...etc...


MetaLinkInstaller>>removeNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	4
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil value: aValue
	value := aValue nil nil nil)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	6
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an Object an Object an Object an a subcl...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ "the link is set to right only according to the method code"
"lef...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionWeakAfter #optionInlineMetaObject #optionInlineCondition)...etc...


ByteSymbol(Symbol)>>value:
	Receiver: #uninstall
	Arguments and temporary variables: 
		anObject: 	a MetaLink
	Receiver's instance variables: 
#uninstall

Array(SequenceableCollection)>>do:
	Receiver: an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...
	Arguments and temporary variables: 
		aBlock: 	#uninstall
		index: 	65
	Receiver's instance variables: 
an Array(a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a MetaLink a Me...etc...

MetaLink class>>uninstallAll
	Receiver: MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allReifications->MetaLink>>#allReifications #an...etc...
		format: 	65545
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetaLink
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Core'
		linkInstaller: 	a MetaLinkInstaller


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(33915136)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(33915136)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (323@31)
		owner: 	a TransformWithLayoutMorph(931481856)
		submorphs: 	an Array(a RubCursor(721148928) a RubPrimarySelectionMorph(102956108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (486670080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(263255552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(721148928)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(149155584))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(722705408)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	2482111
		lastStepMessage: 	nil
		lastCycleTime: 	2482171
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2482111
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	2482111
		lastStepMessage: 	nil
		lastCycleTime: 	2482171
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2482111
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1010176))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(317876992) named: Pl...etc...
		lastStepTime: 	2482111
		lastStepMessage: 	nil
		lastCycleTime: 	2482171
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(721148928)))
		lastAlarmTime: 	2482111
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1010176)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(332404480) a TaskbarMorph(133256704) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1047343616) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doTHERE_BE_DRAGONS_HERE
Pharo cannot write to the changes file named C:\Users\yaroslav\Documents\Coursework\University\Coursework\Pharo Sparse Matrix\Pharo Files\Images\Stable 7.0 x64 Roassal2 Backup\Stable 7.0 x64 Roassal2 Backup.changes.

Please check that you have write permission for this file.

You won't be able to save this image correctly until you fix this.
5 May 2019 4:15:37.124989 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\yaroslav\Documents...etc...
		tmp1: 	nil
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\yaroslav\Documents...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'the changes file named C:\Users\yaroslav\Documents\Coursework\University...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withChangesRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'C:\Users\yaroslav\Documents\Coursework\University\Coursework\Pharo Spars...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informProblemInChanges:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:silent:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	false
		tmp1: 	SourceFile(C:\Users\yaroslav\Documents\Coursework\University\Coursework\P...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 

	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	nil
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-05T16:15:36.962989+03:00


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-05T16:15:36.962989+03:00


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 ]
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-05T16:15:36.962989+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-05T16:15:36.962989+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-05T16:15:36.962989+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-05T16:15:36.962989+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withChangesRef:
PharoFilesOpener>>informProblemInChanges:
PharoFilesOpener>>changesFileOrNilReadOnly:silent:
PharoFilesOpener>>changesFileOrNilReadOnly:
PharoFilesOpener>>changesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
5 May 2019 4:18:14.126303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ComposableMorph(Object)>>deprecated:on:in:
	Receiver: a ComposableMorph(977905152)
	Arguments and temporary variables: 
		anExplanationString: 	'Use UIManager default chooseForSaveFileReference:extensio...etc...
		date: 	'26 October 2018'
		version: 	#Pharo7
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	1
		borderColor: 	#inset
		model: 	nil


ComposableMorph>>fileSave:extensions:path:
	Receiver: a ComposableMorph(977905152)
	Arguments and temporary variables: 
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	1
		borderColor: 	#inset
		model: 	nil


GLMPNGExportingAction(GLMAbstractExportingAction)>>execute
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		fileName: 	nil
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a...etc...


GLMPNGExportingAction(GLMRoassal2Action)>>executeOn:
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a...etc...


[ :r | inst executeOn: r ] in [ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			icon: inst icon
			entitled: inst title ]
	ifFalse: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			entitled: inst title
			categorized: inst category ] ] in GLMRoassal2Action class>>initializePresentation:
	Receiver: GLMRoassal2Action
	Arguments and temporary variables: 
		aRoassal2Presentation: 	nil
		instances: 	nil
		orderedInstances: 	nil
		inst: 	a GLMPNGExportingAction
		r: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPane(802403584...etc...
	Receiver's instance variables: 
		superclass: 	RTObject
		methodDict: 	a MethodDictionary(#category->GLMRoassal2Action>>#category #execute...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMAbstractExportingAction. GLMAbstractSetContextAction. GLMAddLab...etc...
		name: 	#GLMRoassal2Action
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2GT-Glamour-Actions'


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :r | inst executeOn: r ]
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a GL...etc...
	Receiver's instance variables: 
		outerContext: 	[ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			a...etc...
		startpc: 	173
		numArgs: 	1


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


GLMGenericAction(GLMAction)>>morphicActOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
		w: 	a WorldMorph(428085248) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a MenuMorph(783992320)
		localEvt: 	[(1230@251) mouseUp 14656843 nil]
		index: 	5
		child: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		morphs: 	an Array(a ToggleMenuItemMorph(661191680)'Export to HTML (without fixed...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp THERE_BE_DRAGONS_HERE
Warning
5 May 2019 4:18:25.103303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PharoLightTheme(Object)>>deprecated:on:in:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		anExplanationString: 	'Use UIManager default chooseForSaveFileReference:extensio...etc...
		date: 	'26 October 2018'
		version: 	#Pharo7
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(715683072)->a BorderedMorph(503633920)
		windowActiveDropShadowStyle: 	#diffuse


PharoLightTheme(UITheme)>>fileSaveIn:title:extensions:path:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aThemedMorph: 	a ComposableMorph(977905152)
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(715683072)->a BorderedMorph(503633920)
		windowActiveDropShadowStyle: 	#diffuse


ComposableMorph>>fileSave:extensions:path:
	Receiver: a ComposableMorph(977905152)
	Arguments and temporary variables: 
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	1
		borderColor: 	#inset
		model: 	nil


GLMPNGExportingAction(GLMAbstractExportingAction)>>execute
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		fileName: 	nil
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a...etc...


GLMPNGExportingAction(GLMRoassal2Action)>>executeOn:
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a...etc...


[ :r | inst executeOn: r ] in [ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			icon: inst icon
			entitled: inst title ]
	ifFalse: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			entitled: inst title
			categorized: inst category ] ] in GLMRoassal2Action class>>initializePresentation:
	Receiver: GLMRoassal2Action
	Arguments and temporary variables: 
		aRoassal2Presentation: 	nil
		instances: 	nil
		orderedInstances: 	nil
		inst: 	a GLMPNGExportingAction
		r: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPane(802403584...etc...
	Receiver's instance variables: 
		superclass: 	RTObject
		methodDict: 	a MethodDictionary(#category->GLMRoassal2Action>>#category #execute...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMAbstractExportingAction. GLMAbstractSetContextAction. GLMAddLab...etc...
		name: 	#GLMRoassal2Action
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2GT-Glamour-Actions'


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :r | inst executeOn: r ]
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a GL...etc...
	Receiver's instance variables: 
		outerContext: 	[ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			a...etc...
		startpc: 	173
		numArgs: 	1


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


GLMGenericAction(GLMAction)>>morphicActOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
		w: 	a WorldMorph(428085248) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a MenuMorph(783992320)
		localEvt: 	[(1230@251) mouseUp 14656843 nil]
		index: 	5
		child: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		morphs: 	an Array(a ToggleMenuItemMorph(661191680)'Export to HTML (without fixed...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a MenuMorph(783992320)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a MenuMorph(783992320)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(783992320)
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(661191680)'Export to HTML (without fi...etc...
		fullBounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (615728640) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		stayUp: 	false
		popUpOwner: 	a ToggleMenuItemMorph(901563392)'Export as...'
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(783992320)
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(661191680)'Export to HTML (without fi...etc...
		fullBounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (615728640) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		stayUp: 	false
		popUpOwner: 	a ToggleMenuItemMorph(901563392)'Export as...'
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(783992320)
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(661191680)'Export to HTML (without fi...etc...
		fullBounds: 	(1102.0@173.0) corTHERE_BE_DRAGONS_HERE
Warning
5 May 2019 4:18:27.286303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PharoLightTheme(Object)>>deprecated:on:in:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		anExplanationString: 	'Use UIManager default chooseForSaveFileReference:extensio...etc...
		date: 	'26 October 2018'
		version: 	#Pharo7
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(1070411264)->a BorderedMorph(918107136)
		windowActiveDropShadowStyle: 	#diffuse


PharoLightTheme(UITheme)>>fileSaveIn:title:initialAnswer:extensions:path:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aThemedMorph: 	a ComposableMorph(977905152)
		title: 	'Enter the PNG file name'
		aFileName: 	''
		exts: 	#('png')
		path: 	nil
		fd: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(1070411264)->a BorderedMorph(918107136)
		windowActiveDropShadowStyle: 	#diffuse


PharoLightTheme(UITheme)>>fileSaveIn:title:extensions:path:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aThemedMorph: 	a ComposableMorph(977905152)
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(1070411264)->a BorderedMorph(918107136)
		windowActiveDropShadowStyle: 	#diffuse


ComposableMorph>>fileSave:extensions:path:
	Receiver: a ComposableMorph(977905152)
	Arguments and temporary variables: 
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		borderWidth: 	1
		borderColor: 	#inset
		model: 	nil


GLMPNGExportingAction(GLMAbstractExportingAction)>>execute
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		fileName: 	nil
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a...etc...


GLMPNGExportingAction(GLMRoassal2Action)>>executeOn:
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a...etc...


[ :r | inst executeOn: r ] in [ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			icon: inst icon
			entitled: inst title ]
	ifFalse: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			entitled: inst title
			categorized: inst category ] ] in GLMRoassal2Action class>>initializePresentation:
	Receiver: GLMRoassal2Action
	Arguments and temporary variables: 
		aRoassal2Presentation: 	nil
		instances: 	nil
		orderedInstances: 	nil
		inst: 	a GLMPNGExportingAction
		r: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPane(802403584...etc...
	Receiver's instance variables: 
		superclass: 	RTObject
		methodDict: 	a MethodDictionary(#category->GLMRoassal2Action>>#category #execute...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMAbstractExportingAction. GLMAbstractSetContextAction. GLMAddLab...etc...
		name: 	#GLMRoassal2Action
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2GT-Glamour-Actions'


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :r | inst executeOn: r ]
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a GL...etc...
	Receiver's instance variables: 
		outerContext: 	[ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			a...etc...
		startpc: 	173
		numArgs: 	1


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


GLMGenericAction(GLMAction)>>morphicActOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=842866176 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
		w: 	a WorldMorph(428085248) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(672628224)'Export to PNG'
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		owner: 	a MenuMorph(783992320)
		submorphs: 	#()
		fullBounds: 	(1107.0@250.0) corner: (1335.0@267.0)
		color: 	Color black
		extension: 	a MorphExtension (602232320)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=842866176 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a MenuMorph(783992320)
		localEvt: 	[(1230@251) mouseUp 14656843 nil]
		index: 	5
		child: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		morphs: 	an Array(a ToggleMenuItemMorph(661191680)'Export to HTML (without fixed...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1230@251) mouseUp 14656843 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	14656843
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1230@251)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a MenuMorph(783992320)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		aMorph: 	a MenuMorph(783992320)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(783992320)
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(661191680)'Export to HTML (without fi...etc...
		fullBounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (615728640) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		stayUp: 	false
		popUpOwner: 	a ToggleMenuItemMorph(901563392)'Export as...'
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(783992320)
	Arguments and temporary variables: 
		anEvent: 	[(1230@251) mouseUp 14656843 nil]
	Receiver's instance variables: 
		bounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(661191680)'Export to HTML (without fi...etc...
		fullBounds: 	(1102.0@173.0) corner: (1340.0@290.0)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (615728640) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(672628224)'Export to PNG'
		stayUp: 	false
		popUpOwner: 	a ToggleMenuItemMorph(901563392)'Export as...'
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(783992320)
	Arguments and temporary variables: 
		evt: 	[(1230@251) mouseUp 14656843 nTHERE_BE_DRAGONS_HERE

5 May 2019 4:53:34.896303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(987056128)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@430)
		owner: 	a TransformWithLayoutMorph(143044864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(73375744) a RubCursor(417810432)...etc...
		fullBounds: 	(0@0) corner: (777@430)
		color: 	Color transparent
		extension: 	a MorphExtension (608043520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(47354112)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(417810432)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(987056128)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@430)
		owner: 	a TransformWithLayoutMorph(143044864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(73375744) a RubCursor(417810432)...etc...
		fullBounds: 	(0@0) corner: (777@430)
		color: 	Color transparent
		extension: 	a MorphExtension (608043520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(47354112)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(417810432)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(987056128)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@430)
		owner: 	a TransformWithLayoutMorph(143044864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(73375744) a RubCursor(417810432)...etc...
		fullBounds: 	(0@0) corner: (777@430)
		color: 	Color transparent
		extension: 	a MorphExtension (608043520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(47354112)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(417810432)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(987056128)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@430)
		owner: 	a TransformWithLayoutMorph(143044864)
		submorphs: 	an Array(a RubPrimarySelectionMorph(73375744) a RubCursor(417810432)...etc...
		fullBounds: 	(0@0) corner: (777@430)
		color: 	Color transparent
		extension: 	a MorphExtension (608043520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(47354112)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(417810432)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(987056128)
	Receiver's instance variables: 
		bounds: 	(1266@451) corner: (1282@467)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1266@451) mouseOver 16765609 nil]
		targetOffset: 	(113.0@118.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 16765609 1266 451 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1266@451) corner: (1282@467)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1266@451) mouseOver 16765609 nil]
		targetOffset: 	(113.0@118.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 16765609 1266 451 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(628388864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(628388864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(628388864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	2524636
		lastStepMessage: 	nil
		lastCycleTime: 	2524690
		alarms: 	a Heap()
		lastAlarmTime: 	2524636
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of COOSparseMatrix did not understand #addAnimated:delay:
5 May 2019 10:49:08.618303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrix(Object)>>doesNotUnderstand: #addAnimated:delay:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		aMessage: 	addAnimated: a COOSparseMatrix delay: 1
		exception: 	MessageNotUnderstood: COOSparseMatrix>>addAnimated:delay:
		resumeValue: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{0 . 1 . 0 . 2}.
	{0 . -1 . 3 . 0}.
	{1 . 0 . 0 . 0}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913309184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1225@69)
		owner: 	a TransformWithLayoutMorph(849963776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(806386944) a RubCursor(810955008...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (501263872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(280663808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(810955008)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(165427968))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	23858954
		lastStepMessage: 	nil
		lastCycleTime: 	23859005
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	23858954
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	23858954
		lastStepMessage: 	nil
		lastCycleTime: 	23859005
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	23858954
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	23858954
		lastStepMessage: 	nil
		lastCycleTime: 	23859005
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	23858954
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrix(Object)>>doesNotUnderstand: #addAnimated:delay:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of MatrixOperationVisualizer did not understand #composer
5 May 2019 10:49:27.710303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer(Object)>>doesNotUnderstand: #composer
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		aMessage: 	composer
		exception: 	MessageNotUnderstood: MatrixOperationVisualizer>>composer
		resumeValue: 	nil
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		rightMatrixRow: 	nil
		arr: 	nil
		leftMatrixRow: 	nil
		list: 	nil
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	a Process in [ self value.
Processor terminateActive ] in Blo...etc...
		vis: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{0 . 1 . 0 . 2}.
	{0 . -1 . 3 . 0}.
	{1 . 0 . 0 . 0}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913309184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1225@69)
		owner: 	a TransformWithLayoutMorph(849963776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(806386944) a RubCursor(810955008...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (501263872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(280663808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(810955008)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(728209920))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	23878049
		lastStepMessage: 	nil
		lastCycleTime: 	23878101
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	23878049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	23878049
		lastStepMessage: 	nil
		lastCycleTime: 	23878101
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	23878049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	23878049
		lastStepMessage: 	nil
		lastCycleTime: 	23878101
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	23878049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixOperationVisualizer(Object)>>doesNotUnderstand: #composer
LILSparseMatrix>>addAnimated:delay:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #ifTrue:ifFalse:
5 May 2019 10:50:27.777303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

BlockClosure(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: [ el row = 0 or: [ el column = 0 ] ]
	Arguments and temporary variables: 
		aMessage: 	ifTrue: [ headerShape elementOn: el ] ifFalse: [ elementShape element...etc...
		exception: 	MessageNotUnderstood: BlockClosure>>ifTrue:ifFalse:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ :el | 
[ el row = 0 or: [ el column = 0 ] ]
	ifTrue: [ headerSh...etc...
		startpc: 	192
		numArgs: 	0


[ :el | 
[ el row = 0 or: [ el column = 0 ] ]
	ifTrue: [ headerShape elementOn: el ]
	ifFalse: [ elementShape elementOn: el ] ] in LILSparseMatrixVisualizer>>onRow:in:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		rowIndex: 	1
		aLILSparseMatrix: 	a LILSparseMatrix
		elementShape: 	a RTCompositeShape
		headerShape: 	a RTCompositeShape
		elements: 	nil
		el: 	a MatrixElement
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


OrderedCollection>>collect:
	Receiver: an OrderedCollection(a MatrixElement a MatrixElement a MatrixElement)
	Arguments and temporary variables: 
		aBlock: 	[ :el | 
[ el row = 0 or: [ el column = 0 ] ]
	ifTrue: [ headerShape el...etc...
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a MatrixElement a MatrixElement a MatrixElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	3


LILSparseMatrixVisualizer>>onRow:in:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		rowIndex: 	1
		aLILSparseMatrix: 	a LILSparseMatrix
		elementShape: 	a RTCompositeShape
		headerShape: 	a RTCompositeShape
		elements: 	nil
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


LILSparseMatrixVisualizer class>>onRow:in:withView:
	Receiver: LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		rowIndex: 	1
		aLILSparseMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	MatrixVisualizer
		methodDict: 	a MethodDictionary(#drawEdgesWith:->LILSparseMatrixVisualizer>>#dra...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LILSparseMatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis add: leftMatrixRow.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis add: rightMatrixRow.
vis group: #rightRow.
nowProcLabel := (RTLabel text: [ :col | 'Processing column ' , col ])
	elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis move: leftMatrixRow below: #left.
vis move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
		rightMatrixRow: 	nil
		arr: 	nil
		leftMatrixRow: 	nil
		list: 	nil
		unionLabel: 	a RTElement
		nowProcLabel: 	nil
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLab...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	LILSparseMatrix>>addAnimated:delay:
		startpc: 	607
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
[ :el | 
[ el row = 0 or: [ el column = 0 ] ]
	ifTrue: [ headerShape elementOn: el ]
	ifFalse: [ elementShape elementOn: el ] ] in LILSparseMatrixVisualizer>>onRow:in:
OrderedCollection>>collect:
LILSparseMatrixVisualizer>>onRow:in:
LILSparseMatrixVisualizer class>>onRow:in:withView:
[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis add: leftMatrixRow.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis add: rightMatrixRow.
vis group: #rightRow.
nowProcLabel := (RTLabel text: [ :col | 'Processing column ' , col ])
	elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis move: leftMatrixRow below: #left.
vis move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of LILSparseMatrixVisualizer did not understand #addedIn:
5 May 2019 10:51:58.637303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrixVisualizer(Object)>>doesNotUnderstand: #addedIn:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aMessage: 	addedIn: a RTView
		exception: 	MessageNotUnderstood: LILSparseMatrixVisualizer>>addedIn:
		resumeValue: 	nil
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


RTView>>add:
	Receiver: a RTView
	Arguments and temporary variables: 
		anElementOrAnEdge: 	a LILSparseMatrixVisualizer
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#GlamourContext->a RTInteractiveViewContext )
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edges: 	a RTGroup(a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge...etc...
		trCanvas: 	a TRCanvas


MatrixOperationVisualizer>>add:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		anElement: 	a LILSparseMatrixVisualizer
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis add: leftMatrixRow.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis add: rightMatrixRow.
vis group: #rightRow.
nowProcLabel := (RTLabel text: [ :col | 'Processing column ' , col ])
	elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis move: leftMatrixRow below: #left.
vis move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
		rightMatrixRow: 	nil
		arr: 	nil
		leftMatrixRow: 	a LILSparseMatrixVisualizer
		list: 	nil
		unionLabel: 	a RTElement
		nowProcLabel: 	nil
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLab...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	LILSparseMatrix>>addAnimated:delay:
		startpc: 	607
		numArgs: 	0



--- The full stack ---
LILSparseMatrixVisualizer(Object)>>doesNotUnderstand: #addedIn:
RTView>>add:
MatrixOperationVisualizer>>add:
[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis add: leftMatrixRow.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis add: rightMatrixRow.
vis group: #rightRow.
nowProcLabel := (RTLabel text: [ :col | 'Processing column ' , col ])
	elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis move: leftMatrixRow below: #left.
vis move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
5 May 2019 10:52:37.415303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallInteger(Object)>>error:
	Receiver: 0
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
0

SmallInteger(Object)>>errorNotIndexable
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

SmallInteger(Object)>>size
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'Processing column '
	Arguments and temporary variables: 
		start: 	19
		stop: 	18
		replacementCollection: 	0
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'Processing column '

ByteString(SequenceableCollection)>>,
	Receiver: 'Processing column '
	Arguments and temporary variables: 
		otherCollection: 	0
	Receiver's instance variables: 
'Processing column '

[ :col | 'Processing column ' , col ] in [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel text: [ :col | 'Processing column ' , col ])
	elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis move: leftMatrixRow below: #left.
vis move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
		rightMatrixRow: 	a LILSparseMatrixVisualizer
		arr: 	nil
		leftMatrixRow: 	a LILSparseMatrixVisualizer
		list: 	nil
		unionLabel: 	a RTElement
		nowProcLabel: 	nil
		col: 	0
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


BlockClosure>>rtValue:
	Receiver: [ :col | 'Processing column ' , col ]
	Arguments and temporary variables: 
		valueOrArray: 	0
	Receiver's instance variables: 
		outerContext: 	[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') e...etc...
		startpc: 	662
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :col | 'Processing column ' , col ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	Color gray
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	12
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	55
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	Color gray
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	12
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


RTLabel>>trachelShapeFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		c: 	Color gray
		txt: 	nil
		lines: 	nil
	Receiver's instance variables: 
		color: 	Color gray
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	12
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTLabel
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	0
		shape: 	a RTLabel
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTLabel(RTShape)>>elementOn:
	Receiver: a RTLabel
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of MatrixOperationVisualizer did not understand #move:below:
5 May 2019 10:52:59.867303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer(Object)>>doesNotUnderstand: #move:below:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		aMessage: 	move: a LILSparseMatrixVisualizer below: #left
		exception: 	MessageNotUnderstood: MatrixOperationVisualizer>>move:below:
		resumeValue: 	nil
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis move: leftMatrixRow below: #left.
vis move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
		rightMatrixRow: 	a LILSparseMatrixVisualizer
		arr: 	nil
		leftMatrixRow: 	a LILSparseMatrixVisualizer
		list: 	nil
		unionLabel: 	a RTElement
		nowProcLabel: 	a RTElement
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLab...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	LILSparseMatrix>>addAnimated:delay:
		startpc: 	615
		numArgs: 	0



--- The full stack ---
MatrixOperationVisualizer(Object)>>doesNotUnderstand: #move:below:
[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis move: leftMatrixRow below: #left.
vis move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a LILSparseMatrixVisualizer not found in Dictionary
5 May 2019 10:53:19.611303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #left->a RTGroup(a RT...etc...
	Arguments and temporary variables: 
		aKey: 	a LILSparseMatrixVisualizer
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(#unionLabel->a RTGroup(a RTElement) #left->a RTGroup(a RTElemen...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #left->a RTGroup(a RT...etc...
	Arguments and temporary variables: 
		key: 	a LILSparseMatrixVisualizer
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(#unionLabel->a RTGroup(a RTElement) #left->a RTGroup(a RTElemen...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #left->a RTGroup(a RT...etc...
	Arguments and temporary variables: 
		key: 	a LILSparseMatrixVisualizer
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(#unionLabel->a RTGroup(a RTElement) #left->a RTGroup(a RTElemen...etc...


Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #left->a RTGroup(a RT...etc...
	Arguments and temporary variables: 
		key: 	a LILSparseMatrixVisualizer
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(#unionLabel->a RTGroup(a RTElement) #left->a RTGroup(a RTElemen...etc...


RTComposer>>move:below:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		name1: 	a LILSparseMatrixVisualizer
		name2: 	#left
		g1: 	nil
		g2: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement)


[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis composer move: leftMatrixRow below: #left.
vis composer move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
		rightMatrixRow: 	a LILSparseMatrixVisualizer
		arr: 	nil
		leftMatrixRow: 	a LILSparseMatrixVisualizer
		list: 	nil
		unionLabel: 	a RTElement
		nowProcLabel: 	a RTElement
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLab...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	LILSparseMatrix>>addAnimated:delay:
		startpc: 	615
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>move:below:
[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis composer move: leftMatrixRow below: #left.
vis composer move: rightMatrixRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a RTElement not found in Dictionary
5 May 2019 10:54:11.342303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #left->a RTGroup(a RT...etc...
	Arguments and temporary variables: 
		aKey: 	a RTElement
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(#unionLabel->a RTGroup(a RTElement) #left->a RTGroup(a RTElemen...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #left->a RTGroup(a RT...etc...
	Arguments and temporary variables: 
		key: 	a RTElement
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(#unionLabel->a RTGroup(a RTElement) #left->a RTGroup(a RTElemen...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #left->a RTGroup(a RT...etc...
	Arguments and temporary variables: 
		key: 	a RTElement
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(#unionLabel->a RTGroup(a RTElement) #left->a RTGroup(a RTElemen...etc...


Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #left->a RTGroup(a RT...etc...
	Arguments and temporary variables: 
		key: 	a RTElement
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(#unionLabel->a RTGroup(a RTElement) #left->a RTGroup(a RTElemen...etc...


RTComposer>>move:onTheRightOf:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		name1: 	a RTElement
		name2: 	#left
		g1: 	nil
		g2: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement)


[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
		rightMatrixRow: 	a LILSparseMatrixVisualizer
		arr: 	nil
		leftMatrixRow: 	a LILSparseMatrixVisualizer
		list: 	nil
		unionLabel: 	a RTElement
		nowProcLabel: 	a RTElement
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLab...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	LILSparseMatrix>>addAnimated:delay:
		startpc: 	615
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>move:onTheRightOf:
[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #nowProc below: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: unionLabel onTheRightOf: #left.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel updateModelAndRedraw: columnIndex.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel updateModelAndRedraw: 'none'.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow below: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TRLabelShape did not understand #relayoutRelative
5 May 2019 10:54:52.462303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TRLabelShape(Object)>>doesNotUnderstand: #relayoutRelative
	Receiver: a TRLabelShape
	Arguments and temporary variables: 
		aMessage: 	relayoutRelative
		exception: 	MessageNotUnderstood: TRLabelShape>>relayoutRelative
		resumeValue: 	nil
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	a TRCanvas
		color: 	Color gray
		path: 	nil
		strokePaint: 	Color black
		announcer: 	an Announcer
		element: 	a RTElement
		matrix: 	an AthensAffineTransform
		rotationAngleDegrees: 	0
		session: 	a WorkingSession
		isVisible: 	true
		text: 	'Processing column 1'
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		fontSize: 	12
		fontTHERE_BE_DRAGONS_HERE
Instance of ValueLink did not understand #row
5 May 2019 11:02:15.084303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ValueLink(Object)>>doesNotUnderstand: #row
	Receiver: ValueLink(a LILSparseMatrixNode)
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: ValueLink>>row
		resumeValue: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		value: 	a LILSparseMatrixNode


[ :el | el row @ el column ] in LILSparseMatrixVisualizer(MatrixVisualizer)>>getElementShape
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		comp: 	nil
		box: 	nil
		valueLabel: 	nil
		indTHERE_BE_DRAGONS_HERE
Instance of ValueLink did not understand #row
5 May 2019 11:08:51.300303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ValueLink(Object)>>doesNotUnderstand: #row
	Receiver: ValueLink(a LILSparseMatrixNode)
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: ValueLink>>row
		resumeValue: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		value: 	a LILSparseMatrixNode


[ :el | 
| row col |
row := el row.
col := el column.
row isNil
	ifTrue: [ row := 0 ].
col isNil
	ifTrue: [ col := 0 ].
row @ col ] in LILSparseMatrixVisualizer(MatrixVisualizer)>>getElementShape
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		comp: 	nil
		box: 	nil
		valueLabel: 	nil
		indexLabel: 	nil
		el: 	ValueLink(a LILSparseMatrixNode)
		row: 	nil
		col: 	nil
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | 
| row col |
row := el row.
col := el column.
row isNil
	ifTrue: [ row := 0 ].
col...etc...
	Arguments and temporary variables: 
		valueOrArray: 	ValueLink(a LILSparseMatrixNode)
	Receiver's instance variables: 
		outerContext: 	LILSparseMatrixVisualizer(MatrixVisualizer)>>getElementShape
		startpc: 	228
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :el | 
| row col |
row := el row.
col := el column.
row...etc...
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerCTHERE_BE_DRAGONS_HERE
Instance of MatrixElement did not understand #nextLink
5 May 2019 11:22:47.296303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixElement(Object)>>doesNotUnderstand: #nextLink
	Receiver: a MatrixElement
	Arguments and temporary variables: 
		aMessage: 	nextLink
		exception: 	MessageNotUnderstood: MatrixElement>>nextLink
		resumeValue: 	nil
	Receiver's instance variables: 
		row: 	1
		column: 	0
		value: 	nil
		next: 	a MatrixElement


[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ] in LILSparseMatrixVisualizer>>drawEdgesWith:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edgeBuilder: 	a RTEdgeBuilder
		arrowHead: 	a RTLineHead
		el: 	a MatrixElement
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a MatrixElement
	Receiver's instance variables: 
		outerContext: 	LILSparseMatrixVisualizer>>drawEdgesWith:
		startpc: 	227
		numArgs: 	1


[ :e | 
fromElement := self fromElements
	elementFromModel: (aFromBlock rtValue: e model).
toElement := self toElements
	elementFromModel: (aBlockOrASymbol rtValue: e model).
toElement
	ifNotNil: [ self createEdgeIfNecessaryFrom: fromElement to: toElement ] ] in RTEdgeBuilder>>connectFrom:to:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aFromBlock: 	[ :each | each ]
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
		toElement: 	nil
		fromElement: 	a RTElement
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
fromElement := self fromElements
	elementFromModel: (aFromBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	9
		attributes: 	nil
		elementFromModelCache: 	nil


RTEdgeBuilder>>connectFrom:to:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElement: 	nil
		fromElement: 	a RTElement
		aFromBlock: 	[ :each | each ]
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


RTEdgeBuilder>>connectTo:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


LILSparseMatrixVisualizer>>drawEdgesWith:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edgeBuilder: 	a RTEdgeBuilder
		arrowHead: 	a RTLineHead
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


LILSparseMatrixVisualizer>>on:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		elementShape: 	a RTCompositeShape
		headerShape: 	a RTCompositeShape
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


LILSparseMatrixVisualizer class>>on:withView:
	Receiver: LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	MatrixVisualizer
		methodDict: 	a MethodDictionary(#drawEdgesWith:->LILSparseMatrixVisualizer>>#dra...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LILSparseMatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name substrings: '#') first"
(aMatrix isKindOf: subclass getVisualizedClass)
	ifTrue: [ ^ subclass on: aMatrix withView: aView ] ] in MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	a LILSparseMatrix
		aView: 	a RTView
		subclass: 	LILSparseMatrixVisualizer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


Array(SequenceableCollection)>>do:
	Receiver: {COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}
	Arguments and temporary variables: 
		aBlock: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) ...etc...
		index: 	2
	Receiver's instance variables: 
{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}

MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


MatrixOperationVisualizer>>getComposedViewOf:with:result:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a LILSparseMatrix
		right: 	a LILSparseMatrix
		result: 	a LILSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		rightMatrixRow: 	nil
		arr: 	nil
		leftMatrixRow: 	nil
		list: 	nil
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{0 . 1 . 0 . 2}.
	{0 . -1 . 3 . 0}.
	{1 . 0 . 0 . 0}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913309184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (608@88)
		owner: 	a TransformWithLayoutMorph(849963776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(806386944) a RubCursor(810955008...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (501263872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(280663808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(810955008)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(471131136))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(519.0@376.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25877656
		lastStepMessage: 	nil
		lastCycleTime: 	25877678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25877656
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25877656
		lastStepMessage: 	nil
		lastCycleTime: 	25877678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25877656
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25877656
		lastStepMessage: 	nil
		lastCycleTime: 	25877678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25877656
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1THERE_BE_DRAGONS_HERE
Instance of MatrixElement did not understand #nextLink
5 May 2019 11:22:53.763303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixElement(Object)>>doesNotUnderstand: #nextLink
	Receiver: a MatrixElement
	Arguments and temporary variables: 
		aMessage: 	nextLink
		exception: 	MessageNotUnderstood: MatrixElement>>nextLink
		resumeValue: 	nil
	Receiver's instance variables: 
		row: 	1
		column: 	0
		value: 	nil
		next: 	a MatrixElement


[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ] in LILSparseMatrixVisualizer>>drawEdgesWith:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edgeBuilder: 	a RTEdgeBuilder
		arrowHead: 	a RTLineHead
		el: 	a MatrixElement
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a MatrixElement
	Receiver's instance variables: 
		outerContext: 	LILSparseMatrixVisualizer>>drawEdgesWith:
		startpc: 	227
		numArgs: 	1


[ :e | 
fromElement := self fromElements
	elementFromModel: (aFromBlock rtValue: e model).
toElement := self toElements
	elementFromModel: (aBlockOrASymbol rtValue: e model).
toElement
	ifNotNil: [ self createEdgeIfNecessaryFrom: fromElement to: toElement ] ] in RTEdgeBuilder>>connectFrom:to:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aFromBlock: 	[ :each | each ]
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
		toElement: 	nil
		fromElement: 	a RTElement
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
fromElement := self fromElements
	elementFromModel: (aFromBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	9
		attributes: 	nil
		elementFromModelCache: 	nil


RTEdgeBuilder>>connectFrom:to:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElement: 	nil
		fromElement: 	a RTElement
		aFromBlock: 	[ :each | each ]
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


RTEdgeBuilder>>connectTo:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


LILSparseMatrixVisualizer>>drawEdgesWith:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edgeBuilder: 	a RTEdgeBuilder
		arrowHead: 	a RTLineHead
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


LILSparseMatrixVisualizer>>on:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		elementShape: 	a RTCompositeShape
		headerShape: 	a RTCompositeShape
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


LILSparseMatrixVisualizer class>>on:withView:
	Receiver: LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	MatrixVisualizer
		methodDict: 	a MethodDictionary(#drawEdgesWith:->LILSparseMatrixVisualizer>>#dra...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LILSparseMatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name substrings: '#') first"
(aMatrix isKindOf: subclass getVisualizedClass)
	ifTrue: [ ^ subclass on: aMatrix withView: aView ] ] in MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	a LILSparseMatrix
		aView: 	a RTView
		subclass: 	LILSparseMatrixVisualizer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


Array(SequenceableCollection)>>do:
	Receiver: {COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}
	Arguments and temporary variables: 
		aBlock: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) ...etc...
		index: 	2
	Receiver's instance variables: 
{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}

MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


MatrixOperationVisualizer>>getComposedViewOf:with:result:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a LILSparseMatrix
		right: 	a LILSparseMatrix
		result: 	a LILSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		rightMatrixRow: 	nil
		arr: 	nil
		leftMatrixRow: 	nil
		list: 	nil
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{0 . 1 . 0 . 2}.
	{0 . -1 . 3 . 0}.
	{1 . 0 . 0 . 0}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913309184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (608@88)
		owner: 	a TransformWithLayoutMorph(849963776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(806386944) a RubCursor(810955008...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (501263872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(280663808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(810955008)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(282124544))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(519.0@376.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25884128
		lastStepMessage: 	nil
		lastCycleTime: 	25884164
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25884128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25884128
		lastStepMessage: 	nil
		lastCycleTime: 	25884164
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25884128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25884128
		lastStepMessage: 	nil
		lastCycleTime: 	25884164
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25884128
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixElement(Object)>>doesNotUnderstand: #nextLink
[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ] in LILSparseMatrixVisualizer>>drawEdgesWith:
BlockClosure>>rtValue:
[ :e | 
fromElement := self fromElements
	elementFromModel: (aFromBlock rtValue: e model).
toElement := self toElements
	elementFromModel: (aBlockOrASymbol rtValue: e model).
toElement
	ifNotNil: [ self createEdgeIfNecessaryFrom: fromElement to: toElement ] ] in RTEdgeBuilder>>connectFrom:to:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectFrom:to:
RTEdgeBuilder>>connectTo:
LILSparseMatrixVisualizer>>drawEdgesWith:
LILSparseMatrixVisualizer>>on:
LILSparseMatrixVisualizer class>>on:withView:
[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name substrings: '#') first"
(aMatrix isKindOf: subclass getVisualizedClass)
	ifTrue: [ ^ subclass on: aMatrix withView: aView ] ] in MatrixVisualizer class>>on:withView:
Array(SequenceableCollection)>>do:
MatrixVisualizer class>>on:withView:
MatrixOperationVisualizer>>getComposedViewOf:with:result:
LILSparseMatrix>>addAnimated:delay:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvTHERE_BE_DRAGONS_HERE
Instance of MatrixElement did not understand #nextLink
5 May 2019 11:23:22.057303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixElement(Object)>>doesNotUnderstand: #nextLink
	Receiver: a MatrixElement
	Arguments and temporary variables: 
		aMessage: 	nextLink
		exception: 	MessageNotUnderstood: MatrixElement>>nextLink
		resumeValue: 	nil
	Receiver's instance variables: 
		row: 	1
		column: 	0
		value: 	nil
		next: 	a MatrixElement


[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ] in LILSparseMatrixVisualizer>>drawEdgesWith:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edgeBuilder: 	a RTEdgeBuilder
		arrowHead: 	a RTLineHead
		el: 	a MatrixElement
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Arguments and temporary variables: 
		valueOrArray: 	a MatrixElement
	Receiver's instance variables: 
		outerContext: 	LILSparseMatrixVisualizer>>drawEdgesWith:
		startpc: 	227
		numArgs: 	1


[ :e | 
fromElement := self fromElements
	elementFromModel: (aFromBlock rtValue: e model).
toElement := self toElements
	elementFromModel: (aBlockOrASymbol rtValue: e model).
toElement
	ifNotNil: [ self createEdgeIfNecessaryFrom: fromElement to: toElement ] ] in RTEdgeBuilder>>connectFrom:to:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aFromBlock: 	[ :each | each ]
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
		toElement: 	nil
		fromElement: 	a RTElement
		e: 	a RTElement
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
fromElement := self fromElements
	elementFromModel: (aFromBlock...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	9
		attributes: 	nil
		elementFromModelCache: 	nil


RTEdgeBuilder>>connectFrom:to:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		toElement: 	nil
		fromElement: 	a RTElement
		aFromBlock: 	[ :each | each ]
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


RTEdgeBuilder>>connectTo:
	Receiver: a RTEdgeBuilder
	Arguments and temporary variables: 
		aBlockOrASymbol: 	[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ]
	Receiver's instance variables: 
		view: 	a RTView
		interactionBuilder: 	a RTInteractionBuilder
		shapeBuilder: 	a RTShapeBuilder
		layoutBuilder: 	nil
		title: 	'Roassal'
		metricNormalizer: 	nil
		allowRepetition: 	false
		fromElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEle...etc...
		toElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTEleme...etc...
		shouldMoveBehind: 	false
		shouldNotBeUsedInLayout: 	true
		createdEdges: 	a RTGroup()
		viewHasBeenManuallySet: 	true
		actions: 	an OrderedCollection()
		beDirectional: 	true


LILSparseMatrixVisualizer>>drawEdgesWith:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edgeBuilder: 	a RTEdgeBuilder
		arrowHead: 	a RTLineHead
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


LILSparseMatrixVisualizer>>on:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		elementShape: 	a RTCompositeShape
		headerShape: 	a RTCompositeShape
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


LILSparseMatrixVisualizer class>>on:withView:
	Receiver: LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	MatrixVisualizer
		methodDict: 	a MethodDictionary(#drawEdgesWith:->LILSparseMatrixVisualizer>>#dra...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LILSparseMatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name substrings: '#') first"
(aMatrix isKindOf: subclass getVisualizedClass)
	ifTrue: [ ^ subclass on: aMatrix withView: aView ] ] in MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	a LILSparseMatrix
		aView: 	a RTView
		subclass: 	LILSparseMatrixVisualizer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


Array(SequenceableCollection)>>do:
	Receiver: {COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}
	Arguments and temporary variables: 
		aBlock: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) ...etc...
		index: 	2
	Receiver's instance variables: 
{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}

MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


MatrixOperationVisualizer>>getComposedViewOf:with:result:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a LILSparseMatrix
		right: 	a LILSparseMatrix
		result: 	a LILSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		rightMatrixRow: 	nil
		arr: 	nil
		leftMatrixRow: 	nil
		list: 	nil
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{0 . 1 . 0 . 2}.
	{0 . -1 . 3 . 0}.
	{1 . 0 . 0 . 0}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913309184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (608@88)
		owner: 	a TransformWithLayoutMorph(849963776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(806386944) a RubCursor(810955008...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (501263872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(280663808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(810955008)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(777132288))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(519.0@376.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25912406
		lastStepMessage: 	nil
		lastCycleTime: 	25912460
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25912406
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25912406
		lastStepMessage: 	nil
		lastCycleTime: 	25912460
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25912406
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	25912406
		lastStepMessage: 	nil
		lastCycleTime: 	25912460
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	25912406
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixElement(Object)>>doesNotUnderstand: #nextLink
[ :el | 
el nextLink isNotNil
	ifTrue: [ el next ] ] in LILSparseMatrixVisualizer>>drawEdgesWith:
BlockClosure>>rtValue:
[ :e | 
fromElement := self fromElements
	elementFromModel: (aFromBlock rtValue: e model).
toElement := self toElements
	elementFromModel: (aBlockOrASymbol rtValue: e model).
toElement
	ifNotNil: [ self createEdgeIfNecessaryFrom: fromElement to: toElement ] ] in RTEdgeBuilder>>connectFrom:to:
RTGroup(OrderedCollection)>>do:
RTEdgeBuilder>>connectFrom:to:
RTEdgeBuilder>>connectTo:
LILSparseMatrixVisualizer>>drawEdgesWith:
LILSparseMatrixVisualizer>>on:
LILSparseMatrixVisualizer class>>on:withView:
[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name substrings: '#') first"
(aMatrix isKindOf: subclass getVisualizedClass)
	ifTrue: [ ^ subclass on: aMatrix withView: aView ] ] in MatrixVisualizer class>>on:withView:
Array(SequenceableCollection)>>do:
MatrixVisualizer class>>on:withView:
MatrixOperationVisualizer>>getComposedViewOf:with:result:
LILSparseMatrix>>addAnimated:delay:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textAreaTHERE_BE_DRAGONS_HERE
Error: cannot remove an element that is not part of a view
5 May 2019 11:23:45.351303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTElement(Object)>>error:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aString: 	'cannot remove an element that is not part of a view'
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTLabel
		trachelShape: 	a TRLabelShape
		view: 	nil
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


RTElement>>remove
	Receiver: a RTElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTLabel
		trachelShape: 	a TRLabelShape
		view: 	nil
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


ByteSymbol(Symbol)>>value:
	Receiver: #remove
	Arguments and temporary variables: 
		anObject: 	a RTElement
	Receiver's instance variables: 
#remove

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	#remove
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement nil...etc...
		firstIndex: 	1
		lastIndex: 	5


RTView>>removeElements:
	Receiver: a RTView
	Arguments and temporary variables: 
		someElements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElem...etc...
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#GlamourContext->a RTInteractiveViewContext )
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edges: 	a RTGroup(a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge...etc...
		trCanvas: 	a TRCanvas


RTComposer>>removeAllNames
	Receiver: a RTComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement a RTE...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


RTComposer>>redrawNamesFor:
	Receiver: a RTComposer
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: cannot remove an element that is not part of a view
5 May 2019 11:26:26.952303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTElement(Object)>>error:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aString: 	'cannot remove an element that is not part of a view'
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTLabel
		trachelShape: 	a TRLabelShape
		view: 	nil
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


RTElement>>remove
	Receiver: a RTElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTLabel
		trachelShape: 	a TRLabelShape
		view: 	nil
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


ByteSymbol(Symbol)>>value:
	Receiver: #remove
	Arguments and temporary variables: 
		anObject: 	a RTElement
	Receiver's instance variables: 
#remove

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	#remove
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement nil...etc...
		firstIndex: 	1
		lastIndex: 	5


RTView>>removeElements:
	Receiver: a RTView
	Arguments and temporary variables: 
		someElements: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElem...etc...
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#GlamourContext->a RTInteractiveViewContext )
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edges: 	a RTGroup(a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge...etc...
		trCanvas: 	a TRCanvas


RTComposer>>removeAllNames
	Receiver: a RTComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement a RTE...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


RTComposer>>redrawNamesFor:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupNames: 	#(#left #rTHERE_BE_DRAGONS_HERE
Error: cannot remove an element that is not part of a view
5 May 2019 11:30:26.546303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTElement(Object)>>error:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aString: 	'cannot remove an element that is not part of a view'
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTLabel
		trachelShape: 	a TRLabelShape
		view: 	nil
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


RTElement>>remove
	Receiver: a RTElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTLabel
		trachelShape: 	a TRLabelShape
		view: 	nil
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


ByteSymbol(Symbol)>>value:
	Receiver: #remove
	Arguments and temporary variables: 
		anObject: 	a RTElement
	Receiver's instance variables: 
#remove

OrderedCollection>>do:
	Receiver: an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	#remove
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement nil...etc...
		firstIndex: 	1
		lastIndex: 	5


RTView>>removeElements:
	Receiver: a RTView
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Halt
5 May 2019 11:59:09.659303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :node | 
list addLast: node.
vis composer removeGroup: #newRow.
LILSparseMatrixVisualizer
	onLinkedList: list
	inRow: row
	withView: vis view.
vis group: #newRow.
vis composer move: #newRow onTheRightOf: #rightRow.
self halt.
vis composer redrawNamesFor: vis namedGroups.
vis composer redrawBackgroundsFor: vis backgroundGroups.
vis delay wait ] in [ :row | 
arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
vis group: #newRow.
vis composer move: #newRow below: #rightRow.
arr
	do: [ :node | 
		list addLast: node.
		vis composer removeGroup: #newRow.
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow onTheRightOf: #rightRow.
		self halt.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis delay wait ].
list ] in [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #nowProc below: #rightRow.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer nameGroup: #leftRow as: 'leftRow'.
vis composer nameGroup: #rightRow as: 'rightRow'.
vis composer groupToExisting: 'labels'.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vTHERE_BE_DRAGONS_HERE
Halt
6 May 2019 12:02:08.083303 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :node | 
list addLast: node.
vis composer removeGroup: #newRow.
LILSparseMatrixVisualizer
	onLinkedList: list
	inRow: row
	withView: vis view.
vis group: #newRow.
vis composer move: #newRow onTheRightOf: #rightRow.
self halt.
vis composer redrawNamesFor: vis namedGroups.
vis composer redrawBackgroundsFor: vis backgroundGroups.
vis delay wait ] in [ :row | 
arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
vis group: #newRow.
vis composer move: #newRow below: #rightRow.
arr
	do: [ :node | 
		list addLast: node.
		vis composer removeGroup: #newRow.
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow onTheRightOf: #rightRow.
		self halt.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis delay wait ].
list ] in [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
leftMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: self
	withView: vis view.
vis group: #leftRow.
rightMatrixRow := LILSparseMatrixVisualizer
	onRow: 1
	in: aLILSparseMatrix
	withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #nowProc below: #rightRow.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer nameGroup: #leftRow as: 'leftRow'.
vis composer nameGroup: #rightRow as: 'rightRow'.
vis composer groupToExisting: 'labels'.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel model: columnIndex.
				nowProcLabel update.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel model: 'none'.
		nowProcLabel update.
		vis delay wait.
		list := LinkedList new.
		LILSparseMatrixVisualizer onLinkedList: list withView: vis view.
		vis group: #newRow.
		vis composer move: #newRow below: #rightRow.
		arr
			do: [ :node | 
				list addLast: node.
				vis composer removeGroup: #newRow.
				LILSparseMatrixVisualizer
					onLinkedList: list
					inRow: row
					withView: vis view.
				vis group: #newRow.
				vis composer move: #newRow onTheRightOf: #rightRow.
				self halt.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis delay wait ].
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE

6 May 2019 12:04:36.507303 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(406952192)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@1228)
		owner: 	a TransformWithLayoutMorph(985696256)
		submorphs: 	an Array(a RubCursor(762886656) a RubPrimarySelectionMorph(774692608...etc...
		fullBounds: 	(0@0) corner: (777@1228)
		color: 	Color transparent
		extension: 	a MorphExtension (808207872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(908382720)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762886656)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(436@168)
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(406952192)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@1228)
		owner: 	a TransformWithLayoutMorph(985696256)
		submorphs: 	an Array(a RubCursor(762886656) a RubPrimarySelectionMorph(774692608...etc...
		fullBounds: 	(0@0) corner: (777@1228)
		color: 	Color transparent
		extension: 	a MorphExtension (808207872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(908382720)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762886656)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(436@168)
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(406952192)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@1228)
		owner: 	a TransformWithLayoutMorph(985696256)
		submorphs: 	an Array(a RubCursor(762886656) a RubPrimarySelectionMorph(774692608...etc...
		fullBounds: 	(0@0) corner: (777@1228)
		color: 	Color transparent
		extension: 	a MorphExtension (808207872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(908382720)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762886656)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(436@168)
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(406952192)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@1228)
		owner: 	a TransformWithLayoutMorph(985696256)
		submorphs: 	an Array(a RubCursor(762886656) a RubPrimarySelectionMorph(774692608...etc...
		fullBounds: 	(0@0) corner: (777@1228)
		color: 	Color transparent
		extension: 	a MorphExtension (808207872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(908382720)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762886656)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(436@168)
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(406952192)
	Receiver's instance variables: 
		bounds: 	(492@265.0) corner: (508@281.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(492@265) mouseOver 42637671 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42637671 492 265 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(492@265.0) corner: (508@281.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(492@265) mouseOver 42637671 nil]
		targetOffset: 	(12.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42637671 492 265 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(628388864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(628388864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(628388864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	28386241
		lastStepMessage: 	nil
		lastCycleTime: 	28386263
		alarms: 	a Heap()
		lastAlarmTime: 	28386241
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:29.630303+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
6 May 2019 3:00:11.887918 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
arr := (rows at: row) union: (aLILSparseMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
noTHERE_BE_DRAGONS_HERE
Instance of Character did not understand #,
6 May 2019 9:13:55.800323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character arrowLeft
	Arguments and temporary variables: 
		aMessage: 	, 'List for row '
		exception: 	MessageNotUnderstood: Character>>,
		resumeValue: 	nil
	Receiver's instance variables: 
Character arrowLeft

[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #nowProc below: #rightRow.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
arr := (rows at: row) union: (rightMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
newRowGroup := #newRow , row asString.
arr
	do: [ :node | 
		list addLast: node.
		(vis composer hasGroup: newRowGroup)
			ifTrue: [ vis composer removeGroup: newRowGroup ].
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: newRowGroup.
		vis composer move: newRowGroup onTheRightOf: #rightRow.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
list isEmpty
	ifFalse: [ | captionLabel |
		row = 1
			ifTrue: [ vis composer move: newRowGroup below: #result ]
			ifFalse: [ (row - 1 to: 1)
					detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
					ifFound:
						[ :previousRow | vis composer move: newRowGroup below: #newRow , previousRow asString ] ].
		captionLabel := (RTLabel
			text: Character arrowLeft , 'List for row ' , row asString) element.
		vis add: captionLabel.
		vis group: #newRow , row asString , #Caption.
		vis composTHERE_BE_DRAGONS_HERE
KeyNotFound: key #newRow4 not found in Dictionary
6 May 2019 9:14:40.035323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		aKey: 	#newRow4
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(nil nil nil nil nil #unionLabel->a RTGroup(a RTElement) #right-...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#newRow4
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(nil nil nil nil nil #unionLabel->a RTGroup(a RTElement) #right-...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#newRow4
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(nil nil nil nil nil #unionLabel->a RTGroup(a RTElement) #right-...etc...


Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#newRow4
	Receiver's instance variables: 
		tally: 	8
		array: 	an Array(nil nil nil nil nil #unionLabel->a RTGroup(a RTElement) #right-...etc...


RTComposer>>getGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#newRow4
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a ...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement a RTE...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


RTComposer>>removeGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#newRow4
		elements: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a ...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement a RTE...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


[ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
LILSparseMatrixVisualizer onRow: 1 in: self withView: vis view.
vis group: #leftRow.
LILSparseMatrixVisualizer onRow: 1 in: rightMatrix withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #nowProc below: #rightRow.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer nameGroup: #leftRow as: 'leftRow'.
vis composer nameGroup: #rightRow as: 'rightRow'.
vis composer groupToExisting: 'labels'.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		| newRowGroup |
		vis composer removeGroup: #leftRow.
		LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
		vis group: #leftRow.
		vis composer removeGroup: #rightRow.
		LILSparseMatrixVisualizer
			onRow: row
			in: rightMatrix
			withView: vis view.
		vis group: #rightRow.
		vis composer move: #leftRow below: #left.
		vis composer move: #rightRow below: #right.
		vis composer move: #nowProc below: #rightRow.
		vis composer move: #unionLabel between: #leftRow and: #rightRow.
		vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
		vis group: #labels.
		arr := (rows at: row) union: (rightMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel model: columnIndex.
				nowProcLabel update.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel model: 'none'.
		nowProcLabel update.
		vis delay wait.
		list := LinkedList new.
		newRowGroup := #newRow , row asString.
		arr
			do: [ :node | 
				list addLast: node.
				(vis composer hasGroup: newRowGroup)
					ifTrue: [ vis composer removeGroup: newRowGroup ].
				LILSparseMatrixVisualizer
					onLinkedList: list
					inRow: row
					withView: vis view.
				vis group: newRowGroup.
				vis composer move: newRowGroup onTheRightOf: #rightRow.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait ].
		list isEmpty
			ifFalse: [ | captionLabel |
				row = 1
					ifTrue: [ vis composer move: newRowGroup below: #result ]
					ifFalse: [ (row - 1 to: 1)
							detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
							ifFound:
								[ :previousRow | vis composer move: newRowGroup below: #newRow , previousRow asString ] ].
				captionLabel := (RTLabel
					text: Character arrowLeft asString , 'List for row ' , row asString)
					element.
				vis add: captionLabel.
				vis group: #newRow , row asString , #Caption.
				vis composer
					move: #newRow , row asString , #Caption
					onTheRightOf: newRowGroup ].
		vis composer view canvas focusOnCenterScaled.
		list ].
1 to: result rowNumber do: [ :rowIndex | 
	vis composer removeGroup: #newRow , rowIndex asString.
	vis composer removeGroup: #newRow , rowIndex asString , #Caption.
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis composer view canvas focusOnCenterScaled.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		rightMatrix: 	a LILSparseMatrix
		operationProcess: 	nil
		vis: 	a MatrixOperationVisualizer
		leftMatrixRow: 	nil
		rightMatrixRow: 	nil
		unionLabel: 	a RTElement
		nowProcLabel: 	a RTElement
		arr: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Linke...etc...
		list: 	a LinkedList()
		rowIndex: 	4
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
THERE_BE_DRAGONS_HERE
Halt
6 May 2019 9:41:10.332323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRowTHERE_BE_DRAGONS_HERE
Halt
6 May 2019 9:41:19.923323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
arr := (rows at: row) union: (rightMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
newRowGroup := #newRow , row asString.
arr
	do: [ :node | 
		list addLast: node.
		(vis composer hasGroup: newRowGroup)
			ifTrue: [ vis composer removeGroup: newRowGroup ].
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: newRowGroup.
		vis composer move: newRowGroup below: #nowProc.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
self halt.
list isEmpty
	ifFalse: [ | captionLabel |
		row = 1
			ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
			ifFalse: [ (row - 1 to: 1)
					detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
					ifFound:
						[ :previousRow | vis composer move: newRowGroup below: #newRow , previousRow asString ] ].
		captionLabel := (RTLabel
			text: Character arrowLeft asString , 'List for row ' , row asString)
			element.
		vis add: captionLabel.
		vis group: #newRow , row asString , #Caption.
		vis composer
			move: #newRow , row asString , #Caption
			onTheRightOf: newRTHERE_BE_DRAGONS_HERE
Halt
6 May 2019 9:41:30.624323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
arr := (rows at: row) union: (rightMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
newRowGroup := #newRow , row asString.
arr
	do: [ :node | 
		list addLast: node.
		(vis composer hasGroup: newRowGroup)
			ifTrue: [ vis composer removeGroup: newRowGroup ].
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: newRowGroup.
		vis composer move: newRowGroup below: #nowProc.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
self halt.
list isEmpty
	ifFalse: [ | captionLabel |
		row = 1
			ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
			ifFalse: [ (row - 1 to: 1)
					detTHERE_BE_DRAGONS_HERE
Halt
6 May 2019 9:54:06.959323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
arr := (rows at: row) union: (rightMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
newRowGroup := #newRow , row asString.
arr
	do: [ :node | 
		list addLast: node.
		(vis composer hasGroup: newRowGroup)
			ifTrue: [ vis composer removeGroup: newRowGroup ].
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: newRowGroup.
		vis composer move: newRowGroup below: #nowProc.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
list isEmpty
	ifFalse: [ | captionLabel |
		self halt.
		row = 1
			ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
			ifFalse: [ self
					withEscaper: [ :break | 
						(row - 1 to: 1)
							detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
							ifFound: [ :previousRow | 
								self halt.
								vis composer
									move: newRowGroup
									below: #newRow , previousRow asString.
								break value ] ] ].
		captionLabel := (RTLabel
			text: Character arrowLeft asString , 'List for row ' , row asString)
			element.
		vis add: captionLabel.
		vis group: #newRow , row asString , #Caption.
		vis composer
			move: #newRow , row asString , #Caption
			onTheRightOf: newRowGroup ].
vis composer view canvas focusOnCenterScaled.
list ] in [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
LILSparseMatrixVisualizer onRow: 1 in: self withView: vis view.
vis group: #leftRow.
LILSparseMatrixVisualizer onRow: 1 in: rightMatrix withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer nameGroup: #leftRow as: 'leftRow'.
vis composer nameGroup: #rightRow as: 'rightRow'.
vis composer groupToExisting: 'labels'.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		| newRowGroup |
		vis composer removeGroup: #leftRow.
		LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
		vis group: #leftRow.
		vis composer removeGroup: #rightRow.
		LILSparseMatrixVisualizer
			onRow: row
			in: rightMatrix
			withView: vis view.
		vis group: #rightRow.
		vis composer move: #leftRow below: #left.
		vis composer move: #rightRow below: #right.
		vis composer move: #unionLabel between: #leftRow and: #rightRow.
		vis composer move: #nowProc below: #unionLabel.
		vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
		vis group: #labels.
		arr := (rows at: row) union: (rightMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel model: columnIndex.
				nowProcLabel update.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel model: 'none'.
		nowProcLabel update.
		vis delay wait.
		list := LinkedList new.
		newRowGroup := #newRow , row asString.
		arr
			do: [ :node | 
				list addLast: node.
				(vis composer hasGroup: newRowGroup)
					ifTrue: [ vis composer removeGroup: newRowGroup ].
				LILSparseMatrixVisualizer
					onLinkedList: list
					inRow: row
					withView: vis view.
				vis group: newRowGroup.
				vis composer move: newRowGroup below: #nowProc.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait ].
		list isEmpty
			ifFalse: [ | captionLabel |
				self halt.
				row = 1
					ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
					ifFalse: [ self
							withEscaper: [ :break | 
								(row - 1 to: 1)
									detect: [ :rowIndex | vis compoTHERE_BE_DRAGONS_HERE
Halt
6 May 2019 9:54:23.857323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
arr := (rows at: row) union: (rightMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
newRowGroup := #newRow , row asString.
arr
	do: [ :node | 
		list addLast: node.
		(vis composer hasGroup: newRowGroup)
			ifTrue: [ vis composer removeGroup: newRowGroup ].
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: newRowGroup.
		vis composer move: newRowGroup below: #nowProc.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
list isEmpty
	ifFalse: [ | captionLabel |
		self halt.
		row = 1
			ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
			ifFalse: [ self
					withEscaper: [ :break | 
						(row - 1 to: 1)
							detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
							ifFound: [ :previousRow | 
								self halt.
								vis composer
									move: newRowGroup
									below: #newRow , previousRow asString.
								break value ] ] ].
		captionLabel := (RTLabel
			text: Character arrowLeft asString , 'List for row ' , row asString)
			element.
		vis add: captionLabel.
		vis group: #newRow , row asString , #Caption.
		vis composer
			move: #newRow , row asString , #Caption
			onTheRightOf: newRowGroup ].
vis composer view canvas focusOnCenterScaled.
list ] in THERE_BE_DRAGONS_HERE
Halt
6 May 2019 9:57:37.808323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
arr := (rows at: row) union: (rightMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
newRowGroup := #newRow , row asString.
arr
	do: [ :node | 
		list addLast: node.
		(vis composer hasGroup: newRowGroup)
			ifTrue: [ vis composer removeGroup: newRowGroup ].
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: newRowGroup.
		vis composer move: newRowGroup below: #nowProc.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
list isEmpty
	ifFalse: [ | captionLabel |
		self halt.
		row = 1
			ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
			ifFalse: [ self
					withEscaper: [ :break | 
						(row - 1 to: 1)
							detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
							ifFound: [ :previousRow | 
								self halt.
								vis composer
									move: newRowGroup
									below: #newRow , previousRow asString.
								break value ] ] ].
		self halt.
		captionLabel := (RTLabel
			text: Character arrowLeft asString , 'List for row ' , row asString)
			element.
		vis add: captionLabel.
		vis group: #newRow , row asString , #Caption.
		vis composer
			move: #newRow , row asString , #Caption
			onTheRightOf: newRowGroup ].
vis composer view canvas focusOnCenterScaled.
list ] in THERE_BE_DRAGONS_HERE
Halt
6 May 2019 9:57:48.610323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
arr := (rows at: row) union: (rightMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
newRowGroup := #newRow , row asString.
arr
	do: [ :node | 
		list addLast: node.
		(vis composer hasGroup: newRowGroup)
			ifTrue: [ vis composer removeGroup: newRowGroup ].
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: newRowGroup.
		vis composer move: newRowGroup below: #nowProc.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
list isEmpty
	ifFalse: [ | captionLabel |
		self halt.
		row = 1
			ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
			ifFalse: [ self
					withEscaper: [ :break | 
						(row - 1 to: 1)
							detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
							ifFound: [ :previousRow | 
								self halt.
								vis composer
									move: newRowGroup
									below: #newRow , previousRow asString.
								break value ] ] ].
		self halt.
		captionLabel := (RTLabel
			text: Character arrowLeft asString , 'List for row ' , row asString)
			element.
		vis add: captionLabel.
		vis group: #newRow , row asString , #Caption.
		vis composer
			move: #newRow , row asString , #Caption
			onTheRightOf: newRowGroup ].
vis composer view canvas focusOnCenterScaled.
list ] in [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
LILSparseMatrixVisualizer onRow: 1 in: self withView: vis view.
vis group: #leftRow.
LILSparseMatrixVisualizer onRow: 1 in: rightMatrix withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer nameGroup: #leftRow as: 'leftRow'.
vis composer nameGroup: #rightRow as: 'rightRow'.
vis composer groupToExisting: 'labels'.
vis namedGroups: #(#left #result #right #leftRow #rightRow).
vis backgroundGroups: #(#left #result #right #leftRow #rightRow).
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
vis update.
vis delay wait.
arr := (1 to: result rowNumber)
	collect: [ :row | 
		| newRowGroup |
		vis composer removeGroup: #leftRow.
		LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
		vis group: #leftRow.
		vis composer removeGroup: #rightRow.
		LILSparseMatrixVisualizer
			onRow: row
			in: rightMatrix
			withView: vis view.
		vis group: #rightRow.
		vis composer move: #leftRow below: #left.
		vis composer move: #rightRow below: #right.
		vis composer move: #unionLabel between: #leftRow and: #rightRow.
		vis composer move: #nowProc below: #unionLabel.
		vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
		vis group: #labels.
		arr := (rows at: row) union: (rightMatrix rows at: row).
		arr := (1 to: columnNumber)
			collect: [ :columnIndex | 
				nowProcLabel model: columnIndex.
				nowProcLabel update.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #leftRow.
				vis composer
					deselectUsing: [ :model | model column = (columnIndex - 1) ]
					inGroup: #rightRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #leftRow.
				vis composer
					selectUsing: [ :model | model column = columnIndex ]
					inGroup: #rightRow.
				vis delay wait.
				LILSparseMatrixNode
					column: columnIndex
					value:
						((arr select: [ :node | node column = columnIndex ])
							inject: 0
							into: [ :sum :element | sum + element value ]) ]
			thenReject: [ :node | node value = 0 ].
		"last column was not deselected"
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = columnNumber ]
			inGroup: #rightRow.
		nowProcLabel model: 'none'.
		nowProcLabel update.
		vis delay wait.
		list := LinkedList new.
		newRowGroup := #newRow , row asString.
		arr
			do: [ :node | 
				list addLast: node.
				(vis composer hasGroup: newRowGroup)
					ifTrue: [ vis composer removeGroup: newRowGroup ].
				LILSparseMatrixVisualizer
					onLinkedList: list
					inRow: row
					withView: vis view.
				vis group: newRowGroup.
				vis composer move: newRowGroup below: #nowProc.
				vis composer redrawNamesFor: vis namedGroups.
				vis composer redrawBackgroundsFor: vis backgroundGroups.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait ].
		list isEmpty
			ifFalse: [ | captionLabel |
				self halt.
				row = 1
					ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
					ifFalse: [ self
							withEscaper: [ :break | 
								(row - 1 to: 1)
									detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
									ifFound: [ :previousRow | 
										self halt.
										vis composer
											move: newRowGroup
											below: #newRow , previousRow asString.
										break value ] ] ].
				self halt.
				captionLabel := (RTLabel
					text: Character arrowLeft asString , 'List for row ' , row asString)
					element.
				vis add: captionLabel.
				vis group: #newRow , row asString , #Caption.
				vis composer
					move: #newRow , row asString , #Caption
					onTheRightOf: newRowGroup ].
		vis composer view canvas focusOnCenterScaled.
		list ].
vis composer removeGroup: #leftRow.
vis composer removeGroup: #rightRow.
vis composer removeGroup: #unionLabel.
vis composer removeGroup: #nowProc.
vis
	namedGroups: (vis namedGroups copyWithoutAll: #(#leftRow #rightRow)).
vis
	backgroundGroups: (vis backgroundGroups copyWithoutAll: #(#leftRow #rightRow)).
vis redrawNamesAndBackgrounds.
1 to: result rowNumber do: [ :rowIndex | 
	(vis composer hasGroup: #newRow , rowIndex asString)
		ifTrue: [ vis composer removeGroup: #newRow , rowIndex asString.
			vis composer removeGroup: #newRow , rowIndex asString , #Caption ].
	result rows at: rowIndex put: (arr at: rowIndex).
	vis updateResultWith: result.
	vis composer view canvas focusOnCenterScaled.
	vis delay wait ] ] in LILSparseMatrix>>addAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Halt
6 May 2019 9:58:01.751323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrix(Object)>>halt
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ :row | 
| newRowGroup |
vis composer removeGroup: #leftRow.
LILSparseMatrixVisualizer onRow: row in: self withView: vis view.
vis group: #leftRow.
vis composer removeGroup: #rightRow.
LILSparseMatrixVisualizer
	onRow: row
	in: rightMatrix
	withView: vis view.
vis group: #rightRow.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composer move: #nowProc below: #unionLabel.
vis composer redrawNamesAndBackgroundsFor: vis namedGroups.
vis group: #labels.
arr := (rows at: row) union: (rightMatrix rows at: row).
arr := (1 to: columnNumber)
	collect: [ :columnIndex | 
		nowProcLabel model: columnIndex.
		nowProcLabel update.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #leftRow.
		vis composer
			deselectUsing: [ :model | model column = (columnIndex - 1) ]
			inGroup: #rightRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #leftRow.
		vis composer
			selectUsing: [ :model | model column = columnIndex ]
			inGroup: #rightRow.
		vis delay wait.
		LILSparseMatrixNode
			column: columnIndex
			value:
				((arr select: [ :node | node column = columnIndex ])
					inject: 0
					into: [ :sum :element | sum + element value ]) ]
	thenReject: [ :node | node value = 0 ].
"last column was not deselected"
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #leftRow.
vis composer
	deselectUsing: [ :model | model column = columnNumber ]
	inGroup: #rightRow.
nowProcLabel model: 'none'.
nowProcLabel update.
vis delay wait.
list := LinkedList new.
newRowGroup := #newRow , row asString.
arr
	do: [ :node | 
		list addLast: node.
		(vis composer hasGroup: newRowGroup)
			ifTrue: [ vis composer removeGroup: newRowGroup ].
		LILSparseMatrixVisualizer
			onLinkedList: list
			inRow: row
			withView: vis view.
		vis group: newRowGroup.
		vis composer move: newRowGroup below: #nowProc.
		vis composer redrawNamesFor: vis namedGroups.
		vis composer redrawBackgroundsFor: vis backgroundGroups.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
list isEmpty
	ifFalse: [ | captionLabel |
		self halt.
		row = 1
			ifTrue: [ vis composer move: newRowGroup onTheRightBelowOf: #result ]
			ifFalse: [ self
					withEscaper: [ :break | 
						(row - 1 to: 1)
							detect: [ :rowIndex | vis composer hasGroup: #newRow , rowIndex asString ]
							ifFound: [ :previousRow | 
								self halt.
								vis composer
									move: newRowGroup
									below: #newRow , previousRow asString.
								break value ] ] ].
		self halt.
		captionLabel := (RTLabel
			text: Character arrowLeft asString , 'List for row ' , row asString)
			element.
		vis add: captionLabel.
		vis group: #newRow , row asString , #Caption.
		vis composer
			move: #newRow , row asString , #Caption
			onTheRightOf: newRowGroup ].
vis composer view canvas focusOnCenterScaled.
list ] in [ | unionLabel nowProcLabel |
unionLabel := (RTLabel text: 'U') element.
vis add: unionLabel.
vis group: #unionLabel.
LILSparseMatrixVisualizer onRow: 1 in: self withView: vis view.
vis group: #leftRow.
LILSparseMatrixVisualizer onRow: 1 in: rightMatrix withView: vis view.
vis group: #rightRow.
nowProcLabel := (RTLabel
	text: [ :col | 'Processing column ' , col asString ]) elementOn: 0.
vis add: nowProcLabel.
vis group: #nowProc.
vis composer move: #leftRow below: #left.
vis composer move: #rightRow below: #right.
vis composer move: #unionLabel between: #leftRow and: #rightRow.
vis composeTHERE_BE_DRAGONS_HERE

6 May 2019 11:38:50.636323 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@1741)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@1741)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@1741)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@1741)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@1741)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@1741)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@1741)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@1741)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(224577024)
	Receiver's instance variables: 
		bounds: 	(1099@492.0) corner: (1115@508.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1099@492) mouseOver 127492156 nil]
		targetOffset: 	(468.0@876.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 127492156 1099 492 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1099@492.0) corner: (1115@508.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1099@492) mouseOver 127492156 nil]
		targetOffset: 	(468.0@876.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 127492156 1099 492 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(628388864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(628388864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(628388864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	13801330
		lastStepMessage: 	nil
		lastCycleTime: 	13801355
		alarms: 	a Heap()
		lastAlarmTime: 	13801330
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

7 May 2019 12:06:04.897323 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2140)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@2140)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2140)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@2140)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2140)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@2140)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2140)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@2140)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(224577024)
	Receiver's instance variables: 
		bounds: 	(1045@535.0) corner: (1061@551.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1045@535) mouseOver 129126390 nil]
		targetOffset: 	(57@1898)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 129126390 1046 535 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1045@535.0) corner: (1061@551.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1045@535) mouseOver 129126390 nil]
		targetOffset: 	(57@1898)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 129126390 1046 535 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(628388864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(628388864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(628388864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	15435603
		lastStepMessage: 	nil
		lastCycleTime: 	15435650
		alarms: 	a Heap()
		lastAlarmTime: 	15435603
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

7 May 2019 12:07:03.712323 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2140)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@2140)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2140)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@2140)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2140)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@2140)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(224577024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2140)
		owner: 	a TransformWithLayoutMorph(264875520)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745517824) a RubCursor(247267584...etc...
		fullBounds: 	(0@0) corner: (777@2140)
		color: 	Color transparent
		extension: 	a MorphExtension (851036160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(30068992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(247267584)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(224577024)
	Receiver's instance variables: 
		bounds: 	(733@115.0) corner: (749@131.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(733@115) mouseOver CTRL 129185687 nil]
		targetOffset: 	(13.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 129185687 733 114 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(733@115.0) corner: (749@131.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(733@115) mouseOver CTRL 129185687 nil]
		targetOffset: 	(13.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 129185687 733 114 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(628388864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(628388864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(628388864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	15494431
		lastStepMessage: 	nil
		lastCycleTime: 	15494469
		alarms: 	a Heap()
		lastAlarmTime: 	15494431
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-06T19:48:48.695323+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of LILSparseMatrixNode did not understand #row
7 May 2019 4:20:46.202856 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrixNode(Object)>>doesNotUnderstand: #row
	Receiver: a LILSparseMatrixNode
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: LILSparseMatrixNode>>row
		resumeValue: 	nil
	Receiver's instance variables: 
		column: 	nil
		value: 	nil


[ :el | el row @ el column ] in LILSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScaled:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		scale: 	5
		comp: 	nil
		box: 	nil
		valueLabel: 	nil
		indexLabel: 	nil
		el: 	a LILSparseMatrixNode
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | el row @ el column ]
	Arguments and temporary variables: 
		valueOrArray: 	a LILSparseMatrixNode
	Receiver's instance variables: 
		outerContext: 	LILSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScale...etc...
		startpc: 	212
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :el | el row @ el column ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	55
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


RTLabel>>trachelShapeFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		c: 	Color white
		txt: 	nil
		lines: 	nil
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTLabel (0@50))
		shapeIndex: 	3
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection(an Array(a TRBoxShape (0@0)) an Array(a TRL...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables:THERE_BE_DRAGONS_HERE
Instance of MatrixOperationVisualizer did not understand #groupToExisting:
7 May 2019 4:29:09.266856 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer(Object)>>doesNotUnderstand: #groupToExisting:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		aMessage: 	groupToExisting: #labels
		exception: 	MessageNotUnderstood: MatrixOperationVisualizer>>groupToExisting:
		resumeValue: 	nil
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


LILSparseMatrix>>byMatrixAnimated:delay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		captionLabel: 	nil
		newRowGroup: 	nil
		cachedRightColumn: 	nil
		list: 	nil
		cachedLeftRow: 	nil
		sum: 	nil
		arr: 	nil
		index: 	nil
		aLILSparseMatrix: 	a LILSparseMatrix
		delay: 	1
		result: 	a LILSparseMatrix
		other: 	a LILSparseMatrix
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement
		nowProcessingElementIndex: 	a RTElement
		newElementValue: 	a RTElement
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


LILSparseMatrixOperationVisualizer class>>exampleMultiplication
	Receiver: LILSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		col: 	#(#(1 -1 0 0) #(0 3 0 0) #(1 0 2 1) #(0 0 0 0))
		coo: 	a LILSparseMatrix
	Receiver's instance variables: 
		superclass: 	MatrixOperationVisualizer
		methodDict: 	a MethodDictionary(#initialize->LILSparseMatrixOperationVisualizer>...etc...
		format: 	65555
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LILSparseMatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ LILSparseMatrixOperationVisualizer exampleMultiplication
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(21663232)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(21663232)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(309547264)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(21663232)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (711@31)
		owner: 	a TransformWithLayoutMorph(97881856)
		submorphs: 	an Array(a RubCursor(252899328) a RubPrimarySelectionMorph(517418496...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612899840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(922923776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(252899328)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(604713216))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(464@207)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(309547264)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	2063788
		lastStepMessage: 	nil
		lastCycleTime: 	2063851
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(252899328)))
		lastAlarmTime: 	2063788
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	THERE_BE_DRAGONS_HERE
Instance of MatrixOperationVisualizer did not understand #move:above:
7 May 2019 4:57:02.652856 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer(Object)>>doesNotUnderstand: #move:above:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		aMessage: 	move: #newRow1 above: #nowProcessing
		exception: 	MessageNotUnderstood: MatrixOperationVisualizer>>move:above:
		resumeValue: 	nil
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatriTHERE_BE_DRAGONS_HERE
Instance of MatrixElement class did not understand #row:column:value:source:
7 May 2019 5:18:10.935856 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixElement class(Object)>>doesNotUnderstand: #row:column:value:source:
	Receiver: MatrixElement
	Arguments and temporary variables: 
		aMessage: 	row: 1 column: 1 value: 1 source: a LILSparseMatrixNode
		exception: 	MessageNotUnderstood: MatrixElement class>>row:column:value:source:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#column->MatrixElement>>#column #next->MatrixEle...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#MatrixElement
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


[ :el :ind | 
MatrixElement
	row: rowIndex
	column: el column
	value: el value
	source: el ] in [ :head :rowIndex | 
result := OrderedCollection
	with: (MatrixElement row: rowIndex column: 0 value: nil).
result
	addAll:
		(head asOrderedCollection
			collectWithIndex: [ :el :ind | 
				MatrixElement
					row: rowIndex
					column: el column
					value: el value
					source: el ]).
result
	withIndexDo: [ :el :ind | 
		ind % result size = 0
			ifFalse: [ el next: (result at: ind + 1) ] ].
result ] in LILSparseMatrix>>elementsAsCollection
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		result: 	an OrderedCollection(a MatrixElement)
		head: 	a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode)
		rowIndex: 	1
		el: 	a LILSparseMatrixNode
		ind: 	1
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(a LILSparseMatrixNode a LILSparseMatrixNode)
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :el :ind | 
MatrixElement
	row: rowIndex
	column: el co...etc...
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a LILSparseMatrixNode a LILSparseMatrixNode)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(a LILSparseMatrixNode a LILSparseMatrixNode)
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :el :ind | 
MatrixElement
	row: rowIndex
	column: el co...etc...
	Receiver's instance variables: 
		array: 	an Array(a LILSparseMatrixNode a LILSparseMatrixNode)
		firstIndex: 	1
		lastIndex: 	2


[ :head :rowIndex | 
result := OrderedCollection
	with: (MatrixElement row: rowIndex column: 0 value: nil).
result
	addAll:
		(head asOrderedCollection
			collectWithIndex: [ :el :ind | 
				MatrixElement
					row: rowIndex
					column: el column
					value: el value
					source: el ]).
result
	withIndexDo: [ :el :ind | 
		ind % result size = 0
			ifFalse: [ el next: (result at: ind + 1) ] ].
result ] in LILSparseMatrix>>elementsAsCollection
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		result: 	an OrderedCollection(a MatrixElement)
		head: 	a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode)
		rowIndex: 	1
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


Array(SequenceableCollection)>>withIndexCollect:
	Receiver: an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a LinkedList(a LILSpars...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :head :rowIndex | 
result := OrderedCollection
	with: (...etc...
		result: 	#(nil nil nil nil)
		index: 	1
	Receiver's instance variables: 
an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a LinkedList(a LILSpars...etc...

Array(SequenceableCollection)>>collectWithIndex:
	Receiver: an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a LinkedList(a LILSpars...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :head :rowIndex | 
result := OrderedCollection
	with: (...etc...
	Receiver's instance variables: 
an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a LinkedList(a LILSpars...etc...

LILSparseMatrix>>elementsAsCollection
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		result: 	an OrderedCollection(a MatrixElement)
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


LILSparseMatrixVisualizer>>on:
	Receiver: a LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		elementShape: 	a RTCompositeShape
		headerShape: 	a RTCompositeShape
		elements: 	nil
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


LILSparseMatrixVisualizer class>>on:withView:
	Receiver: LILSparseMatrixVisualizer
	Arguments and temporary variables: 
		aLILSparseMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	MatrixVisualizer
		methodDict: 	a MethodDictionary(#drawEdgesWith:->LILSparseMatrixVisualizer>>#dra...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LILSparseMatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name substrings: '#') first"
(aMatrix isKindOf: subclass getVisualizedClass)
	ifTrue: [ ^ subclass on: aMatrix withView: aView ] ] in MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	a LILSparseMatrix
		aView: 	a RTView
		subclass: 	LILSparseMatrixVisualizer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


Array(SequenceableCollection)>>do:
	Receiver: {COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}
	Arguments and temporary variables: 
		aBlock: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) ...etc...
		index: 	2
	Receiver's instance variables: 
{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}

MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	a LILSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


MatrixOperationVisualizer>>getComposedViewOf:with:result:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a LILSparseMatrix
		right: 	a LILSparseMatrix
		result: 	a LILSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderTHERE_BE_DRAGONS_HERE
Instance of TWSparseMatrix did not understand #addAnimated:delay:
8 May 2019 2:15:11.357196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWSparseMatrix(Object)>>doesNotUnderstand: #addAnimated:delay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		aMessage: 	addAnimated: (1 0 0 3
0 0 0 -1
0 0 0 0
0 0 1 0
) delay: 1
		exception: 	MessageNotUndTHERE_BE_DRAGONS_HERE
Instance of False did not understand #>
8 May 2019 2:15:37.976196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

False(Object)>>doesNotUnderstand: #>
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	> 0
		exception: 	MessageNotUnderstood: False>>>
		resumeValue: 	nil
	Receiver's instance variables: 
false

TWMatrixNode class>>row:column:value:
	Receiver: TWMatrixNode
	Arguments and temporary variables: 
		rowNumber: 	0
		columnNumber: 	0
		aValue: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#belowNeighbour->TWMatrixNode>>#belowNeighbour #...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWMatrixNode
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


TWSparseMatrix>>addAnimated:delay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		rightRowMarker: 	nil
		tail: 	nil
		rowNumbers: 	nil
		leftRowMarker: 	nil
		colNumbers: 	nil
		colLast: 	nil
		aMatrix: 	(1 0 0 3
0 0 0 -1
0 0 0 0
0 0 1 0
)
		delay: 	1
		result: 	(0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
)
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil
		nowProcessingElementIndex: 	nil
	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


TWSparseMatrixOperationVisualizer class>>exampleAddition
	Receiver: TWSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		col: 	#(#(1 -1 0 0) #(0 3 0 0) #(1 0 2 1) #(0 0 0 0))
		col2: 	#(#(1 0 0 3) #(0 0 0 -1) #(0 0 0 0) #(0 0 1 0))
		coo: 	(1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
		coo2: 	(1 0 0 3
0 0 0 -1
0 0 0 0
0 0 1 0
)
	Receiver's instance variables: 
		superclass: 	MatrixOperationVisualizer
		methodDict: 	a MethodDictionary(#initialize->TWSparseMatrixOperationVisualizer>>...etc...
		format: 	65555
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWSparseMatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ TWSparseMatrixOperationVisualizer exampleAddition
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(920632320)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1225@31)
		owner: 	a TransformWithLayoutMorph(451483136)
		submorphs: 	an Array(a RubCursor(507751936) a RubPrimarySelectionMorph(764277760...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (43409408) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(331248640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(507751936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(514986496))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	5577527
		lastStepMessage: 	nil
		lastCycleTime: 	5577572
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	5577527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	5577527
		lastStepMessage: 	nil
		lastCycleTime: 	5577572
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	5577527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromTHERE_BE_DRAGONS_HERE
DomainError: Indices must be a positive value
8 May 2019 2:17:15.820196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWMatrixNode class>>row:column:value:
	Receiver: TWMatrixNode
	Arguments and temporary variables: 
		rowNumber: 	0
		columnNumber: 	0
		aValue: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#belowNeighbour->TWMatrixNode>>#belowNeighbour #...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWMatrixNode
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


TWSparseMatrix>>addAnimated:delay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		rightRowMarker: 	nil
		tail: 	nil
		rowNumbers: 	nil
		leftRowMarker: 	nil
		colNumbers: 	nil
		colLast: 	nil
		aMatrix: 	(1 0 0 3
0 0 0 -1
0 0 0 0
0 0 1 0
)
		delay: 	1
		result: 	(0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
)
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil
		nowProcessingElementIndex: 	nil
	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


TWSparseMatrixOperationVisualizer class>>exampleAddition
	Receiver: TWSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		col: 	#(#(1 -1 0 0) #(0 3 0 0) #(1 0 2 1) #(0 0 0 0))
		col2: 	#(#(1 0 0 3) #(0 0 0 -1) #(0 0 0 0) #(0 0 1 0))
		coo: 	(1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
		coo2: 	(1 0 0 3
0 0 0 -1
0 0 0 0
0 0 1 0
)
	Receiver's instance variables: 
		superclass: 	MatrixOperationVisualizer
		methodDict: 	a MethodDictionary(#initialize->TWSparseMatrixOperationVisualizer>>...etc...
		format: 	65555
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWSparseMatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ TWSparseMatrixOperationVisualizer exampleAddition
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(920632320)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1225@31)
		owner: 	a TransformWithLayoutMorph(451483136)
		submorphs: 	an Array(a RubCursor(507751936) a RubPrimarySelectionMorph(764277760...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (43409408) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(331248640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(507751936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(223402496))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	5675373
		lastStepMessage: 	nil
		lastCycleTime: 	5675412
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	5675373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	5675373
		lastStepMessage: 	nil
		lastCycleTime: 	5675412
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	5675373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	5675373
		lastStepMessage: 	nil
		lastCycleTime: 	5675412
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	5675373
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #resume
8 May 2019 2:21:15.616196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

BlockClosure(Object)>>doesNotUnderstand: #resume
	Receiver: [ rowNumbers := ((rows
	reject: [ :rowHead | rowHead rightNeighbour isNil ])
	collect: [ :...etc...
	Arguments and temporary variables: 
		aMessage: 	resume
		exception: 	MessageNotUnderstood: BlockClosure>>resume
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	TWSparseMatrix>>addAnimated:delay:
		startpc: 	949
		numArgs: 	0


[ operationProcess resume ] in MatrixOperationVisualizer>>setUpMenuWithProcess:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		operationProcess: 	[ rowNumbers := ((rows
	reject: [ :rowHead | rowHead rightNei...etc...
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


[ :event | aBlock value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
		aTitle: 	'Resume'
		aBlock: 	[ operationProcess resume ]
		lbl: 	nil
		index: 	nil
		event: 	a TRMouseLeftClick
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRRounde...etc...
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape a TRLabelShape)...etc...
		extent: 	(659.0@643.0)
		animations: 	an OrderedCollection()
		morph: 	a TRMorph(128447488)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color white
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRWhiteSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :event | aBlock value ]
	Arguments and temporary variables: 
		anArg: 	a TRMouseLeftClick
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :event | aBlock value ]
	Arguments and temporary variables: 
		firstArg: 	a TRMouseLeftClick
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a TRMouseLeftClick
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :event | aBlock value ]


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #resume
[ operationProcess resume ] in MatrixOperationVisualizer>>setUpMenuWithProcess:
[ :event | aBlock value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack foTHERE_BE_DRAGONS_HERE
Halt
8 May 2019 2:23:00.115196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWSparseMatrix(Object)>>halt
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
computation has been terminated
8 May 2019 2:51:19.468196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Context>>cannotReturn:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		result: 	a Process in nil
	Receiver's instance variables: 
		sender: 	nil
		pc: 	nil
		stackp: 	7
		method: 	Process>>#terminate
		closureOrNil: 	nil
		receiver: 	a Process in nil


Process>>terminate
	Receiver: a Process in nil
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	nil
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil



--- The full stack ---
Context>>cannotReturn:
Process>>terminate
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
computation has been terminated
8 May 2019 2:51:23.027196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Context>>cannotReturn:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		result: 	a Process in nil
	Receiver's instance variables: 
		sender: 	nil
		pc: 	nil
		stackp: 	7
		method: 	Process>>#terminate
		closureOrNil: 	nil
		receiver: 	a Process in nil


Process>>terminate
	Receiver: a Process in nil
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	nil
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil



--- The full stack ---
Context>>cannotReturn:
Process>>terminate
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
computation has been terminated
8 May 2019 2:51:23.812196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Context>>cannotReturn:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		result: 	a Process in nil
	Receiver's instance variables: 
		sender: 	nil
		pc: 	nil
		stackp: 	7
		method: 	Process>>#terminate
		closureOrNil: 	nil
		receiver: 	a Process in nil


Process>>terminate
	Receiver: a Process in nil
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	nil
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil



--- The full stack ---
Context>>cannotReturn:
Process>>terminate
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
8 May 2019 3:01:57.444196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWSparseMatrix(Object)>>halt
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


[ "rowNumbers, colNumbers - indices which exist"
rowNumbers := ((rows
	reject: [ :rowHead | rowHead rightNeighbour isNil ])
	collect: [ :rowHead | rowHead row ])
	union:
		((aMatrix rows reject: [ :rowHead | rowHead rightNeighbour isNil ])
			collect: [ :rowHead | rowHead row ]).
colNumbers := ((columns
	reject: [ :colHead | colHead belowNeighbour isNil ])
	collect: [ :colHead | colHead column ])
	union:
		((aMatrix columns reject: [ :colHead | colHead belowNeighbour isNil ])
			collect: [ :colHead | colHead column ]).
self halt.
"gray out rows which are empty"
((1 to: self rowsNumber) copyWithoutAll: rowNumbers)
	do: [ :rowIndex | 
		| backgroundBoxLeft backgroundBoxRight outterGap |
		outterGap := 5 @ 5.
		backgroundBoxLeft := TRRoundedBoxShape new.
		backgroundBoxLeft color: (Color gray alpha: 0.5).
		backgroundBoxLeft strokeWidth: 0.
		backgroundBoxLeft borderRadius: 5.
		"check if the copy actually returns a new shape since it matters it the view"
		backgroundBoxRight := backgroundBoxLeft copy.
		backgroundBoxLeft
			translateTo:
				(vis composer getGroup: #left) center x
					@ (vis view elementFromModel: (rows at: rowIndex)) center y.
		backgroundBoxLeft
			extent:
				(vis composer getGroup: #left) extent x
					@ (vis view elementFromModel: (rows at: rowIndex)) extent y
					+ outterGap.
		backgroundBoxRight
			translateTo:
				(vis composer getGroup: #right) center x
					@ (vis view elementFromModel: (aMatrix rows at: rowIndex)) center y.
		backgroundBoxRight
			extent:
				(vis composer getGroup: #right) extent x
					@ (vis view elementFromModel: (aMatrix rows at: rowIndex)) extent y
					+ outterGap.
		vis view canvas addShape: backgroundBoxLeft.
		vis view canvas addShape: backgroundBoxRight.
		(vis composer hasGroup: #shade)
			ifTrue: [ vis composer groupToExisting: #shade ]
			ifFalse: [ vis group: #shade ] ].
"gray out empty columns"
((1 to: self columnsNumber) copyWithoutAll: colNumbers)
	do: [ :rowIndex | 
		| backgroundBoxLeft backgroundBoxRight outterGap |
		outterGap := 5 @ 5.
		backgroundBoxLeft := TRRoundedBoxShape new.
		backgroundBoxLeft color: (Color gray alpha: 0.5).
		backgroundBoxLeft strokeWidth: 0.
		backgroundBoxLeft borderRadius: 5.
		backgroundBoxRight := backgroundBoxLeft copy.
		backgroundBoxLeft
			translateTo:
				(vis view elementFromModel: (rows at: rowIndex)) center x
					@ (vis composer getGroup: #left) center y.
		backgroundBoxLeft
			extent:
				(vis view elementFromModel: (rows at: rowIndex)) extent x
					@ (vis composer getGroup: #left) extent y + outterGap.
		backgroundBoxRight
			translateTo:
				(vis view elementFromModel: (aMatrix rows at: rowIndex)) center x
					@ (vis composer getGroup: #right) center y.
		backgroundBoxRight
			extent:
				(vis view elementFromModel: (aMatrix rows at: rowIndex)) extent x
					@ (vis composer getGroup:THERE_BE_DRAGONS_HERE
Halt
8 May 2019 3:08:27.397196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWSparseMatrix(Object)>>halt
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


[ "rowNumbers, colNumbers - indices which exist"
rowNumbers := ((rows
	reject: [ :rowHead | rowHead rightNeighbour ~= rowHead ])
	collect: [ :rowHead | rowHead row ])
	union:
		((aMatrix rows
			reject: [ :rowHead | rowHead rightNeighbour ~= rowHead ])
			collect: [ :rowHead | rowHead row ]).
colNumbers := ((columns
	reject: [ :colHead | colHead belowNeighbour ~= colHead ])
	collect: [ :colHead | colHead column ])
	union:
		((aMatrix columns
			reject: [ :colHead | colHead belowNeighbour ~= colHead ])
			collect: [ :colHead | colHead column ]).
self halt.
"gray out rows which are empty"
((1 to: self rowsNumber) copyWithoutAll: rowNumbers)
	do: [ :rowIndex | 
		| backgroundBoxLeft backgroundBoxRight outterGap |
		outterGap := 5 @ 5.
		backgroundBoxLeft := TRRoundedBoxShape new.
		backgroundBoxLeft color: (Color gray alpha: 0.5).
		backgroundBoxLeft strokeWidth: 0.
		backgroundBoxLeft borderRadius: 5.
		"check if the copy actually returns a new shape since it matters it the view"
		backgroundBoxRight := backgroundBoxLeft copy.
		backgroundBoxLeft
			translateTo:
				(vis composer getGroup: #left) center x
					@ (vis view elementFromModel: (rows at: rowIndex)) center y.
		backgroundBoxLeft
			extent:
				(vis composer getGroup: #left) extent x
					@ (vis view elementFromModel: (rows at: rowIndex)) extent y
					+ outterGap.
		backgroundBoxRight
			translateTo:
				(vis composer getGroup: #right) center x
					@ (vis view elementFromModel: (aMatrix rows at: rowIndex)) center y.
		backgroundBoxRight
			extent:
				(vis composer getGroup: #right) extent x
					@ (vis view elementFromModel: (aMatrix rows at: rowIndex)) extent y
					+ outterGap.
		vis view canvas addShape: backgroundBoxLeft.
		vis view canvas addShape: backgroundBoxRight.
		(vis composer hasGroup: #shade)
			ifTrue: [ vis composer groupToExisting: #shade ]
			ifFalse: [ vis group: #shade ] ].
"gray out empty columns"
((1 to: self columnsNumber) copyWithoutAll: colNumbers)
	do: [ :rowIndex | 
		| backgroundBoxLeft backgroundBoxRight outterGap |
		outterGap := 5 @ 5.
		backgroundBoxLeft := TRRoundedBoxShape new.
		backgroundBoxLeft color: (Color gray alpha: 0.5).
		backgroundBoxLeft strokeWidth: 0.
		backgroundBoxLeft borderRadius: 5.
		backgroundBoxRight := backgroundBoxLeft copy.
		backgroundBoxLeft
			translateTo:
				(vis view elementFromModel: (rows at: rowIndex)) center x
					@ (vis composer getGroup: #left) center y.
		backgroundBoxLeft
			extent:
				(vis view elementFromModel: (rows at: rowIndex)) extent x
					@ (vis composer getGroup: #left) extent y + outterGap.
		backgroundBoxRight
			translateTo:
				(vis view elementFromModel: (aMatrix rows at: rowIndex)) center x
					@ (vis composer getGroup: #right) center y.
		backgroundBoxRight
			extent:
				(vis view elementFromModel: (aMatrix rowsTHERE_BE_DRAGONS_HERE
Halt
8 May 2019 3:11:46.446196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWSparseMatrix(Object)>>halt
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


[ "rowNumbers, colNumbers - indices which exist"
rowNumbers := ((rows
	reject: [ :rowHead | rowHead rightNeighbour = rowHead ])
	collect: [ :rowHead | rowHead row ])
	union:
		((aMatrix rows reject: [ :rowHead | rowHead rightNeighbour = rowHead ])
			collect: [ :rowHead | rowHead row ]).
colNumbers := ((columns
	reject: [ :colHead | colHead belowNeighbour = colHead ])
	collect: [ :colHead | colHead column ])
	union:
		((aMatrix columns
			reject: [ :colHead | colHead belowNeighbour = colHead ])
			collect: [ :colHead | colHead column ]).
self halt.
"gray out rows which are empty"
((1 to: self rowsNumber) copyWithoutAll: rowNumbers)
	do: [ :rowIndex | 
		| backgroundBoxLeft backgroundBoxRight outterGap |
		outterGap := 5 @ 5.
		backgroundBoxLeft := TRRoundedBoxShape new.
		backgroundBoxLeft color: (Color gray alpha: 0.5).
		backgroundBoxLeft strokeWidth: 0.
		backgroundBoxLeft borderRadius: 5.
		"check if the copy actually returns a new shape since it matters it the view"
		backgroundBoxRight := backgroundBoxLeft copy.
		backgroundBoxLeft
			translateTo:
				(vis composer getGroup: #left) center x
					@ (vis view elementFromModel: (rows at: rowIndex)) center y.
		backgroundBoxLeft
			extent:
				(vis composer getGroup: #left) extent x
					@ (vis view elementFromModel: (rows at: rowIndex)) extent y
					+ outterGap.
		backgroundBoxRight
			translateTo:
				(vis composer getGroup: #right) center x
					@ (vis view elementFromModel: (aMatrix rows at: rowIndex)) center y.
		backgroundBoxRight
			extent:
				(vis composer getGroup: #right) extent x
					@ (vis view elementFromModel: (aMatrix rows at: rowIndex)) extent y
					+ outterGap.
		vis view caTHERE_BE_DRAGONS_HERE
Halt
8 May 2019 3:14:14.110196 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWSparseMatrix(Object)>>halt
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


[ "rowNumbers, colNumbers - indices which exist"
rowNumbers := ((rows
	reject: [ :rowHead | rowHead rightNeighbour = rowHead ])
	collect: [ :rowHead | rowHead row ])
	union:
		((aMatrix rows reject: [ :rowHead | rowHead rightNeighbour = rowHead ])
			collect: [ :rowHead | rowHead row ]).
colNumbers := ((columns
	reject: [ :colHead | colHead belowNeighbour = colHead ])
	collect: [ :colHead | colHead column ])
	union:
		((aMatrix columns
			reject: [ :colHead | colHead belowNeighbour = colHead ])
			collect: [ :colHead | colHead column ]).
self halt.
"gray out rows which are empty"
((1 to: self rowsNumber) copyWithoutAll: rowNumbers)
	do: [ :rowIndex | 
		| backgroundBoxLeft backgroundBoxRight outterGap |
		outterGap := 5 @ 5.
		backgroundBoxLeft := TRRoundedBoxShape new.
		backgroundBoxLeft color: (Color gray alpha: 0.5).
		backgroundBoxLeft strokeWidth: 0.
		backgroundBoxLeft borderRadius: 5.
		backgroundBoxLeft
			translateTo:
				(vis composer getGroup: #left) center x
					@ (vis view elementFromModel: (rows at: rowIndex)) center y.
		backgroundBoxLeft
			extent:
				(vis composer getGroup: #left) extent x
					@ (vis view elementFromModel: (rows at: rowIndex)) extent y
					+ outterGap.
		backgroundBoxRight := TRRoundedBoxShape new.
		backgroundBoxRight color: (Color gray alpha: 0.5).
		backgroundBoxRight strokeWidth: 0.
		backgroundBoxRight borderRadius: 5.
		backgroundBoxRight
			translateTo:
				(vis composer getGroup: #right) center x
					@ (vis view elementFromModel: (aMatrix rows at: rowIndex)) center y.
		backgroundBoxRight
			extent:
				(vis composer getGroup: #right) extent x
					@ (vis view elementFromModel: (aMatrix rows at: rowIndex)) extent y
					+ outterGap.
		vis view canvas addShape: backgroundBoxLeft.
		vis view canvas addShape: backgroundBoxRight.
		(vis composer hasGroup: #shade)
			ifTrue: [ vis composer groupToExisting: #shade ]
			ifFalse: [ vis group: #shade ] ].
"gray out empty columns"
((1 to: self columnsNumber) copyWithoutAll: colNumbers)
	do: [ :rowIndex | 
		| backgrounTHERE_BE_DRAGONS_HERE
NotFound: Object not found - no match for id (43dfa7171111eeed2e0765e209f359dbd051d82e)
8 May 2019 10:18:05.031493 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceLibgitErrorVisitor>>visitENOTFOUND:
	Receiver: an IceLibgitErrorVisitor
	Arguments and temporary variables: 
		anError: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111ee...etc...
	Receiver's instance variables: 
		context: 	IceLibgitRepository(SparseMatrix)


LGit_GIT_ENOTFOUND>>acceptError:
	Receiver: LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111eeed2e0765e209f359dbd0...etc...
	Arguments and temporary variables: 
		aVisitor: 	an IceLibgitErrorVisitor
	Receiver's instance variables: 
		messageText: 	'Object not found - no match for id (43dfa7171111eeed2e0765e209f35...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_odb [9])


[ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ] in IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
		error: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111eeed...etc...
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#8 8/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


BlockClosure>>cull:
	Receiver: [ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ]
	Arguments and temporary variables: 
		anArg: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111eeed...etc...
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>handleLibgitError:
		startpc: 	71
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111...etc...
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]


LGit_GIT_ENOTFOUND(Exception)>>signal
	Receiver: LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111eeed2e0765e209f359dbd0...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Object not found - no match for id (43dfa7171111eeed2e0765e209f35...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_odb [9])


LGit_GIT_ENOTFOUND class(LGitCallReturnHandler class)>>signalWith:
	Receiver: LGit_GIT_ENOTFOUND
	Arguments and temporary variables: 
		anError: 	a LGitError ()
	Receiver's instance variables: 
		superclass: 	LGitCallReturnHandler
		methodDict: 	a MethodDictionary(#acceptError:->LGit_GIT_ENOTFOUND>>#acceptError:...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LGit_GIT_ENOTFOUND
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-Exceptions-ReturnCodes'


LGitReturnCodeEnum>>handleLGitReturnCode
	Receiver: a LGitReturnCodeEnum(#git_enotfound [-3])
	Arguments and temporary variables: 
		handler: 	LGit_GIT_ENOTFOUND
	Receiver's instance variables: 
		value: 	-3


LGitCommit(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitCommit (<not initialized>)
	Arguments and temporary variables: 
		callBlock: 	[ self commit_lookup: self repo: self repository id: self id ]
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		id: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')


LGitCommit>>lookup
	Receiver: a LGitCommit (<not initialized>)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		id: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')


LGitCommit(LGitObject)>>initializeWithId:
	Receiver: a LGitCommit (<not initialized>)
	Arguments and temporary variables: 
		gitOid: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		id: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')


LGitCommit class(LGitObject class)>>of:fromId:
	Receiver: LGitCommit
	Arguments and temporary variables: 
		aRepository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushy...etc...
		id: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')
	Receiver's instance variables: 
		superclass: 	LGitObject
		methodDict: 	a MethodDictionary(#=->LGitCommit>>#= #asIcebergObjectInRepository:...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#LGitCommit
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-CoreObjects'


LGitCommit class>>of:fromHexString:
	Receiver: LGitCommit
	Arguments and temporary variables: 
		aRepository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushy...etc...
		aCommitId: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
	Receiver's instance variables: 
		superclass: 	LGitObject
		methodDict: 	a MethodDictionary(#=->LGitCommit>>#= #asIcebergObjectInRepository:...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#LGitCommit
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-CoreObjects'


[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ] in IceGitCommit>>libgitCommit
	Receiver: IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		packageCache: 	nil
		id: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
		author: 	'Yaroslav Kormushyn'
		datetime: 	2019-05-08T15:53:19+03:00
		ancestorIds: 	#('1d5525b7eead360f84b1ae3631afa46f58da6238')
		comment: 	'Finish TW matrix addition animation.'
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitCommit>>libgitCommit
		startpc: 	70
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#8 8/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


IceGitCommit>>libgitCommit
	Receiver: IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		packageCache: 	nil
		id: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
		author: 	'Yaroslav Kormushyn'
		datetime: 	2019-05-08T15:53:19+03:00
		ancestorIds: 	#('1d5525b7eead360f84b1ae3631afa46f58da6238')
		comment: 	'Finish TW matrix addition animation.'
		packageNamesCache: 	nil


IceGitCommit>>fileSystem
	Receiver: IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		packageCache: 	nil
		id: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
		author: 	'Yaroslav Kormushyn'
		datetime: 	2019-05-08T15:53:19+03:00
		ancestorIds: 	#('1d5525b7eead360f84b1ae3631afa46f58da6238')
		comment: 	'Finish TW matrix addition animation.'
		packageNamesCache: 	nil


IceBasicProjectReader>>canReadProjectFromCommitish:
	Receiver: an IceBasicProjectReader
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Receiver's instance variables: 
an IceBasicProjectReader

[ :any | any canReadProjectFromCommitish: anIceCommitish ] in IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
		any: 	an IceBasicProjectReader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
		each: 	an IceBasicProjectReader
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1THERE_BE_DRAGONS_HERE
NotFound: Object not found - no match for id (43dfa7171111eeed2e0765e209f359dbd051d82e)
8 May 2019 10:18:24.005493 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceLibgitErrorVisitor>>visitENOTFOUND:
	Receiver: an IceLibgitErrorVisitor
	Arguments and temporary variables: 
		anError: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111ee...etc...
	Receiver's instance variables: 
		context: 	IceLibgitRepository(SparseMatrix)


LGit_GIT_ENOTFOUND>>acceptError:
	Receiver: LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111eeed2e0765e209f359dbd0...etc...
	Arguments and temporary variables: 
		aVisitor: 	an IceLibgitErrorVisitor
	Receiver's instance variables: 
		messageText: 	'Object not found - no match for id (43dfa7171111eeed2e0765e209f35...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_odb [9])


[ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ] in IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
		error: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111eeed...etc...
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#8 8/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


BlockClosure>>cull:
	Receiver: [ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ]
	Arguments and temporary variables: 
		anArg: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111eeed...etc...
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>handleLibgitError:
		startpc: 	71
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111...etc...
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]


LGit_GIT_ENOTFOUND(Exception)>>signal
	Receiver: LGit_GIT_ENOTFOUND: Object not found - no match for id (43dfa7171111eeed2e0765e209f359dbd0...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Object not found - no match for id (43dfa7171111eeed2e0765e209f35...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_odb [9])


LGit_GIT_ENOTFOUND class(LGitCallReturnHandler class)>>signalWith:
	Receiver: LGit_GIT_ENOTFOUND
	Arguments and temporary variables: 
		anError: 	a LGitError ()
	Receiver's instance variables: 
		superclass: 	LGitCallReturnHandler
		methodDict: 	a MethodDictionary(#acceptError:->LGit_GIT_ENOTFOUND>>#acceptError:...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LGit_GIT_ENOTFOUND
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-Exceptions-ReturnCodes'


LGitReturnCodeEnum>>handleLGitReturnCode
	Receiver: a LGitReturnCodeEnum(#git_enotfound [-3])
	Arguments and temporary variables: 
		handler: 	LGit_GIT_ENOTFOUND
	Receiver's instance variables: 
		value: 	-3


LGitCommit(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitCommit (<not initialized>)
	Arguments and temporary variables: 
		callBlock: 	[ self commit_lookup: self repo: self repository id: self id ]
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		id: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')


LGitCommit>>lookup
	Receiver: a LGitCommit (<not initialized>)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		id: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')


LGitCommit(LGitObject)>>initializeWithId:
	Receiver: a LGitCommit (<not initialized>)
	Arguments and temporary variables: 
		gitOid: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		id: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')


LGitCommit class(LGitObject class)>>of:fromId:
	Receiver: LGitCommit
	Arguments and temporary variables: 
		aRepository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushy...etc...
		id: 	a LGitId ('43dfa7171111eeed2e0765e209f359dbd051d82e')
	Receiver's instance variables: 
		superclass: 	LGitObject
		methodDict: 	a MethodDictionary(#=->LGitCommit>>#= #asIcebergObjectInRepository:...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#LGitCommit
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-CoreObjects'


LGitCommit class>>of:fromHexString:
	Receiver: LGitCommit
	Arguments and temporary variables: 
		aRepository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushy...etc...
		aCommitId: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
	Receiver's instance variables: 
		superclass: 	LGitObject
		methodDict: 	a MethodDictionary(#=->LGitCommit>>#= #asIcebergObjectInRepository:...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#LGitCommit
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-CoreObjects'


[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ] in IceGitCommit>>libgitCommit
	Receiver: IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		packageCache: 	nil
		id: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
		author: 	'Yaroslav Kormushyn'
		datetime: 	2019-05-08T15:53:19+03:00
		ancestorIds: 	#('1d5525b7eead360f84b1ae3631afa46f58da6238')
		comment: 	'Finish TW matrix addition animation.'
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitCommit>>libgitCommit
		startpc: 	70
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#8 8/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


IceGitCommit>>libgitCommit
	Receiver: IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		packageCache: 	nil
		id: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
		author: 	'Yaroslav Kormushyn'
		datetime: 	2019-05-08T15:53:19+03:00
		ancestorIds: 	#('1d5525b7eead360f84b1ae3631afa46f58da6238')
		comment: 	'Finish TW matrix addition animation.'
		packageNamesCache: 	nil


IceGitCommit>>fileSystem
	Receiver: IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		packageCache: 	nil
		id: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
		author: 	'Yaroslav Kormushyn'
		datetime: 	2019-05-08T15:53:19+03:00
		ancestorIds: 	#('1d5525b7eead360f84b1ae3631afa46f58da6238')
		comment: 	'Finish TW matrix addition animation.'
		packageNamesCache: 	nil


IceBasicProjectReader>>canReadProjectFromCommitish:
	Receiver: an IceBasicProjectReader
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Receiver's instance variables: 
an IceBasicProjectReader

[ :any | any canReadProjectFromCommitish: anIceCommitish ] in IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
		any: 	an IceBasicProjectReader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
		each: 	an IceBasicProjectReader
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


IceGitCommit>>project
	Receiver: IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		packageCache: 	nil
		id: 	'43dfa7171111eeed2e0765e209f359dbd051d82e'
		author: 	'Yaroslav Kormushyn'
		datetime: 	2019-05-08T15:53:19+03:00
		ancestorIds: 	#('1d5525b7eead360f84b1ae3631afa46f58da6238')
		comment: 	'Finish TW matrix addition animation.'
		packageNamesCache: 	nil


IceBasicProject(IceAbstractProject)>>isDirty
	Receiver: an IceBasicProject
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commitish: 	IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
		properties: 	a Dictionary('srcDirectory'->'src' )
		repository: 	nil
		repositoryProperties: 	nil


IceWorkingCopy>>isModified
	Receiver: an IceWorkingCopy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		packages: 	a Dictionary('LNU-SparseMatrix'->IcePackage(LNU-SparseMatrix, loaded)...etc...
		referenceCommit: 	IceGitCommit(43dfa7171111eeed2e0765e209f359dbd051d82e)
		shouldIgnoreNotifications: 	false
		project: 	an IceBasicProject
		properties: 	an IceRepositoryProperties


IceLibgitRepository(IceRepository)>>isModified
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#8 8/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


IceLibgitRepository>>isModified
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#8 8/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


IceTipRepositoryModel>>descriptionWithDecoration
	Receiver: an IceTipRepositoryModel
	Arguments and temporary variables: 
		text: 	a Text for 'SparseMatrix'
	Receiver's instance variables: 
		entity: 	IceLibgitRepository(SparseMatrix)
		repositoryModel: 	nil


IceTipCachedModel>>forwardMessage:
	Receiver: an IceTipCachedModel(an IceTipRepositoryModel)
	Arguments and temporary variables: 
		aMessage: 	descriptionWithDecoration
	Receiver's instance variables: 
		realObject: 	an IceTipRepositoryModel
		cache: 	an IceTipCache


IceTipCachedModel>>doesNotUnderstand: #descriptionWithDecoration
	Receiver: an IceTipCachedModel(an IceTipRepositoryModel)
	Arguments and temporary variables: 
		aMessage: 	descriptionWithDecoration
		method: 	IceTipRepositoryModel>>#descriptionWithDecoration
	Receiver's instance variables: 
		realOTHERE_BE_DRAGONS_HERE
User Interrupt
8 May 2019 10:23:17.526493 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Alien class>>invokeCallbackContext:
	Receiver: Alien
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ByteArray
		methodDict: 	a MethodDictionary(#address->Alien>>#address #addressField->Alien>>...etc...
		format: 	1048576
		layout: 	a ByteLayout
		organization: 	a ClassOrganization
		subclasses: 	{FFICallbackReturnValue. FFICallbackThunk. VMCallbackContext32. VMC...etc...
		name: 	#Alien
		classPool: 	a Dictionary(#GCMallocedAliens->an AlienWeakTable #LoadedLibraries->...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Alien-Core'
		lifoCallbackSemaphore: 	a Semaphore(a Process in Alien class>>invokeCallbackCont...etc...


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitSafeFFICalloutAPI(FFICalloutAPI)>>function:module:
	Receiver: a LGitSafeFFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStrin...etc...
		moduleNameOrLibrary: 	LGitLibrary
		sender: 	LGitRemote>>remote_push:refspecs:opts:
		ffiMethod: 	LGitRemote>>#remote_push:refspecs:opts:
		ffiMethodSelector: 	#call:options:
	Receiver's instance variables: 
		context: 	LGitRemote>>remote_push:refspecs:opts:
		options: 	#(#optCoerceNilToNull)
		callingConvention: 	#cdecl


LGitRemote(LGitExternalObject)>>call:options:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		fnSpec: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStringArray #* #...etc...
		options: 	#(#optCoerceNilToNull)
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


[ self remote_push: self refspecs: refspecs opts: pushOptions ] in LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		callBlock: 	[ self remote_push: self refspecs: refspecs opts: pushOptions ]
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


IceGitLocalBranch>>pushBranchToRemote:gitRemote:progress:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBranchToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.
"Push tags"
self
	pushTagsToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.

"Verify we have an stream"
self setUpstreamIfMissing: aRemote ] in IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBr...etc...
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENONFASTFORWARD
		handlerAction: 	[ :e | 
e
	resignalAs:
		(IceRemoteDesynchronized new
			remote:...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>basicPushTo:
		startpc: 	159
		numArgs: 	0


IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ self basicPushTo: aRemote ] in IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ self basicPushTo: aRemote ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>pushTo:
		startpc: 	47
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ self basicPushTo: aRemote ]
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#9 9/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


IceGitLocalBranch(IceLocalBranch)>>push
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


IceLibgitRepository(IceRepository)>>push
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#9 9/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


[ self repository push ] in IceTipPushAction>>basicExecute
	Receiver: an IceTipPushAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		successBlock: 	nil


[ :bar | 
bar label: aString.
aBlock value ] in MorphicUIManager(UIManager)>>informUser:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aString: 	'Pushing...'
		aBlock: 	[ self repository push ]
		bar: 	a Job
	Receiver's instance variables: 
		activeTranscript: 	nil


[ :bar | aBlock value: bar ] in MorphicUIManager>>informUserDuring:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aBlock: 	[ :bar | 
bar label: aString.
aBlock value ]
		bar: 	a Job
	Receiver's instance variables: 
		activeTranscript: 	nil


BlockClosure>>cull:
	Receiver: [ :bar | aBlock value: bar ]
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instancTHERE_BE_DRAGONS_HERE
Debug
8 May 2019 10:23:18.012493 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Alien class>>invokeCallbackContext:
	Receiver: Alien
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ByteArray
		methodDict: 	a MethodDictionary(#address->Alien>>#address #addressField->Alien>>...etc...
		format: 	1048576
		layout: 	a ByteLayout
		organization: 	a ClassOrganization
		subclasses: 	{FFICallbackReturnValue. FFICallbackThunk. VMCallbackContext32. VMC...etc...
		name: 	#Alien
		classPool: 	a Dictionary(#GCMallocedAliens->an AlienWeakTable #LoadedLibraries->...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Alien-Core'
		lifoCallbackSemaphore: 	a Semaphore()


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitSafeFFICalloutAPI(FFICalloutAPI)>>function:module:
	Receiver: a LGitSafeFFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStrin...etc...
		moduleNameOrLibrary: 	LGitLibrary
		sender: 	LGitRemote>>remote_push:refspecs:opts:
		ffiMethod: 	LGitRemote>>#remote_push:refspecs:opts:
		ffiMethodSelector: 	#call:options:
	Receiver's instance variables: 
		context: 	LGitRemote>>remote_push:refspecs:opts:
		options: 	#(#optCoerceNilToNull)
		callingConvention: 	#cdecl


LGitRemote(LGitExternalObject)>>call:options:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		fnSpec: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStringArray #* #...etc...
		options: 	#(#optCoerceNilToNull)
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


[ self remote_push: self refspecs: refspecs opts: pushOptions ] in LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		callBlock: 	[ self remote_push: self refspecs: refspecs opts: pushOptions ]
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r04D89000
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


IceGitLocalBranch>>pushBranchToRemote:gitRemote:progress:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBranchToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.
"Push tags"
self
	pushTagsToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.

"Verify we have an stream"
self setUpstreamIfMissing: aRemote ] in IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBr...etc...
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENONFASTFORWARD
		handlerAction: 	[ :e | 
e
	resignalAs:
		(IceRemoteDesynchronized new
			remote:...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>basicPushTo:
		startpc: 	159
		numArgs: 	0


IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ self basicPushTo: aRemote ] in IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ self basicPushTo: aRemote ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>pushTo:
		startpc: 	47
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ self basicPushTo: aRemote ]
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#9 9/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


IceGitLocalBranch(IceLocalBranch)>>push
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


IceLibgitRepository(IceRepository)>>push
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\SparseMatrix...etc...
		commitCache: 	a LRUCache(#9 9/30 [ 1 ] 97%)
		handle: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn\Spa...etc...


[ self repository push ] in IceTipPushAction>>basicExecute
	Receiver: an IceTipPushAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		successBlock: 	nil


[ :bar | 
bar label: aString.
aBlock value ] in MorphicUIManager(UIManager)>>informUser:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aString: 	'Pushing...'
		aBlock: 	[ self repository push ]
		bar: 	a Job
	Receiver's instance variables: 
		activeTranscript: 	nil


[ :bar | aBlock value: bar ] in MorphicUIManager>>informUserDuring:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aBlock: 	[ :bar | 
bar label: aString.
aBlock value ]
		bar: 	a Job
	Receiver's instance variables: 
		activeTranscript: 	nil


BlockClosure>>cull:
	Receiver: [ :bar | aBlock value: bar ]
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>informUserDuring:
		startpc: 	58
		numArgs: 	1


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | aBlock value: bar ]
		currentValue: 	1
		min: 	1
		max: 	100
		title: 	'Pushing...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in Alien class>>invokeCallbackContext:


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in Alien class>>invokeCallbackContext:
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in Alien class>>invokeCallbackContext:
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | aBlock value: bar ]
		currentValue: 	1
		min: 	1
		max: 	100
		title: 	'Pushing...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in Alien class>>invokeCallbackContext:


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | aBlock value: bar ]
		currentValue: 	1
		min: 	1
		max: 	100THERE_BE_DRAGONS_HERE
User Interrupt
8 May 2019 10:23:30.207493 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	20
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734796210190493


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	20
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734796210190493


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		milliSecs: 	20
		wait: 	20
		wait2: 	20
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1000179456) named: P...etc...
		lastStepTime: 	9936441
		lastStepMessage: 	nil
		lastCycleTime: 	9936441
		alarms: 	a Heap()
		lastAlarmTime: 	9936441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1000179456) named: P...etc...
		lastStepTime: 	9936441
		lastStepMessage: 	nil
		lastCycleTime: 	9936441
		alarms: 	a Heap()
		lastAlarmTime: 	9936441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#row was sent to nil
9 May 2019 2:23:20.144493 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :el | el row @ el column ] in COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScaled:
	Receiver: a COOSparseMatrixVisualizer
	Arguments and temporary variables: 
		scale: 	5
		comp: 	nil
		box: 	nil
		valueLabel: 	nil
		indexLabel: 	nil
		el: 	nil
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | el row @ el column ]
	Arguments and temporary variables: 
		valueOrArray: 	nil
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScale...etc...
		startpc: 	212
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :el | el row @ el column ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	55
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


RTLabel>>updateFor:trachelShape:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TRLabelShape
		c: 	Color white
		s: 	nil
		txt: 	nil
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


[ :tupple :shapeIndex | 
| s |
tupple first
	updateFor: anElement
	trachelShape: (anElement trachelShape shapes at: shapeIndex).
s := anElement trachelShape shapes at: shapeIndex.
Array with: s with: tupple second ] in RTCompositeShape>>updateFor:trachelShape:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TRCompositeShape
		ss: 	nil
		tupple: 	an Array(a RTLabel (0@50))
		shapeIndex: 	3
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
tupple first
	updateFor: a...etc...
		newCollection: 	an OrderedCollection(an Array(a TRBoxShape (0@0)) an Array(a TRL...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
tupple first
	updateFor: a...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


RTCompositeShape>>updateFor:trachelShape:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TRCompositeShape
		ss: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTCompositeShape(RTShape)>>updateFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		edgeOrElement: 	a RTElement
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>updateShape
	Receiver: a RTElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTCompositeShape
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


RTElement(RTShapedObject)>>update
	Receiver: a RTElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTCompositeShape
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


RTElement(RTShapedObject)>>updateModelAndRedraw:
	Receiver: a RTElement
	Arguments and temporary variables: 
		anObject: 	nil
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTCompositeShape
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


[ self isEmpty
	ifFalse: [ marker := first.
		vis selectModel: marker.
		tempList := SortedCollection new
			sortBlock: [ :left :right | 
				left row < right row
					or: [ left row = right row and: [ left column < right column ] ] ].
		[ marker isNotNil ]
			whileTrue: [ (vis composer hasGroup: #transpositionList)
					ifTrue: [ vis composer removeGroup: #transpositionList ].
				tempList add: marker copy.
				COOSparseMatrixVisualizer
					onNodeCollection: tempList
					withView: vis view.
				vis composer group: #transpositionList.
				vis composer move: #transpositionList below: #source.
				vis redrawNamesAndBackgrounds.
				vis delay wait.
				vis deselectModel: marker.
				marker := marker rightNeighbour.
				sourceMarker updateModelAndRedraw: marker.
				marker isNotNil
					ifTrue: [ vis selectModel: marker ] ].
		tempList reSort.
		COOSparseMatrixVisualizer
			onNodeCollection: tempList
			withView: vis view.
		vis composer group: #transpositionList.
		vis composer move: #transpositionList below: #source.
		vis redrawNamesAndBackgrounds.
		vis delay wait.
		tempList
			keysAndValuesDo: [ :index :element | 
				index - 1 > 0
					ifTrue: [ element leftNeighbour: (tempList at: index - 1).
						COOSparseMatrixVisualizer
							onNodeCollection: tempList
							withView: vis view.
						vis composer group: #transpositionList.
						vis composer move: #transpositionList below: #source.
						vis redrawNamesAndBackgrounds.
						vis delay wait ].
				index < tempList size
					ifTrue: [ element rightNeighbour: (tempList at: index + 1).
						COOSparseMatrixVisualizer
							onNodeCollection: tempList
							withView: vis view.
				THERE_BE_DRAGONS_HERE
TestFailure: Got 3 instead of 7.
9 May 2019 2:26:36.582493 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixTest(TestAsserter)>>assert:description:
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got 3 instead of 7.'
	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


COOSparseMatrixTest(TestAsserter)>>assert:equals:
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 
		actual: 	3
		expected: 	7
	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


COOSparseMatrixTest>>testTranspose
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


COOSparseMatrixTest(TestCase)>>performTest
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


[ self setUp.
self performTest ] in COOSparseMatrixTest(TestCase)>>runCase
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


COOSparseMatrixTest(TestCase)>>runCase
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCaseTHERE_BE_DRAGONS_HERE
TestFailure: Got 3 instead of 7.
9 May 2019 2:26:50.716493 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixTest(TestAsserter)>>assert:description:
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	[ self comparingStringBetween: actual and: expected ]
		aString: 	'Got 3 instead of 7.'
	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


COOSparseMatrixTest(TestAsserter)>>assert:equals:
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 
		actual: 	3
		expected: 	7
	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


COOSparseMatrixTest>>testTranspose
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


COOSparseMatrixTest(TestCase)>>performTest
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


[ self setUp.
self performTest ] in COOSparseMatrixTest(TestCase)>>runCase
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


COOSparseMatrixTest(TestCase)>>runCase
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	COOSparseMatrixTest>>#testTranspose
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


COOSparseMatrixTest(TestCase)>>runCaseManaged
	Receiver: COOSparseMatrixTest>>#testTranspose
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTranspose
		expectedFails: 	nil
		empty: 	a COOSparseMatrix
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		full: 	a COOSparseMatrix
		rows: 	3
		columns: 	3
		factor: 	4
		leftPlusRight: 	a COOSparseMatrix
		leftByRight: 	a COOSparseMatrix
		twoByTwo: 	a COOSparseMatrix


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	COOSparseMatrixTest>>#testTranspose
	Receiver's instance variables: 
		timeStamp: 	2019-05-09T14:26:50.698493+03:00
		failures: 	a Set(COOSparseMatrixTest>>#testTranspose)
		errors: 	an OrderedCollection()
		passed: 	an OrderedColTHERE_BE_DRAGONS_HERE
KeyNotFound: key #result not found in Dictionary
9 May 2019 10:52:37.559295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		aKey: 	#result
	Receiver's instance variables: 
		tally: 	3
		array: 	an Array(#source->a RTGroup(a RTElement a RTElement a RTElement a RTElem...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	3
		array: 	an Array(#source->a RTGroup(a RTElement a RTElement a RTElement a RTElem...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#result
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	3
		array: 	an Array(#source->a RTGroup(a RTElement a RTElement a RTElement a RTElem...etc...


Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	3
		array: 	an Array(#source->a RTGroup(a RTElement a RTElement a RTElement a RTElem...etc...


RTComposer>>getGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a ...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape)
		names: 	an OrderedCollection(a RTElement a RTElement)


RTComposer>>removeGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
		elements: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a ...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape)
		names: 	an OrderedCollection(a RTElement a RTElement)


RTComposer>>replaceElementsInGroup:with:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupName: 	#result
		matrix: 	a LILSparseMatrix
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a ...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape)
		names: 	an OrderedCollection(a RTElement a RTElement)


MatrixOperationVisualizer>>updateResultWith:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	a LILSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	#(#source #sourceMarker)
		backgroundGroups: 	#(#source)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


[ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := LinkedList new.
	newRowGroup := #newRow.
	captionLabel := (RTLabel
		text: Character arrowLeft asString , 'List for row ' , columnIndex asString)
		element.
	vis add: captionLabel.
	vis group: #newRowLabel.
	vis composer move: #newRowLabel below: #source.
	1 to: rowNumber do: [ :rowIndex | 
		(self rows at: rowIndex) isEmpty
			ifFalse: [ (self rows at: rowIndex) first
					ifNotNil: [ index := (self rows at: rowIndex)
							findFirst: [ :element | element column = columnIndex ].
						index = 0
							ifFalse: [ vis composer
									selectUsing: [ :model | model column = columnIndex ]
									inGroup: #source.
								vis delay wait.
								(vis composer hasGroup: #newRow)
									ifTrue: [ vis composer removeGroup: #newRow ].
								tempList
									addLast:
										(LILSparseMatrixNode
											column: rowIndex
											value: ((self rows at: rowIndex) at: index) value).
								LILSparseMatrixVisualizer
									onLinkedList: tempList
									inRow: columnIndex
									withView: vis view.
								vis group: newRowGroup.
								vis composer
									deselectUsing: [ :model | model column = columnIndex ]
									inGroup: #source.
								vis composer move: newRowGroup onTheRightOf: #newRowLabel.
								vis composer redrawNamesFor: vis namedGroups.
								vis composer redrawBackgroundsFor: vis backgroundGroups.
								vis composer view canvas focusOnCenterScaled.
								vis delay wait ] ] ] ].
	(vis composer hasGroup: #newRow)
		ifTrue: [ vis composer removeGroup: #newRow ].
	vis composer removeGroup: #newRowLabel.
	result rows at: columnIndex put: tempList.
	vis updateResultWith: result.
	vis composer view canvas focusOnCenterScaled.
	vis delay wait ] ] in LILSparseMatrix>>transposeAnimatedDelay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		delay: 	1
		result: 	a LILSparseMatrix
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	nil
		newRowGroup: 	#newRow
		captionLabel: 	a RTElement
		tempList: 	a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode)
		index: 	1
		columnIndex: 	1
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := Linke...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	LILSparseMatrix>>transposeAnimatedDelay:
		startpc: 	712
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>getGroup:
RTComposer>>removeGroup:
RTComposer>>replaceElementsInGroup:with:
MatrixOperationVisualizer>>updateResultWith:
[ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := LinkedList new.
	newRowGroup := #newRow.
	captionLabel := (RTLabel
		text: Character arrowLeft asString , 'List for row ' , columnIndex asString)
		element.
	vis add: captionLabel.
	vis group: #newRowLabel.
	vis composer move: #newRowLabel below: #source.
	1 to: rowNumber do: [ :rowIndex | 
		(self rows at: rowIndex) isEmpty
			ifFalse: [ (self rows at: rowIndex) first
					ifNotNil: [ index := (self rows at: rowIndex)
							findFirst: [ :element | element column = columnIndex ].
						index = 0
							ifFalse: [ vis composer
									selectUsing: [ :model | model column = columnIndex ]
									inGroup: #source.
								vis delay wait.
								(vis composer hasGroup: #newRow)
									ifTrue: [ vis composer removeGroup: #newRow ].
								tempList
									addLast:
										(LILSparseMatrixNode
											column: rowIndex
											value: ((self rows at: rowIndex) at: index) value).
								LILSparseMatrixVisualizer
									onLinkedList: tempList
									inRow: columnIndex
									withView: vis view.
								vis group: newRowGroup.
								vis composer
									deselectUsing: [ :model | model column = columnIndex ]
									inGroup: #source.
								vis composer move: newRowGroup onTheRightOf: #newRowLabel.
								vis composer redrawNamesFor: vis namedGroups.
								vis composer redrawBackgroundsFor: vis backgroundGroups.
								vis composer view canvas focusOnCenterScaled.
								vis delay wait ] ] ] ].
	(vis composer hasGroup: #newRow)
		ifTrue: [ vis composer removeGroup: #newRow ].
	vis composer removeGroup: #newRowLabel.
	result rows at: columnIndex put: tempList.
	vis updateResultWith: result.
	vis composer view canvas focusOnCenterScaled.
	vis delay wait ] ] in LILSparseMatrix>>transposeAnimatedDelay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #right not found in Dictionary
9 May 2019 11:03:57.367295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		aKey: 	#right
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(#source->a RTGroup(a RTElement a RTElement a RTElement a RTElem...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#right
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(#source->a RTGroup(a RTElement a RTElement a RTElement a RTElem...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#right
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(#source->a RTGroup(a RTElement a RTElement a RTElement a RTElem...etc...


Dictionary>>at:
	Receiver: a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElemen...etc...
	Arguments and temporary variables: 
		key: 	#right
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(#source->a RTGroup(a RTElement a RTElement a RTElement a RTElem...etc...


RTComposer>>move:onTheRightOf:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		name1: 	#result
		name2: 	#right
		g1: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTE...etc...
		g2: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a ...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape)
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement)


MatrixOperationVisualizer>>updateResultWith:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	a LILSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	#(#source #sourceMarker #result)
		backgroundGroups: 	#(#source #result)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


[ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := LinkedList new.
	newRowGroup := #newRow.
	captionLabel := (RTLabel
		text: Character arrowLeft asString , 'List for row ' , columnIndex asString)
		element.
	vis add: captionLabel.
	vis group: #newRowLabel.
	vis composer move: #newRowLabel above: #source.
	1 to: rowNumber do: [ :rowIndex | 
		(self rows at: rowIndex) isEmpty
			ifFalse: [ (self rows at: rowIndex) first
					ifNotNil: [ index := (self rows at: rowIndex)
							findFirst: [ :element | element column = columnIndex ].
						index = 0
							ifFalse: [ vis composer
									selectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]
									inGroup: #source.
								vis delay wait.
								(vis composer hasGroup: #newRow)
									ifTrue: [ vis composer removeGroup: #newRow ].
								tempList
									addLast:
										(LILSparseMatrixNode
											column: rowIndex
											value: ((self rows at: rowIndex) at: index) value).
								LILSparseMatrixVisualizer
									onLinkedList: tempList
									inRow: columnIndex
									withView: vis view.
								vis group: newRowGroup.
								vis composer
									deselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]
									inGroup: #source.
								vis composer move: newRowGroup onTheRightOf: #newRowLabel.
								vis composer redrawNamesFor: vis namedGroups.
								vis composer redrawBackgroundsFor: vis backgroundGroups.
								vis composer view canvas focusOnCenterScaled.
								vis delay wait ] ] ] ].
	(vis composer hasGroup: #newRow)
		ifTrue: [ vis composer removeGroup: #newRow ].
	vis composer removeGroup: #newRowLabel.
	result rows at: columnIndex put: tempList.
	vis updateResultWith: result.
	vis composer view canvas focusOnCenterScaled.
	vis delay wait ] ] in LILSparseMatrix>>transposeAnimatedDelay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		delay: 	1
		result: 	a LILSparseMatrix
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	nil
		newRowGroup: 	#newRow
		captionLabel: 	a RTElement
		tempList: 	a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode)
		index: 	1
		columnIndex: 	1
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := Linke...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	LILSparseMatrix>>transposeAnimatedDelay:
		startpc: 	763
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>move:onTheRightOf:
MatrixOperationVisualizer>>updateResultWith:
[ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := LinkedList new.
	newRowGroup := #newRow.
	captionLabel := (RTLabel
		text: Character arrowLeft asString , 'List for row ' , columnIndex asString)
		element.
	vis add: captionLabel.
	vis group: #newRowLabel.
	vis composer move: #newRowLabel above: #source.
	1 to: rowNumber do: [ :rowIndex | 
		(self rows at: rowIndex) isEmpty
			ifFalse: [ (self rows at: rowIndex) first
					ifNotNil: [ index := (self rows at: rowIndex)
							findFirst: [ :element | element column = columnIndex ].
						index = 0
							ifFalse: [ vis composer
									selectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]
									inGroup: #source.
								vis delay wait.
								(vis composer hasGroup: #newRow)
									ifTrue: [ vis composer removeGroup: #newRow ].
								tempList
									addLast:
										(LILSparseMatrixNode
											column: rowIndex
											value: ((self rows at: rowIndex) at: index) value).
								LILSparseMatrixVisualizer
									onLinkedList: tempList
									inRow: columnIndex
									withView: vis view.
								vis group: newRowGroup.
								vis composer
									deselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]
									inGroup: #source.
								vis composer move: newRowGroup onTheRightOf: #newRowLabel.
								vis composer redrawNamesFor: vis namedGroups.
								vis composer redrawBackgroundsFor: vis backgroundGroups.
								vis composer view canvas focusOnCenterScaled.
								vis delay wait ] ] ] ].
	(vis composer hasGroup: #newRow)
		ifTrue: [ vis composer removeGroup: #newRow ].
	vis composer removeGroup: #newRowLabel.
	result rows at: columnIndex put: tempList.
	vis updateResultWith: result.
	vis composer view canvas focusOnCenterScaled.
	vis delay wait ] ] in LILSparseMatrix>>transposeAnimatedDelay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of LILSparseMatrixNode did not understand #row
9 May 2019 11:14:23.039295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrixNode(Object)>>doesNotUnderstand: #row
	Receiver: a LILSparseMatrixNode
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: LILSparseMatrixNode>>row
		resumeValue: 	nil
	Receiver's instance variables: 
		column: 	1
		value: 	1


[ :el | el row @ el column ] in COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScaled:
	Receiver: a COOSparseMatrixVisualizer
	Arguments and temporary variables: 
		scale: 	5
		comp: 	nil
		box: 	nil
		valueLabel: 	nil
		indexLabel: 	nil
		el: 	a LILSparseMatrixNode
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | el row @ el column ]
	Arguments and temporary variables: 
		valueOrArray: 	a LILSparseMatrixNode
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScale...etc...
		startpc: 	212
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :el | el row @ el column ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	55
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


RTLabel>>updateFor:trachelShape:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TRLabelShape
		c: 	Color white
		s: 	nil
		txt: 	nil
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


[ :tupple :shapeIndex | 
| s |
tupple first
	updateFor: anElement
	trachelShape: (anElement trachelShape shapes at: shapeIndex).
s := anElement trachelShape shapes at: shapeIndex.
Array with: s with: tupple second ] in RTCompositeShape>>updateFor:trachelShape:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TRCompositeShape
		ss: 	nil
		tupple: 	an Array(a RTLabel (0@50))
		shapeIndex: 	3
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
tupple first
	updateFor: a...etc...
		newCollection: 	an OrderedCollection(an Array(a TRBoxShape (0@0)) an Array(a TRL...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
tupple first
	updateFor: a...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


RTCompositeShape>>updateFor:trachelShape:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		trachelShape: 	a TRCompositeShape
		ss: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTCompositeShape(RTShape)>>updateFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		edgeOrElement: 	a RTElement
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>updateShape
	Receiver: a RTElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	a LILSparseMatrixNode
		shape: 	a RTCompositeShape
		trachelShape: 	a TRCompositeShape
		view: 	a RTView
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


RTElement(RTShapedObject)>>update
	Receiver: a RTElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
THERE_BE_DRAGONS_HERE
Instance of LILSparseMatrixNode did not understand #row
9 May 2019 11:16:25.390295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LILSparseMatrixNode(Object)>>doesNotUnderstand: #row
	Receiver: a LILSparseMatrixNode
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: LILSparseMatrixNode>>row
		resumeValue: 	nil
	Receiver's instance variables: 
		column: 	1
		value: 	1


[ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := LinkedList new.
	newRowGroup := #newRow.
	captionLabel := (RTLabel
		text: Character arrowLeft asString , 'List for row ' , columnIndex asString)
		element.
	vis add: captionLabel.
	vis group: #newRowLabel.
	vis composer move: #newRowLabel above: #source.
	1 to: rowNumber do: [ :rowIndex | 
		(self rows at: rowIndex) isEmpty
			ifFalse: [ (self rows at: rowIndex) first
					ifNotNil: [ index := (self rows at: rowIndex)
							findFirst: [ :element | element column = columnIndex ].
						index = 0
							ifFalse: [ | sourceElement |
								sourceElement := (self rows at: rowIndex) at: index.
								vis composer
									selectUsing: [ :model | model source = sourceElement ]
									inGroup: #source.
								sourceMarker
									updateModelAndRedraw:
										(MatrixElement
											row: sourceElement row
											column: sourceElement column
											value: sourceElement value
											source: sourceElement).
								vis delay wait.
								(vis composer hasGroup: #newRow)
									ifTrue: [ vis composer removeGroup: #newRow ].
								tempList
									addLast:
										(LILSparseMatrixNode column: rowIndex value: sourceElement value).
								LILSparseMatrixVisualizer
									onLinkedList: tempList
									inRow: columnIndex
									withView: vis view.
								vis group: newRowGroup.
								vis composer
									deselectUsing: [ :model | model source = sourceElement ]
									inGroup: #source.
								vis composer move: newRowGroup onTheRightOf: #newRowLabel.
								vis composer redrawNamesFor: vis namedGroups.
								vis composer redrawBackgroundsFor: vis backgroundGroups.
								vis composer view canvas focusOnCenterScaled.
								vis delay wait ] ] ] ].
	(vis composer hasGroup: #newRow)
		ifTrue: [ vis composer removeGroup: #newRow ].
	vis composer removeGroup: #newRowLabel.
	result rows at: columnIndex put: tempList.
	vis composer replaceElementsInGroup: #result with: result.
	vis composer move: #result onTheRightOf: #source.
	vis composer view canvas focusOnCenterScaled.
	vis delay wait ].
vis composer removeGroup: #sourceMarker.
vis namedGroups: (vis namedGroups copyWithout: #sourceMarker).
vis redrawNamesAndBackgrounds.
vis composer view canvas focusOnCenterScaled ] in LILSparseMatrix>>transposeAnimatedDelay:
	Receiver: a LILSparseMatrix
	Arguments and temporary variables: 
		delay: 	1
		result: 	a LILSparseMatrix
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	a RTElement
		newRowGroup: 	#newRow
		captionLabel: 	a RTElement
		columnIndex: 	1
		rowIndex: 	1
		tempList: 	a LinkedList()
		index: 	1
		sourceElement: 	a LILSparseMatrixNode
	Receiver's instance variables: 
		rows: 	an Array(a LinkedList(a LILSparseMatrixNode a LILSparseMatrixNode) a Link...etc...
		rowNumber: 	4
		columnNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := Linke...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	LILSparseMatrix>>transposeAnimatedDelay:
		startpc: 	812
		numArgs: 	0



--- The full stack ---
LILSparseMatrixNode(Object)>>doesNotUnderstand: #row
[ | newRowGroup captionLabel |
1 to: columnNumber do: [ :columnIndex | 
	tempList := LinkedList new.
	newRowGroup := #newRow.
	captionLabel := (RTLabel
		text: Character arrowLeft asString , 'List for row ' , columnIndex asString)
		element.
	vis add: captionLabel.
	vis group: #newRowLabel.
	vis composer move: #newRowLabel above: #source.
	1 to: rowNumber do: [ :rowIndex | 
		(self rows at: rowIndex) isEmpty
			ifFalse: [ (self rows at: rowIndex) first
					ifNotNil: [ index := (self rows at: rowIndex)
							findFirst: [ :element | element column = columnIndex ].
						index = 0
							ifFalse: [ | sourceElement |
								sourceElement := (self rows at: rowIndex) at: index.
								vis composer
									selectUsing: [ :model | model source = sourceElement ]
									inGroup: #source.
								sourceMarker
									updateModelAndRedraw:
										(MatrixElement
											row: sourceElement row
											column: sourceElement column
											value: sourceElement value
											source: sourceElement).
								vis delay wait.
								(vis composer hasGroup: #newRow)
									ifTrue: [ vis composer removeGroup: #newRow ].
								tempList
									addLast:
										(LILSparseMatrixNode column: rowIndex value: sourceElement value).
								LILSparseMatrixVisualizer
									onLinkedList: tempList
									inRow: columnIndex
									withView: vis view.
								vis group: newRowGroup.
								vis composer
									deselectUsing: [ :model | model source = sourceElement ]
									inGroup: #source.
								vis composer move: newRowGroup onTheRightOf: #newRowLabel.
								vis composer redrawNamesFor: vis namedGroups.
								vis composer redrawBackgroundsFor: vis backgroundGroups.
								vis composer view canvas focusOnCenterScaled.
								vis delay wait ] ] ] ].
	(vis composer hasGroup: #newRow)
		ifTrue: [ vis composer removeGroup: #newRow ].
	vis composer removeGroup: #newRowLabel.
	result rows at: columnIndex put: tempList.
	vis composer replaceElementsInGroup: #result with: result.
	vis composer move: #result onTheRightOf: #source.
	vis composer view canvas focusOnCenterScaled.
	vis delay wait ].
vis composer removeGroup: #sourceMarker.
vis namedGroups: (vis namedGroups copyWithout: #sourceMarker).
vis redrawNamesAndBackgrounds.
vis composer view canvas focusOnCenterScaled ] in LILSparseMatrix>>transposeAnimatedDelay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
DomainError: Indices must be a positive value
9 May 2019 11:50:25.257295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWMatrixNode class>>row:column:value:
	Receiver: TWMatrixNode
	Arguments and temporary variables: 
		rowNumber: 	0
		columnNumber: 	0
		aValue: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#belowNeighbour->TWMatrixNode>>#belowNeighbour #...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWMatrixNode
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


TWSparseMatrix>>transposeAnimatedDelay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		rowMarker: 	nil
		copy: 	nil
		columnMarkers: 	nil
		delay: 	1
		result: 	(0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
)
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	nil
	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


TWSparseMatrixOperationVisualizer class>>exampleTransposition
	Receiver: TWSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		col: 	#(#(1 -1 0 0) #(0 3 0 0) #(1 0 2 1) #(0 0 0 0))
		coo: 	(1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
		cooanimvis: 	a TWSparseMatrixOperationVisualizer
	Receiver's instance variables: 
		superclass: 	MatrixOperationVisualizer
		methodDict: 	a MethodDictionary(#initialize->TWSparseMatrixOperationVisualizer>>...etc...
		format: 	65555
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWSparseMatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ TWSparseMatrixOperationVisualizer exampleTransposition
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(920632320)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@31)
		owner: 	a TransformWithLayoutMorph(451483136)
		submorphs: 	an Array(a RubPrimarySelectionMorph(475709952) a RubCursor(507751936...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (43409408) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(331248640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(507751936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(177424128))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	7750480
		lastStepMessage: 	nil
		lastCycleTime: 	7750501
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7750480
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	7750480
		lastStepMessage: 	nil
		lastCycleTime: 	7750501
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7750480
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	7750480
		lastStepMessage: 	nil
		lastCycleTime: 	7750501
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7750480
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
TWMatrixNode class>>row:column:value:
TWSparseMatrix>>transposeAnimatedDelay:
TWSparseMatrixOperationVisualizer class>>exampleTransposition
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Break
9 May 2019 11:51:19.459295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer>>redrawNamesAndBackgrounds
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	#(#source #result #sourceMarker)
		backgroundGroups: 	#(#source #result)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


TWSparseMatrix>>transposeAnimatedDelay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		rowMarker: 	nil
		copy: 	nil
		columnMarkers: 	nil
		delay: 	1
		result: 	(0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
)
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	a RTElement
	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


TWSparseMatrixOperationVisualizer class>>exampleTransposition
	Receiver: TWSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		col: 	#(#(1 -1 0 0) #(0 3 0 0) #(1 0 2 1) #(0 0 0 0))
		coo: 	(1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
		cooanimvis: 	a TWSparseMatrixOperationVisualizer
	Receiver's instance variables: 
		superclass: 	MatrixOperationVisualizer
		methodDict: 	a MethodDictionary(#initialize->TWSparseMatrixOperationVisualizer>>...etc...
		format: 	65555
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWSparseMatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ TWSparseMatrixOperationVisualizer exampleTransposition
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(920632320)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@31)
		owner: 	a TransformWithLayoutMorph(451483136)
		submorphs: 	an Array(a RubPrimarySelectionMorph(475709952) a RubCursor(507751936...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (43409408) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(331248640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(507751936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(501082624))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	7804674
		lastStepMessage: 	nil
		lastCycleTime: 	7804699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7804674
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	7804674
		lastStepMessage: 	nil
		lastCycleTime: 	7804699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7804674
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	7804674
		lastStepMessage: 	nil
		lastCycleTime: 	7804699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7804674
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixOperationVisualizer>>redrawNamesAndBackgrounds
TWSparseMatrix>>transposeAnimatedDelay:
TWSparseMatrixOperationVisualizer class>>exampleTransposition
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Break
9 May 2019 11:51:30.191295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer>>redrawNamesAndBackgrounds
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	#(#source #result #sourceMarker)
		backgroundGroups: 	#(#source #result)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()


TWSparseMatrix>>transposeAnimatedDelay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		rowMarker: 	nil
		copy: 	nil
		columnMarkers: 	nil
		delay: 	1
		result: 	(0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
)
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	a RTElement
	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


TWSparseMatrixOperationVisualizer class>>exampleTransposition
	Receiver: TWSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		col: 	#(#(1 -1 0 0) #(0 3 0 0) #(1 0 2 1) #(0 0 0 0))
		coo: 	(1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
		cooanimvis: 	a TWSparseMatrixOperationVisualizer
	Receiver's instance variables: 
		superclass: 	MatrixOperationVisualizer
		methodDict: 	a MethodDictionary(#initialize->TWSparseMatrixOperationVisualizer>>...etc...
		format: 	65555
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWSparseMatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ TWSparseMatrixOperationVisualizer exampleTransposition
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(920632320)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@31)
		owner: 	a TransformWithLayoutMorph(451483136)
		submorphs: 	an Array(a RubPrimarySelectionMorph(475709952) a RubCursor(507751936...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (43409408) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(331248640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(507751936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(274436608))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(475.0@35.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	7815389
		lastStepMessage: 	nil
		lastCycleTime: 	7815427
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7815389
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	7815389
		lastStepMessage: 	nil
		lastCycleTime: 	7815427
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7815389
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	7815389
		lastStepMessage: 	nil
		lastCycleTime: 	7815427
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	7815389
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixOperationVisualizer>>redrawNamesAndBackgrounds
TWSparseMatrix>>transposeAnimatedDelay:
TWSparseMatrixOperationVisualizer class>>exampleTransposition
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of RTComposer did not understand #namedGroups
9 May 2019 11:53:08.688295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTComposer(Object)>>doesNotUnderstand: #namedGroups
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aMessage: 	namedGroups
		exception: 	MessageNotUnderstood: RTComposer>>namedGroups
		resumeValue: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape)
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement)


[ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		copy := self columns at: rowIndex.
		rowMarker := each.
		[ copy belowNeighbour row ~= 0 ]
			whileTrue: [ copy := copy belowNeighbour.
				vis selectModel: copy.
				rowMarker
					rightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).
				(columnMarkers at: copy row)
					belowNeighbour: rowMarker rightNeighbour.
				vis composer replaceElementsInGroup: #result with: result.
				vis composer move: #result onTheRightOf: #source.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait.
				vis deselectModel: copy.
				columnMarkers at: copy row put: rowMarker rightNeighbour.
				rowMarker := rowMarker rightNeighbour ].
		rowMarker rightNeighbour: each.
		vis composer replaceElementsInGroup: #result with: result.
		vis composer move: #result onTheRightOf: #source.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
result columns
	withIndexDo:
		[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].
vis composer removeGroup: #sourceMarker.
vis composer
	namedGroups: (vis composer namedGroups copyWithout: #sourceMarker).
vis redrawNamesAndBackgrounds.
vis composer replaceElementsInGroup: #result with: result.
vis composer move: #result onTheRightOf: #source.
vis composer view canvas focusOnCenterScaled.
vis delay wait ] in TWSparseMatrix>>transposeAnimatedDelay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		delay: 	1
		result: 	(1 0 1 0
-1 3 0 0
0 0 2 0
0 0 1 0
)
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	nil
		rowMarker: 	a TWMatrixNode
		copy: 	a TWMatrixNode
		columnMarkers: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrix...etc...
	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		c...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TWSparseMatrix>>transposeAnimatedDelay:
		startpc: 	534
		numArgs: 	0



--- The full stack ---
RTComposer(Object)>>doesNotUnderstand: #namedGroups
[ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		copy := self columns at: rowIndex.
		rowMarker := each.
		[ copy belowNeighbour row ~= 0 ]
			whileTrue: [ copy := copy belowNeighbour.
				vis selectModel: copy.
				rowMarker
					rightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).
				(columnMarkers at: copy row)
					belowNeighbour: rowMarker rightNeighbour.
				vis composer replaceElementsInGroup: #result with: result.
				vis composer move: #result onTheRightOf: #source.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait.
				vis deselectModel: copy.
				columnMarkers at: copy row put: rowMarker rightNeighbour.
				rowMarker := rowMarker rightNeighbour ].
		rowMarker rightNeighbour: each.
		vis composer replaceElementsInGroup: #result with: result.
		vis composer move: #result onTheRightOf: #source.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
result columns
	withIndexDo:
		[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].
vis composer removeGroup: #sourceMarker.
vis composer
	namedGroups: (vis composer namedGroups copyWithout: #sourceMarker).
vis redrawNamesAndBackgrounds.
vis composer replaceElementsInGroup: #result with: result.
vis composer move: #result onTheRightOf: #source.
vis composer view canvas focusOnCenterScaled.
vis delay wait ] in TWSparseMatrix>>transposeAnimatedDelay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of RTComposer did not understand #namedGroups:
9 May 2019 11:53:42.226295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTComposer(Object)>>doesNotUnderstand: #namedGroups:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aMessage: 	namedGroups: #(#source #result)
		exception: 	MessageNotUnderstood: RTComposer>>namedGroups:
		resumeValue: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape)
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement)


[ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		copy := self columns at: rowIndex.
		rowMarker := each.
		[ copy belowNeighbour row ~= 0 ]
			whileTrue: [ copy := copy belowNeighbour.
				vis selectModel: copy.
				rowMarker
					rightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).
				(columnMarkers at: copy row)
					belowNeighbour: rowMarker rightNeighbour.
				vis composer replaceElementsInGroup: #result with: result.
				vis composer move: #result onTheRightOf: #source.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait.
				vis deselectModel: copy.
				columnMarkers at: copy row put: rowMarker rightNeighbour.
				rowMarker := rowMarker rightNeighbour ].
		rowMarker rightNeighbour: each.
		vis composer replaceElementsInGroup: #result with: result.
		vis composer move: #result onTheRightOf: #source.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
result columns
	withIndexDo:
		[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].
vis composer removeGroup: #sourceMarker.
vis composer namedGroups: (vis namedGroups copyWithout: #sourceMarker).
vis redrawNamesAndBackgrounds.
vis composer replaceElementsInGroup: #result with: result.
vis composer move: #result onTheRightOf: #source.
vis composer view canvas focusOnCenterScaled.
vis delay wait ] in TWSparseMatrix>>transposeAnimatedDelay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		delay: 	1
		result: 	(1 0 1 0
-1 3 0 0
0 0 2 0
0 0 1 0
)
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	nil
		rowMarker: 	a TWMatrixNode
		copy: 	a TWMatrixNode
		columnMarkers: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrix...etc...
	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		c...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TWSparseMatrix>>transposeAnimatedDelay:
		startpc: 	534
		numArgs: 	0



--- The full stack ---
RTComposer(Object)>>doesNotUnderstand: #namedGroups:
[ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		copy := self columns at: rowIndex.
		rowMarker := each.
		[ copy belowNeighbour row ~= 0 ]
			whileTrue: [ copy := copy belowNeighbour.
				vis selectModel: copy.
				rowMarker
					rightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).
				(columnMarkers at: copy row)
					belowNeighbour: rowMarker rightNeighbour.
				vis composer replaceElementsInGroup: #result with: result.
				vis composer move: #result onTheRightOf: #source.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait.
				vis deselectModel: copy.
				columnMarkers at: copy row put: rowMarker rightNeighbour.
				rowMarker := rowMarker rightNeighbour ].
		rowMarker rightNeighbour: each.
		vis composer replaceElementsInGroup: #result with: result.
		vis composer move: #result onTheRightOf: #source.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
result columns
	withIndexDo:
		[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].
vis composer removeGroup: #sourceMarker.
vis composer namedGroups: (vis namedGroups copyWithout: #sourceMarker).
vis redrawNamesAndBackgrounds.
vis composer replaceElementsInGroup: #result with: result.
vis composer move: #result onTheRightOf: #source.
vis composer view canvas focusOnCenterScaled.
vis delay wait ] in TWSparseMatrix>>transposeAnimatedDelay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of RTComposer did not understand #namedGroups:
9 May 2019 11:54:19.975295 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTComposer(Object)>>doesNotUnderstand: #namedGroups:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aMessage: 	namedGroups: #(#source #result)
		exception: 	MessageNotUnderstood: RTComposer>>namedGroups:
		resumeValue: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape)
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement)


[ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		copy := self columns at: rowIndex.
		rowMarker := each.
		[ copy belowNeighbour row ~= 0 ]
			whileTrue: [ copy := copy belowNeighbour.
				vis selectModel: copy.
				rowMarker
					rightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).
				(columnMarkers at: copy row)
					belowNeighbour: rowMarker rightNeighbour.
				vis composer replaceElementsInGroup: #result with: result.
				vis composer move: #result onTheRightOf: #source.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait.
				vis deselectModel: copy.
				columnMarkers at: copy row put: rowMarker rightNeighbour.
				rowMarker := rowMarker rightNeighbour ].
		rowMarker rightNeighbour: each.
		vis composer replaceElementsInGroup: #result with: result.
		vis composer move: #result onTheRightOf: #source.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
result columns
	withIndexDo:
		[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].
vis composer removeGroup: #sourceMarker.
vis composer namedGroups: (vis namedGroups copyWithout: #sourceMarker).
vis redrawNamesAndBackgrounds.
vis composer replaceElementsInGroup: #result with: result.
vis composer move: #result onTheRightOf: #source.
vis composer view canvas focusOnCenterScaled.
vis delay wait ] in TWSparseMatrix>>transposeAnimatedDelay:
	Receiver: (1 -1 0 0
0 3 0 0
1 0 2 1
0 0 0 0
)
	Arguments and temporary variables: 
		delay: 	1
		result: 	(1 0 1 0
-1 3 0 0
0 0 2 0
0 0 1 0
)
		vis: 	a MatrixOperationVisualizer
		operationProcess: 	nil
		sourceMarker: 	nil
		rowMarker: 	a TWMatrixNode
		copy: 	a TWMatrixNode
		columnMarkers: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrix...etc...
	Receiver's instance variables: 
		rows: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		columns: 	an Array(a TWMatrixNode a TWMatrixNode a TWMatrixNode a TWMatrixNode)
		rowsNumber: 	4
		columnsNumber: 	4


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		c...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	TWSparseMatrix>>transposeAnimatedDelay:
		startpc: 	534
		numArgs: 	0



--- The full stack ---
RTComposer(Object)>>doesNotUnderstand: #namedGroups:
[ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		copy := self columns at: rowIndex.
		rowMarker := each.
		[ copy belowNeighbour row ~= 0 ]
			whileTrue: [ copy := copy belowNeighbour.
				vis selectModel: copy.
				rowMarker
					rightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).
				(columnMarkers at: copy row)
					belowNeighbour: rowMarker rightNeighbour.
				vis composer replaceElementsInGroup: #result with: result.
				vis composer move: #result onTheRightOf: #source.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait.
				vis deselectModel: copy.
				columnMarkers at: copy row put: rowMarker rightNeighbour.
				rowMarker := rowMarker rightNeighbour ].
		rowMarker rightNeighbour: each.
		vis composer replaceElementsInGroup: #result with: result.
		vis composer move: #result onTheRightOf: #source.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait ].
result columns
	withIndexDo:
		[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].
vis composer removeGroup: #sourceMarker.
vis composer namedGroups: (vis namedGroups copyWithout: #sourceMarker).
vis redrawNamesAndBackgrounds.
vis composer replaceElementsInGroup: #result with: result.
vis composer move: #result onTheRightOf: #source.
vis composer view canvas focusOnCenterScaled.
vis delay wait ] in TWSparseMatrix>>transposeAnimatedDelay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TWSparseMatrixOperationVisualizer class did not understand #exampleTransposition
10 May 2019 12:02:40.316295 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TWSparseMatrixOperationVisualizer class(Object)>>doesNotUnderstand: #exampleTransposition
	Receiver: TWSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		aMessage: 	exampleTransposition
		exception: 	MessageNotUnderstood: TWSparseMatrixOperationVisualizer class>>examp...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	MatrixOperationVisualizer
		methodDict: 	a MethodDictionary(#initialize->TWSparseMatrixOperationVisualizer>>...etc...
		format: 	65555
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TWSparseMatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ TWSparseMatrixOperationVisualizer exampleTransposition
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(920632320)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(920632320)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (669@31)
		owner: 	a TransformWithLayoutMorph(451483136)
		submorphs: 	an Array(a RubPrimarySelectionMorph(475709952) a RubCursor(507751936...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (43409408) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(331248640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(507751936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(328289536))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(584.0@83.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1018814464)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(835912192) named: Pl...etc...
		lastStepTime: 	8485518
		lastStepMessage: 	nil
		lastCycleTime: 	8485570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	8485518
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(835912192) named: Pl...etc...
		lastStepTime: 	8485518
		lastStepMessage: 	nil
		lastCycleTime: 	8485570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	8485518
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(835912192) named: Pl...etc...
		lastStepTime: 	8485518
		lastStepMessage: 	nil
		lastCycleTime: 	8485570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(507751936)))
		lastAlarmTime: 	8485518
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
TWSparseMatrixOperationVisualizer class(Object)>>doesNotUnderstand: #exampleTransposition
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:30:14.078729 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This Delay has already been scheduled.
11 May 2019 10:31:53.727729 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler(Object)>>error:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aString: 	'This Delay has already been scheduled.'
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(250 msecs; 212 msecs remaining) a Delay(1000 ms...etc...
		activeDelay: 	a Delay(100 msecs; 42 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(1000 msecs; 856 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(250 msecs; 195 msecs remaining) a Delay(1000 ms...etc...
		activeDelay: 	a Delay(100 msecs; 25 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(1000 msecs; 853 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735012714602729


Delay>>wait
	Receiver: a Delay(1000 msecs; 850 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735012714602729


[ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
element isNotNil
	ifTrue: [ rightMarkerHighlightLink := MetaLink new.
		rightMarkerHighlightLink
			metaObject: [ :elementCopy | 
				"elementCopy is the copied object which we use to set a link to value:"
				"with that we know if it's selecting left and right markers or only one of them"
				| leftMatrixMarkerHightlightLink |
				leftMatrixMarkerHightlightLink := MetaLink new.
				leftMatrixMarkerHightlightLink
					metaObject: [ "the link is set to right only according to the method code"
						"left is never the object which is copied in this situation"
						self highlightModel: leftMatrixMarker inGroup: #left.
						Transcript
							show:
								'highlight left '
									, (leftMatrixMarker row @ leftMatrixMarker column) asString;
							cr.
						delay wait
						"leftMatrixMarkerHightlightLink uninstall" ].
				leftMatrixMarkerHightlightLink selector: #value.
				leftMatrixMarkerHightlightLink control: #after.
				elementCopy
					link: leftMatrixMarkerHightlightLink
					toMethodNamed: #value:.
				"highlight the right marker and uninstall itself after first use"
				self highlightModel: element inGroup: #right.
				Transcript
					show: 'highlight right ' , (element row @ element column) asString;
					cr.
				delay wait.
				"add to metaLinks in case it won't run to uninstall after animation ends"
				"metaLinks add: leftMatrixMarkerHightlightLink."
				rightMarkerHighlightLink uninstall ].
		rightMarkerHighlightLink selector: #value:.
		rightMarkerHighlightLink arguments: #(value).
		rightMarkerHighlightLink control: #after.
		element link: rightMarkerHighlightLink toMethodNamed: #copy.
		metaLinks add: rightMarkerHighlightLink ].
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs; 835 msecs remaining)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	a COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		result: 	an a subclass of COOSparseMatrix
		newNode: 	an a subclass of COOSparseMatrixNode
		continue: 	nil
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: This Delay has already been scheduled.
11 May 2019 10:32:10.633729 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler(Object)>>error:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aString: 	'This Delay has already been scheduled.'
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(250 msecs; 205 msecs remaining) a Delay(1000 ms...etc...
		activeDelay: 	a Delay(100 msecs; 66 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(1000 msecs; 884 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(250 msecs; 202 msecs remaining) a Delay(1000 ms...etc...
		activeDelay: 	a Delay(100 msecs; 62 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(1000 msecs; 881 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735012731524729


Delay>>wait
	Receiver: a Delay(1000 msecs; 880 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735012731524729


[ :element | 
| leftMarkerHighlightLink |
leftMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
element isNotNil
	ifTrue: [ leftMarkerHighlightLink := MetaLink new.
		leftMarkerHighlightLink
			metaObject: [ self highlightModel: element inGroup: #left.
				Transcript
					show: 'highlight left ' , (element row @ element column) asString;
					cr.
				delay wait.
				leftMarkerHighlightLink uninstall ].
		leftMarkerHighlightLink selector: #value.
		leftMarkerHighlightLink control: #after.
		element link: leftMarkerHighlightLink toMethodNamed: #copy ].
"draw the marker element on the view if its the initialization"
leftMarkerElement isNil
	ifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
"select the element and update the view"
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #left.
		Transcript
			show: 'select left ' , (element row @ element column) asString;
			cr.
		leftMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		element: 	an a subclass of COOSparseMatrixNode
		leftMarkerHighlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs; 867 msecs remaining)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	a COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		result: 	an a subclass of COOSparseMatrix
		newNode: 	an a subclass of COOSparseMatrixNode
		continue: 	nil
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#+
		anArray: 	an Array(a COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode continue...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#+
		linkCount: 	25


[ leftMatrix + rightMatrix ] in [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs; 848 msecs remaining)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>ensure:
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 
		aBlock: 	[ self unlink ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOS...etc...
		startpc: 	125
		numArgs: 	0


[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs; 838 msecs remaining)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	121
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler(Object)>>error:
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
[ :element | 
| leftMarkerHighlightLink |
leftMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
element isNotNil
	ifTrue: [ leftMarkerHighlightLink := MetaLink new.
		leftMarkerHighlightLink
			metaObject: [ self highlightModel: element inGroup: #left.
				Transcript
					show: 'highlight left ' , (element row @ element column) asString;
					cr.
				delay wait.
				leftMarkerHighlightLink uninstall ].
		leftMarkerHighlightLink selector: #value.
		leftMarkerHighlightLink control: #after.
		element link: leftMarkerHighlightLink toMethodNamed: #copy ].
"draw the marker element on the view if its the initialization"
leftMarkerElement isNil
	ifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
"select the element and update the view"
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #left.
		Transcript
			show: 'select left ' , (element row @ element column) asString;
			cr.
		leftMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
a subclass of COOSparseMatrix>>+
ReflectiveMethod>>run:with:in:
[ leftMatrix + rightMatrix ] in [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>ensure:
[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of GtExampleWithResult did not understand #do:
11 May 2019 9:10:12.589184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

GtExampleWithResult(Object)>>doesNotUnderstand: #do:
	Receiver: a GtExampleWithResult
	Arguments and temporary variables: 
		aMessage: 	do: [ :v | self nextPut: v ]
		exception: 	MessageNotUnderstood: GtExampleWithResult>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
		example: 	a GtExample
		result: 	nil


LimitedWriteStream(Stream)>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


LimitedWriteStream(WriteStream)>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
		newEnd: 	nil
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


LimitedWriteStream>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
		newEnd: 	nil
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


FTBasicItem>>printOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


[ :s | self printOn: s ] in FTBasicItem(Object)>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		s: 	a LimitedWriteStream
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


String class(SequenceableCollection class)>>streamContents:limitedTo:
	Receiver: String
	Arguments and temporary variables: 
		stream: 	a LimitedWriteStream
		blockWithArg: 	[ :s | self printOn: s ]
		sizeLimit: 	50000
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 315)
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings-Base'


FTBasicItem(Object)>>printStringLimitedTo:using:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		printBlock: 	[ :s | self printOn: s ]
		limitedString: 	nil
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	faTHERE_BE_DRAGONS_HERE
Instance of GtExampleWithResult did not understand #do:
11 May 2019 9:10:28.445184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

GtExampleWithResult(Object)>>doesNotUnderstand: #do:
	Receiver: a GtExampleWithResult
	Arguments and temporary variables: 
		aMessage: 	do: [ :v | self nextPut: v ]
		exception: 	MessageNotUnderstood: GtExampleWithResult>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
		example: 	a GtExample
		result: 	nil


LimitedWriteStream(Stream)>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


LimitedWriteStream(WriteStream)>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
		newEnd: 	nil
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


LimitedWriteStream>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
		newEnd: 	nil
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


FTBasicItem>>printOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


[ :s | self printOn: s ] in FTBasicItem(Object)>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		s: 	a LimitedWriteStream
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


String class(SequenceableCollection class)>>streamContents:limitedTo:
	Receiver: String
	Arguments and temporary variables: 
		stream: 	a LimitedWriteStream
		blockWithArg: 	[ :s | self printOn: s ]
		sizeLimit: 	50000
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 315)
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings-Base'


FTBasicItem(Object)>>printStringLimitedTo:using:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		printBlock: 	[ :s | self printOn: s ]
		limitedString: 	nil
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


FTBasicItem(Object)>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


FTBasicItem(Object)>>printString
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


[ :each | 'Looking inside ' , each printString ] in FTVisibleItemsStrategy>>filter
	Receiver: a FTVisibleItemsStrategy
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		pattern: 	'meta'


BlockClosure>>cull:
	Receiver: [ :each | 'Looking inside ' , each printString ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	FTVisibleItemsStrategy>>filter
		startpc: 	199
		numArgs: 	1


[ :each | 
| newLabel |
"Special handling for first and last element"
(count = 0
	or: [ count + 1 = size
			or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
	ifTrue: [ bar current: count.
		oldLabel = (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
			ifFalse: [ bar label: newLabel.
				oldLabel := newLabel ].
		lastUpdate := Time millisecondClockValue ].
aBlock value: each.
count := count + 1 ] in [ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in Array(Collection)>>do:displayingProgress:every:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
<<error during printing>>

Array(SequenceableCollection)>>do:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
| newLabel |
"Special handling for first and last element"
(...etc...
		index: 	1
	Receiver's instance variables: 
<<error during printing>>

[ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in Array(Collection)>>do:displayingProgress:every:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aBlock: 	[ :item | 
(self matchingFilter: item)
	ifNotNil: [ :itemNew | items ad...etc...
		aStringOrBlock: 	[ :each | 'Looking inside ' , each printString ]
		msecs: 	20
		size: 	1104
		count: 	0
		labelBlock: 	[ :each | 'Looking inside ' , each printString ]
		oldLabel: 	nil
		lastUpdate: 	0
		bar: 	a Job
	Receiver's instance variables: 
<<error during printing>>

BlockClosure>>cull:
	Receiver: [ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ ...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	Array(Collection)>>do:displayingProgress:every:
		startpc: 	178
		numArgs: 	1


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aS...etc...
		currentValue: 	0
		min: 	0
		max: 	1104
		title: 	''
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamiTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:15.664184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallInteger>>*
	Receiver: 190465
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:20.449184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LargePositiveInteger(LargeInteger)>>*
	Receiver: THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:23.519184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LargePositiveInteger(LargeInteger)>>*
	Receiver: THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.427184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakArray class>>finalizationProcess
	Receiver: WeakArray
	Arguments and temporary variables: 
		throttle: 	a Semaphore()
		firstMourner: 	nil
	Receiver's instance variables: 
		superclass: 	Array
		methodDict: 	a MethodDictionary()
		format: 	262144
		layout: 	a WeakLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#WeakArray
		classPool: 	a Dictionary(#FinalizationDependents->a WeakArray(a WeakRegistry(<th...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Weak-Base'


[ self finalizationProcess ] in WeakArray class>>restartFinalizationProcess
	Receiver: WeakArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Array
		methodDict: 	a MethodDictionary()
		format: 	262144
		layout: 	a WeakLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#WeakArray
		classPool: 	a Dictionary(#FinalizationDependents->a WeakArray(a WeakRegistry(<th...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Weak-Base'


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self finalizationProcess ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WeakArray class>>restartFinalizationProcess
		startpc: 	219
		numArgs: 	0



--- The full stack ---
WeakArray class>>finalizationProcess
[ self finalizationProcess ] in WeakArray class>>restartFinalizationProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.447184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.460184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.470184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.480184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.489184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.498184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.507184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.517184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.584184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

AnnouncementSet(Set)>>do:
	Receiver: an AnnouncementSet(MorphChanged MorphChangedWithArguments)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
	Receiver's instance variables: 
		tally: 	2
		array: 	{MorphChanged. MorphChangedWithArguments. nil. nil. nil}


AnnouncementSet(Collection)>>anySatisfy:
	Receiver: an AnnouncementSet(MorphChanged MorphChangedWithArguments)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each handlesAnnouncement: anAnnouncement ]
	Receiver's instance variables: 
		tally: 	2
		array: 	{MorphChanged. MorphChangedWithArguments. nil. nil. nil}


AnnouncementSet>>handlesAnnouncement:
	Receiver: an AnnouncementSet(MorphChanged MorphChangedWithArguments)
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		tally: 	2
		array: 	{MorphChanged. MorphChangedWithArguments. nil. nil. nil}


AnnouncementSubscription>>handlesAnnouncement:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	an AnnouncementSet(MorphChanged MorphChangedWithArguments)
		subscriber: 	a ScrollBar(862457856)
		action: 	MessageSend(#handleUpdate: -> a ScrollBar(862457856))


[ :each | 
(each handlesAnnouncement: anAnnouncement)
	ifTrue: [ s nextPut: each ] ] in [ :s | 
subscriptions
	do: [ :each | 
		(each handlesAnnouncement: anAnnouncement)
			ifTrue: [ s nextPut: each ] ] ] in SubscriptionRegistry>>subscriptionsHandling:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
		s: 	a WriteStream
		each: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(an AnnouncementSubscription an AnnouncementSubscription an AnnouncementSubs...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(each handlesAnnouncement: anAnnouncement)
	ifTrue: [ s next...etc...
		index: 	5
		each: 	an AnnouncementSubscription
	Receiver's instance variables: 
		tally: 	3
		array: 	an Array(nil nil an AnnouncementSubscription an AnnouncementSubscription...etc...


[ :s | 
subscriptions
	do: [ :each | 
		(each handlesAnnouncement: anAnnouncement)
			ifTrue: [ s nextPut: each ] ] ] in SubscriptionRegistry>>subscriptionsHandling:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
		s: 	a WriteStream
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Array class(SequenceableCollection class)>>new:streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		newSize: 	100
		blockWithArg: 	[ :s | 
subscriptions
	do: [ :each | 
		(each handlesAnnouncement...etc...
		stream: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array class(SequenceableCollection class)>>streamContents:
	Receiver: Array
	Arguments and temporary variables: 
		blockWithArg: 	[ :s | 
subscriptions
	do: [ :each | 
		(each handlesAnnouncement...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


SubscriptionRegistry>>subscriptionsHandling:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


[ interestedSubscriptions := self
	subscriptionsHandling: anAnnouncement ] in SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
		interestedSubscriptions: 	nil
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


[ aBlock value ] in SubscriptionRegistry>>protected:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		aBlock: 	[ interestedSubscriptions := self
	subscriptionsHandling: anAnnouncemen...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


[ caught := true.
self wait.
blockValue := mutuallyExcludedBlock value ] in Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		mutuallyExcludedBlock: 	[ aBlock value ]
		caught: 	true
		blockValue: 	nil
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


BlockClosure>>ensure:
	Receiver: [ caught := true.
self wait.
blockValue := mutuallyExcludedBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ caught
	ifTrue: [ self signal ] ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Semaphore>>critical:
		startpc: 	70
		numArgs: 	0


Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		caught: 	true
		blockValue: 	nil
		mutuallyExcludedBlock: 	[ aBlock value ]
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


SubscriptionRegistry>>protected:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		aBlock: 	[ interestedSubscriptions := self
	subscriptionsHandling: anAnnouncemen...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	nil
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
		announcement: 	a FTSelectionChanged
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


FTTableMorph(Morph)>>doAnnounce:
	Receiver: a FTTableMorph(786495744)
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(312303616)
		submorphs: 	an Array(a FTTableContainerMorph(437913856) a ScrollBar(862457856))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (594942976) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(437913856)
		verticalScrollBar: 	a ScrollBar(862457856)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph>>selectRowIndexes:andMakeVisibleIf:
	Receiver: a FTTableMorph(786495744)
	Arguments and temporary variables: 
		anArray: 	#(1)
		shouldEnsureVisibleSelection: 	true
		oldSelectedRowIndexes: 	#()
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(312303616)
		submorphs: 	an Array(a FTTableContainerMorph(437913856) a ScrollBar(862457856))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (594942976) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(437913856)
		verticalScrollBar: 	a ScrollBar(862457856)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph>>selectRowIndexes:
	Receiver: a FTTableMorph(786495744)
	Arguments and temporary variables: 
		anArray: 	#(1)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(312303616)
		submorphs: 	an Array(a FTTableContainerMorph(437913856) a ScrollBar(862457856))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (594942976) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(437913856)
		verticalScrollBar: 	a ScrollBar(862457856)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph>>selectRowIndex:
	Receiver: a FTTableMorph(786495744)
	Arguments and temporary variables: 
		aNumber: 	1
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(312303616)
		submorphs: 	an Array(a FTTableContainerMorph(437913856) a ScrollBar(862457856))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (594942976) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(437913856)
		verticalScrollBar: 	a ScrollBar(862457856)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


GLMFastTableDataSource(GLMFastListDataSource)>>explicitSelection:
	Receiver: a GLMFastTableDataSource
	Arguments and temporary variables: 
		anObject: 	LargePositiveInteger(LargeInteger)>>*
	Receiver's instance variables: 
		table: 	a FTTableMorph(786495744)
		elements: 	an OrderedCollection(LargePositiveInteger(LargeInteger)>>* LargePosit...etc...
		glamourPresentation: 	a GLMFastTablePresentation(id=703217664 title='Stack' pane...etc...
		announcer: 	a GLMAnnouncer
		tagsToFilterBy: 	an OrderedCollection()
		dataCache: 	nil
		columnToSortBy: 	nil


[ tableModel explicitSelection: aPresentation selection ] in GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>render:
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=703217664 title='Stack' pane=a GLM...etc...
		container: 	a GLMPanelMorph(312303616)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(786495744)


BlockClosure>>ensure:
	Receiver: [ tableModel explicitSelection: aPresentation selection ]
	Arguments and temporary variables: 
		aBlock: 	[ suspendedAnnouncemets := previousSuspendedAnnouncemets ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>render:
		startpc: 	154
		numArgs: 	0


GLMAnnouncer>>suspendAll:while:
	Receiver: a GLMAnnouncer
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(GLMTreeMorphSelectionChanged GLMTreeMorphStro...etc...
		aBlock: 	[ tableModel explicitSelection: aPresentation selection ]
		previousSuspendedAnnouncemets: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	an OrderedCollection(GLMTreeMorphSelectionChanged GLMTre...etc...


GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>render:
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=703217664 title='Stack' pane=a GLM...etc...
		container: 	a GLMPanelMorph(312303616)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(786495744)


GLMMorphicFastTableRenderer class(GLMMorphicWidgetRenderer class)>THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.763184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallInteger(Magnitude)>>between:and:
	Receiver: 1941
	Arguments and temporary variables: 
		min: 	1
		max: 	4166
	Receiver's instance variables: 
1941

Interval>>at:
	Receiver: (24 to: 99999 by: 24)
	Arguments and temporary variables: 
		anInteger: 	1941
	Receiver's instance variables: 
		start: 	24
		stop: 	99999
		step: 	24


Array(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: #(24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 ...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	4166
		replacement: 	(24 to: 99999 by: 24)
		repStart: 	1
		index: 	1941
		repOff: 	0
	Receiver's instance variables: 
#(24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 ...etc...

Array>>replaceFrom:to:with:startingAt:
	Receiver: #(24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 ...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	4166
		replacement: 	(24 to: 99999 by: 24)
		repStart: 	1
	Receiver's instance variables: 
#(24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 ...etc...

Array(SequenceableCollection)>>replaceFrom:to:with:
	Receiver: #(24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 ...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	4166
		replacement: 	(24 to: 99999 by: 24)
	Receiver's instance variables: 
#(24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 ...etc...

Array class(ArrayedCollection class)>>withAll:
	Receiver: Array
	Arguments and temporary variables: 
		aCollection: 	(24 to: 99999 by: 24)
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Interval(SequenceableCollection)>>asArray
	Receiver: (24 to: 99999 by: 24)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		start: 	24
		stop: 	99999
		step: 	24


RubParagraph>>tabWidth:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		anInteger: 	24
		newTextStyle: 	a TextStyle Source Code Pro
		tabsArray: 	nil
	Receiver's instance variables: 
		text: 	a Text for 'finalizationProcess
	"The finalization process arranges to se...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@7878)
		drawingEnabled: 	true
		textArea: 	a RubEditingArea(650254592)


Message>>sendTo:
	Receiver: tabWidth: 24
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#tabWidth:
		args: 	#(24)
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: tabWidth: 24
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#tabWidth:
		args: 	#(24)
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


Message>>sendTo:
	Receiver: tabWidth: 24
	Arguments and temporary variables: 
		receiver: 	a RubExtraSelectionDecorator
	Receiver's instance variables: 
		selector: 	#tabWidth:
		args: 	#(24)
		lookupClass: 	RubCurrentLineBarDecorator


[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


Message>>sendTo:
	Receiver: tabWidth: 24
	Arguments and temporary variables: 
		receiver: 	a RubCurrentLineBarDecorator
	Receiver's instance variables: 
		selector: 	#tabWidth:
		args: 	#(24)
		lookupClass: 	RubShoutStylerDecorator


[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'finalizationProcess
	"The finalization process arranges to se...etc...
		replaceStart: 	1
		replaceStop: 	1197


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand...etc...
		startpc: 	62
		numArgs: 	0


RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'finalizationProcess
	"The finalization process arranges to se...etc...
		replaceStart: 	1
		replaceStop: 	1197


RubEditingArea(RubAbstractTextArea)>>tabWidth:
	Receiver: a RubEditingArea(650254592)
	Arguments and temporary variables: 
		anInteger: 	24
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@7878)
		owner: 	a TransformWithLayoutMorph(19149824)
		submorphs: 	an Array(a RubCursor(803362048) a RubPrimarySelectionMorph(879472640...etc...
		fullBounds: 	(0@0) corner: (38@7878)
		color: 	Color transparent
		extension: 	a MorphExtension (167786752) [other:  (announcer -> an Announcer)]
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(349137920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(803362048)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubScrolledTextMorph>>tabWidth:
	Receiver: a RubScrolledTextMorph(1036770560)
	Arguments and temporary variables: 
		anInteger: 	24
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubTextScrollPane(349137920) a RubAdornmentDisplayer(6225...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (968647936) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(349137920)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(1069293568) a RubAdorn...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=626499840 title='Source' pane=a ...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1036770560)
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=626499840 title='Source' pane=a ...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicPharoCodeRenderer
		methodDict: 	a MethodDictionary(#methodBindingsStrategy->GLMMorphicPharoMethodRe...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPharoMethodRenderer
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'


GLMMorphicRenderer>>renderPharoMethodPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aSmalltalkMethodPresentation: 	a GLMPharoMethodPresentation(id=626499840 title='...etc...
	Receiver's instance variables: 
		window: 	nil


GLMPharoMethodPresentation>>renderGlamorouslyOn:
	Receiver: a GLMPharoMethodPresentation(id=626499840 title='Source' pane=a GLMPane(35682304 code))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(35682304 code)
		title: 	'Source'
		titleIcon: 	nil
		transformation: 	[ :x | x ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMPharoMethodPresentation(id=150571008 title='Source' pane=...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	[ :code | 
code
	selectionInterval: (self session selected...etc...
		cachedDisplayedValue: 	WeakArray class>>finalizationProcess
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	[ aContext sourceCode ]
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	[ aContext receiver ]
		doItContext: 	[ aContext ]
		textBlock: 	nil
		selectedTextBlock: 	nil
		withLineNumbers: 	false
		withAnnotation: 	false
		wrapped: 	true
		tabWidth: 	nil
		withColumns: 	false
		textSegmeTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:24.944184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ImageMorph(Morph)>>valueOfProperty:ifAbsent:
	Receiver: an ImageMorph(977446144)
	Arguments and temporary variables: 
		aSymbol: 	#hasDropShadow
		aBlock: 	[ false ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1@1)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		image: 	Form(1x1x1)


ImageMorph(Morph)>>hasDropShadow
	Receiver: an ImageMorph(977446144)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1@1)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		image: 	Form(1x1x1)


ImageMorph(Morph)>>outerBounds
	Receiver: an ImageMorph(977446144)
	Arguments and temporary variables: 
		box: 	(0@0) corner: (1@1)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1@1)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		image: 	Form(1x1x1)


ImageMorph(Morph)>>privateFullBounds
	Receiver: an ImageMorph(977446144)
	Arguments and temporary variables: 
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1@1)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		image: 	Form(1x1x1)


ImageMorph(Morph)>>changed
	Receiver: an ImageMorph(977446144)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1@1)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		image: 	Form(1x1x1)


ImageMorph>>form:
	Receiver: an ImageMorph(977446144)
	Arguments and temporary variables: 
		aForm: 	Form(1x1x1)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1@1)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		image: 	Form(1x1x1)


ImageMorph>>initialize
	Receiver: an ImageMorph(977446144)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1@1)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		image: 	Form(1x1x1)


ImageMorph class(Behavior)>>new
	Receiver: ImageMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Morph
		methodDict: 	a MethodDictionary(#addCustomMenuItems:hand:->ImageMorph>>#addCusto...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AlphaImageMorph. ThreePhaseButtonMorph. GLMPagerPanePreviewMorph}
		name: 	#ImageMorph
		classPool: 	a Dictionary(#DefaultForm->Form(1x1x1) )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Base-Basic'
		announcer: 	nil
		users: 	nil


RubScrollBar(ScrollBar)>>updateDownButtonImage
	Receiver: a RubScrollBar(418175232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(127.0@28.0) corner: (169.0@36.0)
		owner: 	a RubTextScrollPane(1050789888)
		submorphs: 	an Array(a BorderedMorph(794943744))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (53216256) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(1050789888)
		slider: 	a BorderedMorph(1053492480)
		value: 	0.06058190514149064
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(48660480)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(794943744)
		downButton: 	a BorderedMorph(720234752)
		pagingArea: 	a Morph(697121792)
		scrollDelta: 	0.0011956954962136308
		pageDelta: 	0.011956954962136309
		interval: 	0.011815675462780622
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(ScrollBar)>>initializeDownButton
	Receiver: a RubScrollBar(418175232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(127.0@28.0) corner: (169.0@36.0)
		owner: 	a RubTextScrollPane(1050789888)
		submorphs: 	an Array(a BorderedMorph(794943744))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (53216256) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(1050789888)
		slider: 	a BorderedMorph(1053492480)
		value: 	0.06058190514149064
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(48660480)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(794943744)
		downButton: 	a BorderedMorph(720234752)
		pagingArea: 	a Morph(697121792)
		scrollDelta: 	0.0011956954962136308
		pageDelta: 	0.011956954962136309
		interval: 	0.011815675462780622
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(ScrollBar)>>initializeSlider
	Receiver: a RubScrollBar(418175232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(127.0@28.0) corner: (169.0@36.0)
		owner: 	a RubTextScrollPane(1050789888)
		submorphs: 	an Array(a BorderedMorph(794943744))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (53216256) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(1050789888)
		slider: 	a BorderedMorph(1053492480)
		value: 	0.06058190514149064
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(48660480)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(794943744)
		downButton: 	a BorderedMorph(720234752)
		pagingArea: 	a Morph(697121792)
		scrollDelta: 	0.0011956954962136308
		pageDelta: 	0.011956954962136309
		interval: 	0.011815675462780622
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(Slider)>>extent:
	Receiver: a RubScrollBar(418175232)
	Arguments and temporary variables: 
		newExtent: 	(42@8)
	Receiver's instance variables: 
		bounds: 	(127.0@28.0) corner: (169.0@36.0)
		owner: 	a RubTextScrollPane(1050789888)
		submorphs: 	an Array(a BorderedMorph(794943744))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (53216256) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(1050789888)
		slider: 	a BorderedMorph(1053492480)
		value: 	0.06058190514149064
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(48660480)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(794943744)
		downButton: 	a BorderedMorph(720234752)
		pagingArea: 	a Morph(697121792)
		scrollDelta: 	0.0011956954962136308
		pageDelta: 	0.011956954962136309
		interval: 	0.011815675462780622
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(ScrollBar)>>extent:
	Receiver: a RubScrollBar(418175232)
	Arguments and temporary variables: 
		p: 	(13.0@2.0)
	Receiver's instance variables: 
		bounds: 	(127.0@28.0) corner: (169.0@36.0)
		owner: 	a RubTextScrollPane(1050789888)
		submorphs: 	an Array(a BorderedMorph(794943744))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (53216256) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(1050789888)
		slider: 	a BorderedMorph(1053492480)
		value: 	0.06058190514149064
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(48660480)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(794943744)
		downButton: 	a BorderedMorph(720234752)
		pagingArea: 	a Morph(697121792)
		scrollDelta: 	0.0011956954962136308
		pageDelta: 	0.011956954962136309
		interval: 	0.011815675462780622
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(Morph)>>bounds:
	Receiver: a RubScrollBar(418175232)
	Arguments and temporary variables: 
		newBounds: 	(127.0@28.0) corner: (140.0@30.0)
		oldExtent: 	(42.0@30.0)
		newExtent: 	(13.0@2.0)
	Receiver's instance variables: 
		bounds: 	(127.0@28.0) corner: (169.0@36.0)
		owner: 	a RubTextScrollPane(1050789888)
		submorphs: 	an Array(a BorderedMorph(794943744))
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (53216256) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(1050789888)
		slider: 	a BorderedMorph(1053492480)
		value: 	0.06058190514149064
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(48660480)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(794943744)
		downButton: 	a BorderedMorph(720234752)
		pagingArea: 	a Morph(697121792)
		scrollDelta: 	0.0011956954962136308
		pageDelta: 	0.011956954962136309
		interval: 	0.011815675462780622
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubTextScrollPane(GeneralScrollPane)>>vResizeScrollbar
	Receiver: a RubTextScrollPane(1050789888)
	Arguments and temporary variables: 
		b: 	(127.0@28.0) corner: (140.0@30.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(404981760)
		submorphs: 	an Array(a RubScrollBar(418175232) a TransformWithLayoutMorph(800934...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (735167488) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(80093440)
		hScrollbar: 	a RubScrollBar(413877504)
		vScrollbar: 	a RubScrollBar(418175232)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>vUpdateScrollbar
	Receiver: a RubTextScrollPane(1050789888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(404981760)
		submorphs: 	an Array(a RubScrollBar(418175232) a TransformWithLayoutMorph(800934...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (735167488) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(80093440)
		hScrollbar: 	a RubScrollBar(413877504)
		vScrollbar: 	a RubScrollBar(418175232)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>updateScrollbars
	Receiver: a RubTextScrollPane(1050789888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(404981760)
		submorphs: 	an Array(a RubScrollBar(418175232) a TransformWithLayoutMorph(800934...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (735167488) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(80093440)
		hScrollbar: 	a RubScrollBar(413877504)
		vScrollbar: 	a RubScrollBar(418175232)
		drawFocusBorder: 	true


RubTextScrollPane>>updateScrollbars
	Receiver: a RubTextScrollPane(1050789888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(404981760)
		submorphs: 	an Array(a RubScrollBar(418175232) a TransformWithLayoutMorph(800934...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (735167488) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(80093440)
		hScrollbar: 	a RubScrollBar(413877504)
		vScrollbar: 	a RubScrollBar(418175232)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>extent:
	Receiver: a RubTextScrollPane(1050789888)
	Arguments and temporary variables: 
		newExtent: 	(135.0@2.0)
		scrollbarChange: 	false
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(404981760)
		submorphs: 	an Array(a RubScrollBar(418175232) a TransformWithLayoutMorph(800934...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (735167488) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(80093440)
		hScrollbar: 	a RubScrollBar(413877504)
		vScrollbar: 	a RubScrollBar(418175232)
		drawFocusBorder: 	true


RubTextScrollPane>>extent:
	Receiver: a RubTextScrollPane(1050789888)
	Arguments and temporary variables: 
		newExtent: 	(135.0@2.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(404981760)
		submorphs: 	an Array(a RubScrollBar(418175232) a TransformWithLayoutMorph(800934...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (735167488) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(80093440)
		hScrollbar: 	a RubScrollBar(413877504)
		vScrollbar: 	a RubScrollBar(418175232)
		drawFocusBorder: 	true


RubScrolledTextMorph>>manageLayoutInBounds:
	Receiver: a RubScrolledTextMorph(404981760)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:25.129184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 4 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 60 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 2 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 1 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145138184


Delay>>wait
	Receiver: a Delay(100 msecs; 0 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145138184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:25.287184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145279184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145279184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:25.450184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145380184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145380184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:25.639184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145567184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145567184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:25.818184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145760184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054145760184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:26.007184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RubCharacterBlockScanner(RubCharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a RubCharacterBlockScanner
	Arguments and temporary variables: 
		startIndex: 	14
		stopIndex: 	13
		sourceString: 	'do: aBlock 
	tally = 0 ifTrue: [^ self].
	1 to: array size do:
	...etc...
		rightX: 	998
		stops: 	a RubTextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	nil
		widthAndKernedWidth: 	nil
		nextChar: 	nil
		atEndOfRun: 	nil
	Receiver's instance variables: 
		destX: 	30
		lastIndex: 	14
		destY: 	25
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'do: aBlock 
	tally = 0 ifTrue: [^ self].
	1 to: array size do...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	998
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 13 to: 41
		runStopIndex: 	13
		spaceCount: 	0
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	nil
		pendingKernX: 	0
		characterPoint: 	(998@44)
		characterIndex: 	14
		lastCharacter: 	nil
		lastCharacterExtent: 	(7.8000030517578125@19)
		lastSpaceOrTabExtent: 	(24@19)
		nextLeftMargin: 	nil
		specialWidth: 	nil


RubCharacterBlockScanner(RubCharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a RubCharacterBlockScanner
	Arguments and temporary variables: 
		startIndex: 	14
		stopIndex: 	13
		sourceString: 	'do: aBlock 
	tally = 0 ifTrue: [^ self].
	1 to: array size do:
	...etc...
		rightX: 	998
		stops: 	a RubTextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	30
		lastIndex: 	14
		destY: 	25
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'do: aBlock 
	tally = 0 ifTrue: [^ self].
	1 to: array size do...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	998
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 13 to: 41
		runStopIndex: 	13
		spaceCount: 	0
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	nil
		pendingKernX: 	0
		characterPoint: 	(998@44)
		characterIndex: 	14
		lastCharacter: 	nil
		lastCharacterExtent: 	(7.8000030517578125@19)
		lastSpaceOrTabExtent: 	(24@19)
		nextLeftMargin: 	nil
		specialWidth: 	nil


RubCharacterBlockScanner>>characterBlockAtPoint:index:in:
	Receiver: a RubCharacterBlockScanner
	Arguments and temporary variables: 
		aPoint: 	nil
		index: 	14
		textLine: 	a RubTextLine 13 to: 41
		runLength: 	1
		lineStop: 	14
		stopCondition: 	#tab
	Receiver's instance variables: 
		destX: 	30
		lastIndex: 	14
		destY: 	25
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'do: aBlock 
	tally = 0 ifTrue: [^ self].
	1 to: array size do...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	998
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 13 to: 41
		runStopIndex: 	13
		spaceCount: 	0
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	nil
		pendingKernX: 	0
		characterPoint: 	(998@44)
		characterIndex: 	14
		lastCharacter: 	nil
		lastCharacterExtent: 	(7.8000030517578125@19)
		lastSpaceOrTabExtent: 	(24@19)
		nextLeftMargin: 	nil
		specialWidth: 	nil


RubParagraph>>characterBlockForIndex:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		index: 	14
		line: 	a RubTextLine 13 to: 41
	Receiver's instance variables: 
		text: 	a Text for 'do: aBlock 
	tally = 0 ifTrue: [^ self].
	1 to: array size do...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (1004@126)
		drawingEnabled: 	true
		textArea: 	a RubEditingArea(13166592)


Message>>sendTo:
	Receiver: characterBlockForIndex: 14
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#characterBlockForIndex:
		args: 	#(14)
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 14
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 14
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: characterBlockForIndex: 14
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#characterBlockForIndex:
		args: 	#(14)
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 14
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 14
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


Message>>sendTo:
	Receiver: characterBlockForIndex: 14
	Arguments and temporary variables: 
		receiver: 	a RubExtraSelectionDecorator
	Receiver's instance variables: 
		selector: 	#characterBlockForIndex:
		args: 	#(14)
		lookupClass: 	RubCurrentLineBarDecorator


[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 14
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 14
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


Message>>sendTo:
	Receiver: characterBlockForIndex: 14
	Arguments and temporary variables: 
		receiver: 	a RubCurrentLineBarDecorator
	Receiver's instance variables: 
		selector: 	#characterBlockForIndex:
		args: 	#(14)
		lookupClass: 	RubShoutStylerDecorator


[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 14
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'do: aBlock 
	tally = 0 ifTrue: [^ self].
	1 to: array size do...etc...
		replaceStart: 	1
		replaceStop: 	164


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand...etc...
		startpc: 	62
		numArgs: 	0


RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 14
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'do: aBlock 
	tally = 0 ifTrue: [^ self].
	1 to: array size do...etc...
		replaceStart: 	1
		replaceStop: 	164


RubPrimarySelectionMorph(RubTextSegmentMorph)>>characterBlockForIndex:
	Receiver: a RubPrimarySelectionMorph(101171456)
	Arguments and temporary variables: 
		anIndex: 	14
	Receiver's instance variables: 
		bounds: 	(30@25) corner: (70@44)
		owner: 	a RubEditingArea(13166592)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (67739648) [other:  (announcer -> an Announcer)]
		vertices: 	an OrderedCollection((30.0@44) (30.0@25) (69.00001525878906@25) (69.0...etc...
		filledForm: 	nil
		smoothCurve: 	false
		curveState: 	nil
		borderForm: 	nil
		borderColor: 	nil
		borderWidth: 	nil
		textArea: 	a RubEditingArea(13166592)
		firstIndex: 	14
		lastIndex: 	19
		icon: 	nil
		iconBlock: 	nil
		label: 	nil
		changeable: 	false


RubPrimarySelectionMorph(RubTextSegmentMorph)>>computeStraightVertices
	Receiver: a RubPrimarySelectionMorph(101171456)
	Arguments and temporary variables: 
		firstCB: 	nil
		lastCB: 	nil
		firstLineIndex: 	nil
		lastLineIndex: 	nil
		firstLine: 	nil
		lastLine: 	nil
		verts: 	nil
		secondLine: 	nil
		thirdLine: 	nil
	Receiver's instance variables: 
		bounds: 	(30@25) corner: (70@44)
		owner: 	a RubEditingArea(13166592)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (67739648) [other:  (announcer -> an Announcer)]
		vertices: 	an OrderedCollection((30.0@44) (30.0@25) (69.00001525878906@25) (69.0...etc...
		filledForm: 	nil
		smoothCurve: 	false
		curveState: 	nil
		borderForm: 	nil
		borderColor: 	nil
		borderWidth: 	nil
		textArea: 	a RubEditingArea(13166592)
		firstIndex: 	14
		lastIndex: 	19
		icon: 	nil
		iconBlock: 	nil
		label: 	nil
		changeable: 	false


RubPrimarySelectionMorph(RubTextSegmentMorph)>>computeVertices
	Receiver: a RubPrimarySelectionMorph(101171456)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(30@25) corner: (70@44)
		owner: 	a RubEditingArea(13166592)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (67739648) [other:  (announcer -> an Announcer)]
		vertices: 	an OrderedCollection((30.0@44) (30.0@25) (69.00001525878906@25) (69.0...etc...
		filledForm: 	nil
		smoothCurve: 	false
		curveState: 	nil
		borderForm: 	nil
		borderColor: 	nil
		borderWidth: 	nil
		textArea: 	a RubEditingArea(13166592)
		firstIndex: 	14
		lastIndex: 	19
		icon: 	nil
		iconBlock: 	nil
		label: 	nil
		changeable: 	false


RubPrimarySelectionMorph(RubTextSegmentMorph)>>whenExtentChanged:
	Receiver: a RubPrimarySelectionMorph(101171456)
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
	Receiver's instance variables: 
		bounds: 	(30@25) corner: (70@44)
		owner: 	a RubEditingArea(13166592)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (67739648) [other:  (announcer -> an Announcer)]
		vertices: 	an OrderedCollection((30.0@44) (30.0@25) (69.00001525878906@25) (69.0...etc...
		filledForm: 	nil
		smoothCurve: 	false
		curveState: 	nil
		borderForm: 	nil
		borderColor: 	nil
		borderWidth: 	nil
		textArea: 	a RubEditingArea(13166592)
		firstIndex: 	14
		lastIndex: 	19
		icon: 	nil
		iconBlock: 	nil
		label: 	nil
		changeable: 	false


MessageSend>>value:
	Receiver: MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(101171456))
	Arguments and temporary variables: 
		anObject: 	a RubExtentChanged
	Receiver's instance variables: 
		receiver: 	a RubPrimarySelectionMorph(101171456)
		selector: 	#whenExtentChanged:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(101171456))
	Arguments and temporary variables: 
		arg: 	a RubExtentChanged
	Receiver's instance variables: 
		receiver: 	a RubPrimarySelectionMorph(101171456)
		selector: 	#whenExtentChanged:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(101171456))
	Arguments and temporary variables: 
		arg1: 	a RubExtentChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a RubPrimarySelectionMorph(101171456)
		selector: 	#whenExtentChanged:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubExtentChanged
		subscriber: 	a RubPrimarySelectionMorph(101171456)
		action: 	MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(101171456...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubExtentChanged
		subscriber: 	a RubPrimarySelectionMorph(101171456)
		action: 	MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(101171456...etc...


THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:53.986184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LargePositiveInteger(LargeInteger)>>*
	Receiver: THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:55.124184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 51 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 88 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 50 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 49 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054175178184


Delay>>wait
	Receiver: a Delay(100 msecs; 47 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054175178184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:55.521184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LargePositiveInteger(LargeInteger)>>*
	Receiver: THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:55.750184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:55.760184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:55.929184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RxMatcher>>restoreState:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aBlock: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxmSubstring>>matchAgainst:
	Receiver: a RxmSubstring
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		originalState: 	[ stream position: origPosition ]
		sampleStream: 	a ReadStream
		mismatch: 	true
	Receiver's instance variables: 
		next: 	a RxmBranch
		sample: 	'>>>'
		compare: 	[ :char1 :char2 | char1 = char2 ]


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	179
	Receiver's instance variables: 
		next: 	a RxmSubstring
		index: 	6


RxmLink>>matchAgainst:
	Receiver: a RxmLink
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink



--- The full stack ---
RxMatcher>>restoreState:
RxmSubstring>>matchAgainst:
RxmMarker>>matchAgainst:
RxmLink>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxMatcher>>tryMatch
RxMatcher>>searchStream:
RxMatcher>>matchesOnStream:do:
RxMatcher>>matchesIn:do:
RxMatcher>>matchingRangesIn:
PharoDocCommentNode class>>docCommentRangesIn:
PharoDocCommentNode class>>parseDocComments:
RBComment>>pharoDocCommentNodes
SHRBTextStyler>>styleDocComment:
[ :comment | self styleDocComment: comment ] in SHRBTextStyler>>visitMethodComments:
Array(SequenceableCollection)>>do:
SHRBTextStyler>>visitMethodComments:
SHRBTextStyler>>visitMethodNode:
RBMethodNode>>acceptVisitor:
SHRBTextStyler>>style:ast:
SHRBTextStyler>>privateStyle:
SHRBTextStyler(SHTextStyler)>>style:
[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
BlockClosure>>on:do:
RubShoutStylerDecorator>>style:
[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
BlockClosure>>ensure:
RubParagraph>>disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
RubShoutStylerDecorator>>text:
RubEditingArea(RubAbstractTextArea)>>privateText:
[ self privateText: stringOrText ] in RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubEditingArea(RubAbstractTextArea)>>handleParagraphChange:
RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubTextScrollPane>>setTextWith:
RubScrolledTextMorph>>setTextWith:
RubScrolledTextMorph>>model:
GLMMorphicPharoMethodRenderer>>morph
GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPharoMethodPresentation:
GLMPharoMethodPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
LazyTabPage>>actualPageMorph
LazyTabGroupMorph>>pageAt:
LazyTabGroupMorph>>updatePageIndex:
LazyTabGroupMorph(TabGroupMorph)>>update:
LazyTabGroupMorph(Object)>>update:with:
MorphChangedWithArguments>>deliverTo:
LazyTabGroupMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
GLMTabSelectorBrick(Morph)>>doAnnounce:
GLMTabSelectorBrick(Morph)>>changed:with:
GLMTabSelectorBrick>>selectedIndex:
LazyTabGroupMorph(TabGroupMorph)>>selectedPageIndex:
[ tabs selectedPageIndex: index ] in GLMMorphicTabbedRenderer>>render:
BlockClosure>>ensure:
GLMAnnouncer>>THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:56.121184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallFloat64(Float)>>asTrueFraction
	Receiver: 13.0
	Arguments and temporary variables: 
		signexp: 	nil
		positive: 	nil
		expPart: 	nil
		exp: 	nil
		fraction: 	nil
		fractionPart: 	nil
		signedFraction: 	nil
		result: 	nil
		zeroBitsCount: 	nil
	Receiver's instance variables: 
13.0

SmallFloat64(Float)>>adaptToInteger:andCompare:
	Receiver: 13.0
	Arguments and temporary variables: 
		rcvr: 	39
		selector: 	#'<='
	Receiver's instance variables: 
13.0

SmallInteger(Integer)>><=
	Receiver: 39
	Arguments and temporary variables: 
		aNumber: 	13.0
	Receiver's instance variables: 
39

SmallInteger>><=
	Receiver: 39
	Arguments and temporary variables: 
		aNumber: 	13.0
	Receiver's instance variables: 
39

Rectangle>>intersects:
	Receiver: (37.0@13.0) corner: (50.0@28.0)
	Arguments and temporary variables: 
		aRectangle: 	(1@1) corner: (49@39)
		rOrigin: 	(1@1)
		rCorner: 	(49@39)
	Receiver's instance variables: 
		origin: 	(37.0@13.0)
		corner: 	(50.0@28.0)


Rectangle>>intersect:ifNone:
	Receiver: (37.0@13.0) corner: (50.0@28.0)
	Arguments and temporary variables: 
		aRectangle: 	(1@1) corner: (49@39)
		aBlock: 	[ ^ self ]
		aPoint: 	nil
		left: 	nil
		right: 	nil
		top: 	nil
		bottom: 	nil
	Receiver's instance variables: 
		origin: 	(37.0@13.0)
		corner: 	(50.0@28.0)


GLMPanelMorph(Morph)>>invalidRect:from:
	Receiver: a GLMPanelMorph(203147520)
	Arguments and temporary variables: 
		aRectangle: 	(37.0@13.0) corner: (50.0@28.0)
		aMorph: 	a GLMPanelMorph(878337024)
		damageRect: 	(37.0@13.0) corner: (50.0@28.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a LazyTabGroupMorph(408841472)
		submorphs: 	an Array(a GLMPanelMorph(878337024))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (527915008) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


GLMPanelMorph(Morph)>>invalidRect:from:
	Receiver: a GLMPanelMorph(878337024)
	Arguments and temporary variables: 
		aRectangle: 	(37.0@13.0) corner: (50.0@28.0)
		aMorph: 	a GLMPanelMorph(339923200)
		damageRect: 	(37.0@13.0) corner: (50.0@28.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(203147520)
		submorphs: 	an Array(a GLMPanelMorph(339923200))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (785945600) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


GLMPanelMorph(Morph)>>invalidRect:from:
	Receiver: a GLMPanelMorph(339923200)
	Arguments and temporary variables: 
		aRectangle: 	(37.0@13.0) corner: (50.0@28.0)
		aMorph: 	a GLMPanelMorph(216855808)
		damageRect: 	(37.0@13.0) corner: (50.0@28.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(878337024)
		submorphs: 	an Array(a GLMPanelMorph(216855808))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (419041280) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


GLMPanelMorph(Morph)>>invalidRect:from:
	Receiver: a GLMPanelMorph(216855808)
	Arguments and temporary variables: 
		aRectangle: 	(37.0@13.0) corner: (50.0@28.0)
		aMorph: 	a FTTableMorph(155244800)
		damageRect: 	(37.0@13.0) corner: (50.0@28.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(339923200)
		submorphs: 	an Array(a FTTableMorph(155244800))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (9948160) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


FTTableMorph(Morph)>>invalidRect:from:
	Receiver: a FTTableMorph(155244800)
	Arguments and temporary variables: 
		aRectangle: 	(37.0@13.0) corner: (50.0@28.0)
		aMorph: 	a ScrollBar(769817856)
		damageRect: 	(37.0@13.0) corner: (50.0@28.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(216855808)
		submorphs: 	an Array(a FTTableContainerMorph(816695296) a ScrollBar(769817856))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (557179136) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(816695296)
		verticalScrollBar: 	a ScrollBar(769817856)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


ScrollBar(Morph)>>invalidRect:from:
	Receiver: a ScrollBar(769817856)
	Arguments and temporary variables: 
		aRectangle: 	(37.0@13.0) corner: (50.0@28.0)
		aMorph: 	a BorderedMorph(410518528)
		damageRect: 	(37.0@13.0) corner: (50.0@28.0)
	Receiver's instance variables: 
		bounds: 	(37.0@0.0) corner: (50.0@42.0)
		owner: 	a FTTableMorph(155244800)
		submorphs: 	an Array(a BorderedMorph(410518528) a Morph(794756352) a BorderedMor...etc...
		fullBounds: 	(37@0) corner: (50@42)
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (124944384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a FTTableMorph(155244800)
		slider: 	a BorderedMorph(410518528)
		value: 	0.0
		setValueSelector: 	#verticalScrollBarValue:
		sliderShadow: 	a BorderedMorph(776071424)
		sliderColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(693713920)
		downButton: 	a BorderedMorph(562203904)
		pagingArea: 	a Morph(794756352)
		scrollDelta: 	(1/6)
		pageDelta: 	0
		interval: 	0.32786885245901637
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)


BorderedMorph(Morph)>>invalidRect:from:
	Receiver: a BorderedMorph(410518528)
	Arguments and temporary variables: 
		aRectangle: 	(37.0@13.0) corner: (50.0@28.0)
		aMorph: 	a BorderedMorph(410518528)
		damageRect: 	(37.0@13.0) corner: (50.0@28.0)
	Receiver's instance variables: 
		bounds: 	(37.0@13.0) corner: (50.0@28.0)
		owner: 	a ScrollBar(769817856)
		submorphs: 	#()
		fullBounds: 	(37.0@13.0) corner: (50.0@28.0)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (36190208) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color transparent


BorderedMorph(Morph)>>invalidRect:
	Receiver: a BorderedMorph(410518528)
	Arguments and temporary variables: 
		damageRect: 	(37.0@13.0) corner: (50.0@28.0)
	Receiver's instance variables: 
		bounds: 	(37.0@13.0) corner: (50.0@28.0)
		owner: 	a ScrollBar(769817856)
		submorphs: 	#()
		fullBounds: 	(37.0@13.0) corner: (50.0@28.0)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (36190208) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color transparent


BorderedMorph(Morph)>>changed
	Receiver: a BorderedMorph(410518528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(37.0@13.0) corner: (50.0@28.0)
		owner: 	a ScrollBar(769817856)
		submorphs: 	#()
		fullBounds: 	(37.0@13.0) corner: (50.0@28.0)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (36190208) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color transparent


BorderedMorph(Morph)>>fillStyle:
	Receiver: a BorderedMorph(410518528)
	Arguments and temporary variables: 
		aFillStyle: 	a SolidFillStyle((Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0))
	Receiver's instance variables: 
		bounds: 	(37.0@13.0) corner: (50.0@28.0)
		owner: 	a ScrollBar(769817856)
		submorphs: 	#()
		fullBounds: 	(37.0@13.0) corner: (50.0@28.0)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (36190208) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color transparent


ScrollBar>>adoptGradientColor:
	Receiver: a ScrollBar(769817856)
	Arguments and temporary variables: 
		aColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		c: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		fs: 	a SolidFillStyle((Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0))
		bfs: 	a SolidFillStyle((Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0))
		bs: 	(SimpleBorder width: 1 color: Color transparent)
		bbs: 	(SimpleBorder width: 0 color: Color transparent)
	Receiver's instance variables: 
		bounds: 	(37.0@0.0) corner: (50.0@42.0)
		owner: 	a FTTableMorph(155244800)
		submorphs: 	an Array(a BorderedMorph(410518528) a Morph(794756352) a BorderedMor...etc...
		fullBounds: 	(37@0) corner: (50@42)
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (124944384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a FTTableMorph(155244800)
		slider: 	a BorderedMorph(410518528)
		value: 	0.0
		setValueSelector: 	#verticalScrollBarValue:
		sliderShadow: 	a BorderedMorph(776071424)
		sliderColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(693713920)
		downButton: 	a BorderedMorph(562203904)
		pagingArea: 	a Morph(794756352)
		scrollDelta: 	(1/6)
		pageDelta: 	0
		interval: 	0.32786885245901637
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)


ScrollBar>>sliderColor:
	Receiver: a ScrollBar(769817856)
	Arguments and temporary variables: 
		aColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		buttonColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
	Receiver's instance variables: 
		bounds: 	(37.0@0.0) corner: (50.0@42.0)
		owner: 	a FTTableMorph(155244800)
		submorphs: 	an Array(a BorderedMorph(410518528) a Morph(794756352) a BorderedMor...etc...
		fullBounds: 	(37@0) corner: (50@42)
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (124944384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a FTTableMorph(155244800)
		slider: 	a BorderedMorph(410518528)
		value: 	0.0
		setValueSelector: 	#verticalScrollBarValue:
		sliderShadow: 	a BorderedMorph(776071424)
		sliderColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(693713920)
		downButton: 	a BorderedMorph(562203904)
		pagingArea: 	a Morph(794756352)
		scrollDelta: 	(1/6)
		pageDelta: 	0
		interval: 	0.32786885245901637
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)


ScrollBar>>adoptPaneColor:
	Receiver: a ScrollBar(769817856)
	Arguments and temporary variables: 
		aColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
	Receiver's instance variables: 
		bounds: 	(37.0@0.0) corner: (50.0@42.0)
		owner: 	a FTTableMorph(155244800)
		submorphs: 	an Array(a BorderedMorph(410518528) a Morph(794756352) a BorderedMor...etc...
		fullBounds: 	(37@0) corner: (50@42)
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (124944384) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a FTTableMorph(155244800)
		slider: 	a BorderedMorph(410518528)
		value: 	0.0
		setValueSelector: 	#verticalScrollBarValue:
		sliderShadow: 	a BorderedMorph(776071424)
		sliderColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(693713920)
		downButton: 	a BorderedMorph(562203904)
		pagingArea: 	a Morph(794756352)
		scrollDelta: 	(1/6)
		pageDelta: 	0
		interval: 	0.32786885245901637
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)


[ :m | m adoptPaneColor: paneColor ] in FTTableMorph(Morph)>>adoptPaneColor:
	Receiver: a FTTableMorph(155244800)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		m: 	a ScrollBar(769817856)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(216855808)
		submorphs: 	an Array(a FTTableContainerMorph(816695296) a ScrollBar(769817856))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (557179136) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(816695296)
		verticalScrollBar: 	a ScrollBar(769817856)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a FTTableContainerMorph(816695296) a ScrollBar(769817856))
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
		index: 	2
	Receiver's instance variables: 
an Array(a FTTableContainerMorph(816695296) a ScrollBar(769817856))

FTTableMorph(Morph)>>submorphsDo:
	Receiver: a FTTableMorph(155244800)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(216855808)
		submorphs: 	an Array(a FTTableContainerMorph(816695296) a ScrollBar(769817856))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (557179136) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(816695296)
		verticalScrollBar: 	a ScrollBar(769817856)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph(Morph)>>adoptPaneColor:
	Receiver: a FTTableMorph(155244800)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(216855808)
		submorphs: 	an Array(a FTTableContainerMorph(816695296) a ScrollBar(769817856))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (557179136) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(816695296)
		verticalScrollBar: 	a ScrollBar(769817856)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


[ :m | m adoptPaneColor: paneColor ] in GLMPanelMorph>>adoptPaneColor:
	Receiver: a GLMPanelMorph(216855808)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		m: 	a FTTableMorph(155244800)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(339923200)
		submorphs: 	an Array(a FTTableMorph(155244800))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (9948160) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


Array(SequenceableCollection)>>do:
	Receiver: an Array(a FTTableMorph(155244800))
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:56.261184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

GLMFastTableDataSource(GLMFastListDataSource)>>selection:
	Receiver: a GLMFastTableDataSource
	Arguments and temporary variables: 
		ann: 	a FTSelectionChanged
		selection: 	nil
	Receiver's instance variables: 
		table: 	a FTTableMorph(467237888)
		elements: 	an OrderedCollection([ self value.
Processor terminateActive ] in Blo...etc...
		glamourPresentation: 	a GLMFastTablePresentation(id=594300160 title='Stack' pane...etc...
		announcer: 	a GLMAnnouncer
		tagsToFilterBy: 	an OrderedCollection()
		dataCache: 	nil
		columnToSortBy: 	nil


MessageSend>>value:
	Receiver: MessageSend(#selection: -> a GLMFastTableDataSource)
	Arguments and temporary variables: 
		anObject: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a GLMFastTableDataSource
		selector: 	#selection:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selection: -> a GLMFastTableDataSource)
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a GLMFastTableDataSource
		selector: 	#selection:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selection: -> a GLMFastTableDataSource)
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a GLMFastTableDataSource
		selector: 	#selection:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a GLMFastTableDataSource
		action: 	MessageSend(#selection: -> a GLMFastTableDataSource)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a GLMFastTableDataSource
		action: 	MessageSend(#selection: -> a GLMFastTableDataSource)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
		announcement: 	a FTSelectionChanged
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


FTTableMorph(Morph)>>doAnnounce:
	Receiver: a FTTableMorph(467237888)
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(286844160)
		submorphs: 	an Array(a FTTableContainerMorph(965976064))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (184404224) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(965976064)
		verticalScrollBar: 	a ScrollBar(466115584)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph>>selectRowIndexes:andMakeVisibleIf:
	Receiver: a FTTableMorph(467237888)
	Arguments and temporary variables: 
		anArray: 	#(1)
		shouldEnsureVisibleSelection: 	true
		oldSelectedRowIndexes: 	#()
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(286844160)
		submorphs: 	an Array(a FTTableContainerMorph(965976064))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (184404224) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(965976064)
		verticalScrollBar: 	a ScrollBar(466115584)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph>>selectRowIndexes:
	Receiver: a FTTableMorph(467237888)
	Arguments and temporary variables: 
		anArray: 	#(1)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(286844160)
		submorphs: 	an Array(a FTTableContainerMorph(965976064))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (184404224) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(965976064)
		verticalScrollBar: 	a ScrollBar(466115584)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph>>selectRowIndex:
	Receiver: a FTTableMorph(467237888)
	Arguments and temporary variables: 
		aNumber: 	1
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMPanelMorph(286844160)
		submorphs: 	an Array(a FTTableContainerMorph(965976064))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (184404224) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(965976064)
		verticalScrollBar: 	a ScrollBar(466115584)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


GLMFastTableDataSource(GLMFastListDataSource)>>explicitSelection:
	Receiver: a GLMFastTableDataSource
	Arguments and temporary variables: 
		anObject: 	[ self value.
Processor terminateActive ] in BlockClosure>>newProcess...etc...
	Receiver's instance variables: 
		table: 	a FTTableMorph(467237888)
		elements: 	an OrderedCollection([ self value.
Processor terminateActive ] in Blo...etc...
		glamourPresentation: 	a GLMFastTablePresentation(id=594300160 title='Stack' pane...etc...
		announcer: 	a GLMAnnouncer
		tagsToFilterBy: 	an OrderedCollection()
		dataCache: 	nil
		columnToSortBy: 	nil


[ tableModel explicitSelection: aPresentation selection ] in GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>render:
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=594300160 title='Stack' pane=a GLM...etc...
		container: 	a GLMPanelMorph(286844160)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(467237888)


BlockClosure>>ensure:
	Receiver: [ tableModel explicitSelection: aPresentation selection ]
	Arguments and temporary variables: 
		aBlock: 	[ suspendedAnnouncemets := previousSuspendedAnnouncemets ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>render:
		startpc: 	154
		numArgs: 	0


GLMAnnouncer>>suspendAll:while:
	Receiver: a GLMAnnouncer
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(GLMTreeMorphSelectionChanged GLMTreeMorphStro...etc...
		aBlock: 	[ tableModel explicitSelection: aPresentation selection ]
		previousSuspendedAnnouncemets: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	an OrderedCollection(GLMTreeMorphSelectionChanged GLMTre...etc...


GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>render:
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=594300160 title='Stack' pane=a GLM...etc...
		container: 	a GLMPanelMorph(286844160)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(467237888)


GLMMorphicFastTableRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=594300160 title='Stack' pane=a GLM...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicFTRenderer
		methodDict: 	a MethodDictionary(#createDataSourceFrom:->GLMMorphicFastTableRende...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicFastTableRenderer
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-FastTable-Morphic-Renderer'


GLMMorphicRenderer>>renderFastTablePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=594300160 title='Stack' pane=a GLM...etc...
	Receiver's instance variables: 
		window: 	nil


GLMFastTablePresentation>>renderGlamorouslyOn:
	Receiver: a GLMFastTablePresentation(id=594300160 title='Stack' pane=a GLMPane(82104576 stack))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(82104576 stack)
		title: 	'Stack'
		titleIcon: 	nil
		transformation: 	[ :aSession | self retrieveStackFrom: aSession ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMFastTablePresentation(id=401662976 title='Stack' pane=a G...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	an OrderedCollection([ self value.
Processor terminateAct...etc...
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	nil
		icon: 	nil
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	false
		allowsDeselection: 	false
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		columns: 	an OrderedCollection(a GLMTableColumn a GLMTableColumn a GLMTableColum...etc...
		children: 	[ #() ]
		rootsExpanded: 	nil
		shouldShowHeader: 	false
		parameters: 	a Dictionary('shouldUseCache'->true )


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMFastTablePresentation(id=594300160 title='Stack' pane=a GLMPa...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMFastTablePresentation(id=594300160 title='Stack' pane=a GLMPane(...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(55297024)


[ self renderObject: each ] iTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:56.436184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(FreeTypeFont('Source Code Pro' 'Regular' 10)->a Dictionary(32->a Dictionary(4...etc...
	Arguments and temporary variables: 
		key: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		aBlock: 	[ self at: key put: aBlock value ]
	Receiver's instance variables: 
		tally: 	29
		array: 	an Array(nil nil nil nil nil FreeTypeFont('Source Sans Pro' 'Regular' 5)...etc...


Dictionary>>at:ifAbsentPut:
	Receiver: a Dictionary(FreeTypeFont('Source Code Pro' 'Regular' 10)->a Dictionary(32->a Dictionary(4...etc...
	Arguments and temporary variables: 
		key: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		aBlock: 	[ self dictionaryClass new: 60 ]
	Receiver's instance variables: 
		tally: 	29
		array: 	an Array(nil nil nil nil nil FreeTypeFont('Source Sans Pro' 'Regular' 5)...etc...


FreeTypeCache>>atFont:charCode:type:ifAbsentPut:
	Receiver: a FreeTypeCache
	Arguments and temporary variables: 
		aFreeTypeFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		charCodeInteger: 	32
		typeFlag: 	4
		aBlock: 	[ self getLinearWidthOf: aCharacter ]
		charCodeTable: 	nil
		typeTable: 	nil
		entry: 	nil
		v: 	nil
		vSize: 	nil
	Receiver's instance variables: 
		maximumSize: 	5120000
		used: 	4012668
		fontTable: 	a Dictionary(FreeTypeFont('Source Code Pro' 'Regular' 10)->a Diction...etc...
		fifo: 	a FreeTypeCacheLinkedList(a FreeTypeCacheEntry a FreeTypeCacheEntry a Fre...etc...


FreeTypeFont>>linearWidthOf:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		aCharacter: 	Character space
		charCode: 	32
		answer: 	nil
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($S->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


FreeTypeFont>>widthOf:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		aCharacter: 	Character space
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($S->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


LogicalFont>>widthOf:
	Receiver: a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 10
 realFont: Free...etc...
	Arguments and temporary variables: 
		anObject: 	Character space
	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 po...etc...
		italicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 ...etc...
		boldItalicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: n...etc...


CompositionScanner(CharacterScanner)>>setFont
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		priorFont: 	nil
	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	1
		xTable: 	nil
		map: 	nil
		destY: 	0
		stopConditions: 	nil
		text: 	a Text for 'restoreState:'
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	9999999
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a TextLine 1 to: 0
		runStopIndex: 	nil
		spaceCount: 	nil
		spaceWidth: 	nil
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	0
		spaceIndex: 	nil
		lineHeight: 	17
		baseline: 	13
		lineHeightAtSpace: 	nil
		baselineAtSpace: 	nil
		lastBreakIsNotASpace: 	nil
		nextIndexAfterLineBreak: 	nil


CompositionScanner>>setStopConditions
	Receiver: a CompositionScanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	1
		xTable: 	nil
		map: 	nil
		destY: 	0
		stopConditions: 	nil
		text: 	a Text for 'restoreState:'
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	9999999
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a TextLine 1 to: 0
		runStopIndex: 	nil
		spaceCount: 	nil
		spaceWidth: 	nil
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	0
		spaceIndex: 	nil
		lineHeight: 	17
		baseline: 	13
		lineHeightAtSpace: 	nil
		baselineAtSpace: 	nil
		lastBreakIsNotASpace: 	nil
		nextIndexAfterLineBreak: 	nil


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	1
		lineRectangle: 	(0@0) corner: (9999999@19)
		firstLine: 	true
		leftSide: 	true
		rightSide: 	true
		runLength: 	nil
		stopCondition: 	nil
	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	1
		xTable: 	nil
		map: 	nil
		destY: 	0
		stopConditions: 	nil
		text: 	a Text for 'restoreState:'
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	9999999
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a TextLine 1 to: 0
		runStopIndex: 	nil
		spaceCount: 	nil
		spaceWidth: 	nil
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	0
		spaceIndex: 	nil
		lineHeight: 	17
		baseline: 	13
		lineHeightAtSpace: 	nil
		baselineAtSpace: 	nil
		lastBreakIsNotASpace: 	nil
		nextIndexAfterLineBreak: 	nil


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@0) corner: (9999999@19)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	13
		deltaCharIndex: 	0
		theText: 	a Text for 'restoreState:'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@0) corner: (9999999@19)}
		charIndexBeforeLine: 	1
		numberOfLinesBefore: 	0
		reasonForStopping: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	13
		deltaCharIndex: 	0
		theText: 	a Text for 'restoreState:'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@0) corner: (9999999@19)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	13
		deltaCharIndex: 	0
		theText: 	a Text for 'restoreState:'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	13
		deltaCharIndex: 	0
		theText: 	a Text for 'restoreState:'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


TextComposer>>multiComposeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	13
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection()
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Source Sans Pro
		argText: 	a Text for 'restoreState:'
		argContainer: 	(0@0) corner: (9999999@9999999)
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	13
		deltaCharIndex: 	0
		theText: 	a Text for 'restoreState:'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


Paragraph>>multiComposeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a Paragraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	13
		delta: 	0
		lineColl: 	an OrderedCollection()
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for 'restoreState:'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	12
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


Paragraph>>composeAll
	Receiver: a Paragraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'restoreState:'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	12
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


Paragraph>>compose:style:from:in:
	Receiver: a Paragraph
	Arguments and temporary variables: 
		t: 	a Text for 'restoreState:'
		ts: 	a TextStyle Source Sans Pro
		startingIndex: 	1
		textContainer: 	(0@0) corner: (9999999@9999999)
	Receiver's instance variables: 
		text: 	a Text for 'restoreState:'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	12
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


TextMorph>>paragraph
	Receiver: a TextMorph(1035155712)
	Arguments and temporary variables: 
		newParagraph: 	a Paragraph
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (462495744) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'restoreState:'
		wrapFlag: 	false
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 0 left: 0 bottom: 0 right: 0
		defaultColor: 	nil


TextMorph>>newContents:
	Receiver: a TextMorph(1035155712)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:56.608184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 24 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 89 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 23 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 21 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054176635184


Delay>>wait
	Receiver: a Delay(100 msecs; 20 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054176635184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:56.775184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 24 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 81 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 22 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 21 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054176802184


Delay>>wait
	Receiver: a Delay(100 msecs; 20 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054176802184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:56.910184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RubScrollBar(ScrollBar)>>totalSliderArea
	Receiver: a RubScrollBar(466979072)
	Arguments and temporary variables: 
		upperBoundsButton: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (16@100)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(961559808) a Morph(50726912) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (17277184) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(470565888)
		slider: 	a BorderedMorph(961559808)
		value: 	0.0
		setValueSelector: 	#hScrollbarValue:
		sliderShadow: 	a BorderedMorph(693421312)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(1015201792)
		downButton: 	a BorderedMorph(740010240)
		pagingArea: 	a Morph(50726912)
		scrollDelta: 	0
		pageDelta: 	0
		interval: 	1.0
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		showState: 	#whenNeeded


RubScrollBar(Slider)>>roomToMove
	Receiver: a RubScrollBar(466979072)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (16@100)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(961559808) a Morph(50726912) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (17277184) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(470565888)
		slider: 	a BorderedMorph(961559808)
		value: 	0.0
		setValueSelector: 	#hScrollbarValue:
		sliderShadow: 	a BorderedMorph(693421312)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(1015201792)
		downButton: 	a BorderedMorph(740010240)
		pagingArea: 	a Morph(50726912)
		scrollDelta: 	0
		pageDelta: 	0
		interval: 	1.0
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		showState: 	#whenNeeded


RubScrollBar(Slider)>>computeSlider
	Receiver: a RubScrollBar(466979072)
	Arguments and temporary variables: 
		r: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (16@100)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(961559808) a Morph(50726912) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (17277184) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(470565888)
		slider: 	a BorderedMorph(961559808)
		value: 	0.0
		setValueSelector: 	#hScrollbarValue:
		sliderShadow: 	a BorderedMorph(693421312)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(1015201792)
		downButton: 	a BorderedMorph(740010240)
		pagingArea: 	a Morph(50726912)
		scrollDelta: 	0
		pageDelta: 	0
		interval: 	1.0
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		showState: 	#whenNeeded


RubScrollBar(Slider)>>value:
	Receiver: a RubScrollBar(466979072)
	Arguments and temporary variables: 
		newValue: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (16@100)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(961559808) a Morph(50726912) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (17277184) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(470565888)
		slider: 	a BorderedMorph(961559808)
		value: 	0.0
		setValueSelector: 	#hScrollbarValue:
		sliderShadow: 	a BorderedMorph(693421312)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(1015201792)
		downButton: 	a BorderedMorph(740010240)
		pagingArea: 	a Morph(50726912)
		scrollDelta: 	0
		pageDelta: 	0
		interval: 	1.0
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		showState: 	#whenNeeded


RubScrollBar(Slider)>>setValue:
	Receiver: a RubScrollBar(466979072)
	Arguments and temporary variables: 
		newValue: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (16@100)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(961559808) a Morph(50726912) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (17277184) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(470565888)
		slider: 	a BorderedMorph(961559808)
		value: 	0.0
		setValueSelector: 	#hScrollbarValue:
		sliderShadow: 	a BorderedMorph(693421312)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(1015201792)
		downButton: 	a BorderedMorph(740010240)
		pagingArea: 	a Morph(50726912)
		scrollDelta: 	0
		pageDelta: 	0
		interval: 	1.0
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		showState: 	#whenNeeded


RubScrollBar(GeneralScrollBar)>>setValue:
	Receiver: a RubScrollBar(466979072)
	Arguments and temporary variables: 
		newValue: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (16@100)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(961559808) a Morph(50726912) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (17277184) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(470565888)
		slider: 	a BorderedMorph(961559808)
		value: 	0.0
		setValueSelector: 	#hScrollbarValue:
		sliderShadow: 	a BorderedMorph(693421312)
		sliderColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		descending: 	false
		upButton: 	a BorderedMorph(1015201792)
		downButton: 	a BorderedMorph(740010240)
		pagingArea: 	a Morph(50726912)
		scrollDelta: 	0
		pageDelta: 	0
		interval: 	1.0
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.767 g: 0.763 b: 0.763 alpha: 1.0)
		showState: 	#whenNeeded


RubTextScrollPane(GeneralScrollPane)>>hSetScrollDelta
	Receiver: a RubTextScrollPane(470565888)
	Arguments and temporary variables: 
		pd: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (131189760) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(515407104)
		hScrollbar: 	a RubScrollBar(466979072)
		vScrollbar: 	a RubScrollBar(575129600)
		drawFocusBorder: 	nil


RubTextScrollPane(GeneralScrollPane)>>setScrollDeltas
	Receiver: a RubTextScrollPane(470565888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (131189760) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(515407104)
		hScrollbar: 	a RubScrollBar(466979072)
		vScrollbar: 	a RubScrollBar(575129600)
		drawFocusBorder: 	nil


RubTextScrollPane(GeneralScrollPane)>>updateScrollbars
	Receiver: a RubTextScrollPane(470565888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (131189760) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(515407104)
		hScrollbar: 	a RubScrollBar(466979072)
		vScrollbar: 	a RubScrollBar(575129600)
		drawFocusBorder: 	nil


RubTextScrollPane>>updateScrollbars
	Receiver: a RubTextScrollPane(470565888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (131189760) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(515407104)
		hScrollbar: 	a RubScrollBar(466979072)
		vScrollbar: 	a RubScrollBar(575129600)
		drawFocusBorder: 	nil


RubTextScrollPane(GeneralScrollPane)>>scrollTarget:
	Receiver: a RubTextScrollPane(470565888)
	Arguments and temporary variables: 
		aMorph: 	a RubEditingArea(251128064)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (131189760) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(515407104)
		hScrollbar: 	a RubScrollBar(466979072)
		vScrollbar: 	a RubScrollBar(575129600)
		drawFocusBorder: 	nil


RubTextScrollPane>>scrollTarget:
	Receiver: a RubTextScrollPane(470565888)
	Arguments and temporary variables: 
		aTextArea: 	a RubEditingArea(251128064)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (131189760) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(515407104)
		hScrollbar: 	a RubScrollBar(466979072)
		vScrollbar: 	a RubScrollBar(575129600)
		drawFocusBorder: 	nil


RubTextScrollPane(GeneralScrollPane)>>initialize
	Receiver: a RubTextScrollPane(470565888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (131189760) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(515407104)
		hScrollbar: 	a RubScrollBar(466979072)
		vScrollbar: 	a RubScrollBar(575129600)
		drawFocusBorder: 	nil


RubTextScrollPane>>initialize
	Receiver: a RubTextScrollPane(470565888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (131189760) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(515407104)
		hScrollbar: 	a RubScrollBar(466979072)
		vScrollbar: 	a RubScrollBar(575129600)
		drawFocusBorder: 	nil


RubTextScrollPane class(Behavior)>>new
	Receiver: RubTextScrollPane
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	GeneralScrollPane
		methodDict: 	a MethodDictionary(#aboutToBeGrabbedBy:->RubTextScrollPane>>#aboutT...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMRubTextScrollPane}
		name: 	#RubTextScrollPane
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Widgets'
		announcer: 	nil


RubScrolledTextMorph>>newScrollPane
	Receiver: a RubScrolledTextMorph(571776256)
	Arguments and temporary variables: 
		sp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (50@40)
		color: 	Color white
		extension: 	a MorphExtension (506275072)
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	nil
		rulers: 	a SortedCollection()
		enabled: 	true
		highlights: 	nil


RubScrolledTextMorph>>initialize
	Receiver: a RubScrolledTextMorph(571776256)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (50@40)
		color: 	Color white
		extension: 	a MorphExtension (506275072)
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	nil
		rulers: 	a SortedCollection()
		enabled: 	true
		highlights: 	nil


RubScrolledTextMorph class(Behavior)>>new
	Receiver: RubScrolledTextMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Morph
		methodDict: 	a MethodDictionary(size 207)
		format: 	65554
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{RubPluggableTextMorph. RubTextFieldMorph}
		name: 	#RubScrolledTextMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Widgets'
		announcer: 	nil


GLMMorphicPharoMethodRenderer>>morph
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	nil
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=18334720 title='Source' pane=a G...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	nil
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=18334720 title='Source' pane=a G...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicPharoCodeRenderer
		methodDict: 	a MethodDictionary(#methodBindingsStrategy->GLMMorphicPharoMethodRe...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPharoMethodRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'


GLMMorphicRenderer>>renderPharoMethodPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aSmalltalkMethodPresentation: 	a GLMPharoMethodPresentation(id=18334720 title='S...etc...
	Receiver's instance variables: 
		window: 	nil


GLMPharoMethodPresentation>>renderGlamorouslyOn:
	Receiver: a GLMPharoMethodPresentation(id=18334720 title='Source' pane=a GLMPane(1062552832 code))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(1062552832 code)
		title: 	'Source'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMPharoMethodPresentation(id=928399360 title='Source' pane=...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	[ :code | 
code
	selectionInterval: (self session selected...etc...
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	[ aContext sourceCode ]
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	[ aContext receiver ]
		doItContext: 	[ aContext ]
		textBlock: 	nil
		selectedTextBlock: 	nil
		withLineNumbers: 	nil
		withAnnotation: 	nil
		wrapped: 	nil
		tabWidth: 	nil
		withColumns: 	nil
		textSegments: 	nil
		primarySelectionInterval: 	nil
		withGhostText: 	nil
		highlightSmalltalkContext: 	[ aContext methodClass ]
		variableBindingsBlock: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPharoMethodPresentation(id=18334720 title='Source' pane=a GLM...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPharoMethodPresentation(id=18334720 title='Source' pane=a GLMPan...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(239809536)


[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:57.100184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RubCompositionScanner(RubCharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		startIndex: 	473
		stopIndex: 	486
		sourceString: 	'schedule: aDelay
	"This is the front-half of scheduling a delay....etc...
		rightX: 	32
		stops: 	a RubTextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	nil
		widthAndKernedWidth: 	nil
		nextChar: 	nil
		atEndOfRun: 	nil
	Receiver's instance variables: 
		destX: 	6
		lastIndex: 	473
		destY: 	3065
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	32
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 473 to: 0
		runStopIndex: 	486
		spaceCount: 	0
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0
		spaceX: 	6
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	472
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	false


RubCompositionScanner(RubCharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		startIndex: 	473
		stopIndex: 	486
		sourceString: 	'schedule: aDelay
	"This is the front-half of scheduling a delay....etc...
		rightX: 	32
		stops: 	a RubTextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	6
		lastIndex: 	473
		destY: 	3065
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	32
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 473 to: 0
		runStopIndex: 	486
		spaceCount: 	0
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0
		spaceX: 	6
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	472
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	false


RubCompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		startIndex: 	473
		lineRectangle: 	(6@3065) corner: (32@3065)
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	14
		stopCondition: 	nil
	Receiver's instance variables: 
		destX: 	6
		lastIndex: 	473
		destY: 	3065
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	32
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 473 to: 0
		runStopIndex: 	486
		spaceCount: 	0
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0
		spaceX: 	6
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	472
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	false


RubTextComposer>>composeEachRectangleIn:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@3065) corner: (32@3065)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3065
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	473
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	nil
		numberOfPhysicalLines: 	nil
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


RubTextComposer>>composeAllRectangles:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@3065) corner: (32@3065)}
		charIndexBeforeLine: 	473
		numberOfLinesBefore: 	161
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3065
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	473
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	nil
		numberOfPhysicalLines: 	nil
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


RubTextComposer>>composeOneLine
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@3065) corner: (32@3065)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3065
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	473
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	nil
		numberOfPhysicalLines: 	nil
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


RubTextComposer>>composeAllLines
	Receiver: a RubTextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3065
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	473
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	nil
		numberOfPhysicalLines: 	nil
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


RubTextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	487
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 ...etc...
		argPriorLines: 	#()
		argStartY: 	6
		argTextStyle: 	a TextStyle Source Code Pro
		argText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		argContainer: 	(6@6) corner: (32@1073741823)
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3065
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	473
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	nil
		numberOfPhysicalLines: 	nil
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


RubTextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		start: 	1
		stop: 	487
		delta: 	0
		lineColl: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a Ru...etc...
		priorLines: 	#()
		startingY: 	6
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3065
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	473
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	nil
		numberOfPhysicalLines: 	nil
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedCollection new
	priorLines: Array new
	atY: self compositionRectangle top.
textArea
	ifNotNil: [ textArea paragraphWasComposedFrom: 1 to: self text size ] ] in RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@3185)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(8670464)


BlockClosure>>ensure:
	Receiver: [ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedC...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubParagraph>>compose
		startpc: 	110
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta...etc...
	Receiver's instance variables: 
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@3185)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(8670464)


RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@3185)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(8670464)


RubParagraph>>tabWidth:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		anInteger: 	24
		newTextStyle: 	a TextStyle Source Code Pro
		tabsArray: 	#(24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 43...etc...
	Receiver's instance variables: 
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@3185)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(8670464)


Message>>sendTo:
	Receiver: tabWidth: 24
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#tabWidth:
		args: 	#(24)
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: tabWidth: 24
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#tabWidth:
		args: 	#(24)
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


Message>>sendTo:
	Receiver: tabWidth: 24
	Arguments and temporary variables: 
		receiver: 	a RubExtraSelectionDecorator
	Receiver's instance variables: 
		selector: 	#tabWidth:
		args: 	#(24)
		lookupClass: 	RubCurrentLineBarDecorator


[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	tabWidth: 24
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #tabWidth:
	ReceiverTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:57.294184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ :line | 
line lineNumber: numberOfPhysicalLines.
line stopCondition = #cr
	ifTrue: [ numberOfPhysicalLines := numberOfPhysicalLines + 1 ].
actualWidth := line actualWidth max: actualWidth ] in RubTextComposer>>completeComposition
	Receiver: a RubTextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3160
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	488
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	19
		actualWidth: 	24
		numberOfPhysicalLines: 	5
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


OrderedCollection>>do:
	Receiver: an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTextLine 7 to: 10 a ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :line | 
line lineNumber: numberOfPhysicalLines.
line stopCondition =...etc...
		index: 	70
	Receiver's instance variables: 
		array: 	an Array(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTextLine 7 to:...etc...
		firstIndex: 	1
		lastIndex: 	167


RubTextComposer>>completeComposition
	Receiver: a RubTextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3160
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	488
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	19
		actualWidth: 	24
		numberOfPhysicalLines: 	5
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


RubTextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		start: 	1
		stop: 	487
		delta: 	0
		lineColl: 	an OrderedCollection()
		priorLines: 	#()
		startingY: 	6
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 3 a RubTextLine 4 to: 6 a RubTe...etc...
		maxRightX: 	30
		currentY: 	3160
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	488
		startCharIndex: 	1
		stopCharIndex: 	487
		deltaCharIndex: 	0
		theText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a ...etc...
		theContainer: 	(6@6) corner: (32@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	19
		actualWidth: 	24
		numberOfPhysicalLines: 	5
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a...etc...
		prevContainer: 	(6@6) corner: (32@1073741823)
		emphasisHere: 	an Array(a TextColor code: Color black a TextMethodLink)
		cursorWidth: 	2


[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedCollection new
	priorLines: Array new
	atY: self compositionRectangle top.
textArea
	ifNotNil: [ textArea paragraphWasComposedFrom: 1 to: self text size ] ] in RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@3185)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(637468672)


BlockClosure>>ensure:
	Receiver: [ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedC...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubParagraph>>compose
		startpc: 	110
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta...etc...
	Receiver's instance variables: 
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@3185)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(637468672)


RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@3185)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(637468672)


RubParagraph>>extentFromClientBottomRight:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aPoint: 	(27@3185)
		w: 	38
		newExtent: 	(27@3185)
	Receiver's instance variables: 
		text: 	a Text for 'schedule: aDelay
	"This is the front-half of scheduling a del...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (38@3185)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(637468672)


[ self wrapped
	ifTrue: [ (bounds notNil and: [ bounds width = aPoint x ])
			ifTrue: [ ^ self ].
		super
			extent:
				((self paragraph withoutDecorator extentFromClientBottomRight: aPoint)
					max: self minimumExtent).
		self recomputeSelection ] ] in RubEditingArea(RubAbstractTextArea)>>extent:
	Receiver: a RubEditingArea(637468672)
	Arguments and temporary variables: 
		aPoint: 	(27@3185)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@3185)
		owner: 	a TransformWithLayoutMorph(3961088)
		submorphs: 	an Array(a RubCursor(5239808) a RubPrimarySelectionMorph(19698944))
		fullBounds: 	(0@0) corner: (38@3185)
		color: 	Color transparent
		extension: 	a MorphExtension (370896896) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(593918208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(5239808)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleBoundsChange:
	Receiver: a RubEditingArea(637468672)
	Arguments and temporary variables: 
		aBlock: 	[ self wrapped
	ifTrue: [ (bounds notNil and: [ bounds width = aPoint x...etc...
		oldBounds: 	(0@0) corner: (38@3185)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@3185)
		owner: 	a TransformWithLayoutMorph(3961088)
		submorphs: 	an Array(a RubCursor(5239808) a RubPrimarySelectionMorph(19698944))
		fullBounds: 	(0@0) corner: (38@3185)
		color: 	Color transparent
		extension: 	a MorphExtension (370896896) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(593918208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(5239808)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>extent:
	Receiver: a RubEditingArea(637468672)
	Arguments and temporary variables: 
		aPoint: 	(27@3185)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@3185)
		owner: 	a TransformWithLayoutMorph(3961088)
		submorphs: 	an Array(a RubCursor(5239808) a RubPrimarySelectionMorph(19698944))
		fullBounds: 	(0@0) corner: (38@3185)
		color: 	Color transparent
		extension: 	a MorphExtension (370896896) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(593918208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(5239808)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>width:
	Receiver: a RubEditingArea(637468672)
	Arguments and temporary variables: 
		aNumber: 	27.0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@3185)
		owner: 	a TransformWithLayoutMorph(3961088)
		submorphs: 	an Array(a RubCursor(5239808) a RubPrimarySelectionMorph(19698944))
		fullBounds: 	(0@0) corner: (38@3185)
		color: 	Color transparent
		extension: 	a MorphExtension (370896896) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(593918208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(5239808)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubTextScrollPane>>fitScrollTargetWidth
	Receiver: a RubTextScrollPane(593918208)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@0.0) corner: (40.0@30.0)
		owner: 	a RubScrolledTextMorph(1072994560)
		submorphs: 	an Array(a RubScrollBar(328862720) a TransformWithLayoutMorph(396108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (647642368) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(3961088)
		hScrollbar: 	a RubScrollBar(407635968)
		vScrollbar: 	a RubScrollBar(328862720)
		drawFocusBorder: 	true


RubTextScrollPane>>updateScrollbars
	Receiver: a RubTextScrollPane(593918208)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@0.0) corner: (40.0@30.0)
		owner: 	a RubScrolledTextMorph(1072994560)
		submorphs: 	an Array(a RubScrollBar(328862720) a TransformWithLayoutMorph(396108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (647642368) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(3961088)
		hScrollbar: 	a RubScrollBar(407635968)
		vScrollbar: 	a RubScrollBar(328862720)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>extent:
	Receiver: a RubTextScrollPane(593918208)
	Arguments and temporary variables: 
		newExtent: 	(40@30)
		scrollbarChange: 	false
	Receiver's instance variables: 
		bounds: 	(0.0@0.0) corner: (40.0@30.0)
		owner: 	a RubScrolledTextMorph(1072994560)
		submorphs: 	an Array(a RubScrollBar(328862720) a TransformWithLayoutMorph(396108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (647642368) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(3961088)
		hScrollbar: 	a RubScrollBar(407635968)
		vScrollbar: 	a RubScrollBar(328862720)
		drawFocusBorder: 	true


RubTextScrollPane>>extent:
	Receiver: a RubTextScrollPane(593918208)
	Arguments and temporary variables: 
		newExtent: 	(40@30)
	Receiver's instance variables: 
		bounds: 	(0.0@0.0) corner: (40.0@30.0)
		owner: 	a RubScrolledTextMorph(1072994560)
		submorphs: 	an Array(a RubScrollBar(328862720) a TransformWithLayoutMorph(396108...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (647642368) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(3961088)
		hScrollbar: 	a RubScrollBar(407635968)
		vScrollbar: 	a RubScrollBar(328862720)
		drawFocusBorder: 	true


RubScrolledTextMorph>>manageLayoutInBounds:
	Receiver: a RubScrolledTextMorph(1072994560)
	Arguments and temporary variables: 
		aRectangle: 	(0@0) corner: (40@30)
		myBounds: 	(0@0) corner: (40@30)
		scrollpane: 	a RubTextScrollPane(593918208)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (40@30)
		owner: 	a GLMPanelMorph(946137088)
		submorphs: 	an Array(a RubTextScrollPane(593918208) a RubAdornmentDisplayer(6844...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (421340160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(593918208)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(684441856))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>manageLayout
	Receiver: a RubScrolledTextMorph(1072994560)
	Arguments and temporary variables: 
		ret: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (40@30)
		owner: 	a GLMPanelMorph(946137088)
		submorphs: 	an Array(a RubTextScrollPane(593918208) a RubAdornmentDisplayer(6844...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (421340160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(593918208)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(684441856))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>extent:
	Receiver: a RubScrolledTextMorph(1072994560)
	Arguments and temporary variables: 
		aPoint: 	(40@30)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (40@30)
		owner: 	a GLMPanelMorph(946137088)
		submorphs: 	an Array(a RubTextScrollPane(593918208) a RubAdornmentDisplayer(6844...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (421340160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(593918208)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(684441856))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(Morph)>>bounds:
	Receiver: a RubScrolledTextMorph(1072994560)
	Arguments and temporary variables: 
		newBounds: 	(5@5) corner: (45@35)
		oldExtent: 	(50@40)
		newExtent: 	(40@30)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (40@30)
		owner: 	a GLMPanelMorph(946137088)
		submorphs: 	an Array(a RubTextScrollPane(593918208) a RubAdornmentDisplayer(6844...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (421340160) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(593918208)
		rulers: 	a SortedCollectionTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:57.401184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 71 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 91 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 69 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 68 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054177475184


Delay>>wait
	Receiver: a Delay(100 msecs; 67 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054177475184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:57.554184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 41 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 89 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 39 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 38 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054177598184


Delay>>wait
	Receiver: a Delay(100 msecs; 37 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054177598184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:57.750184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallFloat64(Float)>>adaptToInteger:andSend:
	Receiver: 0.015625
	Arguments and temporary variables: 
		rcvr: 	19
		selector: 	#*
	Receiver's instance variables: 
0.015625

SmallInteger(Integer)>>*
	Receiver: 19
	Arguments and temporary variables: 
		aNumber: 	0.015625
	Receiver's instance variables: 
19

SmallInteger>>*
	Receiver: 19
	Arguments and temporary variables: 
		aNumber: 	0.015625
	Receiver's instance variables: 
19

SmallFloat64(Number)>>roundTo:
	Receiver: 0.29302978515625
	Arguments and temporary variables: 
		quantum: 	0.015625
	Receiver's instance variables: 
0.29302978515625

FreeTypeFont>>widthOfString:from:to:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		aString: 	'Through'
		startIndex: 	1
		stopIndex: 	7
		char: 	$h
		nextChar: 	nil
		resultX: 	46.29302978515625
		glyph: 	nil
		a: 	#(7.0720062255859375 7.0720062255859375)
		subPixelPosition: 	nil
		i: 	7
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($S->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


FreeTypeFont(AbstractFont)>>widthOfString:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		aString: 	'Through'
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($S->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


LogicalFont>>widthOfString:
	Receiver: a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 10
 realFont: Free...etc...
	Arguments and temporary variables: 
		aString: 	'Through'
	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 po...etc...
		italicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 ...etc...
		boldItalicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: n...etc...


LabelMorph(StringMorph)>>measureContents
	Receiver: a LabelMorph(491491584)'Through'
	Arguments and temporary variables: 
		f: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 10
 ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (49@17)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Through'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph(StringMorph)>>fitContents
	Receiver: a LabelMorph(491491584)'Through'
	Arguments and temporary variables: 
		newBounds: 	nil
		boundsChanged: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (49@17)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Through'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph(StringMorph)>>font:emphasis:
	Receiver: a LabelMorph(491491584)'Through'
	Arguments and temporary variables: 
		aFont: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: ...etc...
		emphasisCode: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (49@17)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Through'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph(StringMorph)>>font:
	Receiver: a LabelMorph(491491584)'Through'
	Arguments and temporary variables: 
		aFont: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (49@17)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Through'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


PharoLightTheme(UITheme)>>buttonLabelFor:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aButton: 	a GLMPluggableButtonMorph(785479680)
		label: 	a LabelMorph(491491584)'Through'
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a FTTableMorph(976072960)->a BorderedMorph(233878528)
		windowActiveDropShadowStyle: 	#diffuse


GLMPluggableButtonMorph(PluggableButtonMorph)>>newLabel
	Receiver: a GLMPluggableButtonMorph(785479680)
	Arguments and temporary variables: 
		lbl: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (24@24)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (323181824) [balloonText] 
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Through'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(733997056)nil
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


GLMPluggableButtonMorph(PluggableButtonMorph)>>newLabel:
	Receiver: a GLMPluggableButtonMorph(785479680)
	Arguments and temporary variables: 
		aFont: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (24@24)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (323181824) [balloonText] 
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Through'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(733997056)nil
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


GLMPluggableButtonMorph(PluggableButtonMorph)>>label:font:
	Receiver: a GLMPluggableButtonMorph(785479680)
	Arguments and temporary variables: 
		aStringOrTextOrMorph: 	'Through'
		aFont: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: ...etc...
		containerMorph: 	an AlignmentMorph(203634688)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (24@24)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (323181824) [balloonText] 
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Through'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(733997056)nil
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


GLMMorphicActionRenderer>>render:
	Receiver: a GLMMorphicActionRenderer
	Arguments and temporary variables: 
		anAction: 	a GLMGenericAction
		b: 	a GLMPluggableButtonMorph(785479680)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer


GLMMorphicActionRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicActionRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMGenericAction
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actionArguments->GLMMorphicActionRenderer>>#act...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMMorphicPopupActionRenderer}
		name: 	#GLMMorphicActionRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'


GLMMorphicRenderer>>renderAction:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		anAction: 	a GLMGenericAction
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(730779648) named: User Interrupt


GLMGenericAction(GLMAction)>>renderGlamorouslyOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:57.882184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 50 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 90 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 48 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 47 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054177935184


Delay>>wait
	Receiver: a Delay(100 msecs; 46 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054177935184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:58.090184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ExternalAddress>>isNull
	Receiver: @ 16r039E4610
	Arguments and temporary variables: 

	Receiver's instance variables: 
@ 16r039E4610

FreeTypeFace(ExternalObject)>>isNull
	Receiver: a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	@ 16r039E4610
		numFaces: 	1
		faceIndex: 	0
		faceFlags: 	2585
		styleFlags: 	0
		numGlyphs: 	1942
		familyName: 	'Source Sans Pro'
		styleName: 	'Regular'
		numFixedSizes: 	0
		availableSizes: 	nil
		numCharmaps: 	5
		charmaps: 	#('unic' 'unic' 'armn' 'unic' 'unic')
		bbox: 	(-454@ -292) corner: (2159@968)
		unitsPerEm: 	1000
		ascender: 	984
		descender: 	-273
		height: 	1257
		maxAdvanceWidth: 	2200
		maxAdvanceHeight: 	1257
		underlinePosition: 	-100
		underlineThickness: 	50
		glyph: 	a FT2GlyphSlot
		encoding: 	nil
		platformId: 	nil
		encodingId: 	nil
		size: 	nil
		filename: 	nil
		index: 	0
		fileContentsExternalMemory: 	a FreeTypeExternalMemory(@ 16r0399C8D0)<0x399C8D0>
		hasKerning: 	false


FreeTypeFace(FT2Handle)>>isValid
	Receiver: a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	@ 16r039E4610
		numFaces: 	1
		faceIndex: 	0
		faceFlags: 	2585
		styleFlags: 	0
		numGlyphs: 	1942
		familyName: 	'Source Sans Pro'
		styleName: 	'Regular'
		numFixedSizes: 	0
		availableSizes: 	nil
		numCharmaps: 	5
		charmaps: 	#('unic' 'unic' 'armn' 'unic' 'unic')
		bbox: 	(-454@ -292) corner: (2159@968)
		unitsPerEm: 	1000
		ascender: 	984
		descender: 	-273
		height: 	1257
		maxAdvanceWidth: 	2200
		maxAdvanceHeight: 	1257
		underlinePosition: 	-100
		underlineThickness: 	50
		glyph: 	a FT2GlyphSlot
		encoding: 	nil
		platformId: 	nil
		encodingId: 	nil
		size: 	nil
		filename: 	nil
		index: 	0
		fileContentsExternalMemory: 	a FreeTypeExternalMemory(@ 16r0399C8D0)<0x399C8D0>
		hasKerning: 	false


FreeTypeFace>>validate
	Receiver: a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	@ 16r039E4610
		numFaces: 	1
		faceIndex: 	0
		faceFlags: 	2585
		styleFlags: 	0
		numGlyphs: 	1942
		familyName: 	'Source Sans Pro'
		styleName: 	'Regular'
		numFixedSizes: 	0
		availableSizes: 	nil
		numCharmaps: 	5
		charmaps: 	#('unic' 'unic' 'armn' 'unic' 'unic')
		bbox: 	(-454@ -292) corner: (2159@968)
		unitsPerEm: 	1000
		ascender: 	984
		descender: 	-273
		height: 	1257
		maxAdvanceWidth: 	2200
		maxAdvanceHeight: 	1257
		underlinePosition: 	-100
		underlineThickness: 	50
		glyph: 	a FT2GlyphSlot
		encoding: 	nil
		platformId: 	nil
		encodingId: 	nil
		size: 	nil
		filename: 	nil
		index: 	0
		fileContentsExternalMemory: 	a FreeTypeExternalMemory(@ 16r0399C8D0)<0x399C8D0>
		hasKerning: 	false


FreeTypeFont>>face
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($S->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


FreeTypeFont>>validate
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($S->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


LogicalFont>>realFont
	Receiver: a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 10
 realFont: Free...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 po...etc...
		italicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 ...etc...
		boldItalicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: n...etc...


LogicalFont>>height
	Receiver: a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 10
 realFont: Free...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 po...etc...
		italicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 ...etc...
		boldItalicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: n...etc...


LabelMorph(StringMorph)>>minHeight
	Receiver: a LabelMorph(894446592)'Proceed'
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(9.0@11.0) corner: (56.0@28.0)
		owner: 	an AlignmentMorph(844267776)
		submorphs: 	#()
		fullBounds: 	(9.0@11.0) corner: (56.0@28.0)
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Proceed'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph>>minHeight
	Receiver: a LabelMorph(894446592)'Proceed'
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(9.0@11.0) corner: (56.0@28.0)
		owner: 	an AlignmentMorph(844267776)
		submorphs: 	#()
		fullBounds: 	(9.0@11.0) corner: (56.0@28.0)
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Proceed'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph(Morph)>>minExtent
	Receiver: a LabelMorph(894446592)'Proceed'
	Arguments and temporary variables: 
		layout: 	nil
		minExtent: 	nil
		extra: 	nil
		hFit: 	#rigid
		vFit: 	#rigid
	Receiver's instance variables: 
		bounds: 	(9.0@11.0) corner: (56.0@28.0)
		owner: 	an AlignmentMorph(844267776)
		submorphs: 	#()
		fullBounds: 	(9.0@11.0) corner: (56.0@28.0)
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Proceed'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


[ :m | 
| sizeY sizeX props |
props := m layoutProperties ifNil: [ m ].
props disableTableLayout
	ifFalse: [ n := n + 1.
		cell := LayoutCell new target: m.
		props hResizing == #spaceFill
			ifTrue: [ cell hSpaceFill: true.
				extra := m spaceFillWeight.
				cell extraSpace: extra.
				sum := sum + extra ]
			ifFalse: [ cell hSpaceFill: false ].
		props vResizing == #spaceFill
			ifTrue: [ vFill := true ].
		size := m minExtent.
		sizeX := size x.
		sizeY := size y.
		sizeX < minX
			ifTrue: [ sizeX := minX ]
			ifFalse: [ sizeX > maxX
					ifTrue: [ sizeX := maxX ] ].
		sizeY < minY
			ifTrue: [ sizeY := minY ]
			ifFalse: [ sizeY > maxY
					ifTrue: [ sizeY := maxY ] ].
		cell cellSize: sizeX.
		last ifNil: [ first := cell ] ifNotNil: [ last nextCell: cell ].
		last := cell.
		width := width + sizeX.
		sizeY > height
			ifTrue: [ height := sizeY ] ] ] in TableLayout>>layoutLeftToRight:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		aMorph: 	an AlignmentMorph(844267776)
		newBounds: 	(0@0) corner: (56@20)
		inset: 	2
		extent: 	(56@20)
		block: 	[ :m | 
| sizeY sizeX props |
props := m layoutProperties ifNil: [ m ].
...etc...
		posX: 	nil
		posY: 	nil
		centering: 	nil
		extraPerCell: 	nil
		amount: 	nil
		minX: 	0
		minY: 	0
		maxX: 	1073741823
		maxY: 	1073741823
		m: 	a LabelMorph(894446592)'Proceed'
		sizeY: 	nil
		sizeX: 	nil
		props: 	a LabelMorph(894446592)'Proceed'
		sum: 	0
		first: 	a LayoutCell
		width: 	7.0
		vFill: 	false
		size: 	(7.0@10.0)
		extra: 	nil
		last: 	a LayoutCell
		n: 	2
		cell: 	a LayoutCell
		height: 	10.0
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an ImageMorph(609735936) a LabelMorph(894446592)'Proceed')
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| sizeY sizeX props |
props := m layoutProperties ifNil: [ m ]....etc...
		index: 	2
	Receiver's instance variables: 
an Array(an ImageMorph(609735936) a LabelMorph(894446592)'Proceed')

AlignmentMorph(Morph)>>submorphsDo:
	Receiver: an AlignmentMorph(844267776)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:58.231184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 34 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 89 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 33 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 31 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054178268184


Delay>>wait
	Receiver: a Delay(100 msecs; 30 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054178268184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:58.403184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RubCharacterBlockScanner(RubCharacterScanner)>>setConditionArray:
	Receiver: a RubCharacterBlockScanner
	Arguments and temporary variables: 
		aSymbol: 	nil
	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	114
		destY: 	0
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'adaptToInteger: rcvr andSend: selector
	"If I am involved in ...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	116
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 114 to: 121
		runStopIndex: 	nil
		spaceCount: 	nil
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	nil
		pendingKernX: 	0
		characterPoint: 	nil
		characterIndex: 	nil
		lastCharacter: 	nil
		lastCharacterExtent: 	nil
		lastSpaceOrTabExtent: 	nil
		nextLeftMargin: 	nil
		specialWidth: 	nil


RubCharacterBlockScanner>>setStopConditions
	Receiver: a RubCharacterBlockScanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	114
		destY: 	0
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'adaptToInteger: rcvr andSend: selector
	"If I am involved in ...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	116
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 114 to: 121
		runStopIndex: 	nil
		spaceCount: 	nil
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	nil
		pendingKernX: 	0
		characterPoint: 	nil
		characterIndex: 	nil
		lastCharacter: 	nil
		lastCharacterExtent: 	nil
		lastSpaceOrTabExtent: 	nil
		nextLeftMargin: 	nil
		specialWidth: 	nil


RubCharacterBlockScanner>>characterBlockAtPoint:index:in:
	Receiver: a RubCharacterBlockScanner
	Arguments and temporary variables: 
		aPoint: 	nil
		index: 	117
		textLine: 	a RubTextLine 114 to: 121
		runLength: 	nil
		lineStop: 	nil
		stopCondition: 	nil
	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	114
		destY: 	0
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'adaptToInteger: rcvr andSend: selector
	"If I am involved in ...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	116
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 114 to: 121
		runStopIndex: 	nil
		spaceCount: 	nil
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	nil
		pendingKernX: 	0
		characterPoint: 	nil
		characterIndex: 	nil
		lastCharacter: 	nil
		lastCharacterExtent: 	nil
		lastSpaceOrTabExtent: 	nil
		nextLeftMargin: 	nil
		specialWidth: 	nil


RubParagraph>>characterBlockForIndex:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		index: 	117
		line: 	a RubTextLine 114 to: 121
	Receiver's instance variables: 
		text: 	a Text for 'adaptToInteger: rcvr andSend: selector
	"If I am involved in ...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (122@316)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(34938112)


Message>>sendTo:
	Receiver: characterBlockForIndex: 117
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#characterBlockForIndex:
		args: 	#(117)
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 117
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 117
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: characterBlockForIndex: 117
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#characterBlockForIndex:
		args: 	#(117)
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 117
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 117
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


Message>>sendTo:
	Receiver: characterBlockForIndex: 117
	Arguments and temporary variables: 
		receiver: 	a RubExtraSelectionDecorator
	Receiver's instance variables: 
		selector: 	#characterBlockForIndex:
		args: 	#(117)
		lookupClass: 	RubCurrentLineBarDecorator


[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 117
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 117
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


Message>>sendTo:
	Receiver: characterBlockForIndex: 117
	Arguments and temporary variables: 
		receiver: 	a RubCurrentLineBarDecorator
	Receiver's instance variables: 
		selector: 	#characterBlockForIndex:
		args: 	#(117)
		lookupClass: 	RubShoutStylerDecorator


[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 117
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'adaptToInteger: rcvr andSend: selector
	"If I am involved in ...etc...
		replaceStart: 	1
		replaceStop: 	157


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand...etc...
		startpc: 	62
		numArgs: 	0


RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #characterBlockForIndex:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	characterBlockForIndex: 117
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'adaptToInteger: rcvr andSend: selector
	"If I am involved in ...etc...
		replaceStart: 	1
		replaceStop: 	157


RubEditingState>>markIndex:pointIndex:
	Receiver: a RubEditingState
	Arguments and temporary variables: 
		markIndex: 	117
		pointIndex: 	121
	Receiver's instance variables: 
		hasFocus: 	false
		undoManager: 	nil
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0...etc...
		pointBlock: 	a CharacterBlock with index 121 and surface (13.800003051757813@823...etc...
		markBlock: 	a CharacterBlock with index 117 and surface (6.0@804) corner: (13.80...etc...
		startOfTyping: 	nil
		previousInterval: 	(1 to: 0)
		scrollPivot: 	nil
		textArea: 	a RubEditingArea(34938112)


[ self editingState markIndex: markIndex pointIndex: pointIndex ] in RubEditingArea(RubAbstractTextArea)>>markIndex:pointIndex:
	Receiver: a RubEditingArea(34938112)
	Arguments and temporary variables: 
		markIndex: 	117
		pointIndex: 	121
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (122@316)
		owner: 	a TransformWithLayoutMorph(1037591552)
		submorphs: 	an Array(a RubCursor(161326336) a RubPrimarySelectionMorph(216850432...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (326535424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(189635584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(161326336)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleSelectionChange:
	Receiver: a RubEditingArea(34938112)
	Arguments and temporary variables: 
		aBlock: 	[ self editingState markIndex: markIndex pointIndex: pointIndex ]
		prevMarkBlock: 	a CharacterBlock with index 117 and surface (6.0@804) corner: (1...etc...
		prevPointBlock: 	a CharacterBlock with index 121 and surface (13.800003051757813...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (122@316)
		owner: 	a TransformWithLayoutMorph(1037591552)
		submorphs: 	an Array(a RubCursor(161326336) a RubPrimarySelectionMorph(216850432...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (326535424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(189635584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(161326336)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>markIndex:pointIndex:
	Receiver: a RubEditingArea(34938112)
	Arguments and temporary variables: 
		markIndex: 	117
		pointIndex: 	121
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (122@316)
		owner: 	a TransformWithLayoutMorph(1037591552)
		submorphs: 	an Array(a RubCursor(161326336) a RubPrimarySelectionMorph(216850432...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (326535424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(189635584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(161326336)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>recomputeSelection
	Receiver: a RubEditingArea(34938112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (122@316)
		owner: 	a TransformWithLayoutMorph(1037591552)
		submorphs: 	an Array(a RubCursor(161326336) a RubPrimarySelectionMorph(216850432...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (326535424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(189635584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(161326336)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ self wrapped
	ifTrue: [ (bounds notNil and: [ bounds width = aPoint x ])
			ifTrue: [ ^ self ].
		super
			extent:
				((self paragraph withoutDecorator extentFromClientBottomRight: aPoint)
					max: self minimumExtent).
		self recomputeSelection ] ] in RubEditingArea(RubAbstractTextArea)>>extent:
	Receiver: a RubEditingArea(34938112)
	Arguments and temporary variables: 
		aPoint: 	(122@316)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (122@316)
		owner: 	a TransformWithLayoutMorph(1037591552)
		submorphs: 	an Array(a RubCursor(161326336) a RubPrimarySelectionMorph(216850432...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (326535424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(189635584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(161326336)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleBoundsChange:
	Receiver: a RubEditingArea(34938112)
	Arguments and temporary variables: 
		aBlock: 	[ self wrapped
	ifTrue: [ (bounds notNil and: [ bounds width = aPoint x...etc...
		oldBounds: 	(0@0) corner: (38@316)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (122@316)
		owner: 	a TransformWithLayoutMorph(1037591552)
		submorphs: 	an Array(a RubCursor(161326336) a RubPrimarySelectionMorph(216850432...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (326535424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(189635584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(161326336)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>extent:
	Receiver: a RubEditingArea(34938112)
	Arguments and temporary variables: 
		aPoint: 	(122@316)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (122@316)
		owner: 	a TransformWithLayoutMorph(1037591552)
		submorphs: 	an Array(a RubCursor(161326336) a RubPrimarySelectionMorph(216850432...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (326535424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(189635584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(161326336)
		segments: 	niTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:58.678184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054178591184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054178591184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:58.902184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054178831184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054178831184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:59.202184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WindowEdgeGripMorph(Morph)>>hasDropShadow
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


WindowEdgeGripMorph(Morph)>>outerBounds
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 
		box: 	(535.0@740.0) corner: (1513.0@744.0)
	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


WindowEdgeGripMorph(Morph)>>privateFullBounds
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


WindowEdgeGripMorph(Morph)>>changed
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


WindowEdgeGripMorph(Morph)>>extent:
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 
		aPoint: 	(978.0@4.0)
		newExtent: 	(978@4)
	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


WindowEdgeGripMorph(EdgeGripMorph)>>extent:
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 
		aPoint: 	(978.0@4.0)
		ext: 	(254.0@4.0)
	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


WindowEdgeGripMorph(Morph)>>bounds:
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 
		newBounds: 	(535.0@740.0) corner: (1513.0@744.0)
		oldExtent: 	(254.0@4.0)
		newExtent: 	(978.0@4.0)
	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


WindowEdgeGripMorph(Morph)>>layoutInBounds:
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 
		cellBounds: 	(535@740) corner: (1513@744)
		box: 	(535.0@740.0) corner: (1513.0@744.0)
		aSymbol: 	#topLeft
	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


WindowEdgeGripMorph(Morph)>>layoutProportionallyIn:
	Receiver: a WindowEdgeGripMorph(313476096)
	Arguments and temporary variables: 
		newBounds: 	(513.0@132.0) corner: (1535.0@744.0)
		box: 	(535@740) corner: (1513@744)
		frame: 	a LayoutFrame ( (0@1) + (22@ -4)px corner: (1@1) + (-22@0)px ) 
	Receiver's instance variables: 
		bounds: 	(535.0@740.0) corner: (1513.0@744.0)
		owner: 	a GLMSystemWindow(816432384) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (435535872)
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(816432384) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a GLMSystemWindow(816432384) named: User Interrupt
		newBounds: 	(513.0@132.0) corner: (1535.0@744.0)
		m: 	a WindowEdgeGripMorph(313476096)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(551547136) a WindowEdgeGri...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
		index: 	1
	Receiver's instance variables: 
an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(551547136) a WindowEdgeGri...etc...

GLMSystemWindow(Morph)>>submorphsDo:
	Receiver: a GLMSystemWindow(816432384) named: User Interrupt
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
	Receiver's instance variables: 
		bounds: 	(512.0@104.0) corner: (1536.0@745.0)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(5515...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (242775040) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=825756928 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(102241536) a Morph(389804032))
		label: 	a LabelMorph(538573056)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(157002752)
		collapseBox: 	a MultistateButtonMorph(562666752)
		paneMorphs: 	an Array(a GLMPanelMorph(299083776))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@104.0) corner: (1536.0@745.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(516620544)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(568321024)
		expandBox: 	a MultistateButtonMorph(839001344)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(721182720)
		hasInitialStep: 	false


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a GLMSystemWindow(816432384) named: User Interrupt
		newBounds: 	(513.0@132.0) corner: (1535.0@744.0)
	Receiver's instance variables: 
a ProportionalLayout

GLMSystemWindow(Morph)>>doLayoutIn:
	Receiver: a GLMSystemWindow(816432384) named: User Interrupt
	Arguments and temporary variables: 
		layoutBounds: 	(513.0@132.0) corner: (1535.0@744.0)
		box: 	nil
		priorBounds: 	(512.0@104.0) corner: (1536.0@745.0)
		layout: 	a ProportionalLayout
	Receiver's instance variables: 
		bounds: 	(512.0@104.0) corner: (1536.0@745.0)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(5515...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (242775040) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=825756928 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(102241536) a Morph(389804032))
		label: 	a LabelMorph(538573056)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(157002752)
		collapseBox: 	a MultistateButtonMorph(562666752)
		paneMorphs: 	an Array(a GLMPanelMorph(299083776))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@104.0) corner: (1536.0@745.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(516620544)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(568321024)
		expandBox: 	a MultistateButtonMorph(839001344)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(721182720)
		hasInitialStep: 	false


[ self doLayoutIn: self layoutBounds ] in GLMSystemWindow(Morph)>>computeFullBounds
	Receiver: a GLMSystemWindow(816432384) named: User Interrupt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(512.0@104.0) corner: (1536.0@745.0)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(5515...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (242775040) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=825756928 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(102241536) a Morph(389804032))
		label: 	a LabelMorph(538573056)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(157002752)
		collapseBox: 	a MultistateButtonMorph(562666752)
		paneMorphs: 	an Array(a GLMPanelMorph(299083776))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@104.0) corner: (1536.0@745.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(516620544)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(568321024)
		expandBox: 	a MultistateButtonMorph(839001344)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(721182720)
		hasInitialStep: 	false


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	GLMSystemWindow(Morph)>>computeFullBounds
		startpc: 	69
		numArgs: 	0


GLMSystemWindow(Morph)>>computeFullBounds
	Receiver: a GLMSystemWindow(816432384) named: User Interrupt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(512.0@104.0) corner: (1536.0@745.0)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(5515...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (242775040) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=825756928 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(102241536) a Morph(389804032))
		label: 	a LabelMorph(538573056)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(157002752)
		collapseBox: 	a MultistateButtonMorph(562666752)
		paneMorphs: 	an Array(a GLMPanelMorph(299083776))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@104.0) corner: (1536.0@745.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(516620544)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(568321024)
		expandBox: 	a MultistateButtonMorph(839001344)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(721182720)
		hasInitialStep: 	false


GLMSystemWindow(Morph)>>fullBounds
	Receiver: a GLMSystemWindow(816432384) named: User Interrupt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(512.0@104.0) corner: (1536.0@745.0)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(5515...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (242775040) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=825756928 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(102241536) a Morph(389804032))
		label: 	a LabelMorph(538573056)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(157002752)
		collapseBox: 	a MultistateButtonMorph(562666752)
		paneMorphs: 	an Array(a GLMPanelMorph(299083776))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@104.0) corner: (1536.0@745.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(516620544)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(568321024)
		expandBox: 	a MultistateButtonMorph(839001344)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(721182720)
		hasInitialStep: 	false


GLMSystemWindow>>extent:
	Receiver: a GLMSystemWindow(816432384) named: User Interrupt
	Arguments and temporary variables: 
		aPoint: 	(1024.0@641.0)
	Receiver's instance variables: 
		bounds: 	(512.0@104.0) corner: (1536.0@745.0)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(5515...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (242775040) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=825756928 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(102241536) a Morph(389804032))
		label: 	a LabelMorph(538573056)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(157002752)
		collapseBox: 	a MultistateButtonMorph(562666752)
		paneMorphs: 	an Array(a GLMPanelMorph(299083776))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@104.0) corner: (1536.0@745.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(516620544)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(568321024)
		expandBox: 	a MultistateButtonMorph(839001344)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(721182720)
		hasInitialStep: 	false


GLMSystemWindow(Morph)>>bounds:
	Receiver: a GLMSystemWindow(816432384) named: User Interrupt
	Arguments and temporary variables: 
		newBounds: 	(512.0@104.0) corner: (1536@745.0)
		oldExtent: 	(300@200)
		newExtent: 	(1024.0@641.0)
	Receiver's instance variables: 
		bounds: 	(512.0@104.0) corner: (1536.0@745.0)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(313476096) a WindowEdgeGripMorph(5515...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (242775040) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=825756928 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(102241536) a Morph(389804032))
		label: 	a LabelMorph(538573056)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(157002752)
		collapseBox: 	a MultistateButtonMorph(562666752)
		paneMorphs: 	an Array(a GLMPanelMorph(299083776))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@104.0) corner: (1536.0@745.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(516620544)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(568321024)
		expandBox: 	a MultistateButtonMorph(839001344)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(721182720THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:02:59.793184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LargePositiveInteger(LargeInteger)>>*
	Receiver: THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:00.022184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054179489184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054179489184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:00.187184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Color class>>transparent
	Receiver: Color
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 132)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Color
		classPool: 	a Dictionary(#BlueShift->0 #CachedColormaps->an Array(an Array(nil n...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Colors-Base'


FTTableRowMorph>>defaultColor
	Receiver: a FTTableRowMorph(579457024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	nil
		extension: 	nil
		selectionColor: 	nil


FTTableRowMorph(Morph)>>initialize
	Receiver: a FTTableRowMorph(579457024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	nil
		extension: 	nil
		selectionColor: 	nil


FTTableRowMorph>>initialize
	Receiver: a FTTableRowMorph(579457024)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	nil
		extension: 	nil
		selectionColor: 	nil


FTTableRowMorph>>initializeTable:
	Receiver: a FTTableRowMorph(579457024)
	Arguments and temporary variables: 
		tableMorph: 	a FTTableMorph(297281792)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	nil
		extension: 	nil
		selectionColor: 	nil


FTTableRowMorph class>>table:
	Receiver: FTTableRowMorph
	Arguments and temporary variables: 
		aTableMorph: 	a FTTableMorph(297281792)
	Receiver's instance variables: 
		superclass: 	Morph
		methodDict: 	a MethodDictionary(#defaultColor->FTTableRowMorph>>#defaultColor #h...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FTTableRowMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets-FastTable'
		announcer: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(854798592)
	Arguments and temporary variables: 
		visibleRows: 	2
		numberOfColumns: 	0
		columns: 	#()
		columnWidths: 	#()
		startIndex: 	1
		rowIndex: 	1
		row: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (37@40)
		owner: 	a FTTableMorph(297281792)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()


FTTableMorph>>resetPosition
	Receiver: a FTTableMorph(297281792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a FTTableContainerMorph(854798592) a ScrollBar(545607936))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (280630272) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(854798592)
		verticalScrollBar: 	a ScrollBar(545607936)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	#()
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	nil
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		trialHSB: 	nil


FTTableMorph>>dataSource:
	Receiver: a FTTableMorph(297281792)
	Arguments and temporary variables: 
		anObject: 	a GLMFastTableDataSource
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a FTTableContainerMorph(854798592) a ScrollBar(545607936))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (280630272) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(854798592)
		verticalScrollBar: 	a ScrollBar(545607936)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#()
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	#()
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	nil
		needToggleAtMouseUp: 	false
		function: 	a FTSearchFunction
		resizable: 	false
		trialHSB: 	nil


GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>initializeTableMorph
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		presentation: 	a GLMFastTablePresentation(id=754549760 title='Stack' pane=a GLMP...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(297281792)


GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>render:
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=754549760 title='Stack' pane=a GLM...etc...
		container: 	a GLMPanelMorph(827950336)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(297281792)


GLMMorphicFastTableRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=754549760 title='Stack' pane=a GLM...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicFTRenderer
		methodDict: 	a MethodDictionary(#createDataSourceFrom:->GLMMorphicFastTableRende...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicFastTableRenderer
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-FastTable-Morphic-Renderer'


GLMMorphicRenderer>>renderFastTablePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMFastTablePresentation(id=754549760 title='Stack' pane=a GLM...etc...
	Receiver's instance variables: 
		window: 	nil


GLMFastTablePresentation>>renderGlamorouslyOn:
	Receiver: a GLMFastTablePresentation(id=754549760 title='Stack' pane=a GLMPane(744226816 stack))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(744226816 stack)
		title: 	'Stack'
		titleIcon: 	nil
		transformation: 	[ :aSession | self retrieveStackFrom: aSession ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMFastTablePresentation(id=202664192 title='Stack' pane=a G...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	an OrderedCollection([ delaySemaphore wait ] in Delay>>wa...etc...
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	nil
		icon: 	nil
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	nil
		allowsDeselection: 	nil
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		columns: 	an OrderedCollection(a GLMTableColumn a GLMTableColumn a GLMTableColum...etc...
		children: 	[ #() ]
		rootsExpanded: 	nil
		shouldShowHeader: 	false
		parameters: 	a Dictionary('shouldUseCache'->true )


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMFastTablePresentation(id=754549760 title='Stack' pane=a GLMPa...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMFastTablePresentation(id=754549760 title='Stack' pane=a GLMPane(...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(632098048)


[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	1
		aPresentation: 	a GLMCompositePresentation(id=73512960 title=nil pane=a GLMPane(...etc...
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=754549760 tit...etc...
		each: 	a GLMFastTablePresentation(id=754549760 title='Stack' pane=a GLMPane(7442...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(632098048)


LazyTabPage>>actualPageMorph
	Receiver: a LazyTabPage(730296576)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (319826944)
		borderWidth: 	1
		borderColor: 	Color black
		actualPageMorph: 	nil
		labelMorph: 	'Stack'
		lazyPageMorphCreation: 	[ self renderObject: each ]
		toolbar: 	a ToolDockingBarMorph(180952320)


LazyTabGroupMorph>>pageAt:
	Receiver: a LazyTabGroupMorph(632098048)
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(746873856) a PanelMorph(668050688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (886628352)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(174754048)
		contentMorph: 	a GLMPanelMorph(746873856)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(730296576))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(410622976)
		headerMorph: 	a PanelMorph(668050688)
		tabSelectorWidth: 	nil


LazyTabGroupMorph>>updatePageIndex:
	Receiver: a LazyTabGroupMorph(632098048)
	Arguments and temporary variables: 
		index: 	1
		p: 	nil
		oldPage: 	a GLMTabLabelBrick(108180480)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(746873856) a PanelMorph(668050688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (886628352)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(174754048)
		contentMorph: 	a GLMPanelMorph(746873856)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(730296576))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(410622976)
		headerMorph: 	a PanelMorph(668050688)
		tabSelectorWidth: 	nil


LazyTabGroupMorph(TabGroupMorph)>>update:
	Receiver: a LazyTabGroupMorph(632098048)
	Arguments and temporary variables: 
		aSymbol: 	#selectedIndex
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(746873856) a PanelMorph(668050688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (886628352)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(174754048)
		contentMorph: 	a GLMPanelMorph(746873856)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(730296576))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(410622976)
		headerMorph: 	a PanelMorph(668050688)
		tabSelectorWidth: 	nil


LazyTabGroupMorph(Object)>>update:with:
	Receiver: a LazyTabGroupMorph(632098048)
	Arguments and temporary variables: 
		anAspect: 	#selectedIndex
		anObject: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(746873856) a PanelMorph(668050688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (886628352)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(174754048)
		contentMorph: 	a GLMPanelMorph(746873856)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(730296576))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(410622976)
		headerMorph: 	a PanelMorph(668050688)
		tabSelectorWidth: 	nil


MorphChangedWithArguments>>deliverTo:
	Receiver: a MorphChangedWithArguments
	Arguments and temporary variables: 
		aHandler: 	a LazyTabGroupMorph(632098048)
	Receiver's instance variables: 
		morph: 	a GLMTabSelectorBrick(174754048)
		selector: 	#selectedIndex
		arguments: 	0


LazyTabGroupMorph(Morph)>>handleUpdate:
	Receiver: a LazyTabGroupMorph(632098048)
	Arguments and temporary variables: 
		aMorphChangedAnnouncement: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(746873856) a PanelMorph(668050688))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (886628352)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(174754048)
		contentMorph: 	a GLMPanelMorph(746873856)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(730296576))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(410622976)
		headerMorph: 	a PanelMorph(668050688)
		tabSelectorWidth: 	nil


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a LazyTabGroupMorph(632098048))
	Arguments and temporary variables: 
		anObject: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		receiver: 	a LazyTabGroupMorph(632098048)
		selector: 	#handleUpdate:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a LazyTabGroupMorph(632098048))
	Arguments and temporary variables: 
		arg: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		receiver: 	a LazyTabGroupMorph(632098048)
		selector: 	#handleUpdate:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a LazyTabGroupMorph(632098048))
	Arguments and temporary variables: 
		arg1: 	a MorphChangedWithArguments
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a LazyTabGroupMorph(632098048)
		selector: 	#handleUpdate:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	an AnnouncementSet(MorpTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:00.368184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 11 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 88 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 9 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 7 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054180382184


Delay>>wait
	Receiver: a Delay(100 msecs; 6 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054180382184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:00.917184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054180491184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054180491184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:00.954184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LargePositiveInteger(LargeInteger)>>*
	Receiver: THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.182184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.193184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.217184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 81 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 71 msecs remaining) a Delay(100 msec...etc...
		activeDelay: 	a Delay(100 msecs; 59 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 78 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054181301184


Delay>>wait
	Receiver: a Delay(100 msecs; 77 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054181301184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.271184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

OrderedCollection(SequenceableCollection)>>hash
	Receiver: an OrderedCollection(Shift Meta)
	Arguments and temporary variables: 
		hash: 	263679549
	Receiver's instance variables: 
		array: 	an Array(Shift Meta nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


KMComposedModifier>>hash
	Receiver: Shift + Meta
	Arguments and temporary variables: 

	Receiver's instance variables: 
		identifier: 	#sc
		name: 	nil
		modifiers: 	an OrderedCollection(Shift Meta)


KMModifiedKeyCombination>>hash
	Receiver: Shift + Meta + x
	Arguments and temporary variables: 

	Receiver's instance variables: 
		modifier: 	Shift + Meta
		character: 	x


OrderedCollection(SequenceableCollection)>>hash
	Receiver: an OrderedCollection(Shift + Meta + w Shift + Meta + x Shift + Meta + s)
	Arguments and temporary variables: 
		hash: 	253156388
		i: 	2
	Receiver's instance variables: 
		array: 	an Array(Shift + Meta + w Shift + Meta + x Shift + Meta + s nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	3


KMKeyCombinationSequence>>hash
	Receiver: Shift + Meta + w , Shift + Meta + x , Shift + Meta + s
	Arguments and temporary variables: 

	Receiver's instance variables: 
		shortcuts: 	an OrderedCollection(Shift + Meta + w Shift + Meta + x Shift + Meta ...etc...


KMKeymap>>hash
	Receiver: #windowBottomEdgeUp on Shift + Meta + w , Shift + Meta + x , Shift + Meta + s do [ :target...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		action: 	[ :target | 
| movement |
movement := 0 @ (target bounds height / 2) ne...etc...
		name: 	#windowBottomEdgeUp
		shortcut: 	Shift + Meta + w , Shift + Meta + x , Shift + Meta + s
		defaultShortcut: 	Shift + Meta + w , Shift + Meta + x , Shift + Meta + s
		description: 	'Move bottom edge of the window up by half of the window extent'


Set>>scanFor:
	Receiver: a Set(#windowMoveRight on Shift + Meta + w , Right Arrow do [ :target | 
| movement |
move...etc...
	Arguments and temporary variables: 
		anObject: 	#windowBottomEdgeUp on Shift + Meta + w , Shift + Meta + x , Shift + ...etc...
		index: 	nil
		start: 	nil
	Receiver's instance variables: 
		tally: 	21
		array: 	an Array(nil nil #windowMoveRight on Shift + Meta + w , Right Arrow do [...etc...


Set>>add:
	Receiver: a Set(#windowMoveRight on Shift + Meta + w , Right Arrow do [ :target | 
| movement |
move...etc...
	Arguments and temporary variables: 
		newObject: 	#windowBottomEdgeUp on Shift + Meta + w , Shift + Meta + x , Shift +...etc...
		index: 	nil
	Receiver's instance variables: 
		tally: 	21
		array: 	an Array(nil nil #windowMoveRight on Shift + Meta + w , Right Arrow do [...etc...


[ :each | self add: each ] in Set(Collection)>>addAll:
	Receiver: a Set(#windowMoveRight on Shift + Meta + w , Right Arrow do [ :target | 
| movement |
move...etc...
	Arguments and temporary variables: 
		aCollection: 	an Array(#windowTopEdgeDown on Shift + Meta + w , Shift + Meta + w...etc...
		each: 	#windowBottomEdgeUp on Shift + Meta + w , Shift + Meta + x , Shift + Meta...etc...
	Receiver's instance variables: 
		tally: 	21
		array: 	an Array(nil nil #windowMoveRight on Shift + Meta + w , Right Arrow do [...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(#windowTopEdgeDown on Shift + Meta + w , Shift + Meta + w , Shift + Meta + s do [...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self add: each ]
		index: 	22
	Receiver's instance variables: 
an Array(#windowTopEdgeDown on Shift + Meta + w , Shift + Meta + w , Shift + Meta + s do [...etc...

Set(Collection)>>addAll:
	Receiver: a Set(#windowMoveRight on Shift + Meta + w , Right Arrow do [ :target | 
| movement |
move...etc...
	Arguments and temporary variables: 
		aCollection: 	an Array(#windowTopEdgeDown on Shift + Meta + w , Shift + Meta + w...etc...
	Receiver's instance variables: 
		tally: 	21
		array: 	an Array(nil nil #windowMoveRight on Shift + Meta + w , Right Arrow do [...etc...


Set(Collection)>>,
	Receiver: a Set()
	Arguments and temporary variables: 
		aCollection: 	an Array(#windowTopEdgeDown on Shift + Meta + w , Shift + Meta + w...etc...
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


KMStorage>>keymaps
	Receiver: a KMStorage
	Arguments and temporary variables: 

	Receiver's instance variables: 
		namedRegistry: 	a Dictionary(#close->#close on Meta + w do [ :target | SystemWin...etc...
		anonymousRegistry: 	a Set()


KMStorage>>,
	Receiver: a KMStorage
	Arguments and temporary variables: 
		aKMStorage: 	a KMStorage
	Receiver's instance variables: 
		namedRegistry: 	a Dictionary(#close->#close on Meta + w do [ :target | SystemWin...etc...
		anonymousRegistry: 	a Set()


KMCategory>>allEntries
	Receiver: a KMCategory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	#WindowShortcuts
		platforms: 	a Dictionary(#Windows->a KMStorage #all->a KMStorage )


KMCategory>>keymaps
	Receiver: a KMCategory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	#WindowShortcuts
		platforms: 	a Dictionary(#Windows->a KMStorage #all->a KMStorage )


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-.>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#WindowShortcuts) a KMDispatcher)
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#WindowShortcuts
		platforms: 	a Dictionary(#Windows->a KMStorage #all->a KMStorage )


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#WindowShortcuts)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-.>'])
		aListener: 	a KMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a GLMSystemWindow(336950528) named: User Interrupt
		category: 	a KMCategory
		morph: 	a GLMSystemWindow(336950528) named: User Interrupt


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-.>'])
		aTarget: 	aKMCategoryTarget(#WindowShortcuts)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a GLMSystemWindow(336950528) named: User Interrupt
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verify...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	3


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-.>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a GLMSystemWindow(336950528) named: User Interrupt
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Cmd-.>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a GLMSystemWindow(336950528) named: User Interrupt
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-.>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-.>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a KMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-.>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a FTTableMorph(214582528)
		directKeymaps: 	a KMCategory


FTTableMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a FTTableMorph(214582528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-.>']
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(811858944)
		submorphs: 	an Array(a FTTableContainerMorph(876989696) a ScrollBar(315029504))
		fullBounds: 	(522@165) corner: (1526@281)
		color: 	Color white
		extension: 	a MorphExtension (81015040) [other:  (announcer -> an Announcer) (km...etc...
		container: 	a FTTableContainerMorph(876989696)
		verticalScrollBar: 	a ScrollBar(315029504)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph(Morph)>>handleKeystrokeWithKeymappings:
	Receiver: a FTTableMorph(214582528)
	Arguments and temporary variables: 
		aKeystrokeEvent: 	[keystroke '<Cmd-.>']
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(811858944)
		submorphs: 	an Array(a FTTableContainerMorph(876989696) a ScrollBar(315029504))
		fullBounds: 	(522@165) corner: (1526@281)
		color: 	Color white
		extension: 	a MorphExtension (81015040) [other:  (announcer -> an Announcer) (km...etc...
		container: 	a FTTableContainerMorph(876989696)
		verticalScrollBar: 	a ScrollBar(315029504)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


KMShortcutHandler>>handleKeystroke:inMorph:
	Receiver: a KMShortcutHandler
	Arguments and temporary variables: 
		aKeystrokeEvent: 	[keystroke '<Cmd-.>']
		aMorph: 	a FTTableMorph(214582528)
	Receiver's instance variables: 
a KMShortcutHandler

FTTableMorph(Morph)>>handleKeystroke:
	Receiver: a FTTableMorph(214582528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-.>']
		handler: 	a KMShortcutHandler
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(811858944)
		submorphs: 	an Array(a FTTableContainerMorph(876989696) a ScrollBar(315029504))
		fullBounds: 	(522@165) corner: (1526@281)
		color: 	Color white
		extension: 	a MorphExtension (81015040) [other:  (announcer -> an Announcer) (km...etc...
		container: 	a FTTableContainerMorph(876989696)
		verticalScrollBar: 	a ScrollBar(315029504)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-.>']
	Arguments and temporary variables: 
		anObject: 	a FTTableMorph(214582528)
	Receiver's instance variables: 
		timeStamp: 	16874572
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(512@507.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	46
		charCode: 	46
		scanCode: 	240


FTTableMorph(Morph)>>handleEvent:
	Receiver: a FTTableMorph(214582528)
	Arguments and temporary variablesTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.361184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.371184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.380184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.430184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Character>>asUppercase
	Receiver: $s
	Arguments and temporary variables: 

	Receiver's instance variables: 
$s

ByteString(String)>>capitalized
	Receiver: 'stackDebuggingAction'
	Arguments and temporary variables: 
		cap: 	'stackDebuggingAction'
	Receiver's instance variables: 
'stackDebuggingAction'

ByteSymbol(Symbol)>>capitalized
	Receiver: #stackDebuggingAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
#stackDebuggingAction

[ :aSymbol | #gt , aSymbol capitalized ] in [ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt , aSymbol capitalized ]) ] in GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRootPragmas:in:
	Receiver: a GTGenericStackDebugger(id=513991936 title='User Interrupt' pane=a GLMPane(890860800 root...etc...
	Arguments and temporary variables: 
		aSymbolsCollection: 	#(#stackDebuggingAction)
		aPresentation: 	a GLMFastTablePresentation(id=444698624 title='Stack' pane=a GLM...etc...
		presentation: 	a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMP...etc...
		aSymbol: 	#stackDebuggingAction
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(890860800 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=268369152 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		cache: 	nil


Array(SequenceableCollection)>>collect:
	Receiver: #(#stackDebuggingAction)
	Arguments and temporary variables: 
		aBlock: 	[ :aSymbol | #gt , aSymbol capitalized ]
		newCollection: 	#(nil)
		index: 	1
	Receiver's instance variables: 
#(#stackDebuggingAction)

[ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt , aSymbol capitalized ]) ] in GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRootPragmas:in:
	Receiver: a GTGenericStackDebugger(id=513991936 title='User Interrupt' pane=a GLMPane(890860800 root...etc...
	Arguments and temporary variables: 
		aSymbolsCollection: 	#(#stackDebuggingAction)
		aPresentation: 	a GLMFastTablePresentation(id=444698624 title='Stack' pane=a GLM...etc...
		presentation: 	a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMP...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(890860800 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=268369152 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		cache: 	nil


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt ...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMFastTablePresentation(id=807753984 title='Stack' pane=a ...etc...
	Receiver's instance variables: 
		outerContext: 	GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRoot...etc...
		startpc: 	95
		numArgs: 	1


BlockClosure(ProtoObject)>>glamourValue:
	Receiver: [ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt ...etc...
	Arguments and temporary variables: 
		anObject: 	a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMPane(...etc...
		args: 	an Array(a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRoot...etc...
		startpc: 	95
		numArgs: 	1


GLMFastTablePresentation(GLMPresentation)>>dynamicActions
	Receiver: a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMPane(574498816 stack))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(574498816 stack)
		title: 	'Stack'
		titleIcon: 	nil
		transformation: 	[ :aSession | self retrieveStackFrom: aSession ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMFastTablePresentation(id=444698624 title='Stack' pane=a G...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	nil
		icon: 	nil
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	nil
		allowsDeselection: 	nil
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		columns: 	an OrderedCollection(a GLMTableColumn a GLMTableColumn a GLMTableColum...etc...
		children: 	[ #() ]
		rootsExpanded: 	nil
		shouldShowHeader: 	false
		parameters: 	a Dictionary('shouldUseCache'->true )


GLMFastTablePresentation(GLMPresentation)>>allActions
	Receiver: a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMPane(574498816 stack))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(574498816 stack)
		title: 	'Stack'
		titleIcon: 	nil
		transformation: 	[ :aSession | self retrieveStackFrom: aSession ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMFastTablePresentation(id=444698624 title='Stack' pane=a G...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	nil
		icon: 	nil
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	nil
		allowsDeselection: 	nil
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		columns: 	an OrderedCollection(a GLMTableColumn a GLMTableColumn a GLMTableColum...etc...
		children: 	[ #() ]
		rootsExpanded: 	nil
		shouldShowHeader: 	false
		parameters: 	a Dictionary('shouldUseCache'->true )


GLMFastTablePresentation(GLMPresentation)>>allActionsWithShortcuts
	Receiver: a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMPane(574498816 stack))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(574498816 stack)
		title: 	'Stack'
		titleIcon: 	nil
		transformation: 	[ :aSession | self retrieveStackFrom: aSession ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMFastTablePresentation(id=444698624 title='Stack' pane=a G...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	nil
		icon: 	nil
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	nil
		allowsDeselection: 	nil
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		columns: 	an OrderedCollection(a GLMTableColumn a GLMTableColumn a GLMTableColum...etc...
		children: 	[ #() ]
		rootsExpanded: 	nil
		shouldShowHeader: 	false
		parameters: 	a Dictionary('shouldUseCache'->true )


GLMMorphicFastTableRenderer(GLMMorphicWidgetRenderer)>>installKeystrokeActionsOnMorph:fromPresentation:
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		aMorph: 	a FTTableMorph(963737600)
		aPresentation: 	a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLM...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(963737600)


GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>initializeAnnouncementForDataSource
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(963737600)


GLMMorphicFastTableRenderer(GLMMorphicFTRenderer)>>dataSourceUpdated:
	Receiver: a GLMMorphicFastTableRenderer
	Arguments and temporary variables: 
		announcement: 	a GLMDataSourceUpdated
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tableModel: 	a GLMFastTableDataSource
		tableMorph: 	a FTTableMorph(963737600)


MessageSend>>value:
	Receiver: MessageSend(#dataSourceUpdated: -> a GLMMorphicFastTableRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMDataSourceUpdated
	Receiver's instance variables: 
		receiver: 	a GLMMorphicFastTableRenderer
		selector: 	#dataSourceUpdated:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#dataSourceUpdated: -> a GLMMorphicFastTableRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMDataSourceUpdated
	Receiver's instance variables: 
		receiver: 	a GLMMorphicFastTableRenderer
		selector: 	#dataSourceUpdated:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#dataSourceUpdated: -> a GLMMorphicFastTableRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMDataSourceUpdated
		arg2: 	a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMPane(5744...etc...
	Receiver's instance variables: 
		receiver: 	a GLMMorphicFastTableRenderer
		selector: 	#dataSourceUpdated:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMDataSourceUpdated
	Receiver's instance variables: 
		announcer: 	a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMPane...etc...
		announcementClass: 	GLMDataSourceUpdated
		subscriber: 	a GLMMorphicFastTableRenderer
		action: 	MessageSend(#dataSourceUpdated: -> a GLMMorphicFastTableRenderer)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMDataSourceUpdated
	Receiver's instance variables: 
		announcer: 	a GLMFastTablePresentation(id=807753984 title='Stack' pane=a GLMPane...etc...
		announcementClass: 	GLMDataSourceUpdated
		subscriber: 	a GLMMorphicFastTableRenderer
		action: 	MessageSend(#dataSourceUpdated: -> a GLMMorphicFastTableRenderer)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMDataSourceUpdated
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.525184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.535184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.544184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.554184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.620184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TextMethodLink>>initialize
	Receiver: a TextMethodLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		actOnClickBlock: 	nil
		classAndMethod: 	nil
		selector: 	nil
		browseSenders: 	nil
		sourceNode: 	nil


TextMethodLink class(Behavior)>>new
	Receiver: TextMethodLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TextLink
		methodDict: 	a MethodDictionary(#=->TextMethodLink>>#= #actOnClick:for:in:editor...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TextMethodLink
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Core-Attributes'


TextMethodLink class>>sourceNode:
	Receiver: TextMethodLink
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(super * anInteger)
	Receiver's instance variables: 
		superclass: 	TextLink
		methodDict: 	a MethodDictionary(#=->TextMethodLink>>#= #actOnClick:for:in:editor...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TextMethodLink
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Core-Attributes'


SHRBTextStyler>>visitMessageNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aMessageNode: 	RBMessageNode(super * anInteger)
		style: 	#keyword
		link: 	nil
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


RBMessageNode>>acceptVisitor:
	Receiver: RBMessageNode(super * anInteger)
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a SHRBTextStyler
	Receiver's instance variables: 
		parent: 	RBReturnNode(^ super * anInteger)
		properties: 	nil
		parentheses: 	nil
		receiver: 	RBSuperNode(super)
		selector: 	#*
		keywordsPositions: 	an IntegerArray(312)
		arguments: 	an Array(RBArgumentNode(anInteger))


SHRBTextStyler>>visitNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aNode: 	RBMessageNode(super * anInteger)
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>visitReturnNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aReturnNode: 	RBReturnNode(^ super * anInteger)
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


RBReturnNode>>acceptVisitor:
	Receiver: RBReturnNode(^ super * anInteger)
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a SHRBTextStyler
	Receiver's instance variables: 
		parent: 	RBSequenceNode(^ super * anInteger)
		properties: 	nil
		return: 	305
		value: 	RBMessageNode(super * anInteger)


SHRBTextStyler>>visitNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aNode: 	RBReturnNode(^ super * anInteger)
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


[ :each | self visitNode: each ] in SHRBTextStyler>>visitSequenceNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(^ super * anInteger)
		patternTempStyle: 	#patternTempVar
		each: 	RBReturnNode(^ super * anInteger)
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(RBReturnNode(^ super * anInteger))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RBReturnNode(^ super * anInteger) nil nil nil nil nil nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	1


SHRBTextStyler>>visitSequenceNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aSequenceNode: 	RBSequenceNode(^ super * anInteger)
		patternTempStyle: 	#patternTempVar
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


RBSequenceNode>>acceptVisitor:
	Receiver: RBSequenceNode(^ super * anInteger)
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a SHRBTextStyler
	Receiver's instance variables: 
		parent: 	* anInteger
	"Primitive. Multiply the receiver by the argument and answ...etc...
		properties: 	nil
		leftBar: 	nil
		rightBar: 	nil
		statements: 	an OrderedCollection(RBReturnNode(^ super * anInteger))
		periods: 	an OrderedCollection()
		temporaries: 	#()


SHRBTextStyler>>visitNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aNode: 	RBSequenceNode(^ super * anInteger)
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>visitMethodNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aMethodNode: 	* anInteger
	"Primitive. Multiply the receiver by the argument and...etc...
		link: 	a TextMethodLink
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


RBMethodNode>>acceptVisitor:
	Receiver: * anInteger
	"Primitive. Multiply the receiver by the argument and answer with an
	Integer...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a SHRBTextStyler
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#comments->an Array(a RBComment "Primitive. Multi...etc...
		scope: 	an OCMethodScope 3
		selector: 	#*
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(^ super * anInteger)
		source: 	'* anInteger 
	"Primitive. Multiply the receiver by the argument and an...etc...
		arguments: 	an Array(RBArgumentNode(anInteger))
		pragmas: 	an OrderedCollection(RBPragmaNode(<primitive: 29>))
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


SHRBTextStyler>>style:ast:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argum...etc...
		ast: 	* anInteger
	"Primitive. Multiply the receiver by the argument and answer ...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>privateStyle:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argum...etc...
		ast: 	* anInteger
	"Primitive. Multiply the receiver by the argument and answer ...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler(SHTextStyler)>>style:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argum...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextEmphasis code: 1 a TextMethodLink) an Array(a...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	LargeInteger
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argum...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		replaceStart: 	1
		replaceStop: 	322


BlockClosure>>on:do:
	Receiver: [ ^ self styler style: aText ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ex logCr.
^ aText ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator>>style:
		startpc: 	70
		numArgs: 	0


RubShoutStylerDecorator>>style:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argum...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		replaceStart: 	1
		replaceStop: 	322


[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argum...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		replaceStart: 	1
		replaceStop: 	322


BlockClosure>>ensure:
	Receiver: [ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aTex...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator>>text:
		startpc: 	111
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ aText addAttribute: self defaultFontChange.
next text: (text := self ...etc...
	Receiver's instance variables: 
		text: 	a Text for '* anInteger 
	"Primitive. Multiply the receiver by the argume...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (50@40)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(694335744)


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary varTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.713184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.723184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.732184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.742184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.800184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

GLMBrickBounds>>extent
	Receiver: a GLMBrickBounds
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(2@0) corner: (5@24)
		innerBounds: 	(2@0) corner: (5@24)
		outerBounds: 	(-3@0) corner: (5@24)
		widthState: 	#clean
		heightState: 	#clean
		margin: 	#(0 0 0 5)
		padding: 	#(0 0 0 0)


GLMBrickBounds>>outerOrigin:
	Receiver: a GLMBrickBounds
	Arguments and temporary variables: 
		aPoint: 	(0@0)
	Receiver's instance variables: 
		bounds: 	(2@0) corner: (5@24)
		innerBounds: 	(2@0) corner: (5@24)
		outerBounds: 	(-3@0) corner: (5@24)
		widthState: 	#clean
		heightState: 	#clean
		margin: 	#(0 0 0 5)
		padding: 	#(0 0 0 0)


GLMBrickWrapper>>outerOrigin:
	Receiver: a GLMBrickWrapper
	Arguments and temporary variables: 
		aPoint: 	(0@0)
	Receiver's instance variables: 
		brick: 	a GLMLabelBrick(687049984)


[ :origin :each | 
each outerOrigin: origin.
each outerBounds width @ 0 ] in GLMHorizontalLinearLayout>>layout:in:
	Receiver: a GLMHorizontalLinearLayout
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		newBounds: 	(0@0) corner: (2@24)
		origin: 	(0@0)
		each: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMHorizontalLinearLayout

BlockClosure>>cull:cull:
	Receiver: [ :origin :each | 
each outerOrigin: origin.
each outerBounds width @ 0 ]
	Arguments and temporary variables: 
		firstArg: 	(0@0)
		secondArg: 	a GLMBrickWrapper
	Receiver's instance variables: 
		outerContext: 	GLMHorizontalLinearLayout>>layout:in:
		startpc: 	85
		numArgs: 	2


[ :origin :each | 
| result |
result := origin
	+
		((self isFloating: each)
			ifFalse: [ aBlock cull: origin cull: each ]
			ifTrue: [ self layoutFloating: each in: aRectangle ]).
"applying aligning: #none, #left, #center, #right"
self
	align: each
	in: aBrick
	anchorPoint: origin
	inContext: nil.
each onLayouted.
result ] in GLMHorizontalLinearLayout(GLMLinearLayout)>>layout:in:inject:into:
	Receiver: a GLMHorizontalLinearLayout
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aRectangle: 	(0@0) corner: (2@24)
		anInteger: 	(0@0)
		aBlock: 	[ :origin :each | 
each outerOrigin: origin.
each outerBounds width @ 0...etc...
		origin: 	(0@0)
		each: 	a GLMBrickWrapper
		result: 	nil
	Receiver's instance variables: 
a GLMHorizontalLinearLayout

[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(a GLMBrickWrapper)
	Arguments and temporary variables: 
		thisValue: 	(0@0)
		binaryBlock: 	[ :origin :each | 
| result |
result := origin
	+
		((self isFloat...etc...
		nextValue: 	(0@0)
		each: 	a GLMBrickWrapper
	Receiver's instance variables: 
		array: 	an Array(a GLMBrickWrapper)
		firstIndex: 	1
		lastIndex: 	1


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMBrickWrapper)
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMBrickWrapper)
		firstIndex: 	1
		lastIndex: 	1


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(a GLMBrickWrapper)
	Arguments and temporary variables: 
		nextValue: 	(0@0)
		thisValue: 	(0@0)
		binaryBlock: 	[ :origin :each | 
| result |
result := origin
	+
		((self isFloat...etc...
	Receiver's instance variables: 
		array: 	an Array(a GLMBrickWrapper)
		firstIndex: 	1
		lastIndex: 	1


GLMHorizontalLinearLayout(GLMLinearLayout)>>layout:in:inject:into:
	Receiver: a GLMHorizontalLinearLayout
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aRectangle: 	(0@0) corner: (2@24)
		anInteger: 	(0@0)
		aBlock: 	[ :origin :each | 
each outerOrigin: origin.
each outerBounds width @ 0...etc...
	Receiver's instance variables: 
a GLMHorizontalLinearLayout

GLMHorizontalLinearLayout>>layout:in:
	Receiver: a GLMHorizontalLinearLayout
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		newBounds: 	(0@0) corner: (2@24)
	Receiver's instance variables: 
a GLMHorizontalLinearLayout

GLMBrick>>invalidateLayout
	Receiver: a GLMBrick(560962816)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMTabLabelBrick(877257728)
		submorphs: 	an OrderedCollection(a GLMLabelBrick(687049984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (522724608) [other:  (brickRenderer -> a GLMBrickRe...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper


GLMBrickWrapper>>invalidateLayout
	Receiver: a GLMBrickWrapper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		brick: 	a GLMBrick(560962816)


GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutSubbricks:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutAround:inContext:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aContextBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

[ :each | self layoutAround: each inContext: aBrick ] in GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutChildrenOf:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		each: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMBrickWrapper)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self layoutAround: each inContext: aBrick ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMBrickWrapper)
		firstIndex: 	1
		lastIndex: 	1


GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutChildrenOf:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

GLMBrickLayoutParentState>>layout:on:
	Receiver: a GLMBrickLayoutParentState
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aTraverser: 	a GLMBrickHeightTraverser
	Receiver's instance variables: 
		percent: 	100


GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutAround:inContext:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aContextBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

[ :each | self layoutAround: each inContext: aBrick ] in GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutChildrenOf:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		each: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMBrickWrapper)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self layoutAround: each inContext: aBrick ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMBrickWrapper)
		firstIndex: 	1
		lastIndex: 	1


GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutChildrenOf:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

GLMBrickLayoutParentState>>layout:on:
	Receiver: a GLMBrickLayoutParentState
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aTraverser: 	a GLMBrickHeightTraverser
	Receiver's instance variables: 
		percent: 	100


GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutAround:inContext:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aContextBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

[ :each | self layoutAround: each inContext: aBrick ] in GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutChildrenOf:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		each: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMBrickWrapper)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self layoutAround: each inContext: aBrick ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMBrickWrapper)
		firstIndex: 	1
		lastIndex: 	1


GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutChildrenOf:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickHeightTraverser

GLMBrickLayoutMyselfState>>layout:on:
	Receiver: a GLMBrickLayoutMyselfState
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aTraverser: 	a GLMBrickHeightTraverser
	Receiver's instance variables: 
		dimension: 	24


GLMBrickHeightTraverser(GLMBrickLayoutTraverser)>>layoutAround:inContext:
	Receiver: a GLMBrickHeightTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aContextBrick: 	nil
	Receiver's instance variables: 
a GLMBrickHeightTraverser

GLMBrickLayouter>>layout:
	Receiver: a GLMBrickLayouter
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickLayouter

GLMBrickLayouter>>layoutIn:
	Receiver: a GLMBrickLayouter
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickLayouter

GLMBrick>>doLayout
	Receiver: a GLMBrick(372799744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@16.0) corner: (50.0@56.0)
		owner: 	a GLMTabSelectorBrick(1401856)
		submorphs: 	an OrderedCollection(a GLMTabLabelBrick(877257728))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1013490944) [other:  (brickRenderer -> a GLMBrickR...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper


GLMBrick>>doLayoutForce
	Receiver: a GLMBrick(372799744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@16.0) corner: (50.0@56.0)
		owner: 	a GLMTabSelectorBrick(1401856)
		submorphs: 	an OrderedCollection(a GLMTabLabelBrick(877257728))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1013490944) [other:  (brickRenderer -> a GLMBrickR...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper


GLMBrick>>addAllBricks:
	Receiver: a GLMBrick(372799744)
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(a GLMTabLabelBrick(877257728))
		bricks: 	an OrderedCollection(a GLMTabLabelBrick(877257728))
	Receiver's instance variables: 
		bounds: 	(0.0@16.0) corner: (50.0@56.0)
		owner: 	a GLMTabSelectorBrick(1401856)
		submorphs: 	an OrderedCollection(a GLMTabLabelBrick(877257728))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1013490944) [other:  (brickRenderer -> a GLMBrickR...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper


GLMTabSelectorBrick(GLMFoundationBrick)>>addAllBricks:
	Receiver: a GLMTabSelectorBrick(1401856)
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(a GLMTabLabelBrick(877257728))
	Receiver's instance variables: 
		bounds: 	(0.0@16.0) corner: (2.0@40.0)
		owner: 	a PanelMorph(558644480)
		submorphs: 	an Array(a GLMBrick(372799744))
		fullBounds: 	(0.0@16.0) corner: (2.0@40.0)
		color: 	Color transparent
		extension: 	a MorphExtension (342493184) [other:  (minHeight -> 24) (announcer -...etc...
		brickRoot: 	a GLMBrick(372799744)
		vResizing: 	#spaceFill
		hResizing: 	#spaceFill
		selectedIndex: 	0
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		tabs: 	an OrderedCollection(a GLMTabLabelBrick(877257728))


GLMTabSelectorBrick>>updateTabs
	Receiver: a GLMTabSelectorBrick(1401856)
	Arguments and temporary variables: 
		selectedTab: 	nil
	Receiver's instance variables: 
		bounds: 	(0.0@16.0) corner: (2.0@40.0)
		owner: 	a PanelMorph(558644480)
		submorphs: 	an Array(a GLMBrick(372799744))
		fullBounds: 	(0.0@16.0) corner: (2.0@40.0)
		color: 	Color transparent
		extension: 	a MorphExtension (342493184) [other:  (minHeight -> 24) (announcer -...etc...
		brickRoot: 	a GLMBrick(372799744)
		vResizing: 	#spaceFill
		hResizing: 	#spaceFill
		selectedIndex: 	0
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		tabs: 	an OrderedCollection(a GLMTabLabelBrick(877257728))


GLMTabSelectorBrick>>addTab:
	Receiver: a GLMTabSelectorBrick(1401856)
	Arguments and temporary variables: 
		aStringOrMorph: 	a GLMBrick(560962816)
	Receiver's instance variables: 
		bounds: 	(0.0@16.0) corner: (2.0@40.0)
		owner: 	a PanelMorph(558644480)
		submorphs: 	an Array(a GLMBrick(372799744))
		fullBounds: 	(0.0@16.0) corner: (2.0@40.0)
		color: 	Color transparent
		extension: 	a MorphExtension (342493184) [other:  (minHeight -> 24) (announcer -...etc...
		brickRoot: 	a GLMBrick(372799744)
		vResizing: 	#spaceFill
		hResizing: 	#spaceFill
		selectedIndex: 	0
		font: 	a LogicalFont
 fTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.879184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.889184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.898184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:01.946184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RunArray class>>runs:values:
	Receiver: RunArray
	Arguments and temporary variables: 
		newRuns: 	#()
		newValues: 	#()
		instance: 	nil
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#,->RunArray>>#, #=->RunArray>>#= #add:withOccur...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RunArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Core-Utilities'


RunArray class>>new
	Receiver: RunArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#,->RunArray>>#, #=->RunArray>>#= #add:withOccur...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RunArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Core-Utilities'


RunArray class>>new:withAll:
	Receiver: RunArray
	Arguments and temporary variables: 
		size: 	0
		value: 	#()
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#,->RunArray>>#, #=->RunArray>>#= #add:withOccur...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RunArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Core-Utilities'


Text class>>string:attributes:
	Receiver: Text
	Arguments and temporary variables: 
		aString: 	''
		atts: 	#()
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#=->Text>>#= #addAttribute:->Text>>#addAttribute...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Text
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(TextConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Core-Base'


Text class>>fromString:
	Receiver: Text
	Arguments and temporary variables: 
		aString: 	''
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#=->Text>>#= #addAttribute:->Text>>#addAttribute...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Text
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(TextConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Core-Base'


ByteString(String)>>asText
	Receiver: ''
	Arguments and temporary variables: 

	Receiver's instance variables: 
''

RubTextComposer>>unplug
	Receiver: a RubTextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 0)
		maxRightX: 	6
		currentY: 	6
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	0
		deltaCharIndex: 	0
		theText: 	a Text for ''
		theContainer: 	(6@6) corner: (1073741817@1073741823)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	0
		actualHeight: 	nil
		actualWidth: 	1
		numberOfPhysicalLines: 	1
		prevTextStyle: 	a TextStyle Source Sans Pro
		prevText: 	a Text for ''
		prevContainer: 	(6@6) corner: (1073741817@1073741823)
		emphasisHere: 	#()
		cursorWidth: 	2


RubParagraph>>releaseComposer
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		c: 	a RubTextComposer
	Receiver's instance variables: 
		text: 	a Text for ''
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (40@31)
		drawingEnabled: 	true
		textArea: 	a RubEditingArea(349222912)


RubParagraph>>unplug
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for ''
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (40@31)
		drawingEnabled: 	true
		textArea: 	a RubEditingArea(349222912)


RubEditingArea(RubAbstractTextArea)>>releaseParagraph
	Receiver: a RubEditingArea(349222912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (40@31)
		owner: 	a TransformWithLayoutMorph(847387904)
		submorphs: 	an Array(a RubCursor(1013917696) a RubPrimarySelectionMorph(63304524...etc...
		fullBounds: 	(0@0) corner: (40@31)
		color: 	Color transparent
		extension: 	a MorphExtension (960717824) [other:  (announcer -> an Announcer)]
		model: 	nil
		paragraph: 	a RubParagraph
		editor: 	a RubTextEditor
		scrollPane: 	nil
		editingState: 	nil
		textStyle: 	a TextStyle Source Sans Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	nil
		menuAllowed: 	nil
		editingMode: 	nil
		cursor: 	a RubCursor(1013917696)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	false
		editorClass: 	RubTextEditor


RubEditingArea(RubAbstractTextArea)>>unplug
	Receiver: a RubEditingArea(349222912)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (40@31)
		owner: 	a TransformWithLayoutMorph(847387904)
		submorphs: 	an Array(a RubCursor(1013917696) a RubPrimarySelectionMorph(63304524...etc...
		fullBounds: 	(0@0) corner: (40@31)
		color: 	Color transparent
		extension: 	a MorphExtension (960717824) [other:  (announcer -> an Announcer)]
		model: 	nil
		paragraph: 	a RubParagraph
		editor: 	a RubTextEditor
		scrollPane: 	nil
		editingState: 	nil
		textStyle: 	a TextStyle Source Sans Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	nil
		menuAllowed: 	nil
		editingMode: 	nil
		cursor: 	a RubCursor(1013917696)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	false
		editorClass: 	RubTextEditor


RubTextScrollPane>>unregisterTextArea
	Receiver: a RubTextScrollPane(594774272)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a TransformWithLayoutMorph(847387904))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (147772416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(847387904)
		hScrollbar: 	a RubScrollBar(47232256)
		vScrollbar: 	a RubScrollBar(340545536)
		drawFocusBorder: 	true


RubTextScrollPane>>scrollTarget:
	Receiver: a RubTextScrollPane(594774272)
	Arguments and temporary variables: 
		aTextArea: 	a RubEditingArea(505977088)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a TransformWithLayoutMorph(847387904))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (147772416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(847387904)
		hScrollbar: 	a RubScrollBar(47232256)
		vScrollbar: 	a RubScrollBar(340545536)
		drawFocusBorder: 	true


RubScrolledTextMorph>>newScrollPane
	Receiver: a RubScrolledTextMorph(998640640)
	Arguments and temporary variables: 
		sp: 	a RubTextScrollPane(594774272)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (50@40)
		color: 	Color white
		extension: 	a MorphExtension (495860992)
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	nil
		rulers: 	a SortedCollection()
		enabled: 	true
		highlights: 	nil


RubScrolledTextMorph>>initialize
	Receiver: a RubScrolledTextMorph(998640640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (50@40)
		color: 	Color white
		extension: 	a MorphExtension (495860992)
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	nil
		rulers: 	a SortedCollection()
		enabled: 	true
		highlights: 	nil


RubScrolledTextMorph class(Behavior)>>new
	Receiver: RubScrolledTextMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Morph
		methodDict: 	a MethodDictionary(size 207)
		format: 	65554
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{RubPluggableTextMorph. RubTextFieldMorph}
		name: 	#RubScrolledTextMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Widgets'
		announcer: 	nil


GLMMorphicPharoMethodRenderer>>morph
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	nil
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=628623360 title='Source' pane=a ...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	nil
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=628623360 title='Source' pane=a ...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicPharoCodeRenderer
		methodDict: 	a MethodDictionary(#methodBindingsStrategy->GLMMorphicPharoMethodRe...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPharoMethodRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'


GLMMorphicRenderer>>renderPharoMethodPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aSmalltalkMethodPresentation: 	a GLMPharoMethodPresentation(id=628623360 title='...etc...
	Receiver's instance variables: 
		window: 	nil


GLMPharoMethodPresentation>>renderGlamorouslyOn:
	Receiver: a GLMPharoMethodPresentation(id=628623360 title='Source' pane=a GLMPane(728080640 code))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(728080640 code)
		title: 	'Source'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMPharoMethodPresentation(id=492717056 title='Source' pane=...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	[ :code | 
code
	selectionInterval: (self session selected...etc...
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	[ aContext sourceCode ]
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	[ aContext receiver ]
		doItContext: 	[ aContext ]
		textBlock: 	nil
		selectedTextBlock: 	nil
		withLineNumbers: 	nil
		withAnnotation: 	nil
		wrapped: 	nil
		tabWidth: 	nil
		withColumns: 	nil
		textSegments: 	nil
		primarySelectionInterval: 	nil
		withGhostText: 	nil
		highlightSmalltalkContext: 	[ aContext methodClass ]
		variableBindingsBlock: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPharoMethodPresentation(id=628623360 title='Source' pane=a GL...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPharoMethodPresentation(id=628623360 title='Source' pane=a GLMPa...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(246726656)


[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	1
		aPresentation: 	a GLMCompositePresentation(id=1018800384 title=nil pane=a GLMPan...etc...
		presentations: 	an OrderedCollection(a GLMPharoMethodPresentation(id=628623360 t...etc...
		each: 	a GLMPharoMethodPresentation(id=628623360 title='Source' pane=a GLMPane(7...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(246726656)


LazyTabPage>>actualPageMorph
	Receiver: a LazyTabPage(20413440)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (566119680)
		borderWidth: 	1
		borderColor: 	Color black
		actualPageMorph: 	nil
		labelMorph: 	'Source'
		lazyPageMorphCreation: 	[ self renderObject: each ]
		toolbar: 	a ToolDockingBarMorph(350386176)


LazyTabGroupMorph>>pageAt:
	Receiver: a LazyTabGroupMorph(246726656)
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(541372672) a PanelMorph(1039250432))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (124835072)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(14757888)
		contentMorph: 	a GLMPanelMorph(541372672)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(20413440))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(2537728)
		headerMorph: 	a PanelMorph(1039250432)
		tabSelectorWidth: 	nil


LazyTabGroupMorph>>updatePageIndex:
	Receiver: a LazyTabGroupMorph(246726656)
	Arguments and temporary variables: 
		index: 	1
		p: 	nil
		oldPage: 	a GLMTabLabelBrick(778890240)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(541372672) a PanelMorph(1039250432))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (124835072)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(14757888)
		contentMorph: 	a GLMPanelMorph(541372672)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(20413440))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(2537728)
		headerMorph: 	a PanelMorph(1039250432)
		tabSelectorWidth: 	nil


LazyTabGroupMorph(TabGroupMorph)>>update:
	Receiver: a LazyTabGroupMorph(246726656)
	Arguments and temporary variables: 
		aSymbol: 	#selectedIndex
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(541372672) a PanelMorph(1039250432))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (124835072)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(14757888)
		contentMorph: 	a GLMPanelMorph(541372672)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(20413440))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(2537728)
		headerMorph: 	a PanelMorph(1039250432)
		tabSelectorWidth: 	nil


LazyTabGroupMorph(Object)>>update:with:
	Receiver: a LazyTabGroupMorph(246726656)
	Arguments and temporary variables: 
		anAspect: 	#selectedIndex
		anObject: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(541372672) a PanelMorph(1039250432))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (124835072)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(14757888)
		contentMorph: 	a GLMPanelMorph(541372672)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(20413440))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(2537728)
		headerMorph: 	a PanelMorph(1039250432)
		tabSelectorWidth: 	nil


MorphChangedWithArguments>>deliverTo:
	Receiver: a MorphChangedWithArguments
	Arguments and temporary variables: 
		aHandler: 	a LazyTabGroupMorph(246726656)
	Receiver's instance variables: 
		morph: 	a GLMTabSelectorBrick(14757888)
		selector: 	#selectedIndex
		arguments: 	0


LazyTabGroupMorph(Morph)>>handleUpdate:
	Receiver: a LazyTabGroupMorph(246726656)
	Arguments and temporary variables: 
		aMorphChangedAnnouncement: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(541372672) a PanelMorph(1039250432))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (124835072)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(14757888)
		contentMorph: 	a GLMPanelMorph(541372672)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(20413440))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:02.057184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:02.660184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallInteger(Magnitude)>>max:
	Receiver: 0
	Arguments and temporary variables: 
		aMagnitude: 	50
	Receiver's instance variables: 
0

Rectangle>>setPoint:point:
	Receiver: (0@0) corner: nil
	Arguments and temporary variables: 
		pt1: 	(0@0)
		pt2: 	(50@17)
	Receiver's instance variables: 
		origin: 	(0@0)
		corner: 	nil


Rectangle class>>origin:extent:
	Receiver: Rectangle
	Arguments and temporary variables: 
		originPoint: 	(0@0)
		extentPoint: 	(50@17)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 124)
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{CharacterBlock. GRectangle. RTRectangleTreeMap}
		name: 	#Rectangle
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-BasicObjects'


Point>>extent:
	Receiver: (0@0)
	Arguments and temporary variables: 
		aPoint: 	(50@17)
	Receiver's instance variables: 
		x: 	0
		y: 	0


PanelMorph(Morph)>>adjustLayoutBounds
	Receiver: a PanelMorph(387847168)
	Arguments and temporary variables: 
		hFit: 	#spaceFill
		vFit: 	#shrinkWrap
		box: 	(0@0) corner: (50@40)
		myExtent: 	(50@17)
		extent: 	(3@17)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a FTCellMorph(570660096)
		submorphs: 	an Array(a StringMorph(425488384)'')
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63797504) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(387847168)
	Arguments and temporary variables: 
		layoutBounds: 	(0@0) corner: (50@40)
		box: 	nil
		priorBounds: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a FTCellMorph(570660096)
		submorphs: 	an Array(a StringMorph(425488384)'')
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63797504) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(387847168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a FTCellMorph(570660096)
		submorphs: 	an Array(a StringMorph(425488384)'')
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63797504) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	PanelMorph(Morph)>>computeFullBounds
		startpc: 	69
		numArgs: 	0


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(387847168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a FTCellMorph(570660096)
		submorphs: 	an Array(a StringMorph(425488384)'')
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63797504) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(387847168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a FTCellMorph(570660096)
		submorphs: 	an Array(a StringMorph(425488384)'')
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (63797504) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in FTCellMorph(Morph)>>submorphBounds
	Receiver: a FTCellMorph(570660096)
	Arguments and temporary variables: 
		m: 	a PanelMorph(387847168)
		subBox: 	nil
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(387847168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (653536256)
		topSeparator: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PanelMorph(387847168))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
	...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PanelMorph(387847168))

FTCellMorph(Morph)>>submorphBounds
	Receiver: a FTCellMorph(570660096)
	Arguments and temporary variables: 
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(387847168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (653536256)
		topSeparator: 	false


FTCellMorph(Morph)>>privateFullBounds
	Receiver: a FTCellMorph(570660096)
	Arguments and temporary variables: 
		box: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(387847168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (653536256)
		topSeparator: 	false


FTCellMorph(Morph)>>changed
	Receiver: a FTCellMorph(570660096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(387847168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (653536256)
		topSeparator: 	false


FTCellMorph(Morph)>>extent:
	Receiver: a FTCellMorph(570660096)
	Arguments and temporary variables: 
		aPoint: 	(504@40)
		newExtent: 	(504@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(387847168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (653536256)
		topSeparator: 	false


FTCellMorph(Morph)>>width:
	Receiver: a FTCellMorph(570660096)
	Arguments and temporary variables: 
		aNumber: 	504.0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(387847168))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (653536256)
		topSeparator: 	false


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(679812352)
	Arguments and temporary variables: 
		visibleRows: 	6
		numberOfColumns: 	3
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		columnWidths: 	#(300 200 504.0)
		startIndex: 	1
		rowIndex: 	1
		row: 	a FTTableRowMorph(996419584)
		columnIndex: 	3
		cell: 	a FTCellMorph(570660096)
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1513.0@281.0)
		owner: 	a FTTableMorph(747536640)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(747536640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(906401792)
		submorphs: 	an Array(a FTTableContainerMorph(679812352) a ScrollBar(720736512))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (540267520) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(679812352)
		verticalScrollBar: 	a ScrollBar(720736512)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph>>extent:
	Receiver: a FTTableMorph(747536640)
	Arguments and temporary variables: 
		aPoint: 	(1004.0@116.0)
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(906401792)
		submorphs: 	an Array(a FTTableContainerMorph(679812352) a ScrollBar(720736512))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (540267520) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(679812352)
		verticalScrollBar: 	a ScrollBar(720736512)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(747536640)
	Arguments and temporary variables: 
		newBounds: 	(522.0@165.0) corner: (1526.0@281.0)
		oldExtent: 	(310.0@21.0)
		newExtent: 	(1004.0@116.0)
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(906401792)
		submorphs: 	an Array(a FTTableContainerMorph(679812352) a ScrollBar(720736512))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (540267520) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(679812352)
		verticalScrollBar: 	a ScrollBar(720736512)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph(Morph)>>layoutInBounds:
	Receiver: a FTTableMorph(747536640)
	Arguments and temporary variables: 
		cellBounds: 	(522@165) corner: (1526@281)
		box: 	(522.0@165.0) corner: (1526.0@281.0)
		aSymbol: 	#center
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(906401792)
		submorphs: 	an Array(a FTTableContainerMorph(679812352) a ScrollBar(720736512))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (540267520) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(679812352)
		verticalScrollBar: 	a ScrollBar(720736512)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph(Morph)>>layoutProportionallyIn:
	Receiver: a FTTableMorph(747536640)
	Arguments and temporary variables: 
		newBounds: 	(522.0@165.0) corner: (1526.0@281.0)
		box: 	(522@165) corner: (1526@281)
		frame: 	a LayoutFrame ( (0@0) + (0@0)px corner: (1@1) + (0@0)px ) 
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(906401792)
		submorphs: 	an Array(a FTTableContainerMorph(679812352) a ScrollBar(720736512))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (540267520) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(679812352)
		verticalScrollBar: 	a ScrollBar(720736512)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a GLMPanelMorph(906401792)
		newBounds: 	(522.0@165.0) corner: (1526.0@281.0)
		m: 	a FTTableMorph(747536640)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a FTTableMorph(747536640))
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
		index: 	1
	Receiver's instance variables: 
an Array(a FTTableMorph(747536640))

GLMPanelMorph(Morph)>>submorphsDo:
	Receiver: a GLMPanelMorph(906401792)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(417044736)
		submorphs: 	an Array(a FTTableMorph(747536640))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (961219584) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a GLMPanelMorph(906401792)
		newBounds: 	(522.0@165.0) corner: (1526.0@281.0)
	Receiver's instance variables: 
a ProportionalLayout

GLMPanelMorph(Morph)>>doLayoutIn:
	Receiver: a GLMPanelMorph(906401792)
	Arguments and temporary variables: 
		layoutBounds: 	(522.0@165.0) corner: (1526.0@281.0)
		box: 	nil
		priorBounds: 	(522.0@165.0) corner: (1526.0@281.0)
		layout: 	a ProportionalLayout
	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(417044736)
		submorphs: 	an Array(a FTTableMorph(747536640))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (961219584) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


[ self doLayoutIn: self layoutBounds ] in GLMPanelMorph(Morph)>>computeFullBounds
	Receiver: a GLMPanelMorph(906401792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(417044736)
		submorphs: 	an Array(a FTTableMorph(747536640))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (961219584) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	GLMPanelMorph(Morph)>>computeFullBounds
		startpc: 	69
		numArgs: 	0


GLMPanelMorph(Morph)>>computeFullBounds
	Receiver: a GLMPanelMorph(906401792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(417044736)
		submorphs: 	an Array(a FTTableMorph(747536640))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (961219584) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


GLMPanelMorph(Morph)>>fullBounds
	Receiver: a GLMPanelMorph(906401792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@165.0) corner: (1526.0@281.0)
		owner: 	a GLMPanelMorph(417044736)
		submorphs: 	an Array(a FTTableMorph(747536640))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (961219584) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in GLMPanelMorph(Morph)>>submorphBounds
	Receiver: a GLMPanelMorph(417044736)
	Arguments and temporary variables: 
		m: 	a GLMPanelMorph(906401792)
		subBox: 	nil
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(517.0@160.0) corner: (1531.0@286.0)
		owner: 	a LazyTabGroupMorph(772881664)
		submorphs: 	an Array(a GLMPanelMorph(906401792))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (770508800) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


Array(SequenceableCollection)>>do:
	Receiver: an Array(a GLMPanelMorph(906401792))
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:02.899184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054182855184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054182855184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:03.103184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054183075184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054183075184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:03.267184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 28 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 89 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 27 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 26 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054183299184


Delay>>wait
	Receiver: a Delay(100 msecs; 24 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054183299184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:03.433184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Array(SequenceableCollection)>>do:
	Receiver: an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0) a TextClassLink a TextF...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :att | att emphasizeScanner: self ]
	Receiver's instance variables: 
an Array(a TextColor code: (Color r: 0.0 g: 0.0 b: 0.5 alpha: 1.0) a TextClassLink a TextF...etc...

RubCompositionScanner(RubCharacterScanner)>>setFont
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		priorFont: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSi...etc...
	Receiver's instance variables: 
		destX: 	29.400009155273438
		lastIndex: 	366
		destY: 	652
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	116
		font: 	nil
		line: 	a RubTextLine 363 to: 0
		runStopIndex: 	374
		spaceCount: 	1
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0.0
		spaceX: 	21.600006103515625
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	365
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	true


RubCompositionScanner>>setFont
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		destX: 	29.400009155273438
		lastIndex: 	366
		destY: 	652
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	116
		font: 	nil
		line: 	a RubTextLine 363 to: 0
		runStopIndex: 	374
		spaceCount: 	1
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0.0
		spaceX: 	21.600006103515625
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	365
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	true


RubCompositionScanner>>setStopConditions
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		destX: 	29.400009155273438
		lastIndex: 	366
		destY: 	652
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	116
		font: 	nil
		line: 	a RubTextLine 363 to: 0
		runStopIndex: 	374
		spaceCount: 	1
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0.0
		spaceX: 	21.600006103515625
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	365
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	true


RubCompositionScanner>>endOfRun
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		runLength: 	9
	Receiver's instance variables: 
		destX: 	29.400009155273438
		lastIndex: 	366
		destY: 	652
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	116
		font: 	nil
		line: 	a RubTextLine 363 to: 0
		runStopIndex: 	374
		spaceCount: 	1
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0.0
		spaceX: 	21.600006103515625
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	365
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	true


RubCompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		startIndex: 	363
		lineRectangle: 	(6@652) corner: (116@652)
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	2
		stopCondition: 	#endOfRun
	Receiver's instance variables: 
		destX: 	29.400009155273438
		lastIndex: 	366
		destY: 	652
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	116
		font: 	nil
		line: 	a RubTextLine 363 to: 0
		runStopIndex: 	374
		spaceCount: 	1
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0.0
		spaceX: 	21.600006103515625
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	365
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	true


RubTextComposer>>composeEachRectangleIn:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@652) corner: (116@652)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 22 a Ru...etc...
		maxRightX: 	115.80003356933594
		currentY: 	652
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	363
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (116@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	26
		numberOfPhysicalLines: 	11
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (116@1073741823)
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.5 b: 0.5 alpha: 1.0...etc...
		cursorWidth: 	2


RubTextComposer>>composeAllRectangles:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@652) corner: (116@652)}
		charIndexBeforeLine: 	363
		numberOfLinesBefore: 	34
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 22 a Ru...etc...
		maxRightX: 	115.80003356933594
		currentY: 	652
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	363
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (116@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	26
		numberOfPhysicalLines: 	11
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (116@1073741823)
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.5 b: 0.5 alpha: 1.0...etc...
		cursorWidth: 	2


RubTextComposer>>composeOneLine
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@652) corner: (116@652)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 22 a Ru...etc...
		maxRightX: 	115.80003356933594
		currentY: 	652
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	363
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (116@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	26
		numberOfPhysicalLines: 	11
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (116@1073741823)
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.5 b: 0.5 alpha: 1.0...etc...
		cursorWidth: 	2


RubTextComposer>>composeAllLines
	Receiver: a RubTextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 22 a Ru...etc...
		maxRightX: 	115.80003356933594
		currentY: 	652
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	363
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (116@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	26
		numberOfPhysicalLines: 	11
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (116@1073741823)
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.5 b: 0.5 alpha: 1.0...etc...
		cursorWidth: 	2


RubTextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	389
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 1...etc...
		argPriorLines: 	#()
		argStartY: 	6
		argTextStyle: 	a TextStyle Source Code Pro
		argText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		argContainer: 	(6@6) corner: (116@1073741823)
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 22 a Ru...etc...
		maxRightX: 	115.80003356933594
		currentY: 	652
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	363
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (116@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	26
		numberOfPhysicalLines: 	11
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (116@1073741823)
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.5 b: 0.5 alpha: 1.0...etc...
		cursorWidth: 	2


RubTextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		start: 	1
		stop: 	389
		delta: 	0
		lineColl: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 22 a...etc...
		priorLines: 	#()
		startingY: 	6
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 22 a Ru...etc...
		maxRightX: 	115.80003356933594
		currentY: 	652
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	363
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (116@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	26
		numberOfPhysicalLines: 	11
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (116@1073741823)
		emphasisHere: 	an Array(a TextColor code: (Color r: 0.0 g: 0.5 b: 0.5 alpha: 1.0...etc...
		cursorWidth: 	2


[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedCollection new
	priorLines: Array new
	atY: self compositionRectangle top.
textArea
	ifNotNil: [ textArea paragraphWasComposedFrom: 1 to: self text size ] ] in RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (122@2539)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(509159424)


BlockClosure>>ensure:
	Receiver: [ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedC...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubParagraph>>compose
		startpc: 	110
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta...etc...
	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (122@2539)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(509159424)


RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (122@2539)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(509159424)


RubParagraph>>extentFromClientBottomRight:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aPoint: 	(122@2539)
		w: 	122
		newExtent: 	(122@2539)
	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (122@2539)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(509159424)


[ self wrapped
	ifTrue: [ (bounds notNil and: [ bounds width = aPoint x ])
			ifTrue: [ ^ self ].
		super
			extent:
				((self paragraph withoutDecorator extentFromClientBottomRight: aPoint)
					max: self minimumExtent).
		self recomputeSelection ] ] in RubEditingArea(RubAbstractTextArea)>>extent:
	Receiver: a RubEditingArea(509159424)
	Arguments and temporary variables: 
		aPoint: 	(122@2539)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@2539)
		owner: 	a TransformWithLayoutMorph(794919168)
		submorphs: 	an Array(a RubCursor(713909248) a RubPrimarySelectionMorph(682665216...etc...
		fullBounds: 	(0@0) corner: (38@2539)
		color: 	Color transparent
		extension: 	a MorphExtension (626122752) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(576293120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(713909248)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleBoundsChange:
	Receiver: a RubEditingArea(509159424)
	Arguments and temporary variables: 
		aBlock: 	[ self wrapped
	ifTrue: [ (bounds notNil and: [ bounds width = aPoint x...etc...
		oldBounds: 	(0@0) corner: (38@2539)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@2539)
		owner: 	a TransformWithLayoutMorph(794919168)
		submorphs: 	an Array(a RubCursor(713909248) a RubPrimarySelectionMorph(682665216...etc...
		fullBounds: 	(0@0) corner: (38@2539)
		color: 	Color transparent
		extension: 	a MorphExtension (626122752) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(576293120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(713909248)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>extent:
	Receiver: a RubEditingArea(509159424)
	Arguments and temporary variables: 
		aPoint: 	(122@2539)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@2539)
		owner: 	a TransformWithLayoutMorph(794919168)
		submorphs: 	an Array(a RubCursor(713909248) a RubPrimarySelectionMorph(682665216...etc...
		fullBounds: 	(0@0) corner: (38@2539)
		color: 	Color transparent
		extension: 	a MorphExtension (626122752) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(576293120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(713909248)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>width:
	Receiver: a RubEditingArea(509159424)
	Arguments and temporary variables: 
		aNumber: 	122.0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (38@2539)
		owner: 	a TransformWithLayoutMorph(794919168)
		submorphs: 	an Array(a RubCursor(713909248) a RubPrimarySelectionMorph(682665216...etc...
		fullBounds: 	(0@0) corner: (38@2539)
		color: 	Color transparent
		extension: 	a MorphExtension (626122752) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(576293120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(713909248)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubTextScrollPane>>fitScrollTargetWidth
	Receiver: a RubTextScrollPane(576293120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(610442240)
		submorphs: 	an Array(a RubScrollBar(100674816) a TransformWithLayoutMorph(794919...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (901486592) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(794919168)
		hScrollbar: 	a RubScrollBar(789090560)
		vScrollbar: 	a RubScrollBar(100674816)
		drawFocusBordTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:03.613184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 13 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 89 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 10 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 9 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054183629184


Delay>>wait
	Receiver: a Delay(100 msecs; 7 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054183629184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:03.844184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Point>>dotProduct:
	Receiver: (32.0@17.0)
	Arguments and temporary variables: 
		aPoint: 	(32.0@17.0)
	Receiver's instance variables: 
		x: 	32.0
		y: 	17.0


StringMorph(Morph)>>bounds:
	Receiver: a StringMorph(1028083712)'Value'
	Arguments and temporary variables: 
		newBounds: 	(784.0@622.0) corner: (816.0@639.0)
		oldExtent: 	(32.0@17.0)
		newExtent: 	(32.0@17.0)
	Receiver's instance variables: 
		bounds: 	(1139.0@622.0) corner: (1171.0@639.0)
		owner: 	a SimpleButtonMorph(350591232)
		submorphs: 	#()
		fullBounds: 	(1139.0@622.0) corner: (1171.0@639.0)
		color: 	Color black
		extension: 	a MorphExtension (768674816) [locked] 
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Value'
		hasFocus: 	false
		backgroundColor: 	Color transparent


[ :m :ext | 
| pos vr box cell |
width := m hResizing == #spaceFill
	ifTrue: [ fillCount := fillCount - 1.
		ext x
			+
				(fillCount > 0
					ifTrue: [ spare ]
					ifFalse: [ extra ]) ]
	ifFalse: [ ext x ].
cell := x @ newBounds top extent: width @ height.
((vr := m vResizing) == #shrinkWrap or: [ m bounds ~= cell ])
	ifTrue: [ ((vr == #shrinkWrap) not and: [ m extent = cell extent ])
			ifTrue: [ m position: cell origin ]
			ifFalse: [ box := m bounds.
				m hResizing == #spaceFill
					ifTrue: [ box := cell origin extent: cell width @ box height ].
				vr == #spaceFill
					ifTrue: [ box := box origin extent: box width @ cell height ].
				vr == #shrinkWrap
					ifTrue: [ box := box origin extent: box width @ ext y ].
				pos := props cellPositioning.
				box := box align: (box perform: pos) with: (cell perform: pos).
				m bounds: box ] ].
x := x + width + inset ] in RowLayout>>layout:in:
	Receiver: a RowLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		cachedMinExtent: 	(32.0@17)
		cachedMinExtents: 	{(32.0@17)}


Array(SequenceableCollection)>>with:do:
	Receiver: an Array(a StringMorph(1028083712)'Value')
	Arguments and temporary variables: 
		otherCollection: 	{(32.0@17)}
		twoArgBlock: 	[ :m :ext | 
| pos vr box cell |
width := m hResizing == #spaceFil...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a StringMorph(1028083712)'Value')

RowLayout>>layout:in:
	Receiver: a RowLayout
	Arguments and temporary variables: 
		fillCount: 	0
		x: 	784.0
		width: 	32.0
		aMorph: 	a SimpleButtonMorph(350591232)
		layoutBounds: 	(784.0@621.0) corner: (1526.0@639.0)
		props: 	a TableLayoutProperties
		spare: 	710.0
		extra: 	0
		height: 	18.0
		inset: 	5
		newBounds: 	(784.0@621.0) corner: (1526.0@639.0)
		minExt: 	(0@0)
	Receiver's instance variables: 
		cachedMinExtent: 	(32.0@17)
		cachedMinExtents: 	{(32.0@17)}


SimpleButtonMorph(Morph)>>doLayoutIn:
	Receiver: a SimpleButtonMorph(350591232)
	Arguments and temporary variables: 
		layoutBounds: 	(784.0@621.0) corner: (1526.0@639.0)
		box: 	nil
		priorBounds: 	(778.0@620.0) corner: (1532.0@640.0)
		layout: 	a RowLayout
	Receiver's instance variables: 
		bounds: 	(778.0@620.0) corner: (1532.0@640.0)
		owner: 	a FTTableRowMorph(174804224)
		submorphs: 	an Array(a StringMorph(1028083712)'Value')
		fullBounds: 	nil
		color: 	(Color r: 0.9410000000000001 g: 0.9410000000000001 b: 0.9410000000000001...etc...
		extension: 	a MorphExtension (180189184)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a GLMFastTableDataSource
		actionSelector: 	#actionColumn:
		arguments: 	an Array(a GLMFastTableColumn)
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1028083712)'Value'


[ self doLayoutIn: self layoutBounds ] in SimpleButtonMorph(Morph)>>computeFullBounds
	Receiver: a SimpleButtonMorph(350591232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(778.0@620.0) corner: (1532.0@640.0)
		owner: 	a FTTableRowMorph(174804224)
		submorphs: 	an Array(a StringMorph(1028083712)'Value')
		fullBounds: 	nil
		color: 	(Color r: 0.9410000000000001 g: 0.9410000000000001 b: 0.9410000000000001...etc...
		extension: 	a MorphExtension (180189184)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a GLMFastTableDataSource
		actionSelector: 	#actionColumn:
		arguments: 	an Array(a GLMFastTableColumn)
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1028083712)'Value'


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	SimpleButtonMorph(Morph)>>computeFullBounds
		startpc: 	69
		numArgs: 	0


SimpleButtonMorph(Morph)>>computeFullBounds
	Receiver: a SimpleButtonMorph(350591232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(778.0@620.0) corner: (1532.0@640.0)
		owner: 	a FTTableRowMorph(174804224)
		submorphs: 	an Array(a StringMorph(1028083712)'Value')
		fullBounds: 	nil
		color: 	(Color r: 0.9410000000000001 g: 0.9410000000000001 b: 0.9410000000000001...etc...
		extension: 	a MorphExtension (180189184)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a GLMFastTableDataSource
		actionSelector: 	#actionColumn:
		arguments: 	an Array(a GLMFastTableColumn)
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1028083712)'Value'


SimpleButtonMorph(Morph)>>fullBounds
	Receiver: a SimpleButtonMorph(350591232)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(778.0@620.0) corner: (1532.0@640.0)
		owner: 	a FTTableRowMorph(174804224)
		submorphs: 	an Array(a StringMorph(1028083712)'Value')
		fullBounds: 	nil
		color: 	(Color r: 0.9410000000000001 g: 0.9410000000000001 b: 0.9410000000000001...etc...
		extension: 	a MorphExtension (180189184)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a GLMFastTableDataSource
		actionSelector: 	#actionColumn:
		arguments: 	an Array(a GLMFastTableColumn)
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1028083712)'Value'


[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in FTTableRowMorph(Morph)>>submorphBounds
	Receiver: a FTTableRowMorph(174804224)
	Arguments and temporary variables: 
		m: 	a SimpleButtonMorph(350591232)
		subBox: 	nil
		box: 	(522@620) corner: (775@640)
	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@640.0)
		owner: 	a FTTableContainerMorph(488747264)
		submorphs: 	an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(62900352...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (677130240)
		selectionColor: 	Color transparent


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(629003520) a SimpleButtonMorph...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
	...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(629003520) a SimpleButtonMorph...etc...

FTTableRowMorph(Morph)>>submorphBounds
	Receiver: a FTTableRowMorph(174804224)
	Arguments and temporary variables: 
		box: 	(522@620) corner: (775@640)
	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@640.0)
		owner: 	a FTTableContainerMorph(488747264)
		submorphs: 	an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(62900352...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (677130240)
		selectionColor: 	Color transparent


FTTableRowMorph(Morph)>>privateFullBounds
	Receiver: a FTTableRowMorph(174804224)
	Arguments and temporary variables: 
		box: 	(522.0@620.0) corner: (1513.0@640.0)
	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@640.0)
		owner: 	a FTTableContainerMorph(488747264)
		submorphs: 	an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(62900352...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (677130240)
		selectionColor: 	Color transparent


FTTableRowMorph(Morph)>>doLayoutIn:
	Receiver: a FTTableRowMorph(174804224)
	Arguments and temporary variables: 
		layoutBounds: 	(522.0@620.0) corner: (1513.0@640.0)
		box: 	nil
		priorBounds: 	(522.0@620.0) corner: (1513.0@640.0)
	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@640.0)
		owner: 	a FTTableContainerMorph(488747264)
		submorphs: 	an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(62900352...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (677130240)
		selectionColor: 	Color transparent


[ self doLayoutIn: self layoutBounds ] in FTTableRowMorph(Morph)>>computeFullBounds
	Receiver: a FTTableRowMorph(174804224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@640.0)
		owner: 	a FTTableContainerMorph(488747264)
		submorphs: 	an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(62900352...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (677130240)
		selectionColor: 	Color transparent


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	FTTableRowMorph(Morph)>>computeFullBounds
		startpc: 	69
		numArgs: 	0


FTTableRowMorph(Morph)>>computeFullBounds
	Receiver: a FTTableRowMorph(174804224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@640.0)
		owner: 	a FTTableContainerMorph(488747264)
		submorphs: 	an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(62900352...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (677130240)
		selectionColor: 	Color transparent


FTTableRowMorph(Morph)>>fullBounds
	Receiver: a FTTableRowMorph(174804224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@640.0)
		owner: 	a FTTableContainerMorph(488747264)
		submorphs: 	an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(62900352...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (677130240)
		selectionColor: 	Color transparent


FTTableRowMorph(Morph)>>fullDrawOn:
	Receiver: a FTTableRowMorph(174804224)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@640.0)
		owner: 	a FTTableContainerMorph(488747264)
		submorphs: 	an Array(a SimpleButtonMorph(253539328) a SimpleButtonMorph(62900352...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (677130240)
		selectionColor: 	Color transparent


FormCanvas(Canvas)>>fullDraw:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		anObject: 	a FTTableRowMorph(174804224)
	Receiver's instance variables: 
		origin: 	(0.0@0.0)
		clipRect: 	(522.0@620.0) corner: (1513.0@732.0)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>fullDrawMorph:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		aMorph: 	a FTTableRowMorph(174804224)
	Receiver's instance variables: 
		origin: 	(0.0@0.0)
		clipRect: 	(522.0@620.0) corner: (1513.0@732.0)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


[ :m | canvas fullDrawMorph: m ] in [ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in FTTableContainerMorph(Morph)>>drawSubmorphsOn:
	Receiver: a FTTableContainerMorph(488747264)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		drawBlock: 	[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ]
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		m: 	a FTTableRowMorph(174804224)
	Receiver's instance variables: 
		bounds: 	(522.0@620.0) corner: (1513.0@732.0)
		owner: 	a FTTableMorph(303874304)
		submorphs: 	an Array(a FTColumnResizerMorph(502539264) a FTColumnResizerMorph(12...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	false
		headerRow: 	a FTTableRowMorph(174804224)
		exposedRows: 	a SmallDictionaryTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:13.976184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LargePositiveInteger(LargeInteger)>>*
	Receiver: THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.169184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.179184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.188184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.197184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.206184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.217184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.226184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.234184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.243184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.252184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.261184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.270184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.279184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.407184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

FreeTypeFont>>widthOfString:from:to:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		aString: 	''
		startIndex: 	1
		stopIndex: 	0
		char: 	nil
		nextChar: 	nil
		resultX: 	nil
		glyph: 	nil
		a: 	nil
		subPixelPosition: 	nil
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($#->a Dictionary($a->#(6.46099853515625 ...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


FreeTypeFont(AbstractFont)>>widthOfString:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		aString: 	''
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r039E4610)<0x39E4610>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($#->a Dictionary($a->#(6.46099853515625 ...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


LogicalFont>>widthOfString:
	Receiver: a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 10
 realFont: Free...etc...
	Arguments and temporary variables: 
		aString: 	''
	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	nil
		italicDerivative: 	nil
		boldItalicDerivative: 	nil


GLMStringBrick>>sizeOf:
	Receiver: a GLMStringBrick(726010112)
	Arguments and temporary variables: 
		aString: 	''
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (579540992) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		familyName: 	'Source Sans Pro'
		fontSize: 	10
		textSize: 	nil
		text: 	''
		textPosition: 	#leftCenter
		highlightedString: 	nil


GLMStringBrick>>textSize
	Receiver: a GLMStringBrick(726010112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (579540992) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		familyName: 	'Source Sans Pro'
		fontSize: 	10
		textSize: 	nil
		text: 	''
		textPosition: 	#leftCenter
		highlightedString: 	nil


GLMStringBrick>>approximateWidth
	Receiver: a GLMStringBrick(726010112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (579540992) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		familyName: 	'Source Sans Pro'
		fontSize: 	10
		textSize: 	nil
		text: 	''
		textPosition: 	#leftCenter
		highlightedString: 	nil


ByteSymbol(Symbol)>>cull:
	Receiver: #approximateWidth
	Arguments and temporary variables: 
		anObject: 	a GLMStringBrick(726010112)
	Receiver's instance variables: 
#approximateWidth

ByteSymbol(Symbol)>>brickValue:
	Receiver: #approximateWidth
	Arguments and temporary variables: 
		aBrick: 	a GLMStringBrick(726010112)
	Receiver's instance variables: 
#approximateWidth

GLMStringBrick(GLMBrick)>>customWidth
	Receiver: a GLMStringBrick(726010112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (579540992) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		familyName: 	'Source Sans Pro'
		fontSize: 	10
		textSize: 	nil
		text: 	''
		textPosition: 	#leftCenter
		highlightedString: 	nil


[ self bounds: (self brickBounds withWidth: self customWidth) ] in GLMStringBrick(GLMBrick)>>updateWidth
	Receiver: a GLMStringBrick(726010112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (579540992) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		familyName: 	'Source Sans Pro'
		fontSize: 	10
		textSize: 	nil
		text: 	''
		textPosition: 	#leftCenter
		highlightedString: 	nil


BlockClosure>>on:do:
	Receiver: [ self bounds: (self brickBounds withWidth: self customWidth) ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ "just skip and do nothing" ]
	Receiver's instance variables: 
		outerContext: 	GLMStringBrick(GLMBrick)>>updateWidth
		startpc: 	107
		numArgs: 	0


GLMStringBrick(GLMBrick)>>updateWidth
	Receiver: a GLMStringBrick(726010112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (579540992) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		familyName: 	'Source Sans Pro'
		fontSize: 	10
		textSize: 	nil
		text: 	''
		textPosition: 	#leftCenter
		highlightedString: 	nil


GLMStringBrick(GLMBrick)>>width:
	Receiver: a GLMStringBrick(726010112)
	Arguments and temporary variables: 
		anObject: 	#approximateWidth
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (579540992) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		familyName: 	'Source Sans Pro'
		fontSize: 	10
		textSize: 	nil
		text: 	''
		textPosition: 	#leftCenter
		highlightedString: 	nil


GLMStringBrick>>hShrinkWrap
	Receiver: a GLMStringBrick(726010112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (579540992) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		familyName: 	'Source Sans Pro'
		fontSize: 	10
		textSize: 	nil
		text: 	''
		textPosition: 	#leftCenter
		highlightedString: 	nil


GLMLabelBrick>>hShrinkWrap
	Receiver: a GLMLabelBrick(915100928)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (119434240) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	nil
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		dotsBrick: 	a GLMStringBrick(726010112)
		stringBrick: 	a GLMStringBrick(508878080)


GLMLabelBrick>>initialize
	Receiver: a GLMLabelBrick(915100928)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (119434240) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	nil
		brickApi: 	nil
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	false
		isDoubleClickEnabled: 	nil
		dotsBrick: 	a GLMStringBrick(726010112)
		stringBrick: 	a GLMStringBrick(508878080)


GLMLabelBrick class(Behavior)>>new
	Receiver: GLMLabelBrick
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	GLMInteractableBrick
		methodDict: 	a MethodDictionary(#approximateHeight->GLMLabelBrick>>#approximateH...etc...
		format: 	65560
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMLiveLabelBrick}
		name: 	#GLMLabelBrick
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Brick-Widgets-Basic'
		announcer: 	nil
		users: 	nil


LazyTabGroupMorph>>buildLabelFrom:withAction:
	Receiver: a LazyTabGroupMorph(646620160)
	Arguments and temporary variables: 
		aStringOrMorph: 	'Variables'
		aBrick: 	nil
		label: 	nil
		innerLabel: 	nil
		container: 	a GLMBrick(439190784)
		labelMorph: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(581435392) a PanelMorph(61368576))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (632732672)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(68864)
		contentMorph: 	a GLMPanelMorph(581435392)
		pageMorphs: 	an OrderedCollection()
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(86882304)
		headerMorph: 	a PanelMorph(61368576)
		tabSelectorWidth: 	nil


LazyTabGroupMorph>>addLazyPage:label:toolbar:action:
	Receiver: a LazyTabGroupMorph(646620160)
	Arguments and temporary variables: 
		aBlock: 	[ self renderObject: each ]
		aStringOrMorph: 	'Variables'
		aToolbar: 	a ToolDockingBarMorph(484800768)
		anActionMorphOrNil: 	nil
		newPage: 	a LazyTabPage(496774144)
		label: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(581435392) a PanelMorph(61368576))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (632732672)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(68864)
		contentMorph: 	a GLMPanelMorph(581435392)
		pageMorphs: 	an OrderedCollection()
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a GLMPanelMorph(86882304)
		headerMorph: 	a PanelMorph(61368576)
		tabSelectorWidth: 	nil


[ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	nil
		aPresentation: 	a GLMCompositePresentation(id=941432064 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMTabulator(id=1066149888 title='Variabl...etc...
		each: 	a GLMTabulator(id=1066149888 title='Variables' pane=a GLMPane(178684160 m...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(646620160)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMTabulator(id=1066149888 title='Variables' pane=a GLMPane(1786841...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMTabulator(id=1066149888 title='Variables' pane=a GLMPane(1...etc...
		firstIndex: 	1
		lastIndex: 	2


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	nil
		aPresentation: 	a GLMCompositTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:14.599184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	41
		deltaCharIndex: 	0
		theText: 	a Text for '[ self value.
Processor terminateActive ]'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	nil
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	41
		deltaCharIndex: 	0
		theText: 	a Text for '[ self value.
Processor terminateActive ]'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	nil
		wantsColumnBreaks: 	false


TextComposer>>multiComposeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	41
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection()
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Source Sans Pro
		argText: 	a Text for '[ self value.
Processor terminateActive ]'
		argContainer: 	(0@0) corner: (9999999@9999999)
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	41
		deltaCharIndex: 	0
		theText: 	a Text for '[ self value.
Processor terminateActive ]'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	nil
		wantsColumnBreaks: 	false


Paragraph>>multiComposeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a Paragraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	41
		delta: 	0
		lineColl: 	an OrderedCollection()
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '[ self value.
Processor terminateActive ]'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	40
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


Paragraph>>composeAll
	Receiver: a Paragraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '[ self value.
Processor terminateActive ]'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	40
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


Paragraph>>compose:style:from:in:
	Receiver: a Paragraph
	Arguments and temporary variables: 
		t: 	a Text for '[ self value.
Processor terminateActive ]'
		ts: 	a TextStyle Source Sans Pro
		startingIndex: 	1
		textContainer: 	(0@0) corner: (9999999@9999999)
	Receiver's instance variables: 
		text: 	a Text for '[ self value.
Processor terminateActive ]'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	40
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


TextMorph>>paragraph
	Receiver: a TextMorph(774067200)
	Arguments and temporary variables: 
		newParagraph: 	a Paragraph
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (292566272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '[ self value.
Processor terminateActive ]'
		wrapFlag: 	false
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 0 left: 0 bottom: 0 right: 0
		defaultColor: 	nil


TextMorph>>newContents:
	Receiver: a TextMorph(774067200)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '[ self value.
Processor terminateActive ]'
		newText: 	a Text for '[ self value.
Processor terminateActive ]'
		embeddedMorphs: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (292566272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '[ self value.
Processor terminateActive ]'
		wrapFlag: 	false
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 0 left: 0 bottom: 0 right: 0
		defaultColor: 	nil


TextMorph>>contentsAsIs:
	Receiver: a TextMorph(774067200)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '[ self value.
Processor terminateActive ]'
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (292566272) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '[ self value.
Processor terminateActive ]'
		wrapFlag: 	false
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 0 left: 0 bottom: 0 right: 0
		defaultColor: 	nil


Text>>asTextMorph
	Receiver: a Text for '[ self value.
Processor terminateActive ]'
	Arguments and temporary variables: 

	Receiver's instance variables: 
		string: 	'[ self value.
Processor terminateActive ]'
		runs: 	a RunArray runs: #(41) values: an Array(an Array(a TextColor code: Color ...etc...


Text>>asMorph
	Receiver: a Text for '[ self value.
Processor terminateActive ]'
	Arguments and temporary variables: 

	Receiver's instance variables: 
		string: 	'[ self value.
Processor terminateActive ]'
		runs: 	a RunArray runs: #(41) values: an Array(an Array(a TextColor code: Color ...etc...


GLMFastTableDataSource>>viewRowMorphForColumn:node:withIndex:
	Receiver: a GLMFastTableDataSource
	Arguments and temporary variables: 
		aGlamourColumn: 	a GLMTableColumn
		aNode: 	[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
		anInteger: 	1
	Receiver's instance variables: 
		table: 	a FTTableMorph(986299392)
		elements: 	an OrderedCollection([ self value.
Processor terminateActive ] in Blo...etc...
		glamourPresentation: 	a GLMFastTablePresentation(id=308677888 title='Stack' pane...etc...
		announcer: 	a GLMAnnouncer
		tagsToFilterBy: 	an OrderedCollection()
		dataCache: 	a LRUCache(#1 1/128 [ 1 ] 75%)
		columnToSortBy: 	nil


GLMFastTableDataSource>>rowMorphElementsForColumn:node:withIndex:
	Receiver: a GLMFastTableDataSource
	Arguments and temporary variables: 
		glamourColumn: 	a GLMTableColumn
		aNode: 	[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
		aRowIndex: 	1
		rowElements: 	nil
		contentMorph: 	nil
		tagMorphs: 	nil
	Receiver's instance variables: 
		table: 	a FTTableMorph(986299392)
		elements: 	an OrderedCollection([ self value.
Processor terminateActive ] in Blo...etc...
		glamourPresentation: 	a GLMFastTablePresentation(id=308677888 title='Stack' pane...etc...
		announcer: 	a GLMAnnouncer
		tagsToFilterBy: 	an OrderedCollection()
		dataCache: 	a LRUCache(#1 1/128 [ 1 ] 75%)
		columnToSortBy: 	nil


GLMFastTableDataSource>>rowMorphForColumn:item:withIndex:
	Receiver: a GLMFastTableDataSource
	Arguments and temporary variables: 
		aColumn: 	a GLMFastTableColumn
		anItem: 	[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
		aRowIndex: 	1
		rowElements: 	an OrderedCollection()
	Receiver's instance variables: 
		table: 	a FTTableMorph(986299392)
		elements: 	an OrderedCollection([ self value.
Processor terminateActive ] in Blo...etc...
		glamourPresentation: 	a GLMFastTablePresentation(id=308677888 title='Stack' pane...etc...
		announcer: 	a GLMAnnouncer
		tagsToFilterBy: 	an OrderedCollection()
		dataCache: 	a LRUCache(#1 1/128 [ 1 ] 75%)
		columnToSortBy: 	nil


GLMFastTableDataSource>>cellColumn:row:
	Receiver: a GLMFastTableDataSource
	Arguments and temporary variables: 
		aColumn: 	a GLMFastTableColumn
		aRowIndex: 	1
		item: 	[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
		cell: 	nil
	Receiver's instance variables: 
		table: 	a FTTableMorph(986299392)
		elements: 	an OrderedCollection([ self value.
Processor terminateActive ] in Blo...etc...
		glamourPresentation: 	a GLMFastTablePresentation(id=308677888 title='Stack' pane...etc...
		announcer: 	a GLMAnnouncer
		tagsToFilterBy: 	an OrderedCollection()
		dataCache: 	a LRUCache(#1 1/128 [ 1 ] 75%)
		columnToSortBy: 	nil


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(830056704)
	Arguments and temporary variables: 
		visibleRows: 	2
		numberOfColumns: 	3
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		columnWidths: 	#(100.0 400.0 -400.0)
		startIndex: 	1
		rowIndex: 	1
		row: 	a FTTableRowMorph(712473600)
		columnIndex: 	3
		cell: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (105.0@35.0)
		owner: 	a FTTableMorph(986299392)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(986299392)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (105.0@35.0)
		owner: 	a GLMPanelMorph(176049408)
		submorphs: 	an Array(a FTTableContainerMorph(830056704))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (706902016) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(830056704)
		verticalScrollBar: 	a ScrollBar(1023717632)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph>>extent:
	Receiver: a FTTableMorph(986299392)
	Arguments and temporary variables: 
		aPoint: 	(100.0@30.0)
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (105.0@35.0)
		owner: 	a GLMPanelMorph(176049408)
		submorphs: 	an Array(a FTTableContainerMorph(830056704))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (706902016) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(830056704)
		verticalScrollBar: 	a ScrollBar(1023717632)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTableDataSource
		intercellSpacing: 	(3@1)
		rowHeight: 	20.333333333333336
		selectedRowIndexes: 	#(1)
		highlightedRowIndexes: 	#()
		selectionStrategy: 	a FTSimpleSelection
		columns: 	an Array(a GLMFastTableColumn a GLMFastTableColumn a GLMFastTableColum...etc...
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	false
		allowsDeselection: 	false
		needToggleAtMouseUp: 	false
		function: 	a FTNilFunction
		resizable: 	true
		trialHSB: 	nil


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(986299392)
	Arguments and temporary variables: 
		newBounds: 	(5.0@5.0) corner: (105.0@35.0)
		oldExtent: 	(50.0@40.0)
		newExtent: 	(100.0@30.0)
	Receiver's instance variables: 
		bounds: 	(5.0@5.0) corner: (105.0@35.0)
		owner: 	a GLMPanelMorph(176049408)
		submorphs: 	an Array(a FTTableContainerMorph(830056704))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (706902016) [other:  (announcer -> an Announcer) (k...etc...
		container: 	a FTTableContainerMorph(830056704)
		verticalScrollBar: 	a ScrollBar(1023717632)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		showIndex: 	1
		dataSource: 	a GLMFastTTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.092184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 89 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 92 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 87 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 86 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054195183184


Delay>>wait
	Receiver: a Delay(100 msecs; 85 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054195183184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.146184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RBScanner>>stripComment
	Receiver: a RBScanner
	Arguments and temporary variables: 
		start: 	13
		stop: 	nil
	Receiver's instance variables: 
		stream: 	a ReadStream
		buffer: 	a WriteStream
		tokenStart: 	1
		currentCharacter: 	$i
		characterType: 	#alphabetic
		classificationTable: 	#(nil nil nil nil nil nil nil nil #separator #separator ni...etc...
		comments: 	an OrderedCollection()
		errorBlock: 	[ :aString :position :parser | parser parseErrorNode: aString ]


RBScanner>>stripSeparators
	Receiver: a RBScanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	a ReadStream
		buffer: 	a WriteStream
		tokenStart: 	1
		currentCharacter: 	$i
		characterType: 	#alphabetic
		classificationTable: 	#(nil nil nil nil nil nil nil nil #separator #separator ni...etc...
		comments: 	an OrderedCollection()
		errorBlock: 	[ :aString :position :parser | parser parseErrorNode: aString ]


RBScanner>>next
	Receiver: a RBScanner
	Arguments and temporary variables: 
		token: 	 RBIdentifierToken('newProcess')
	Receiver's instance variables: 
		stream: 	a ReadStream
		buffer: 	a WriteStream
		tokenStart: 	1
		currentCharacter: 	$i
		characterType: 	#alphabetic
		classificationTable: 	#(nil nil nil nil nil nil nil nil #separator #separator ni...etc...
		comments: 	an OrderedCollection()
		errorBlock: 	[ :aString :position :parser | parser parseErrorNode: aString ]


RBParser>>step
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	nil
		nextToken: 	nil
		errorBlock: 	[ :aString :position :parser | parser parseErrorNode: aString ]
		source: 	'newProcess
	"Answer a Process running the code in the receiver. The pr...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>scanner:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aScanner: 	a RBScanner
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	nil
		nextToken: 	nil
		errorBlock: 	[ :aString :position :parser | parser parseErrorNode: aString ]
		source: 	'newProcess
	"Answer a Process running the code in the receiver. The pr...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>initializeParserWith:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'newProcess
	"Answer a Process running the code in the receiver. The p...etc...
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	nil
		nextToken: 	nil
		errorBlock: 	[ :aString :position :parser | parser parseErrorNode: aString ]
		source: 	'newProcess
	"Answer a Process running the code in the receiver. The pr...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'newProcess
	"Answer a Process running the code in the receiver. The p...etc...
		aBlock: 	[ :aString :position :parser | parser parseErrorNode: aString ]
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'


RBParser class>>parseFaultyMethod:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'newProcess
	"Answer a Process running the code in the receiver. The p...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'


[ root := RBParser parseFaultyMethod: aText asString.
root methodNode methodClass: classOrMetaClass.
^ root ] in SHRBTextStyler>>parse:isMethod:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		isMethod: 	true
		root: 	nil
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	nil
		parentheseLevel: 	nil
		bracketLevel: 	nil
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	nil
		workspace: 	nil


BlockClosure>>on:do:
	Receiver: [ root := RBParser parseFaultyMethod: aText asString.
root methodNode methodClass: classOr...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ ^ RBParser parseFaultyExpression: aText asString ]
	Receiver's instance variables: 
		outerContext: 	SHRBTextStyler>>parse:isMethod:
		startpc: 	109
		numArgs: 	0


SHRBTextStyler>>parse:isMethod:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		isMethod: 	true
		root: 	nil
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	nil
		parentheseLevel: 	nil
		bracketLevel: 	nil
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	nil
		workspace: 	nil


SHRBTextStyler>>privateStyle:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		ast: 	nil
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	nil
		parentheseLevel: 	nil
		bracketLevel: 	nil
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	nil
		workspace: 	nil


SHRBTextStyler(SHTextStyler)>>style:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	nil
		parentheseLevel: 	nil
		bracketLevel: 	nil
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	nil
		workspace: 	nil


[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


BlockClosure>>on:do:
	Receiver: [ ^ self styler style: aText ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ex logCr.
^ aText ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator>>style:
		startpc: 	70
		numArgs: 	0


RubShoutStylerDecorator>>style:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


BlockClosure>>ensure:
	Receiver: [ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aTex...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator>>text:
		startpc: 	111
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ aText addAttribute: self defaultFontChange.
next text: (text := self ...etc...
	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (50@40)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(628181248)


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubExtraSelectionDecorator
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubCurrentLineBarDecorator


[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubCurrentLineBarDecorator
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubShoutStylerDecorator


[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand...etc...
		startpc: 	62
		numArgs: 	0


RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.234184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.244184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.253184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.301184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallInteger>>=
	Receiver: 535
	Arguments and temporary variables: 
		aNumber: 	535.0
	Receiver's instance variables: 
535

Point>>=
	Receiver: (535@686)
	Arguments and temporary variables: 
		aPoint: 	(535.0@686.0)
	Receiver's instance variables: 
		x: 	535
		y: 	686


Rectangle>>=
	Receiver: (535@686) corner: (1513@690)
	Arguments and temporary variables: 
		aRectangle: 	(535.0@686.0) corner: (1513.0@690.0)
	Receiver's instance variables: 
		origin: 	(535@686)
		corner: 	(1513@690)


WindowEdgeGripMorph(Morph)>>layoutProportionallyIn:
	Receiver: a WindowEdgeGripMorph(660416768)
	Arguments and temporary variables: 
		newBounds: 	(513.0@78.0) corner: (1535.0@690.0)
		box: 	(535@686) corner: (1513@690)
		frame: 	a LayoutFrame ( (0@1) + (22@ -4)px corner: (1@1) + (-22@0)px ) 
	Receiver's instance variables: 
		bounds: 	(535.0@686.0) corner: (1513.0@690.0)
		owner: 	a GLMSystemWindow(704642304) named: User Interrupt
		submorphs: 	#()
		fullBounds: 	(535.0@686.0) corner: (1513.0@690.0)
		color: 	Color transparent
		extension: 	a MorphExtension (358611968) [locked] 
		dotColor: 	nil
		handleColor: 	nil
		lastMouse: 	nil
		target: 	a GLMSystemWindow(704642304) named: User Interrupt
		edgeName: 	#bottom
		fitTargetOwner: 	false


[ :m | m layoutProportionallyIn: newBounds ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a GLMSystemWindow(704642304) named: User Interrupt
		newBounds: 	(513.0@78.0) corner: (1535.0@690.0)
		m: 	a WindowEdgeGripMorph(660416768)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a WindowEdgeGripMorph(660416768) a WindowEdgeGripMorph(279563520) a WindowEdgeGri...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
		index: 	1
	Receiver's instance variables: 
an Array(a WindowEdgeGripMorph(660416768) a WindowEdgeGripMorph(279563520) a WindowEdgeGri...etc...

GLMSystemWindow(Morph)>>submorphsDo:
	Receiver: a GLMSystemWindow(704642304) named: User Interrupt
	Arguments and temporary variables: 
		aBlock: 	[ :m | m layoutProportionallyIn: newBounds ]
	Receiver's instance variables: 
		bounds: 	(512.0@50.0) corner: (1536.0@691.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(660416768) a WindowEdgeGripMorph(2795...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1006827520) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=946545920 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(653799680) a Morph(814363648))
		label: 	a LabelMorph(23876864)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(795979776)
		collapseBox: 	a MultistateButtonMorph(283785472)
		paneMorphs: 	an Array(a GLMPanelMorph(24472576))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@50.0) corner: (1536.0@691.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(68541696)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(932276224)
		expandBox: 	a MultistateButtonMorph(726876416)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(654418944)
		hasInitialStep: 	false


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		aMorph: 	a GLMSystemWindow(704642304) named: User Interrupt
		newBounds: 	(513.0@78.0) corner: (1535.0@690.0)
	Receiver's instance variables: 
a ProportionalLayout

GLMSystemWindow(Morph)>>doLayoutIn:
	Receiver: a GLMSystemWindow(704642304) named: User Interrupt
	Arguments and temporary variables: 
		layoutBounds: 	(513.0@78.0) corner: (1535.0@690.0)
		box: 	nil
		priorBounds: 	(512.0@50.0) corner: (1536.0@691.0)
		layout: 	a ProportionalLayout
	Receiver's instance variables: 
		bounds: 	(512.0@50.0) corner: (1536.0@691.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(660416768) a WindowEdgeGripMorph(2795...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1006827520) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=946545920 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(653799680) a Morph(814363648))
		label: 	a LabelMorph(23876864)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(795979776)
		collapseBox: 	a MultistateButtonMorph(283785472)
		paneMorphs: 	an Array(a GLMPanelMorph(24472576))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@50.0) corner: (1536.0@691.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(68541696)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(932276224)
		expandBox: 	a MultistateButtonMorph(726876416)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(654418944)
		hasInitialStep: 	false


[ self doLayoutIn: self layoutBounds ] in GLMSystemWindow(Morph)>>computeFullBounds
	Receiver: a GLMSystemWindow(704642304) named: User Interrupt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(512.0@50.0) corner: (1536.0@691.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(660416768) a WindowEdgeGripMorph(2795...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1006827520) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=946545920 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(653799680) a Morph(814363648))
		label: 	a LabelMorph(23876864)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(795979776)
		collapseBox: 	a MultistateButtonMorph(283785472)
		paneMorphs: 	an Array(a GLMPanelMorph(24472576))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@50.0) corner: (1536.0@691.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(68541696)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(932276224)
		expandBox: 	a MultistateButtonMorph(726876416)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(654418944)
		hasInitialStep: 	false


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	GLMSystemWindow(Morph)>>computeFullBounds
		startpc: 	69
		numArgs: 	0


GLMSystemWindow(Morph)>>computeFullBounds
	Receiver: a GLMSystemWindow(704642304) named: User Interrupt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(512.0@50.0) corner: (1536.0@691.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(660416768) a WindowEdgeGripMorph(2795...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1006827520) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=946545920 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(653799680) a Morph(814363648))
		label: 	a LabelMorph(23876864)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(795979776)
		collapseBox: 	a MultistateButtonMorph(283785472)
		paneMorphs: 	an Array(a GLMPanelMorph(24472576))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@50.0) corner: (1536.0@691.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(68541696)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(932276224)
		expandBox: 	a MultistateButtonMorph(726876416)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(654418944)
		hasInitialStep: 	false


GLMSystemWindow(Morph)>>fullBounds
	Receiver: a GLMSystemWindow(704642304) named: User Interrupt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(512.0@50.0) corner: (1536.0@691.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(660416768) a WindowEdgeGripMorph(2795...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1006827520) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a GTGenericStackDebugger(id=946545920 title='User Interrupt' pane=a GLMP...etc...
		labelString: 	'User Interrupt'
		stripes: 	an Array(a Morph(653799680) a Morph(814363648))
		label: 	a LabelMorph(23876864)'User Interrupt'
		closeBox: 	a MultistateButtonMorph(795979776)
		collapseBox: 	a MultistateButtonMorph(283785472)
		paneMorphs: 	an Array(a GLMPanelMorph(24472576))
		collapsedFrame: 	nil
		fullFrame: 	(512.0@50.0) corner: (1536.0@691.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(68541696)
		mustNotClose: 	false
		labelWidgetAllowance: 	183.0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(932276224)
		expandBox: 	a MultistateButtonMorph(726876416)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true
		toolbarBox: 	a ToolDockingBarMorph(654418944)
		hasInitialStep: 	false


[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in WorldMorph(Morph)>>submorphBounds
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		m: 	a GLMSystemWindow(704642304) named: User Interrupt
		subBox: 	nil
		box: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSystemWindow(570986496) ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
	...etc...
		index: 	6
	Receiver's instance variables: 
an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSystemWindow(570986496) ...etc...

WorldMorph(Morph)>>submorphBounds
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		box: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(Morph)>>privateFullBounds
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		box: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(Morph)>>doLayoutIn:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		layoutBounds: 	(0@0) corner: (1536@801)
		box: 	nil
		priorBounds: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


[ self doLayoutIn: self layoutBounds ] in WorldMorph(Morph)>>computeFullBounds
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	WorldMorph(Morph)>>computeFullBounds
		startpc: 	69
		numArgs: 	0


WorldMorph(Morph)>>computeFullBounds
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(Morph)>>fullBounds
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1228@616) mouseOver 16884009 nil]
		aMorph: 	a WorldMorph(428085248) [world]
		localEvt: 	nil
		index: 	nil
		child: 	nil
		morphs: 	nil
		inside: 	nil
	Receiver's instance variables: 
		morph: 	a WorldMorph(428085248) [world]


MorphicEventDispatcher>>handleMouseOver:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1228@616) mouseOver 16884009 nil]
	Receiver's instance variables: 
		morph: 	a WorldMorph(428085248) [world]


MouseEvent>>sentTo:
	Receiver: [(1228@616) mouseOver 16884009 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	16884009
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseOver
		buttons: 	0
		position: 	(1228@616)
		handler: 	nil
		wasHandled: 	false


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1228@616) mouseOver 16884009 nil]
		aMorph: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		morph: 	a WorldMorph(428085248) [world]


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1228@616) mouseOver 16884009 nil]
		aMorph: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		morph: 	a WorldMorph(428085248) [world]


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		anEvent: 	[(1228@616) mouseOver 16884009 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.398184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.408184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.418184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.430184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.507184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Metaclass(Behavior)>>hasAbstractMethods
	Receiver: GTBrowseDebugAction class
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BrowseDebugAction class
		methodDict: 	a MethodDictionary(#gtDebugActionsFor:->GTBrowseDebugAction class>>...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	GTBrowseDebugAction


GTBrowseDebugAction class(Class)>>hasAbstractMethods
	Receiver: GTBrowseDebugAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	BrowseDebugAction
		methodDict: 	a MethodDictionary(#receiver->GTBrowseDebugAction>>#receiver )
		format: 	65549
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GTBrowseDebugAction
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GT-Debugger-Actions'


[ :each | each hasAbstractMethods ] in DebugSession class>>debuggingActionsForPragma:for:
	Receiver: DebugSession
	Arguments and temporary variables: 
		aSymbol: 	#gtStackDebuggingAction
		aDebugger: 	a GTGenericStackDebugger(id=693376000 title='User Interrupt' pane=a ...etc...
		each: 	GTBrowseDebugAction
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activePC:->DebugSession>>#activePC: #clear->Deb...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GTBytecodeDebuggerSession. GTSUnitDebugSession}
		name: 	#DebugSession
		classPool: 	a Dictionary(#LogDebuggerStackToFile->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'DebuggerModel-Base'


OrderedCollection>>reject:
	Receiver: an OrderedCollection(CopyToClipboardDebugAction DoesNotUnderstandDebugAction FuelOutStackD...etc...
	Arguments and temporary variables: 
		rejectBlock: 	[ :each | each hasAbstractMethods ]
		newCollection: 	an OrderedCollection(CopyToClipboardDebugAction DoesNotUnderstan...etc...
		element: 	GTBrowseDebugAction
		index: 	40
	Receiver's instance variables: 
		array: 	{CopyToClipboardDebugAction. DoesNotUnderstandDebugAction. FuelOutStackD...etc...
		firstIndex: 	1
		lastIndex: 	40


DebugSession class>>debuggingActionsForPragma:for:
	Receiver: DebugSession
	Arguments and temporary variables: 
		aSymbol: 	#gtStackDebuggingAction
		aDebugger: 	a GTGenericStackDebugger(id=693376000 title='User Interrupt' pane=a ...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activePC:->DebugSession>>#activePC: #clear->Deb...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GTBytecodeDebuggerSession. GTSUnitDebugSession}
		name: 	#DebugSession
		classPool: 	a Dictionary(#LogDebuggerStackToFile->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'DebuggerModel-Base'


[ :currentActions :aSymbol | 
currentActions
	addAll: (self debuggingActionsForPragma: aSymbol for: aDebugger);
	yourself ] in DebugSession class>>debuggingActionsForPragmas:for:
	Receiver: DebugSession
	Arguments and temporary variables: 
		aSymbolsCollection: 	#(#gtStackDebuggingAction)
		aDebugger: 	a GTGenericStackDebugger(id=693376000 title='User Interrupt' pane=a ...etc...
		currentActions: 	an OrderedCollection()
		aSymbol: 	#gtStackDebuggingAction
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activePC:->DebugSession>>#activePC: #clear->Deb...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GTBytecodeDebuggerSession. GTSUnitDebugSession}
		name: 	#DebugSession
		classPool: 	a Dictionary(#LogDebuggerStackToFile->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'DebuggerModel-Base'


[ :each | nextValue := binaryBlock value: nextValue value: each ] in Array(Collection)>>inject:into:
	Receiver: #(#gtStackDebuggingAction)
	Arguments and temporary variables: 
		thisValue: 	an OrderedCollection()
		binaryBlock: 	[ :currentActions :aSymbol | 
currentActions
	addAll: (self debugg...etc...
		nextValue: 	an OrderedCollection()
		each: 	#gtStackDebuggingAction
	Receiver's instance variables: 
#(#gtStackDebuggingAction)

Array(SequenceableCollection)>>do:
	Receiver: #(#gtStackDebuggingAction)
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	1
	Receiver's instance variables: 
#(#gtStackDebuggingAction)

Array(Collection)>>inject:into:
	Receiver: #(#gtStackDebuggingAction)
	Arguments and temporary variables: 
		nextValue: 	an OrderedCollection()
		thisValue: 	an OrderedCollection()
		binaryBlock: 	[ :currentActions :aSymbol | 
currentActions
	addAll: (self debugg...etc...
	Receiver's instance variables: 
#(#gtStackDebuggingAction)

DebugSession class>>debuggingActionsForPragmas:for:
	Receiver: DebugSession
	Arguments and temporary variables: 
		aSymbolsCollection: 	#(#gtStackDebuggingAction)
		aDebugger: 	a GTGenericStackDebugger(id=693376000 title='User Interrupt' pane=a ...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activePC:->DebugSession>>#activePC: #clear->Deb...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GTBytecodeDebuggerSession. GTSUnitDebugSession}
		name: 	#DebugSession
		classPool: 	a Dictionary(#LogDebuggerStackToFile->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'DebuggerModel-Base'


GTGenericStackDebugger(GTMoldableDebugger)>>allActionsForPragmas:
	Receiver: a GTGenericStackDebugger(id=693376000 title='User Interrupt' pane=a GLMPane(843368448 root...etc...
	Arguments and temporary variables: 
		aSymbolsCollection: 	#(#gtStackDebuggingAction)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(843368448 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=657031168 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		cache: 	nil


GTGenericStackDebugger(GTMoldableDebugger)>>actionsForPragmas:
	Receiver: a GTGenericStackDebugger(id=693376000 title='User Interrupt' pane=a GLMPane(843368448 root...etc...
	Arguments and temporary variables: 
		aSymbolsCollection: 	#(#gtStackDebuggingAction)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(843368448 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=657031168 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		cache: 	nil


[ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt , aSymbol capitalized ]) ] in GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRootPragmas:in:
	Receiver: a GTGenericStackDebugger(id=693376000 title='User Interrupt' pane=a GLMPane(843368448 root...etc...
	Arguments and temporary variables: 
		aSymbolsCollection: 	#(#stackDebuggingAction)
		aPresentation: 	a GLMFastTablePresentation(id=1027602688 title='Stack' pane=a GL...etc...
		presentation: 	a GLMFastTablePresentation(id=858106880 title='Stack' pane=a GLMP...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(843368448 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=657031168 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		cache: 	nil


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt ...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMFastTablePresentation(id=858106880 title='Stack' pane=a ...etc...
	Receiver's instance variables: 
		outerContext: 	GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRoot...etc...
		startpc: 	95
		numArgs: 	1


BlockClosure(ProtoObject)>>glamourValue:
	Receiver: [ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt ...etc...
	Arguments and temporary variables: 
		anObject: 	a GLMFastTablePresentation(id=858106880 title='Stack' pane=a GLMPane(...etc...
		args: 	an Array(a GLMFastTablePresentation(id=858106880 title='Stack' pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRoot...etc...
		startpc: 	95
		numArgs: 	1


GLMFastTablePresentation(GLMPresentation)>>dynamicActions
	Receiver: a GLMFastTablePresentation(id=858106880 title='Stack' pane=a GLMPane(776969472 stack))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(776969472 stack)
		title: 	'Stack'
		titleIcon: 	nil
		transformation: 	[ :aSession | self retrieveStackFrom: aSession ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMFastTablePresentation(id=1027602688 title='Stack' pane=a ...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	nil
		icon: 	nil
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	nil
		allowsDeselection: 	nil
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		trTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.584184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.594184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.604184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.613184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.672184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>at:ifAbsent:
	Receiver: a Dictionary($)->#(7.8000030517578125 7.8000030517578125) $.->#(7.8000030517578125 7.80000...etc...
	Arguments and temporary variables: 
		key: 	$o
		aBlock: 	[ self at: key put: aBlock value ]
	Receiver's instance variables: 
		tally: 	27
		array: 	{Character null->#(7.8000030517578125 7.8000030517578125). nil. nil. $a-...etc...


Dictionary>>at:ifAbsentPut:
	Receiver: a Dictionary($)->#(7.8000030517578125 7.8000030517578125) $.->#(7.8000030517578125 7.80000...etc...
	Arguments and temporary variables: 
		key: 	$o
		aBlock: 	[ super
	widthAndKernedWidthOfLeft: leftCharacter
	right: rightCharacte...etc...
	Receiver's instance variables: 
		tally: 	27
		array: 	{Character null->#(7.8000030517578125 7.8000030517578125). nil. nil. $a-...etc...


FreeTypeFont>>widthAndKernedWidthOfLeft:right:into:
	Receiver: FreeTypeFont('Source Code Pro' 'Regular' 10)
	Arguments and temporary variables: 
		leftCharacter: 	$i
		rightCharacterOrNil: 	$o
		aTwoElementArray: 	#(7.8000030517578125 7.8000030517578125)
		privateArray: 	nil
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r03A24D60)<0x3A24D60>[Source Code Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($!->a Dictionary(Character space->#(7.80...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


LogicalFont>>widthAndKernedWidthOfLeft:right:into:
	Receiver: a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 10
 realFont: Free...etc...
	Arguments and temporary variables: 
		leftCharacter: 	$i
		rightCharacterOrNil: 	$o
		aTwoElementArray: 	#(7.8000030517578125 7.8000030517578125)
	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Code Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Code Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 po...etc...
		italicDerivative: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 ...etc...
		boldItalicDerivative: 	nil


RubCompositionScanner(RubCharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		startIndex: 	254
		stopIndex: 	271
		sourceString: 	'newProcess
	"Answer a Process running the code in the receiver. ...etc...
		rightX: 	1073741817
		stops: 	a RubTextStopConditions
		kernDelta: 	0
		ascii: 	105
		nextDestX: 	217.2000732421875
		char: 	$i
		floatDestX: 	217.2000732421875
		widthAndKernedWidth: 	#(7.8000030517578125 7.8000030517578125)
		nextChar: 	$o
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	217.2000732421875
		lastIndex: 	262
		destY: 	101
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	1073741817
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 237 to: 0
		runStopIndex: 	271
		spaceCount: 	2
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0
		spaceX: 	147.0000457763672
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	253
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	false


RubCompositionScanner(RubCharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		startIndex: 	254
		stopIndex: 	271
		sourceString: 	'newProcess
	"Answer a Process running the code in the receiver. ...etc...
		rightX: 	1073741817
		stops: 	a RubTextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	217.2000732421875
		lastIndex: 	262
		destY: 	101
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	1073741817
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 237 to: 0
		runStopIndex: 	271
		spaceCount: 	2
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0
		spaceX: 	147.0000457763672
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	253
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	false


RubCompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a RubCompositionScanner
	Arguments and temporary variables: 
		startIndex: 	237
		lineRectangle: 	(6@101) corner: (1073741817@101)
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	2
		stopCondition: 	#endOfRun
	Receiver's instance variables: 
		destX: 	217.2000732421875
		lastIndex: 	262
		destY: 	101
		stopConditions: 	a RubTextStopConditions
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		textStyle: 	a TextStyle Source Code Pro
		alignment: 	0
		leftMargin: 	6
		rightMargin: 	1073741817
		font: 	a LogicalFont
 familyName: 'Source Code Pro'
 emphasis: nil
 pointSize: 1...etc...
		line: 	a RubTextLine 237 to: 0
		runStopIndex: 	271
		spaceCount: 	2
		spaceWidth: 	7.8000030517578125
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		baselineY: 	nil
		firstDestX: 	6
		pendingKernX: 	0
		spaceX: 	147.0000457763672
		lineHeight: 	17
		baseline: 	13
		breakableIndex: 	253
		lineHeightAtBreak: 	17
		baselineAtBreak: 	13
		breakAtSpace: 	false


RubTextComposer>>composeEachRectangleIn:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@101) corner: (1073741817@101)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 84 a Ru...etc...
		maxRightX: 	583.8002166748047
		currentY: 	101
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	237
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (1073741817@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	1
		numberOfPhysicalLines: 	1
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (1073741817@1073741823)
		emphasisHere: 	#()
		cursorWidth: 	2


RubTextComposer>>composeAllRectangles:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@101) corner: (1073741817@101)}
		charIndexBeforeLine: 	237
		numberOfLinesBefore: 	5
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 84 a Ru...etc...
		maxRightX: 	583.8002166748047
		currentY: 	101
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	237
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (1073741817@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	1
		numberOfPhysicalLines: 	1
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (1073741817@1073741823)
		emphasisHere: 	#()
		cursorWidth: 	2


RubTextComposer>>composeOneLine
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		rectangles: 	{(6@101) corner: (1073741817@101)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 84 a Ru...etc...
		maxRightX: 	583.8002166748047
		currentY: 	101
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	237
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (1073741817@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	1
		numberOfPhysicalLines: 	1
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (1073741817@1073741823)
		emphasisHere: 	#()
		cursorWidth: 	2


RubTextComposer>>composeAllLines
	Receiver: a RubTextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 84 a Ru...etc...
		maxRightX: 	583.8002166748047
		currentY: 	101
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	237
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (1073741817@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	1
		numberOfPhysicalLines: 	1
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (1073741817@1073741823)
		emphasisHere: 	#()
		cursorWidth: 	2


RubTextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	389
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 1...etc...
		argPriorLines: 	#()
		argStartY: 	6
		argTextStyle: 	a TextStyle Source Code Pro
		argText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		argContainer: 	(6@6) corner: (1073741817@1073741823)
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 84 a Ru...etc...
		maxRightX: 	583.8002166748047
		currentY: 	101
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	237
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (1073741817@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	1
		numberOfPhysicalLines: 	1
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (1073741817@1073741823)
		emphasisHere: 	#()
		cursorWidth: 	2


RubTextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a RubTextComposer
	Arguments and temporary variables: 
		start: 	1
		stop: 	389
		delta: 	0
		lineColl: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 84 a...etc...
		priorLines: 	#()
		startingY: 	6
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a RubTextLine 1 to: 11 a RubTextLine 12 to: 84 a Ru...etc...
		maxRightX: 	583.8002166748047
		currentY: 	101
		scanner: 	a RubCompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	237
		startCharIndex: 	1
		stopCharIndex: 	389
		deltaCharIndex: 	0
		theText: 	a Text for 'newProcess
	"Answer a Process running the code in the rece...etc...
		theContainer: 	(6@6) corner: (1073741817@1073741823)
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Source Code Pro
		defaultLineHeight: 	0
		actualHeight: 	0
		actualWidth: 	1
		numberOfPhysicalLines: 	1
		prevTextStyle: 	a TextStyle Source Code Pro
		prevText: 	a Text for 'newProcess
	"Answer a Process running the code in the rec...etc...
		prevContainer: 	(6@6) corner: (1073741817@1073741823)
		emphasisHere: 	#()
		cursorWidth: 	2


[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedCollection new
	priorLines: Array new
	atY: self compositionRectangle top.
textArea
	ifNotNil: [ textArea paragraphWasComposedFrom: 1 to: self text size ] ] in RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (18.0@27.0)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(713021440)


BlockClosure>>ensure:
	Receiver: [ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedC...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubParagraph>>compose
		startpc: 	110
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta...etc...
	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (18.0@27.0)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(713021440)


RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (18.0@27.0)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(713021440)


Message>>sendTo:
	Receiver: compose
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#compose
		args: 	#()
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: compose
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#compose
		args: 	#()
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


Message>>sendTo:
	Receiver: compose
	Arguments and temporary variables: 
		receiver: 	a RubExtraSelectionDecorator
	Receiver's instance variables: 
		selector: 	#compose
		args: 	#()
		lookupClass: 	RubCurrentLineBarDecorator


[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	62
		numArgs: 	0


RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


Message>>sendTo:
	Receiver: compose
	Arguments and temporary variables: 
		receiver: 	a RubCurrentLineBarDecorator
	Receiver's instance variables: 
		selector: 	#compose
		args: 	#()
		lookupClass: 	RubShoutStylerDecorator


[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.768184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.778184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.787184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.797184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.857184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

OrderedCollection>>resetTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	nil
		lastIndex: 	nil


OrderedCollection>>reset
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	nil
		lastIndex: 	nil


OrderedCollection>>setCollection:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		anArray: 	#(nil nil nil nil nil nil nil nil nil nil)
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	nil
		lastIndex: 	nil


OrderedCollection class>>new:
	Receiver: OrderedCollection
	Arguments and temporary variables: 
		anInteger: 	10
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ObjectFinalizerCollection. SortedCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Ordered'


OrderedCollection class>>new
	Receiver: OrderedCollection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ObjectFinalizerCollection. SortedCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Ordered'


RxMatcher>>tryMatch
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		oldMarkerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an O...etc...
		i: 	5
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>searchStream:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		position: 	1
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchesOnStream:do:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :match | result add: (self position - match size + 1 to: self positio...etc...
		position: 	0
		subexpression: 	nil
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchesIn:do:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aString: 	'Simulation guard'
		aBlock: 	[ :match | result add: (self position - match size + 1 to: self positio...etc...
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchingRangesIn:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aString: 	'Simulation guard'
		result: 	an OrderedCollection()
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


PharoDocCommentNode class>>docCommentRangesIn:
	Receiver: PharoDocCommentNode
	Arguments and temporary variables: 
		aText: 	'Simulation guard'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asTriplet->PharoDocCommentNode>>#asTriplet #exp...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoDocCommentNode
		classPool: 	a Dictionary(#DocCommentEnabled->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PharoDocComment-Base'


PharoDocCommentNode class>>parseDocComments:
	Receiver: PharoDocCommentNode
	Arguments and temporary variables: 
		aRBCommentNode: 	a RBComment "Simulation guard" 
		ranges: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asTriplet->PharoDocCommentNode>>#asTriplet #exp...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoDocCommentNode
		classPool: 	a Dictionary(#DocCommentEnabled->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PharoDocComment-Base'


RBComment>>pharoDocCommentNodes
	Receiver: a RBComment "Simulation guard" 
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	'Simulation guard'
		start: 	254


SHRBTextStyler>>styleDocComment:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aRBComment: 	a RBComment "Simulation guard" 
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


[ :comment | self styleDocComment: comment ] in SHRBTextStyler>>visitMethodComments:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		comments: 	an Array(a RBComment "Answer a Process running the code in the receiv...etc...
		comment: 	a RBComment "Simulation guard" 
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a RBComment "Answer a Process running the code in the receiver. The process is no...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :comment | self styleDocComment: comment ]
		index: 	2
	Receiver's instance variables: 
an Array(a RBComment "Answer a Process running the code in the receiver. The process is no...etc...

SHRBTextStyler>>visitMethodComments:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		comments: 	an Array(a RBComment "Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>visitMethodNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aMethodNode: 	newProcess
	"Answer a Process running the code in the receiver. Th...etc...
		link: 	nil
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


RBMethodNode>>acceptVisitor:
	Receiver: newProcess
	"Answer a Process running the code in the receiver. The process is not 
	sched...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a SHRBTextStyler
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#comments->an Array(a RBComment "Answer a Process...etc...
		scope: 	an OCMethodScope 3
		selector: 	#newProcess
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(^ Process
	forContext:
		[ self value.
		Processor termina...etc...
		source: 	'newProcess
	"Answer a Process running the code in the receiver. The pr...etc...
		arguments: 	#()
		pragmas: 	an OrderedCollection(RBPragmaNode(<primitive: 19>))
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


SHRBTextStyler>>style:ast:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		ast: 	newProcess
	"Answer a Process running the code in the receiver. The proces...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>privateStyle:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		ast: 	newProcess
	"Answer a Process running the code in the receiver. The proces...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler(SHTextStyler)>>style:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


BlockClosure>>on:do:
	Receiver: [ ^ self styler style: aText ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ex logCr.
^ aText ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator>>style:
		startpc: 	70
		numArgs: 	0


RubShoutStylerDecorator>>style:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


BlockClosure>>ensure:
	Receiver: [ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aTex...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator>>text:
		startpc: 	111
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ aText addAttribute: self defaultFontChange.
next text: (text := self ...etc...
	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (50@40)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(138498304)


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variablesTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.954184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.966184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.976184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:15.985184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.039184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RxMatcher>>next
	Receiver: a RxMatcher
	Arguments and temporary variables: 

	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxmSubstring>>matchAgainst:
	Receiver: a RxmSubstring
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		originalState: 	[ stream position: origPosition ]
		sampleStream: 	a ReadStream
		mismatch: 	false
	Receiver's instance variables: 
		next: 	a RxmBranch
		sample: 	'>>>'
		compare: 	[ :char1 :char2 | char1 = char2 ]


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	136
	Receiver's instance variables: 
		next: 	a RxmSubstring
		index: 	6


RxmLink>>matchAgainst:
	Receiver: a RxmLink
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	false
		alternative: 	a RxmLink


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmBranch
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	130
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	5


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	130
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	3


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	130
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	1


RxMatcher>>tryMatch
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		oldMarkerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an O...etc...
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>searchStream:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		position: 	130
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchesOnStream:do:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :match | result add: (self position - match size + 1 to: self positio...etc...
		position: 	0
		subexpression: 	nil
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchesIn:do:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aString: 	'Answer a Process running the code in the receiver. The process is not...etc...
		aBlock: 	[ :match | result add: (self position - match size + 1 to: self positio...etc...
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchingRangesIn:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aString: 	'Answer a Process running the code in the receiver. The process is not...etc...
		result: 	an OrderedCollection()
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


PharoDocCommentNode class>>docCommentRangesIn:
	Receiver: PharoDocCommentNode
	Arguments and temporary variables: 
		aText: 	'Answer a Process running the code in the receiver. The process is not 
...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asTriplet->PharoDocCommentNode>>#asTriplet #exp...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoDocCommentNode
		classPool: 	a Dictionary(#DocCommentEnabled->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PharoDocComment-Base'


PharoDocCommentNode class>>parseDocComments:
	Receiver: PharoDocCommentNode
	Arguments and temporary variables: 
		aRBCommentNode: 	a RBComment "Answer a Process running the code in the receiver....etc...
		ranges: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asTriplet->PharoDocCommentNode>>#asTriplet #exp...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoDocCommentNode
		classPool: 	a Dictionary(#DocCommentEnabled->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PharoDocComment-Base'


RBComment>>pharoDocCommentNodes
	Receiver: a RBComment "Answer a Process running the code in the receiver. The process is not 
	sched...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	'Answer a Process running the code in the receiver. The process is no...etc...
		start: 	13


SHRBTextStyler>>styleDocComment:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aRBComment: 	a RBComment "Answer a Process running the code in the receiver. The...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


[ :comment | self styleDocComment: comment ] in SHRBTextStyler>>visitMethodComments:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		comments: 	an Array(a RBComment "Answer a Process running the code in the receiv...etc...
		comment: 	a RBComment "Answer a Process running the code in the receiver. The pr...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a RBComment "Answer a Process running the code in the receiver. The process is no...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :comment | self styleDocComment: comment ]
		index: 	1
	Receiver's instance variables: 
an Array(a RBComment "Answer a Process running the code in the receiver. The process is no...etc...

SHRBTextStyler>>visitMethodComments:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		comments: 	an Array(a RBComment "Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>visitMethodNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aMethodNode: 	newProcess
	"Answer a Process running the code in the receiver. Th...etc...
		link: 	nil
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


RBMethodNode>>acceptVisitor:
	Receiver: newProcess
	"Answer a Process running the code in the receiver. The process is not 
	sched...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a SHRBTextStyler
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#comments->an Array(a RBComment "Answer a Process...etc...
		scope: 	an OCMethodScope 3
		selector: 	#newProcess
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(^ Process
	forContext:
		[ self value.
		Processor termina...etc...
		source: 	'newProcess
	"Answer a Process running the code in the receiver. The pr...etc...
		arguments: 	#()
		pragmas: 	an OrderedCollection(RBPragmaNode(<primitive: 19>))
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


SHRBTextStyler>>style:ast:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		ast: 	newProcess
	"Answer a Process running the code in the receiver. The proces...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>privateStyle:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		ast: 	newProcess
	"Answer a Process running the code in the receiver. The proces...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil



--- The full stack ---
RxMatcher>>next
RxmSubstring>>matchAgainst:
RxmMarker>>matchAgainst:
RxmLink>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxMatcher>>tryMatch
RxMatcher>>searchStream:
RxMatcher>>matchesOnStream:do:
RxMatcher>>matchesIn:do:
RxMatcher>>matchingRangesIn:
PharoDocCommentNode class>>docCommentRangesIn:
PharoDocCommentNode class>>parseDocComments:
RBComment>>pharoDocCommentNodes
SHRBTextStyler>>styleDocComment:
[ :comment | self styleDocComment: comment ] in SHRBTextStyler>>visitMethodComments:
Array(SequenceableCollection)>>do:
SHRBTextStyler>>visitMethodComments:
SHRBTextStyler>>visitMethodNode:
RBMethodNode>>acceptVisitor:
SHRBTextStyler>>style:ast:
SHRBTextStyler>>privateStyle:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SHRBTextStyler(SHTextStyler)>>style:
[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
BlockClosure>>on:do:
RubShoutStylerDecorator>>style:
[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
BlockClosure>>ensure:
RubParagraph>>disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
RubShoutStylerDecorator>>text:
RubEditingArea(RubAbstractTextArea)>>privateText:
[ self privateText: stringOrText ] in RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubEditingArea(RubAbstractTextArea)>>handleParagraphChange:
RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubTextScrollPane>>setTextWith:
RubScrolledTextMorph>>setTextWith:
RubScrolledTextMorph>>model:
GLMMorphicPharoMethodRenderer>>morph
GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPharoMethodPresentation:
GLMPharoMethodPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
LazyTabPage>>actualPageMorph
LazyTabGroupMorph>>pageAt:
LazyTabGroupMorph>>updatePageIndex:
LazyTabGroupMorph(TabGroupMorph)>>update:
LazyTabGroupMorph(Object)>>update:with:
MorphChangedWithArguments>>deliverTo:
LazyTabGroupMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
GLMTabSelectorBrick(Morph)>>doAnnounce:
GLMTabSelectorBrick(Morph)>>changed:with:
GLMTabSelectorBrick>>selectedIndex:
LazyTabGroupMorph(TabGroupMorph)>>selectedPageIndex:
[ tabs selectedPageIndex: index ] in GLMMorphicTabbedRenderer>>render:
BlockClosure>>ensure:
GLMAnnouncer>>THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.141184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.151184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.160184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.172184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.225184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RxmSubstring>>sampleStream
	Receiver: a RxmSubstring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		next: 	a RxmBranch
		sample: 	'>>>'
		compare: 	[ :char1 :char2 | char1 = char2 ]


RxmSubstring>>matchAgainst:
	Receiver: a RxmSubstring
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		originalState: 	[ stream position: origPosition ]
		sampleStream: 	nil
		mismatch: 	nil
	Receiver's instance variables: 
		next: 	a RxmBranch
		sample: 	'>>>'
		compare: 	[ :char1 :char2 | char1 = char2 ]


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	108
	Receiver's instance variables: 
		next: 	a RxmSubstring
		index: 	6


RxmLink>>matchAgainst:
	Receiver: a RxmLink
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	false
		alternative: 	a RxmLink


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmBranch
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	97
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	5


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	97
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	3


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	97
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	1


RxMatcher>>tryMatch
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		oldMarkerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an O...etc...
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>searchStream:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		position: 	97
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchesOnStream:do:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :match | result add: (self position - match size + 1 to: self positio...etc...
		position: 	0
		subexpression: 	nil
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchesIn:do:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aString: 	'Answer a Process running the code in the receiver. The process is not...etc...
		aBlock: 	[ :match | result add: (self position - match size + 1 to: self positio...etc...
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchingRangesIn:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aString: 	'Answer a Process running the code in the receiver. The process is not...etc...
		result: 	an OrderedCollection()
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


PharoDocCommentNode class>>docCommentRangesIn:
	Receiver: PharoDocCommentNode
	Arguments and temporary variables: 
		aText: 	'Answer a Process running the code in the receiver. The process is not 
...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asTriplet->PharoDocCommentNode>>#asTriplet #exp...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoDocCommentNode
		classPool: 	a Dictionary(#DocCommentEnabled->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PharoDocComment-Base'



--- The full stack ---
RxmSubstring>>sampleStream
RxmSubstring>>matchAgainst:
RxmMarker>>matchAgainst:
RxmLink>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxMatcher>>tryMatch
RxMatcher>>searchStream:
RxMatcher>>matchesOnStream:do:
RxMatcher>>matchesIn:do:
RxMatcher>>matchingRangesIn:
PharoDocCommentNode class>>docCommentRangesIn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PharoDocCommentNode class>>parseDocComments:
RBComment>>pharoDocCommentNodes
SHRBTextStyler>>styleDocComment:
[ :comment | self styleDocComment: comment ] in SHRBTextStyler>>visitMethodComments:
Array(SequenceableCollection)>>do:
SHRBTextStyler>>visitMethodComments:
SHRBTextStyler>>visitMethodNode:
RBMethodNode>>acceptVisitor:
SHRBTextStyler>>style:ast:
SHRBTextStyler>>privateStyle:
SHRBTextStyler(SHTextStyler)>>style:
[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
BlockClosure>>on:do:
RubShoutStylerDecorator>>style:
[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
BlockClosure>>ensure:
RubParagraph>>disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
RubShoutStylerDecorator>>text:
RubEditingArea(RubAbstractTextArea)>>privateText:
[ self privateText: stringOrText ] in RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubEditingArea(RubAbstractTextArea)>>handleParagraphChange:
RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubTextScrollPane>>setTextWith:
RubScrolledTextMorph>>setTextWith:
RubScrolledTextMorph>>model:
GLMMorphicPharoMethodRenderer>>morph
GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPharoMethodPresentation:
GLMPharoMethodPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
LazyTabPage>>actualPageMorph
LazyTabGroupMorph>>pageAt:
LazyTabGroupMorph>>updatePageIndex:
LazyTabGroupMorph(TabGroupMorph)>>update:
LazyTabGroupMorph(Object)>>update:with:
MorphChangedWithArguments>>deliverTo:
LazyTabGroupMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
GLMTabSelectorBrick(Morph)>>doAnnounce:
GLMTabSelectorBrick(Morph)>>changed:with:
GLMTabSelectorBrick>>selectedIndex:
LazyTabGroupMorph(TabGroupMorph)>>selectedPageIndex:
[ tabs selectedPageIndex: index ] in GLMMorphicTabbedRenderer>>render:
BlockClosure>>ensure:
GLMAnnouncer>>suspendAllWhile:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabulatorRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBrowser paneNamed: each id) ]
	ifFalse: [ pane := GLMMorphic containerMorph.
		self
			renderCustomRow: each
			ofPane: aPane
			inUI: pane
			inBrowser: aBrowser.
		pane addPaneSplitters ].
pane
	layoutFrame:
		(LayoutFrame new
			topFraction: currentSpanPosition / totalSpans
				offset:
				currentOffset
					- (totalSizes * currentSpanPosition / totalSpans) rounded
					+ self margin;
			leftFraction: 0 offset: 0;
			bottomFraction: (currentSpanPosition + each span) / totalSpans
				offset:
				currentOffset + each size
					- (totalSizes * (currentSpanPosition + each span) / totalSpans) rounded
					- self margin;
			rightFraction: 1 offset: 0;
			yourself).
aMorph addMorphBack: pane.
currentSpanPosition := currentSpanPosition + each span.
currentOffset := currentOffset + each size ] in GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
OrderedCollection(SequenceableCollection)>>keysAndValuesDo:
GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
GLMMorphicTabulatorRenderer>>render:
GLMMorphicTabulatorRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabulator:
GLMTabulator>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GTGenericStackDebugger(GLMCompositePresentation)>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicWindowRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicWindowRenderer>>render:
GLMMorphicWindowRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>open:
GTGenericStackDebugger(GLMCompositePresentation)>>openWith:
GTGenericStackDebugger(GLMCompositePresentation)>>open
GTGenericStackDebugger(GTMoldableDebugger)>>open
GTGenericStackDebugger>>openWithFullView
GTGenericStackDebugger class(GTMoldableDebugger class)>>openOn:withFullView:andNotification:
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ] in [ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSesTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.327184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.337184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.346184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.355184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.412184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RxMatcher>>atEnd
	Receiver: a RxMatcher
	Arguments and temporary variables: 

	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	false
		alternative: 	a RxmLink


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmBranch
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	129
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	5


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	129
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	3


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker
		loopback: 	false
		alternative: 	nil


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	129
	Receiver's instance variables: 
		next: 	a RxmBranch
		index: 	1


RxMatcher>>tryMatch
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		oldMarkerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an O...etc...
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>searchStream:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		position: 	129
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchesOnStream:do:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :match | result add: (self position - match size + 1 to: self positio...etc...
		position: 	0
		subexpression: 	nil
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchesIn:do:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aString: 	'Answer a Process running the code in the receiver. The process is not...etc...
		aBlock: 	[ :match | result add: (self position - match size + 1 to: self positio...etc...
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>matchingRangesIn:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aString: 	'Answer a Process running the code in the receiver. The process is not...etc...
		result: 	an OrderedCollection()
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


PharoDocCommentNode class>>docCommentRangesIn:
	Receiver: PharoDocCommentNode
	Arguments and temporary variables: 
		aText: 	'Answer a Process running the code in the receiver. The process is not 
...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asTriplet->PharoDocCommentNode>>#asTriplet #exp...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoDocCommentNode
		classPool: 	a Dictionary(#DocCommentEnabled->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PharoDocComment-Base'


PharoDocCommentNode class>>parseDocComments:
	Receiver: PharoDocCommentNode
	Arguments and temporary variables: 
		aRBCommentNode: 	a RBComment "Answer a Process running the code in the receiver....etc...
		ranges: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asTriplet->PharoDocCommentNode>>#asTriplet #exp...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoDocCommentNode
		classPool: 	a Dictionary(#DocCommentEnabled->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PharoDocComment-Base'


RBComment>>pharoDocCommentNodes
	Receiver: a RBComment "Answer a Process running the code in the receiver. The process is not 
	sched...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	'Answer a Process running the code in the receiver. The process is no...etc...
		start: 	13


SHRBTextStyler>>styleDocComment:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aRBComment: 	a RBComment "Answer a Process running the code in the receiver. The...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


[ :comment | self styleDocComment: comment ] in SHRBTextStyler>>visitMethodComments:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		comments: 	an Array(a RBComment "Answer a Process running the code in the receiv...etc...
		comment: 	a RBComment "Answer a Process running the code in the receiver. The pr...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a RBComment "Answer a Process running the code in the receiver. The process is no...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :comment | self styleDocComment: comment ]
		index: 	1
	Receiver's instance variables: 
an Array(a RBComment "Answer a Process running the code in the receiver. The process is no...etc...

SHRBTextStyler>>visitMethodComments:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		comments: 	an Array(a RBComment "Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>visitMethodNode:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aMethodNode: 	newProcess
	"Answer a Process running the code in the receiver. Th...etc...
		link: 	nil
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


RBMethodNode>>acceptVisitor:
	Receiver: newProcess
	"Answer a Process running the code in the receiver. The process is not 
	sched...etc...
	Arguments and temporary variables: 
		aProgramNodeVisitor: 	a SHRBTextStyler
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#comments->an Array(a RBComment "Answer a Process...etc...
		scope: 	an OCMethodScope 3
		selector: 	#newProcess
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(^ Process
	forContext:
		[ self value.
		Processor termina...etc...
		source: 	'newProcess
	"Answer a Process running the code in the receiver. The pr...etc...
		arguments: 	#()
		pragmas: 	an OrderedCollection(RBPragmaNode(<primitive: 19>))
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


SHRBTextStyler>>style:ast:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		ast: 	newProcess
	"Answer a Process running the code in the receiver. The proces...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler>>privateStyle:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
		ast: 	newProcess
	"Answer a Process running the code in the receiver. The proces...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


SHRBTextStyler(SHTextStyler)>>style:
	Receiver: a SHRBTextStyler
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		backgroundProcess: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		monitor: 	a Monitor
		view: 	a RubShoutStylerDecorator
		stylingEnabled: 	true
		charAttr: 	an Array(an Array(a TextColor code: Color black) an Array(a TextColor...etc...
		parentheseLevel: 	0
		bracketLevel: 	0
		classOrMetaClass: 	BlockClosure
		font: 	nil
		isForWorkspace: 	nil
		pixelHeight: 	13.333333333333334
		workspace: 	nil


[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


BlockClosure>>on:do:
	Receiver: [ ^ self styler style: aText ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ex logCr.
^ aText ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator>>style:
		startpc: 	70
		numArgs: 	0


RubShoutStylerDecorator>>style:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aText: 	a Text for 'newProcess
	"Answer a Process running the code in the receiv...etc...
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a SHRBTextStyler
		shoutIsAvailable: 	nil
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		replaceStart: 	1
		replaceStop: 	389


BlockClosure>>ensure:
	Receiver: [ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aTex...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator>>text:
		startpc: 	111
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ aText addAttribute: self defaultFontChange.
next text: (text := self ...etc...
	Receiver's instance variables: 
		text: 	a Text for 'newProcess
	"Answer a Process running the code in the receive...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (50@40)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(857500928)


Message>>sendTo:
	Receiver: disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
next text: (text := sel...etc...
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#disableDrawingWhile:
		args: 	an Array([ aText addAttribute: self defaultFontChange.
next text: (text :...etc...
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	disableDrawingWhile: [ aText addAttribute: self defaultFontChange.
ne...etc...
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	62
		numArgs: 	0



--- The full stack ---
RxMatcher>>atEnd
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxMatcher>>tryMatch
RxMatcher>>searchStream:
RxMatcher>>matchesOnStream:do:
RxMatcher>>matchesIn:do:
RxMatcher>>matchingRangesIn:
PharoDocCommentNode class>>docCommentRangesIn:
PharoDocCommentNode class>>parseDocComments:
RBComment>>pharoDocCommentNodes
SHRBTextStyler>>styleDocComment:
[ :comment | self styleDocComment: comment ] in SHRBTextStyler>>visitMethodComments:
Array(SequenceableCollection)>>do:
SHRBTextStyler>>visitMethodComments:
SHRBTextStyler>>visitMethodNode:
RBMethodNode>>acceptVisitor:
SHRBTextStyler>>style:ast:
SHRBTextStyler>>privateStyle:
SHRBTextStyler(SHTextStyler)>>style:
[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
BlockClosure>>on:do:
RubShoutStylerDecorator>>style:
[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
BlockClosure>>ensure:
RubParagraph>>disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
RubShoutStylerDecorator>>text:
RubEditingArea(RubAbstractTextArea)>>privateText:
[ self privateText: stringOrText ] in RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubEditingArea(RubAbstractTextArea)>>handleParagraphChange:
RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubTextScrollPane>>setTextWith:
RubScrolledTextMorph>>setTextWith:
RubScrolledTextMorph>>model:
GLMMorphicPharoMethodRenderer>>morph
GLMMorphicPharoMethodRenderer(GLMMoTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.514184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.524184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.533184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.542184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.597184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ReadStream(PositionableStream)>>position:
	Receiver: a ReadStream
	Arguments and temporary variables: 
		anInteger: 	139
	Receiver's instance variables: 
		collection: 	'Answer a Process running the code in the receiver. The process is ...etc...
		position: 	140
		readLimit: 	221


[ stream position: origPosition ] in RxMatcher>>currentState
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		origPosition: 	139
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxMatcher>>restoreState:
	Receiver: a RxMatcher
	Arguments and temporary variables: 
		aBlock: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		matcher: 	a RxmMarker
		ignoreCase: 	false
		startOptimizer: 	a RxMatchOptimizer
		stream: 	a ReadStream
		markerPositions: 	an Array(an OrderedCollection() an OrderedCollection() an Orde...etc...
		markerCount: 	8
		lastResult: 	false


RxmSubstring>>matchAgainst:
	Receiver: a RxmSubstring
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		originalState: 	[ stream position: origPosition ]
		sampleStream: 	a ReadStream
		mismatch: 	true
	Receiver's instance variables: 
		next: 	a RxmBranch
		sample: 	'>>>'
		compare: 	[ :char1 :char2 | char1 = char2 ]


RxmMarker>>matchAgainst:
	Receiver: a RxmMarker
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		startPosition: 	139
	Receiver's instance variables: 
		next: 	a RxmSubstring
		index: 	6


RxmLink>>matchAgainst:
	Receiver: a RxmLink
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmMarker


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink


RxmPredicate>>matchAgainst:
	Receiver: a RxmPredicate
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
		original: 	[ stream position: origPosition ]
	Receiver's instance variables: 
		next: 	a RxmBranch
		predicate: 	[ :char | (enumerable value: char) and: [ predicate value: char ] ]


RxmBranch>>matchAgainst:
	Receiver: a RxmBranch
	Arguments and temporary variables: 
		aMatcher: 	a RxMatcher
	Receiver's instance variables: 
		next: 	a RxmPredicate
		loopback: 	true
		alternative: 	a RxmLink



--- The full stack ---
ReadStream(PositionableStream)>>position:
[ stream position: origPosition ] in RxMatcher>>currentState
RxMatcher>>restoreState:
RxmSubstring>>matchAgainst:
RxmMarker>>matchAgainst:
RxmLink>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmPredicate>>matchAgainst:
RxmBranch>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxmBranch>>matchAgainst:
RxmMarker>>matchAgainst:
RxMatcher>>tryMatch
RxMatcher>>searchStream:
RxMatcher>>matchesOnStream:do:
RxMatcher>>matchesIn:do:
RxMatcher>>matchingRangesIn:
PharoDocCommentNode class>>docCommentRangesIn:
PharoDocCommentNode class>>parseDocComments:
RBComment>>pharoDocCommentNodes
SHRBTextStyler>>styleDocComment:
[ :comment | self styleDocComment: comment ] in SHRBTextStyler>>visitMethodComments:
Array(SequenceableCollection)>>do:
SHRBTextStyler>>visitMethodComments:
SHRBTextStyler>>visitMethodNode:
RBMethodNode>>acceptVisitor:
SHRBTextStyler>>style:ast:
SHRBTextStyler>>privateStyle:
SHRBTextStyler(SHTextStyler)>>style:
[ ^ self styler style: aText ] in RubShoutStylerDecorator>>style:
BlockClosure>>on:do:
RubShoutStylerDecorator>>style:
[ aText addAttribute: self defaultFontChange.
next text: (text := self styler format: aText).
replaceStart := 1.
replaceStop := text size.
self style: text ] in RubShoutStylerDecorator>>text:
BlockClosure>>ensure:
RubParagraph>>disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
Message>>sendTo:
[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
BlockClosure>>on:do:
RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #disableDrawingWhile:
RubShoutStylerDecorator>>text:
RubEditingArea(RubAbstractTextArea)>>privateText:
[ self privateText: stringOrText ] in RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubEditingArea(RubAbstractTextArea)>>handleParagraphChange:
RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubTextScrollPane>>setTextWith:
RubScrolledTextMorph>>setTextWith:
RubScrolledTextMorph>>model:
GLMMorphicPharoMethodRenderer>>morph
GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPharoMethodPresentation:
GLMPharoMethodPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
LazyTabPage>>actualPageMorph
LazyTabGroupMorph>>pageAt:
LazyTabGroupMorph>>updatePageIndex:
LazyTabGroupMorph(TabGroupMorph)>>update:
LazyTabGroupMorph(Object)>>update:with:
MorphChangedWithArguments>>deliverTo:
LazyTabGroupMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
GLMTabSelectorBrick(Morph)>>doAnnounce:
GLMTabSelectorBrick(Morph)>>changed:with:
GLMTabSelectorBrick>>selectedIndex:
LazyTabGroupMorph(TabGroupMorph)>>selectedPageIndex:
[ tabs selectedPageIndex: index ] in GLMMorphicTabbedRenderer>>render:
BlockClosure>>ensure:
GLMAnnouncer>>suspendAllWhile:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.694184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.704184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.713184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.723184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.788184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Array(SequenceableCollection)>>identityIndexOf:ifAbsent:
	Receiver: #(#announcer nil)
	Arguments and temporary variables: 
		anElement: 	#theme
		exceptionBlock: 	[ 0 ]
	Receiver's instance variables: 
#(#announcer nil)

Array(SequenceableCollection)>>identityIndexOf:
	Receiver: #(#announcer nil)
	Arguments and temporary variables: 
		anElement: 	#theme
	Receiver's instance variables: 
#(#announcer nil)

SmallIdentityDictionary>>findIndexForKey:
	Receiver: a SmallIdentityDictionary(#announcer->an Announcer)
	Arguments and temporary variables: 
		aKey: 	#theme
	Receiver's instance variables: 
		keys: 	#(#announcer nil)
		values: 	an Array(an Announcer nil)
		size: 	1


SmallIdentityDictionary(SmallDictionary)>>at:ifAbsent:
	Receiver: a SmallIdentityDictionary(#announcer->an Announcer)
	Arguments and temporary variables: 
		key: 	#theme
		aBlock: 	[ ^ aBlock value ]
		index: 	nil
	Receiver's instance variables: 
		keys: 	#(#announcer nil)
		values: 	an Array(an Announcer nil)
		size: 	1


MorphExtension>>valueOfProperty:ifAbsent:
	Receiver: a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
	Arguments and temporary variables: 
		aSymbol: 	#theme
		aBlock: 	[  ]
	Receiver's instance variables: 
		locked: 	false
		visible: 	true
		sticky: 	false
		balloonText: 	nil
		externalName: 	nil
		eventHandler: 	nil
		otherProperties: 	a SmallIdentityDictionary(#announcer->an Announcer)
		fillStyle: 	nil
		layoutPolicy: 	nil
		layoutFrame: 	nil
		layoutProperties: 	nil
		borderStyle: 	(SimpleBorder width: 0 color: Color transparent)
		cornerStyle: 	nil
		actionMap: 	nil
		clipSubmorphs: 	true


MorphExtension>>valueOfProperty:
	Receiver: a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
	Arguments and temporary variables: 
		aSymbol: 	#theme
	Receiver's instance variables: 
		locked: 	false
		visible: 	true
		sticky: 	false
		balloonText: 	nil
		externalName: 	nil
		eventHandler: 	nil
		otherProperties: 	a SmallIdentityDictionary(#announcer->an Announcer)
		fillStyle: 	nil
		layoutPolicy: 	nil
		layoutFrame: 	nil
		layoutProperties: 	nil
		borderStyle: 	(SimpleBorder width: 0 color: Color transparent)
		cornerStyle: 	nil
		actionMap: 	nil
		clipSubmorphs: 	true


RubScrolledTextMorph(Morph)>>valueOfProperty:
	Receiver: a RubScrolledTextMorph(323644416)
	Arguments and temporary variables: 
		aSymbol: 	#theme
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubAdornmentDisplayer(173630720) a RubTextScrollPane(8582...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(858202112)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(230050048) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(Morph)>>theme
	Receiver: a RubScrolledTextMorph(323644416)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubAdornmentDisplayer(173630720) a RubTextScrollPane(8582...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(858202112)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(230050048) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubTextScrollPane(Morph)>>theme
	Receiver: a RubTextScrollPane(858202112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(19.0@0.0) corner: (50.0@40.0)
		owner: 	a RubScrolledTextMorph(323644416)
		submorphs: 	an Array(a RubScrollBar(393973760) a TransformWithLayoutMorph(825972...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (797002752) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(825972992)
		hScrollbar: 	a RubScrollBar(297073920)
		vScrollbar: 	a RubScrollBar(393973760)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>scrollBarThickness
	Receiver: a RubTextScrollPane(858202112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(19.0@0.0) corner: (50.0@40.0)
		owner: 	a RubScrolledTextMorph(323644416)
		submorphs: 	an Array(a RubScrollBar(393973760) a TransformWithLayoutMorph(825972...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (797002752) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(825972992)
		hScrollbar: 	a RubScrollBar(297073920)
		vScrollbar: 	a RubScrollBar(393973760)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>vResizeScrollbar
	Receiver: a RubTextScrollPane(858202112)
	Arguments and temporary variables: 
		b: 	(19.0@0.0) corner: (50.0@40.0)
	Receiver's instance variables: 
		bounds: 	(19.0@0.0) corner: (50.0@40.0)
		owner: 	a RubScrolledTextMorph(323644416)
		submorphs: 	an Array(a RubScrollBar(393973760) a TransformWithLayoutMorph(825972...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (797002752) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(825972992)
		hScrollbar: 	a RubScrollBar(297073920)
		vScrollbar: 	a RubScrollBar(393973760)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>vUpdateScrollbar
	Receiver: a RubTextScrollPane(858202112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(19.0@0.0) corner: (50.0@40.0)
		owner: 	a RubScrolledTextMorph(323644416)
		submorphs: 	an Array(a RubScrollBar(393973760) a TransformWithLayoutMorph(825972...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (797002752) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(825972992)
		hScrollbar: 	a RubScrollBar(297073920)
		vScrollbar: 	a RubScrollBar(393973760)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>updateScrollbars
	Receiver: a RubTextScrollPane(858202112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(19.0@0.0) corner: (50.0@40.0)
		owner: 	a RubScrolledTextMorph(323644416)
		submorphs: 	an Array(a RubScrollBar(393973760) a TransformWithLayoutMorph(825972...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (797002752) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(825972992)
		hScrollbar: 	a RubScrollBar(297073920)
		vScrollbar: 	a RubScrollBar(393973760)
		drawFocusBorder: 	true


RubTextScrollPane>>updateScrollbars
	Receiver: a RubTextScrollPane(858202112)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(19.0@0.0) corner: (50.0@40.0)
		owner: 	a RubScrolledTextMorph(323644416)
		submorphs: 	an Array(a RubScrollBar(393973760) a TransformWithLayoutMorph(825972...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (797002752) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(825972992)
		hScrollbar: 	a RubScrollBar(297073920)
		vScrollbar: 	a RubScrollBar(393973760)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>extent:
	Receiver: a RubTextScrollPane(858202112)
	Arguments and temporary variables: 
		newExtent: 	(31@40)
		scrollbarChange: 	true
	Receiver's instance variables: 
		bounds: 	(19.0@0.0) corner: (50.0@40.0)
		owner: 	a RubScrolledTextMorph(323644416)
		submorphs: 	an Array(a RubScrollBar(393973760) a TransformWithLayoutMorph(825972...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (797002752) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(825972992)
		hScrollbar: 	a RubScrollBar(297073920)
		vScrollbar: 	a RubScrollBar(393973760)
		drawFocusBorder: 	true


RubTextScrollPane>>extent:
	Receiver: a RubTextScrollPane(858202112)
	Arguments and temporary variables: 
		newExtent: 	(31@40)
	Receiver's instance variables: 
		bounds: 	(19.0@0.0) corner: (50.0@40.0)
		owner: 	a RubScrolledTextMorph(323644416)
		submorphs: 	an Array(a RubScrollBar(393973760) a TransformWithLayoutMorph(825972...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (797002752) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(825972992)
		hScrollbar: 	a RubScrollBar(297073920)
		vScrollbar: 	a RubScrollBar(393973760)
		drawFocusBorder: 	true


RubScrolledTextMorph>>manageLayoutInBounds:
	Receiver: a RubScrolledTextMorph(323644416)
	Arguments and temporary variables: 
		aRectangle: 	(0@0) corner: (50@40)
		myBounds: 	(19@0) corner: (50@40)
		scrollpane: 	a RubTextScrollPane(858202112)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubAdornmentDisplayer(173630720) a RubTextScrollPane(8582...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(858202112)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(230050048) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>manageLayout
	Receiver: a RubScrolledTextMorph(323644416)
	Arguments and temporary variables: 
		ret: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubAdornmentDisplayer(173630720) a RubTextScrollPane(8582...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(858202112)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(230050048) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>withRuler:
	Receiver: a RubScrolledTextMorph(323644416)
	Arguments and temporary variables: 
		aRuler: 	a RubTextSegmentIconDisplayer(230050048)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubAdornmentDisplayer(173630720) a RubTextScrollPane(8582...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(858202112)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(230050048) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>withRulerNamed:
	Receiver: a RubScrolledTextMorph(323644416)
	Arguments and temporary variables: 
		aKey: 	#textSegmentIcons
		cls: 	RubTextSegmentIconDisplayer
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubAdornmentDisplayer(173630720) a RubTextScrollPane(8582...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(858202112)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(230050048) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>withTextSegmentIcons
	Receiver: a RubScrolledTextMorph(323644416)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubAdornmentDisplayer(173630720) a RubTextScrollPane(8582...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(858202112)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(230050048) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>beForSmalltalkCode
	Receiver: a RubScrolledTextMorph(323644416)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubAdornmentDisplayer(173630720) a RubTextScrollPane(8582...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (843065600) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(858202112)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(230050048) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


GLMMorphicPharoMethodRenderer>>morph
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	nil
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=931238144 title='Source' pane=a ...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	nil
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=931238144 title='Source' pane=a ...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicPharoCodeRenderer
		methodDict: 	a MethodDictionary(#methodBindingsStrategy->GLMMorphicPharoMethodRe...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPharoMethodRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'


GLMMorphicRenderer>>renderPharoMethodPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aSmalltalkMethodPresentation: 	a GLMPharoMethodPresentation(id=931238144 title='...etc...
	Receiver's instance variables: 
		window: 	nil


GLMPharoMethodPresentation>>renderGlamoroTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.881184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.891184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.901184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:16.910184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:38.947184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

LargePositiveInteger(LargeInteger)>>-
	Receiver: THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:39.140184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:39.150184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:39.159184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:39.378184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallInteger(Number)>>raisedToInteger:
	Receiver: 10
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:39.722184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:39.731184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:39.948184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054219922184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054219922184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:40.172184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 70 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 91 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 68 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 67 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054220245184


Delay>>wait
	Receiver: a Delay(100 msecs; 66 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054220245184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:40.383184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RubTextSegmentIconDisplayer(Morph)>>borderWidth
	Receiver: a RubTextSegmentIconDisplayer(347395328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (19@40)
		owner: 	a RubScrolledTextMorph(403237888)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (835607808)
		side: 	#left
		previouslyIn: 	nil


RubTextSegmentIconDisplayer(Morph)>>innerBounds
	Receiver: a RubTextSegmentIconDisplayer(347395328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (19@40)
		owner: 	a RubScrolledTextMorph(403237888)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (835607808)
		side: 	#left
		previouslyIn: 	nil


RubTextSegmentIconDisplayer(Morph)>>layoutBounds
	Receiver: a RubTextSegmentIconDisplayer(347395328)
	Arguments and temporary variables: 
		inset: 	0
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (19@40)
		owner: 	a RubScrolledTextMorph(403237888)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (835607808)
		side: 	#left
		previouslyIn: 	nil


[ self doLayoutIn: self layoutBounds ] in RubTextSegmentIconDisplayer(Morph)>>computeFullBounds
	Receiver: a RubTextSegmentIconDisplayer(347395328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (19@40)
		owner: 	a RubScrolledTextMorph(403237888)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (835607808)
		side: 	#left
		previouslyIn: 	nil


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	RubTextSegmentIconDisplayer(Morph)>>computeFullBounds
		startpc: 	69
		numArgs: 	0


RubTextSegmentIconDisplayer(Morph)>>computeFullBounds
	Receiver: a RubTextSegmentIconDisplayer(347395328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (19@40)
		owner: 	a RubScrolledTextMorph(403237888)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (835607808)
		side: 	#left
		previouslyIn: 	nil


RubTextSegmentIconDisplayer(Morph)>>fullBounds
	Receiver: a RubTextSegmentIconDisplayer(347395328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (19@40)
		owner: 	a RubScrolledTextMorph(403237888)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (835607808)
		side: 	#left
		previouslyIn: 	nil


[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in RubScrolledTextMorph(Morph)>>submorphBounds
	Receiver: a RubScrolledTextMorph(403237888)
	Arguments and temporary variables: 
		m: 	a RubTextSegmentIconDisplayer(347395328)
		subBox: 	nil
		box: 	(19@0) corner: (61@42)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(3391...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (23025664) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(616717312)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(347395328) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


Array(SequenceableCollection)>>do:
	Receiver: an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(339111168) a RubTextSegmen...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
	...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(339111168) a RubTextSegmen...etc...

RubScrolledTextMorph(Morph)>>submorphBounds
	Receiver: a RubScrolledTextMorph(403237888)
	Arguments and temporary variables: 
		box: 	(19@0) corner: (61@42)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(3391...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (23025664) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(616717312)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(347395328) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(Morph)>>privateFullBounds
	Receiver: a RubScrolledTextMorph(403237888)
	Arguments and temporary variables: 
		box: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(3391...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (23025664) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(616717312)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(347395328) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(Morph)>>changed
	Receiver: a RubScrolledTextMorph(403237888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(3391...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (23025664) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(616717312)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(347395328) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>resetState
	Receiver: a RubScrolledTextMorph(403237888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(3391...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (23025664) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(616717312)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(347395328) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>setTextWith:
	Receiver: a RubScrolledTextMorph(403237888)
	Arguments and temporary variables: 
		stringOrText: 	a Text for 'newProcess
	"Answer a Process running the code in the...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(3391...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (23025664) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(616717312)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(347395328) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>model:
	Receiver: a RubScrolledTextMorph(403237888)
	Arguments and temporary variables: 
		aModel: 	a GLMRubricSmalltalkTextModel
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a RubTextScrollPane(616717312) a RubAdornmentDisplayer(3391...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (23025664) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(616717312)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(347395328) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


GLMMorphicPharoMethodRenderer>>morph
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	nil
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=599424256 title='Source' pane=a ...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	nil
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=599424256 title='Source' pane=a ...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicPharoCodeRenderer
		methodDict: 	a MethodDictionary(#methodBindingsStrategy->GLMMorphicPharoMethodRe...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPharoMethodRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'


GLMMorphicRenderer>>renderPharoMethodPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aSmalltalkMethodPresentation: 	a GLMPharoMethodPresentation(id=599424256 title='...etc...
	Receiver's instance variables: 
		window: 	nil


GLMPharoMethodPresentation>>renderGlamorouslyOn:
	Receiver: a GLMPharoMethodPresentation(id=599424256 title='Source' pane=a GLMPane(680904704 code))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(680904704 code)
		title: 	'Source'
		titleIcon: 	nil
		transformation: 	[ :x | x ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMPharoMethodPresentation(id=26075392 title='Source' pane=a...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	[ :code | 
code
	selectionInterval: (self session selected...etc...
		cachedDisplayedValue: 	[ self value.
Processor terminateActive ] in BlockClosure...etc...
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		format: 	[ aContext sourceCode ]
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	[ aContext receiver ]
		doItContext: 	[ aContext ]
		textBlock: 	nil
		selectedTextBlock: 	nil
		withLineNumbers: 	nil
		withAnnotation: 	nil
		wrapped: 	nil
		tabWidth: 	nil
		withColumns: 	nil
		textSegments: 	nil
		primarySelectionInterval: 	nil
		withGhostText: 	nil
		highlightSmalltalkContext: 	[ aContext methodClass ]
		variableBindingsBlock: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPharoMethodPresentation(id=599424256 title='Source' pane=a GL...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPharoMethodPresentation(id=599424256 title='Source' pane=a GLMPa...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(305595648)


[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	1
		aPresentation: 	a GLMCompositePresentation(id=442138624 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMPharoMethodPresentation(id=599424256 t...etc...
		each: 	a GLMPharoMethodPresentation(id=599424256 title='Source' pane=a GLMPane(6...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(305595648)


LazyTabPage>>actualPageMorph
	Receiver: a LazyTabPage(731506944)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (96549888)
		borderWidth: 	1
		borderColor: 	Color black
		actualPageMorph: 	nil
		labelMorph: 	'Source'
		lazyPageMorphCreation: 	[ self renderObject: each ]
		toolbar: 	a ToolDockingBarMorph(291147008)


LazyTabGroupMorph>>pageAt:
	Receiver: a LazyTabGroupMorph(305595648)
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a GLMPanelMorph(269498368) a PanelMorph(417132800))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (293827584)
		borderWTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:40.599184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 72 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 90 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 71 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 69 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054220674184


Delay>>wait
	Receiver: a Delay(100 msecs; 68 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054220674184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:40.823184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054220795184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054220795184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:41.048184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Array(SequenceableCollection)>>identityIndexOf:ifAbsent:
	Receiver: #(#roundedCorners nil)
	Arguments and temporary variables: 
		anElement: 	#theme
		exceptionBlock: 	[ 0 ]
	Receiver's instance variables: 
#(#roundedCorners nil)

Array(SequenceableCollection)>>identityIndexOf:
	Receiver: #(#roundedCorners nil)
	Arguments and temporary variables: 
		anElement: 	#theme
	Receiver's instance variables: 
#(#roundedCorners nil)

SmallIdentityDictionary>>findIndexForKey:
	Receiver: a SmallIdentityDictionary(#roundedCorners->#(2 3 4))
	Arguments and temporary variables: 
		aKey: 	#theme
	Receiver's instance variables: 
		keys: 	#(#roundedCorners nil)
		values: 	#(#(2 3 4) nil)
		size: 	1


SmallIdentityDictionary(SmallDictionary)>>at:ifAbsent:
	Receiver: a SmallIdentityDictionary(#roundedCorners->#(2 3 4))
	Arguments and temporary variables: 
		key: 	#theme
		aBlock: 	[ ^ aBlock value ]
		index: 	nil
	Receiver's instance variables: 
		keys: 	#(#roundedCorners nil)
		values: 	#(#(2 3 4) nil)
		size: 	1


MorphExtension>>valueOfProperty:ifAbsent:
	Receiver: a MorphExtension (304627712) [sticky]  [other:  (roundedCorners -> #(2 3 4))]
	Arguments and temporary variables: 
		aSymbol: 	#theme
		aBlock: 	[  ]
	Receiver's instance variables: 
		locked: 	false
		visible: 	true
		sticky: 	true
		balloonText: 	nil
		externalName: 	nil
		eventHandler: 	nil
		otherProperties: 	a SmallIdentityDictionary(#roundedCorners->#(2 3 4))
		fillStyle: 	nil
		layoutPolicy: 	a TableLayout
		layoutFrame: 	nil
		layoutProperties: 	a TableLayoutProperties
		borderStyle: 	(Pharo3TabPanelBorder width: 1 color: (Color r: 0.784 g: 0.784 b: ...etc...
		cornerStyle: 	nil
		actionMap: 	nil
		clipSubmorphs: 	true


MorphExtension>>valueOfProperty:
	Receiver: a MorphExtension (304627712) [sticky]  [other:  (roundedCorners -> #(2 3 4))]
	Arguments and temporary variables: 
		aSymbol: 	#theme
	Receiver's instance variables: 
		locked: 	false
		visible: 	true
		sticky: 	true
		balloonText: 	nil
		externalName: 	nil
		eventHandler: 	nil
		otherProperties: 	a SmallIdentityDictionary(#roundedCorners->#(2 3 4))
		fillStyle: 	nil
		layoutPolicy: 	a TableLayout
		layoutFrame: 	nil
		layoutProperties: 	a TableLayoutProperties
		borderStyle: 	(Pharo3TabPanelBorder width: 1 color: (Color r: 0.784 g: 0.784 b: ...etc...
		cornerStyle: 	nil
		actionMap: 	nil
		clipSubmorphs: 	true


GLMPanelMorph(Morph)>>valueOfProperty:
	Receiver: a GLMPanelMorph(278014208)
	Arguments and temporary variables: 
		aSymbol: 	#theme
	Receiver's instance variables: 
		bounds: 	(0.0@23.0) corner: (145.0@35.0)
		owner: 	a LazyTabGroupMorph(737344512)
		submorphs: 	an Array(a RubScrolledTextMorph(495897856))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (304627712) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


GLMPanelMorph(Morph)>>theme
	Receiver: a GLMPanelMorph(278014208)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@23.0) corner: (145.0@35.0)
		owner: 	a LazyTabGroupMorph(737344512)
		submorphs: 	an Array(a RubScrolledTextMorph(495897856))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (304627712) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


RubScrolledTextMorph(Morph)>>theme
	Receiver: a RubScrolledTextMorph(495897856)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a GLMPanelMorph(278014208)
		submorphs: 	an Array(a RubTextScrollPane(174454784) a RubAdornmentDisplayer(7474...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (700265472) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(174454784)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(747450624))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubTextScrollPane(Morph)>>theme
	Receiver: a RubTextScrollPane(174454784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(495897856)
		submorphs: 	an Array(a RubScrollBar(78730496) a TransformWithLayoutMorph(3767459...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (115292416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(376745984)
		hScrollbar: 	a RubScrollBar(692612096)
		vScrollbar: 	a RubScrollBar(78730496)
		drawFocusBorder: 	true


RubScrollBar(Morph)>>theme
	Receiver: a RubScrollBar(78730496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(32.0@28.0) corner: (74.0@58.0)
		owner: 	a RubTextScrollPane(174454784)
		submorphs: 	an Array(a Morph(297458944) a BorderedMorph(53766144) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (631783680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(174454784)
		slider: 	a BorderedMorph(158639104)
		value: 	0.04817749603803487
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(147547392)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(562372608)
		downButton: 	a BorderedMorph(53766144)
		pagingArea: 	a Morph(297458944)
		scrollDelta: 	0.0009508716323296355
		pageDelta: 	0.009508716323296355
		interval: 	0.009419152276295133
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(Slider)>>initializeSlider
	Receiver: a RubScrollBar(78730496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(32.0@28.0) corner: (74.0@58.0)
		owner: 	a RubTextScrollPane(174454784)
		submorphs: 	an Array(a Morph(297458944) a BorderedMorph(53766144) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (631783680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(174454784)
		slider: 	a BorderedMorph(158639104)
		value: 	0.04817749603803487
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(147547392)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(562372608)
		downButton: 	a BorderedMorph(53766144)
		pagingArea: 	a Morph(297458944)
		scrollDelta: 	0.0009508716323296355
		pageDelta: 	0.009508716323296355
		interval: 	0.009419152276295133
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(ScrollBar)>>initializeSlider
	Receiver: a RubScrollBar(78730496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(32.0@28.0) corner: (74.0@58.0)
		owner: 	a RubTextScrollPane(174454784)
		submorphs: 	an Array(a Morph(297458944) a BorderedMorph(53766144) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (631783680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(174454784)
		slider: 	a BorderedMorph(158639104)
		value: 	0.04817749603803487
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(147547392)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(562372608)
		downButton: 	a BorderedMorph(53766144)
		pagingArea: 	a Morph(297458944)
		scrollDelta: 	0.0009508716323296355
		pageDelta: 	0.009508716323296355
		interval: 	0.009419152276295133
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(Slider)>>extent:
	Receiver: a RubScrollBar(78730496)
	Arguments and temporary variables: 
		newExtent: 	(42@8)
	Receiver's instance variables: 
		bounds: 	(32.0@28.0) corner: (74.0@58.0)
		owner: 	a RubTextScrollPane(174454784)
		submorphs: 	an Array(a Morph(297458944) a BorderedMorph(53766144) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (631783680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(174454784)
		slider: 	a BorderedMorph(158639104)
		value: 	0.04817749603803487
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(147547392)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(562372608)
		downButton: 	a BorderedMorph(53766144)
		pagingArea: 	a Morph(297458944)
		scrollDelta: 	0.0009508716323296355
		pageDelta: 	0.009508716323296355
		interval: 	0.009419152276295133
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(ScrollBar)>>extent:
	Receiver: a RubScrollBar(78730496)
	Arguments and temporary variables: 
		p: 	(13.0@2.0)
	Receiver's instance variables: 
		bounds: 	(32.0@28.0) corner: (74.0@58.0)
		owner: 	a RubTextScrollPane(174454784)
		submorphs: 	an Array(a Morph(297458944) a BorderedMorph(53766144) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (631783680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(174454784)
		slider: 	a BorderedMorph(158639104)
		value: 	0.04817749603803487
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(147547392)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(562372608)
		downButton: 	a BorderedMorph(53766144)
		pagingArea: 	a Morph(297458944)
		scrollDelta: 	0.0009508716323296355
		pageDelta: 	0.009508716323296355
		interval: 	0.009419152276295133
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(Morph)>>bounds:
	Receiver: a RubScrollBar(78730496)
	Arguments and temporary variables: 
		newBounds: 	(127.0@28.0) corner: (140.0@30.0)
		oldExtent: 	(13.0@42.0)
		newExtent: 	(13.0@2.0)
	Receiver's instance variables: 
		bounds: 	(32.0@28.0) corner: (74.0@58.0)
		owner: 	a RubTextScrollPane(174454784)
		submorphs: 	an Array(a Morph(297458944) a BorderedMorph(53766144) a BorderedMorp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (631783680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(174454784)
		slider: 	a BorderedMorph(158639104)
		value: 	0.04817749603803487
		setValueSelector: 	#vScrollbarValue:
		sliderShadow: 	a BorderedMorph(147547392)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(562372608)
		downButton: 	a BorderedMorph(53766144)
		pagingArea: 	a Morph(297458944)
		scrollDelta: 	0.0009508716323296355
		pageDelta: 	0.009508716323296355
		interval: 	0.009419152276295133
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubTextScrollPane(GeneralScrollPane)>>vResizeScrollbar
	Receiver: a RubTextScrollPane(174454784)
	Arguments and temporary variables: 
		b: 	(127.0@28.0) corner: (140.0@30.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(495897856)
		submorphs: 	an Array(a RubScrollBar(78730496) a TransformWithLayoutMorph(3767459...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (115292416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(376745984)
		hScrollbar: 	a RubScrollBar(692612096)
		vScrollbar: 	a RubScrollBar(78730496)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>vShowScrollbar
	Receiver: a RubTextScrollPane(174454784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(495897856)
		submorphs: 	an Array(a RubScrollBar(78730496) a TransformWithLayoutMorph(3767459...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (115292416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(376745984)
		hScrollbar: 	a RubScrollBar(692612096)
		vScrollbar: 	a RubScrollBar(78730496)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>vUpdateScrollbar
	Receiver: a RubTextScrollPane(174454784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(495897856)
		submorphs: 	an Array(a RubScrollBar(78730496) a TransformWithLayoutMorph(3767459...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (115292416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(376745984)
		hScrollbar: 	a RubScrollBar(692612096)
		vScrollbar: 	a RubScrollBar(78730496)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>updateScrollbars
	Receiver: a RubTextScrollPane(174454784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(495897856)
		submorphs: 	an Array(a RubScrollBar(78730496) a TransformWithLayoutMorph(3767459...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (115292416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(376745984)
		hScrollbar: 	a RubScrollBar(692612096)
		vScrollbar: 	a RubScrollBar(78730496)
		drawFocusBorder: 	true


RubTextScrollPane>>updateScrollbars
	Receiver: a RubTextScrollPane(174454784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(495897856)
		submorphs: 	an Array(a RubScrollBar(78730496) a TransformWithLayoutMorph(3767459...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (115292416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(376745984)
		hScrollbar: 	a RubScrollBar(692612096)
		vScrollbar: 	a RubScrollBar(78730496)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>extent:
	Receiver: a RubTextScrollPane(174454784)
	Arguments and temporary variables: 
		newExtent: 	(135.0@2.0)
		scrollbarChange: 	false
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(495897856)
		submorphs: 	an Array(a RubScrollBar(78730496) a TransformWithLayoutMorph(3767459...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (115292416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(376745984)
		hScrollbar: 	a RubScrollBar(692612096)
		vScrollbar: 	a RubScrollBar(78730496)
		drawFocusBorder: 	true


RubTextScrollPane>>extent:
	Receiver: a RubTextScrollPane(174454784)
	Arguments and temporary variables: 
		newExtent: 	(135.0@2.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a RubScrolledTextMorph(495897856)
		submorphs: 	an Array(a RubScrollBar(78730496) a TransformWithLayoutMorph(3767459...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (115292416) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(376745984)
		hScrollbar: 	a RubScrollBar(692612096)
		vScrollbar: 	a RubScrollBar(78730496)
		drawFocusBorder: 	true


RubScrolledTextMorph>>manageLayoutInBounds:
	Receiver: a RubScrolledTextMorph(495897856)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (140.0@30.0)
		myBounds: 	(5.0@28.0) corner: (140.0@30.0)
		scrollpane: 	a RubTextScrollPane(174454784)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a GLMPanelMorph(278014208)
		submorphs: 	an Array(a RubTextScrollPane(174454784) a RubAdornmentDisplayer(7474...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (700265472) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(174454784)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(747450624))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>manageLayout
	Receiver: a RubScrolledTextMorph(495897856)
	Arguments and temporary variables: 
		ret: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a GLMPanelMorph(278014208)
		submorphs: 	an Array(a RubTextScrollPane(174454784) a RubAdornmentDisplayer(7474...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (700265472) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(174454784)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(747450624))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>extent:
	Receiver: a RubScrolledTextMorph(495897856)
	Arguments and temporary variables: 
		aPoint: 	(135.0@2.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a GLMPanelMorph(278014208)
		submorphs: 	an Array(a RubTextScrollPane(174454784) a RubAdornmentDisplayer(7474...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (700265472) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(174454784)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(747450624))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(Morph)>>bounds:
	Receiver: a RubScrolledTextMorph(495897856)
	Arguments and temporary variables: 
		newBounds: 	(5.0@28.0) corner: (140.0@30.0)
		oldExtent: 	(40.0@30.0)
		newExtent: 	(135.0@2.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@30.0)
		owner: 	a GLMPanelMorph(278014208)
		submorphs: 	an Array(a RubTextScrollPane(174454784) a RubAdornmentDisplayer(7474...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (700265472) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(174454784)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(747450624))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(MorpTHERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:41.233184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 13 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 12 msecs remaining) a Delay(100 msec...etc...
		activeDelay: 	a Delay(100 msecs; 12 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	a Delay(100 msecs)
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 11 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054221250184


Delay>>wait
	Receiver: a Delay(100 msecs; 9 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054221250184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
11 May 2019 10:03:41.438184 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054221356184


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(100 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735054221356184


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #DoIt not found in MethodDictionary
11 May 2019 10:04:38.66726 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MethodDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: #addSubclass:->Undefine...etc...
	Arguments and temporary variables: 
		aKey: 	#DoIt
	Receiver's instance variables: 
		tally: 	55
		array: 	{UndefinedObject>>#phlowValue:withEnoughArguments:. UndefinedObject>>#if...etc...


[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: #addSubclass:->Undefine...etc...
	Arguments and temporary variables: 
		key: 	#DoIt
	Receiver's instance variables: 
		tally: 	55
		array: 	{UndefinedObject>>#phlowValue:withEnoughArguments:. UndefinedObject>>#if...etc...


MethodDictionary>>at:ifAbsent:
	Receiver: a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: #addSubclass:->Undefine...etc...
	Arguments and temporary variables: 
		key: 	#DoIt
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	34
	Receiver's instance variables: 
		tally: 	55
		array: 	{UndefinedObject>>#phlowValue:withEnoughArguments:. UndefinedObject>>#if...etc...


MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: #addSubclass:->Undefine...etc...
	Arguments and temporary variables: 
		key: 	#DoIt
	Receiver's instance variables: 
		tally: 	55
		array: 	{UndefinedObject>>#phlowValue:withEnoughArguments:. UndefinedObject>>#if...etc...


UndefinedObject class(Behavior)>>compiledMethodAt:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		selector: 	#DoIt
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


UndefinedObject class(Behavior)>>>>
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		selector: 	#DoIt
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


RBMethodNode>>method
	Receiver: DoIt
	^ 100000 factorial asMethodConstant
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 3
		selector: 	#DoIt
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(^ 100000 factorial asMethodConstant)
		source: 	'DoIt
	^ 100000 factorial asMethodConstant'
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMessageNode(RBProgramNode)>>link:
	Receiver: RBMessageNode(100000 factorial asMethodConstant)
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
	Receiver's instance variables: 
		parent: 	RBReturnNode(^ 100000 factorial asMethodConstant)
		properties: 	a SmallDictionary(#links->an OrderedCollection(a MetaLink))
		parentheses: 	nil
		receiver: 	RBMessageNode(100000 factorial)
		selector: 	#asMethodConstant
		keywordsPositions: 	an IntegerArray(26)
		arguments: 	#()


LargePositiveInteger(Object)>>asMethodConstant
	Receiver: THERE_BE_DRAGONS_HERE
Instance of GtExampleWithResult did not understand #do:
14 May 2019 11:23:35.746428 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

GtExampleWithResult(Object)>>doesNotUnderstand: #do:
	Receiver: a GtExampleWithResult
	Arguments and temporary variables: 
		aMessage: 	do: [ :v | self nextPut: v ]
		exception: 	MessageNotUnderstood: GtExampleWithResult>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
		example: 	a GtExample
		result: 	nil


LimitedWriteStream(Stream)>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


LimitedWriteStream(WriteStream)>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
		newEnd: 	nil
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


LimitedWriteStream>>nextPutAll:
	Receiver: a LimitedWriteStream
	Arguments and temporary variables: 
		aCollection: 	a GtExampleWithResult
		newEnd: 	nil
	Receiver's instance variables: 
		collection: 	'a FTBasicItem[                                                    ...etc...
		position: 	14
		readLimit: 	0
		writeLimit: 	100
		limit: 	50000
		limitBlock: 	[ ^ stream contents ]


FTBasicItem>>printOn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aStream: 	a LimitedWriteStream
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


[ :s | self printOn: s ] in FTBasicItem(Object)>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		s: 	a LimitedWriteStream
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


String class(SequenceableCollection class)>>streamContents:limitedTo:
	Receiver: String
	Arguments and temporary variables: 
		stream: 	a LimitedWriteStream
		blockWithArg: 	[ :s | self printOn: s ]
		sizeLimit: 	50000
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 315)
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings-Base'


FTBasicItem(Object)>>printStringLimitedTo:using:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
		printBlock: 	[ :s | self printOn: s ]
		limitedString: 	nil
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


FTBasicItem(Object)>>printStringLimitedTo:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		limit: 	50000
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


FTBasicItem(Object)>>printString
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		children: 	an OrderedCollection()
		isExpanded: 	false
		data: 	a GtExampleWithResult
		depth: 	0
		recentlyChanged: 	false


[ :each | 'Looking inside ' , each printString ] in FTVisibleItemsStrategy>>filter
	Receiver: a FTVisibleItemsStrategy
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dataSource: 	a GLMFastTreeTableDataSource
		pattern: 	'ьуеф'


BlockClosure>>cull:
	Receiver: [ :each | 'Looking inside ' , each printString ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	FTVisibleItemsStrategy>>filter
		startpc: 	199
		numArgs: 	1


[ :each | 
| newLabel |
"Special handling for first and last element"
(count = 0
	or: [ count + 1 = size
			or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
	ifTrue: [ bar current: count.
		oldLabel = (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
			ifFalse: [ bar label: newLabel.
				oldLabel := newLabel ].
		lastUpdate := Time millisecondClockValue ].
aBlock value: each.
count := count + 1 ] in [ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ]THERE_BE_DRAGONS_HERE
Error: This Delay has already been scheduled.
17 May 2019 7:55:51.727435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler(Object)>>error:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aString: 	'This Delay has already been scheduled.'
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(1000 msecs; 927 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 35 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(1000 msecs; 923 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(1000 msecs; 922 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 30 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(1000 msecs; 920 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735564952658435


Delay>>wait
	Receiver: a Delay(1000 msecs; 918 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735564952658435


[ :each :rowIndex | 
copy := self columns at: rowIndex.
rowMarker := each.
[ copy belowNeighbour row ~= 0 ]
	whileTrue: [ copy := copy belowNeighbour.
		vis selectModel: copy.
		rowMarker
			rightNeighbour:
				(TWSparseMatrixNode new
					value: copy value
					row: copy column
					column: copy row).
		(columnMarkers at: copy row)
			belowNeighbour: rowMarker rightNeighbour.
		vis composer replaceElementsInGroup: #result with: result.
		vis composer move: #result onTheRightOf: #source.
		vis composer view canvas focusOnCenterScaled.
		vis delay wait.
		vis deselectModel: copy.
		columnMarkers at: copy row put: rowMarker rightNeighbour.
		rowMarker := rowMarker rightNeighbour ].
rowMarker rightNeighbour: each.
vis composer replaceElementsInGroup: #result with: result.
vis composer move: #result onTheRightOf: #source.
vis composer view canvas focusOnCenterScaled.
vis delay wait ] in [ columnMarkers := result columns copy.
result rows
	withIndexDo: [ :each :rowIndex | 
		copy := self columns at: rowIndex.
		rowMarker := each.
		[ copy belowNeighbour row ~= 0 ]
			whileTrue: [ copy := copy belowNeighbour.
				vis selectModel: copy.
				rowMarker
					rightNeighbour:
						(TWSparseMatrixNode new
							value: copy value
							row: copy column
							column: copy row).
				(columnMarkers at: copy row)
					belowNeighbour: rowMarker rightNeighbour.
				vis composer replaceElementsInGroup: #result with: result.
				vis composer move: #result onTheRightOf: #source.
				vis composer view canvas focusOnCenterScaled.
				vis delay wait.
				vis deselectModel: copy.
				columnMarkers at: copy row put: rowMarker rightNeighbour.
				rowMarker := rowMarker rightNeighbour ].
		rowMarker rightNeighbour: each.
		vis composeTHERE_BE_DRAGONS_HERE
KeyNotFound: key #nowProcessing not found in Dictionary
17 May 2019 8:57:25.664435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		aKey: 	#nowProcessing
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #result->a RTGroup() #r...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#nowProcessing
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #result->a RTGroup() #r...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#nowProcessing
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #result->a RTGroup() #r...etc...


Dictionary>>at:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#nowProcessing
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #result->a RTGroup() #r...etc...


RTComposer>>move:above:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		name1: 	#nowProcessing
		name2: 	#right
		g1: 	nil
		g2: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


COOSparseMatrixOperationVisualizer>>setPositionsForAddition
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selectColor: 	nil
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
"initialize the view for the updates not to fail"
self initializeAdditionView.
self setPositionsForAddition.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value ].
resultMatrixUpdateLinkFirst selector: #value.
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		"uninstall the initial block which suspends the process"
		resultMatrixUpdateLinkLast uninstall.
		"replace it with a new one without the suspend"
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink metaObject: [ self updateResultWith: value ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write.
		"signal to root multiplication method that we finished initializing"
		semaphore signal.
		"wait for input before starting the operation"
		process suspend ].
resultMatrixUpdateLinkLast selector: #value.
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write.
metaLinks
	addAll:
		{resultMatrixUpdateLinkFirst.
		resultMatrixUpdateLinkLast} ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksForResultOn:inMethod:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		methodName: 	#+
		resultMatrixLink: 	nil
		value: 	a COOSparseMatrix
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		selectColor: 	nil
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	a COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		result: 	a COOSparseMatrix
		newNode: 	nil
		continue: 	nil
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#+
		anArray: 	an Array(a COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode continue...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#+
		linkCount: 	25


[ leftMatrix + rightMatrix ] in [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		selectColor: 	nil
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>ensure:
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 
		aBlock: 	[ self unlink ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOS...etc...
		startpc: 	125
		numArgs: 	0


[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		selectColor: 	nil
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	121
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>move:above:
COOSparseMatrixOperationVisualizer>>setPositionsForAddition
[ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
"initialize the view for the updates not to fail"
self initializeAdditionView.
self setPositionsForAddition.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value ].
resultMatrixUpdateLinkFirst selector: #value.
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		"uninstall the initial block which suspends the process"
		resultMatrixUpdateLinkLast uninstall.
		"replace it with a new one without the suspend"
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink metaObject: [ self updateResultWith: value ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write.
		"signal to root multiplication method that we finished initializing"
		semaphore signal.
		"wait for input before starting the operation"
		process suspend ].
resultMatrixUpdateLinkLast selector: #value.
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write.
metaLinks
	addAll:
		{resultMatrixUpdateLinkFirst.
		resultMatrixUpdateLinkLast} ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksForResultOn:inMethod:
a subclass of COOSparseMatrix>>+
ReflectiveMethod>>run:with:in:
[ leftMatrix + rightMatrix ] in [ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>ensure:
[ [ leftMatrix + rightMatrix ]
	ensure: [ self unlink ] ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
17 May 2019 9:00:54.708435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		selectColor: 	nil
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	144
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	144
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		selectColor: 	nil
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


COOSparseMatrixOperationVisualizer class>>exampleAddition
	Receiver: COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		col: 	#(#(1 -1 0 0) #(0 3 0 0) #(1 0 2 1) #(0 0 0 0))
		col2: 	#(#(1 0 0 3) #(0 0 0 -1) #(0 0 0 0) #(0 0 1 0))
		coo: 	an a subclass of COOSparseMatrix
		coo2: 	a COOSparseMatrix
		cooanimvis: 	a COOSparseMatrixOperationVisualizer
	Receiver's instance variables: 
		superclass: 	MatrixOperationVisualizer
		methodDict: 	a MethodDictionary(#initialize->COOSparseMatrixOperationVisualizer>...etc...
		format: 	65556
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#COOSparseMatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ COOSparseMatrixOperationVisualizer exampleAddition
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(913309184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(913309184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@69)
		owner: 	a TransformWithLayoutMorph(849963776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(356069120) a RubCursor(810955008...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (501263872) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(280663808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(810955008)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(11238144))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(169057024)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	11591022
		lastStepMessage: 	nil
		lastCycleTime: 	11591053
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	11591022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	11591022
		lastStepMessage: 	nil
		lastCycleTime: 	11591053
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	11591022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	11591022
		lastStepMessage: 	nil
		lastCycleTime: 	11591053
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(810955008)))
		lastAlarmTime: 	11591022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125THERE_BE_DRAGONS_HERE
User Interrupt
17 May 2019 9:00:55.218435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(18 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	18
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735568855214435


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(18 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	18
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735568855214435


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		milliSecs: 	20
		wait: 	18
		wait2: 	18
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	11802814
		lastStepMessage: 	nil
		lastCycleTime: 	11802812
		alarms: 	a Heap()
		lastAlarmTime: 	11802814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(111682816) named: Pl...etc...
		lastStepTime: 	11802814
		lastStepMessage: 	nil
		lastCycleTime: 	11802812
		alarms: 	a Heap()
		lastAlarmTime: 	11802814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
17 May 2019 9:00:55.264435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakArray class>>finalizationProcess
	Receiver: WeakArray
	Arguments and temporary variables: 
		throttle: 	a Semaphore()
		firstMourner: 	nil
	Receiver's instance variables: 
		superclass: 	Array
		methodDict: 	a MethodDictionary()
		format: 	262144
		layout: 	a WeakLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#WeakArray
		classPool: 	a Dictionary(#FinalizationDependents->a WeakArray(a WeakRegistry(<th...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Weak-Base'


[ self finalizationProcess ] in WeakArray class>>restartFinalizationProcess
	Receiver: WeakArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Array
		methodDict: 	a MethodDictionary()
		format: 	262144
		layout: 	a WeakLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#WeakArray
		classPool: 	a Dictionary(#FinalizationDependents->a WeakArray(a WeakRegistry(<th...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Weak-Base'


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ self finalizationProcess ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WeakArray class>>restartFinalizationProcess
		startpc: 	219
		numArgs: 	0



--- The full stack ---
WeakArray class>>finalizationProcess
[ self finalizationProcess ] in WeakArray class>>restartFinalizationProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
17 May 2019 9:00:55.280435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
17 May 2019 9:00:55.342435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>at:ifAbsentPut:
	Receiver: a Dictionary($M->#(10.218002319335938 10.218002319335938) $S->#(10.218002319335938 10.2180...etc...
	Arguments and temporary variables: 
		key: 	$h
		aBlock: 	[ super
	widthAndKernedWidthOfLeft: leftCharacter
	right: rightCharacte...etc...
	Receiver's instance variables: 
		tally: 	7
		array: 	{Character null->#(10.218002319335938 10.218002319335938). $M->#(10.2180...etc...


FreeTypeFont>>widthAndKernedWidthOfLeft:right:into:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		leftCharacter: 	$W
		rightCharacterOrNil: 	$h
		aTwoElementArray: 	#(nil nil)
		privateArray: 	nil
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r04194DB0)<0x4194DB0>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($i->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


FreeTypeFont>>widthOfString:from:to:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		aString: 	'Where is?'
		startIndex: 	1
		stopIndex: 	9
		char: 	$W
		nextChar: 	$h
		resultX: 	0
		glyph: 	nil
		a: 	#(nil nil)
		subPixelPosition: 	nil
		i: 	1
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r04194DB0)<0x4194DB0>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($i->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


FreeTypeFont(AbstractFont)>>widthOfString:
	Receiver: FreeTypeFont('Source Sans Pro' 'Regular' 10)
	Arguments and temporary variables: 
		aString: 	'Where is?'
	Receiver's instance variables: 
		face: 	a FreeTypeFace(@ 16r04194DB0)<0x4194DB0>[Source Sans Pro Regular]
		pointSize: 	10
		simulatedEmphasis: 	nil
		pixelSize: 	13
		widthAndKernedWidthCache: 	a Dictionary($"->a Dictionary($i->#(5.525009155273437...etc...
		cachedHeight: 	17
		cachedAscent: 	13
		cachedDescent: 	4
		subPixelPositioned: 	true
		symbolFont: 	false
		mutex: 	a Semaphore()


LogicalFont>>widthOfString:
	Receiver: a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 10
 realFont: Free...etc...
	Arguments and temporary variables: 
		aString: 	'Where is?'
	Receiver's instance variables: 
		realFont: 	FreeTypeFont('Source Sans Pro' 'Regular' 10)
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	10
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 po...etc...
		italicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 ...etc...
		boldItalicDerivative: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: n...etc...


LabelMorph(StringMorph)>>measureContents
	Receiver: a LabelMorph(78309888)'Where is?'
	Arguments and temporary variables: 
		f: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 10
 ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	nil
		emphasis: 	0
		contents: 	'Where is?'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph(StringMorph)>>fitContents
	Receiver: a LabelMorph(78309888)'Where is?'
	Arguments and temporary variables: 
		newBounds: 	nil
		boundsChanged: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	nil
		emphasis: 	0
		contents: 	'Where is?'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph(StringMorph)>>contents:
	Receiver: a LabelMorph(78309888)'Where is?'
	Arguments and temporary variables: 
		newContents: 	'Where is?'
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	nil
		emphasis: 	0
		contents: 	'Where is?'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph(StringMorph)>>initWithContents:font:emphasis:
	Receiver: a LabelMorph(78309888)'Where is?'
	Arguments and temporary variables: 
		aString: 	'Where is?'
		aFont: 	nil
		emphasisCode: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	nil
		emphasis: 	0
		contents: 	'Where is?'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph>>initWithContents:font:emphasis:
	Receiver: a LabelMorph(78309888)'Where is?'
	Arguments and temporary variables: 
		aString: 	'Where is?'
		aFont: 	nil
		emphasisCode: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	nil
		emphasis: 	0
		contents: 	'Where is?'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		getEnabledSelector: 	nil
		getTextSelector: 	nil
		enabled: 	true
		model: 	nil
		disabledStyle: 	#plain


LabelMorph class(StringMorph class)>>contents:font:emphasis:
	Receiver: LabelMorph
	Arguments and temporary variables: 
		aString: 	'Where is?'
		aFont: 	nil
		aCodeOrTextEmphasis: 	0
	Receiver's instance variables: 
		superclass: 	StringMorph
		methodDict: 	a MethodDictionary(#adoptPaneColor:->LabelMorph>>#adoptPaneColor: #...etc...
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{FuzzyLabelMorph. IceTipURLLabelMorph}
		name: 	#LabelMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets-Basic'
		announcer: 	nil
		users: 	nil


LabelMorph class(StringMorph class)>>contents:font:
	Receiver: LabelMorph
	Arguments and temporary variables: 
		aString: 	'Where is?'
		aFont: 	nil
	Receiver's instance variables: 
		superclass: 	StringMorph
		methodDict: 	a MethodDictionary(#adoptPaneColor:->LabelMorph>>#adoptPaneColor: #...etc...
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{FuzzyLabelMorph. IceTipURLLabelMorph}
		name: 	#LabelMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets-Basic'
		announcer: 	nil
		users: 	nil


LabelMorph class(StringMorph class)>>contents:
	Receiver: LabelMorph
	Arguments and temporary variables: 
		aString: 	'Where is?'
	Receiver's instance variables: 
		superclass: 	StringMorph
		methodDict: 	a MethodDictionary(#adoptPaneColor:->LabelMorph>>#adoptPaneColor: #...etc...
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{FuzzyLabelMorph. IceTipURLLabelMorph}
		name: 	#LabelMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets-Basic'
		announcer: 	nil
		users: 	nil


PharoLightTheme(UITheme)>>buttonLabelForText:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aTextOrString: 	'Where is?'
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a FTTableMorph(418252544)->a BorderedMorph(859753984)
		windowActiveDropShadowStyle: 	#diffuse


PharoLightTheme(UITheme)>>buttonLabelFor:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aButton: 	a GLMPluggableButtonMorph(862766592)
		label: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a FTTableMorph(418252544)->a BorderedMorph(859753984)
		windowActiveDropShadowStyle: 	#diffuse


GLMPluggableButtonMorph(PluggableButtonMorph)>>newLabel
	Receiver: a GLMPluggableButtonMorph(862766592)
	Arguments and temporary variables: 
		lbl: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (24@24)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (597646080) [balloonText] 
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Where is?'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(859871744)nil
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


GLMPluggableButtonMorph(PluggableButtonMorph)>>newLabel:
	Receiver: a GLMPluggableButtonMorph(862766592)
	Arguments and temporary variables: 
		aFont: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (24@24)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (597646080) [balloonText] 
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Where is?'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(859871744)nil
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


GLMPluggableButtonMorph(PluggableButtonMorph)>>label:font:
	Receiver: a GLMPluggableButtonMorph(862766592)
	Arguments and temporary variables: 
		aStringOrTextOrMorph: 	'Where is?'
		aFont: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: ...etc...
		containerMorph: 	an AlignmentMorph(105540096)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (24@24)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (597646080) [balloonText] 
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Where is?'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(859871744)nil
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


GLMMorphicActionRenderer>>render:
	Receiver: a GLMMorphicActionRenderer
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
17 May 2019 9:00:55.424435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
17 May 2019 9:00:55.433435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
17 May 2019 9:00:55.442435 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 May 2019 3:36:31.259471 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	50
		myList: 	nil
		name: 	'WeakArray Finalization Process'
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


WeakArray class>>restartFinalizationProcess
	Receiver: WeakArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Array
		methodDict: 	a MethodDictionary()
		format: 	262144
		layout: 	a WeakLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#WeakArray
		classPool: 	a Dictionary(#FinalizationDependents->a WeakArray(a WeakRegistry(<th...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Weak-Base'


WeakArray class>>startUp:
	Receiver: WeakArray
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		superclass: 	Array
		methodDict: 	a MethodDictionary()
		format: 	262144
		layout: 	a WeakLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#WeakArray
		classPool: 	a Dictionary(#FinalizationDependents->a WeakArray(a WeakRegistry(<th...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Weak-Base'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WeakArray)
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WeakArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(WeakArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-21T15:36:31.221471+03:00


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(WeakArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-21T15:36:31.221471+03:00


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 ]
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(WeakArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-21T15:36:31.221471+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-21T15:36:31.221471+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-21T15:36:31.221471+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2019-05-21T15:36:31.221471+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
Process>>terminate
WeakArray class>>restartFinalizationProcess
WeakArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This Delay has already been scheduled.
21 May 2019 3:56:27.532471 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler(Object)>>error:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aString: 	'This Delay has already been scheduled.'
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 28 msecs remaining) a Delay(1000 mse...etc...
		activeDelay: 	a Delay(15 msecs; 3 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(847875840) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(1000 msecs; 918 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(1000 msecs; 917 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 21 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(1000 msecs; 915 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735896188463471


Delay>>wait
	Receiver: a Delay(1000 msecs; 911 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3735896188463471


[ self isEmpty
	ifFalse: [ marker := first.
		vis selectModel: marker.
		tempList := SortedCollection new
			sortBlock: [ :left :right | 
				left row < right row
					or: [ left row = right row and: [ left column < right column ] ] ].
		[ marker isNotNil ]
			whileTrue: [ (vis composer hasGroup: #transpositionList)
					ifTrue: [ vis composer removeGroup: #transpositionList ].
				tempList
					add:
						(COOSparseMatrixNode
							row: marker column
							column: marker row
							value: marker value).
				COOSparseMatrixVisualizer
					onNodeCollection: tempList
					withView: vis view.
				vis composer group: #transposiTHERE_BE_DRAGONS_HERE
Warning
21 May 2019 5:20:26.176471 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ComposableMorph(Object)>>deprecated:on:in:
	Receiver: a ComposableMorph(977905152)
	Arguments and temporary variables: 
		anExplanationString: 	'Use UIManager default chooseForSaveFileReference:extensio...etc...
		date: 	'26 October 2018'
		version: 	#Pharo7
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (332615680)
		borderWidth: 	1
		borderColor: 	#inset
		model: 	nil


ComposableMorph>>fileSave:extensions:path:
	Receiver: a ComposableMorph(977905152)
	Arguments and temporary variables: 
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (332615680)
		borderWidth: 	1
		borderColor: 	#inset
		model: 	nil


GLMPNGExportingAction(GLMAbstractExportingAction)>>execute
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		fileName: 	nil
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a...etc...


GLMPNGExportingAction(GLMRoassal2Action)>>executeOn:
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a...etc...


[ :r | inst executeOn: r ] in [ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			icon: inst icon
			entitled: inst title ]
	ifFalse: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			entitled: inst title
			categorized: inst category ] ] in GLMRoassal2Action class>>initializePresentation:
	Receiver: GLMRoassal2Action
	Arguments and temporary variables: 
		aRoassal2Presentation: 	nil
		instances: 	nil
		orderedInstances: 	nil
		inst: 	a GLMPNGExportingAction
		r: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPane(111129600...etc...
	Receiver's instance variables: 
		superclass: 	RTObject
		methodDict: 	a MethodDictionary(#category->GLMRoassal2Action>>#category #execute...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMAbstractExportingAction. GLMAbstractSetContextAction. GLMAddLab...etc...
		name: 	#GLMRoassal2Action
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2GT-Glamour-Actions'


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :r | inst executeOn: r ]
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a GL...etc...
	Receiver's instance variables: 
		outerContext: 	[ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			a...etc...
		startpc: 	173
		numArgs: 	1


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


GLMGenericAction(GLMAction)>>morphicActOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(429187072)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1590@334) mouseUp 83966281 nil]
		w: 	a WorldMorph(428085248) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		owner: 	a MenuMorph(1050600960)
		submorphs: 	#()
		fullBounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		color: 	Color black
		extension: 	a MorphExtension (290074624)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offTHERE_BE_DRAGONS_HERE
Warning
21 May 2019 5:20:28.265471 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PharoLightTheme(Object)>>deprecated:on:in:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		anExplanationString: 	'Use UIManager default chooseForSaveFileReference:extensio...etc...
		date: 	'26 October 2018'
		version: 	#Pharo7
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(645385728)->a BorderedMorph(580668416)
		windowActiveDropShadowStyle: 	#diffuse


PharoLightTheme(UITheme)>>fileSaveIn:title:extensions:path:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aThemedMorph: 	a ComposableMorph(977905152)
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(645385728)->a BorderedMorph(580668416)
		windowActiveDropShadowStyle: 	#diffuse


ComposableMorph>>fileSave:extensions:path:
	Receiver: a ComposableMorph(977905152)
	Arguments and temporary variables: 
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (332615680)
		borderWidth: 	1
		borderColor: 	#inset
		model: 	nil


GLMPNGExportingAction(GLMAbstractExportingAction)>>execute
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		fileName: 	nil
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a...etc...


GLMPNGExportingAction(GLMRoassal2Action)>>executeOn:
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a...etc...


[ :r | inst executeOn: r ] in [ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			icon: inst icon
			entitled: inst title ]
	ifFalse: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			entitled: inst title
			categorized: inst category ] ] in GLMRoassal2Action class>>initializePresentation:
	Receiver: GLMRoassal2Action
	Arguments and temporary variables: 
		aRoassal2Presentation: 	nil
		instances: 	nil
		orderedInstances: 	nil
		inst: 	a GLMPNGExportingAction
		r: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPane(111129600...etc...
	Receiver's instance variables: 
		superclass: 	RTObject
		methodDict: 	a MethodDictionary(#category->GLMRoassal2Action>>#category #execute...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMAbstractExportingAction. GLMAbstractSetContextAction. GLMAddLab...etc...
		name: 	#GLMRoassal2Action
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2GT-Glamour-Actions'


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :r | inst executeOn: r ]
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a GL...etc...
	Receiver's instance variables: 
		outerContext: 	[ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			a...etc...
		startpc: 	173
		numArgs: 	1


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


GLMGenericAction(GLMAction)>>morphicActOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(429187072)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1590@334) mouseUp 83966281 nil]
		w: 	a WorldMorph(428085248) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		owner: 	a MenuMorph(1050600960)
		submorphs: 	#()
		fullBounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		color: 	Color black
		extension: 	a MorphExtension (290074624)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(429187072)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1590@334) mouseUp 83966281 nil]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		owner: 	a MenuMorph(1050600960)
		submorphs: 	#()
		fullBounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		color: 	Color black
		extension: 	a MorphExtension (290074624)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(429187072)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1590@334) mouseUp 83966281 nil]
	Receiver's instance variables: 
		bounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		owner: 	a MenuMorph(1050600960)
		suTHERE_BE_DRAGONS_HERE
Warning
21 May 2019 5:20:29.357471 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PharoLightTheme(Object)>>deprecated:on:in:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		anExplanationString: 	'Use UIManager default chooseForSaveFileReference:extensio...etc...
		date: 	'26 October 2018'
		version: 	#Pharo7
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(823141376)->a BorderedMorph(735693824)
		windowActiveDropShadowStyle: 	#diffuse


PharoLightTheme(UITheme)>>fileSaveIn:title:initialAnswer:extensions:path:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aThemedMorph: 	a ComposableMorph(977905152)
		title: 	'Enter the PNG file name'
		aFileName: 	''
		exts: 	#('png')
		path: 	nil
		fd: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(823141376)->a BorderedMorph(735693824)
		windowActiveDropShadowStyle: 	#diffuse


PharoLightTheme(UITheme)>>fileSaveIn:title:extensions:path:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aThemedMorph: 	a ComposableMorph(977905152)
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a PluggableButtonMorph(823141376)->a BorderedMorph(735693824)
		windowActiveDropShadowStyle: 	#diffuse


ComposableMorph>>fileSave:extensions:path:
	Receiver: a ComposableMorph(977905152)
	Arguments and temporary variables: 
		title: 	'Enter the PNG file name'
		exts: 	#('png')
		path: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (332615680)
		borderWidth: 	1
		borderColor: 	#inset
		model: 	nil


GLMPNGExportingAction(GLMAbstractExportingAction)>>execute
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		fileName: 	nil
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a...etc...


GLMPNGExportingAction(GLMRoassal2Action)>>executeOn:
	Receiver: a GLMPNGExportingAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		roassalPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a...etc...


[ :r | inst executeOn: r ] in [ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			icon: inst icon
			entitled: inst title ]
	ifFalse: [ aRoassal2Presentation
			act: [ :r | inst executeOn: r ]
			entitled: inst title
			categorized: inst category ] ] in GLMRoassal2Action class>>initializePresentation:
	Receiver: GLMRoassal2Action
	Arguments and temporary variables: 
		aRoassal2Presentation: 	nil
		instances: 	nil
		orderedInstances: 	nil
		inst: 	a GLMPNGExportingAction
		r: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPane(111129600...etc...
	Receiver's instance variables: 
		superclass: 	RTObject
		methodDict: 	a MethodDictionary(#category->GLMRoassal2Action>>#category #execute...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{GLMAbstractExportingAction. GLMAbstractSetContextAction. GLMAddLab...etc...
		name: 	#GLMRoassal2Action
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2GT-Glamour-Actions'


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :r | inst executeOn: r ]
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a GL...etc...
	Receiver's instance variables: 
		outerContext: 	[ :inst | 
inst icon notNil
	ifTrue: [ aRoassal2Presentation
			a...etc...
		startpc: 	173
		numArgs: 	1


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


GLMGenericAction(GLMAction)>>morphicActOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMRoassal2Presentation(id=491153408 title='View' pane=a GLMPa...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		action: 	[ :r | inst executeOn: r ]
		title: 	'Export to PNG'
		help: 	nil
		keymap: 	nil
		position: 	nil
		category: 	'Export as...'
		icon: 	nil
		condition: 	nil
		enabledCondition: 	nil
		separatorAfter: 	nil
		separatorBefore: 	nil
		shouldShowTitle: 	nil


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(429187072)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1590@334) mouseUp 83966281 nil]
		w: 	a WorldMorph(428085248) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		owner: 	a MenuMorph(1050600960)
		submorphs: 	#()
		fullBounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		color: 	Color black
		extension: 	a MorphExtension (290074624)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(429187072)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1590@334) mouseUp 83966281 nil]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		owner: 	a MenuMorph(1050600960)
		submorphs: 	#()
		fullBounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		color: 	Color black
		extension: 	a MorphExtension (290074624)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(429187072)'Export to PNG'
	Arguments and temporary variables: 
		evt: 	[(1590@334) mouseUp 83966281 nil]
	Receiver's instance variables: 
		bounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		owner: 	a MenuMorph(1050600960)
		submorphs: 	#()
		fullBounds: 	(1478.0@325.0) corner: (1706.0@342.0)
		color: 	Color black
		extension: 	a MorphExtension (290074624)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Export to PNG'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a GLMGenericAction
		selector: 	#morphicActOn:
		arguments: 	an Array(a GLMRoassal2Presentation(id=491153408 title='View' pane=a ...etc...
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelectTHERE_BE_DRAGONS_HERE
AssertionFailure: Project location must exist!
20 September 2019 1:50:47.316894 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceTipLocalRepositoryPanel(Object)>>assert:description:
	Receiver: an IceTipLocalRepositoryPanel
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Project location must exist!'
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipDirectoryPresenter an OkCancelToolbar...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Import from existing clone' ]
		projectLocation: 	an IceTipDirectoryPresenter
		remoteLabel: 	nil
		remoteInputText: 	nil
		spacePanel: 	a MorphicGenericAdapter
		repository: 	nil


IceTipLocalRepositoryPanel>>validate
	Receiver: an IceTipLocalRepositoryPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipDirectoryPresenter an OkCancelToolbar...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Import from existing clone' ]
		projectLocation: 	an IceTipDirectoryPresenter
		remoteLabel: 	nil
		remoteInputText: 	nil
		spacePanel: 	a MorphicGenericAdapter
		repository: 	nil


[ dialog validate.
self repositoryModel updateLocation: dialog location.
true ] in IceTipRepairLocateRepository>>basicExecute
	Receiver: an IceTipRepairLocateRepository
	Arguments and temporary variables: 
		dialog: 	an IceTipLocalRepositoryPanel
	Receiver's instance variables: 
		repository: 	nil
		successBlock: 	nil
		repositoryModel: 	an IceTipCachedModel(an IceTipRepositoryModel)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(a ButtonPresenter a ButtonPresenter a DialogWi...etc...
		owner: 	a SpecDialogWindow(147173120) named: Import from existing clone
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonPresenter
		okAction: 	a NewValueHolder[ [ dialog validate.
self repositoryModel updateLocat...etc...
		cancelButton: 	a ButtonPresenter
		cancelAction: 	a NewValueHolder[ [ true ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonPresenter>>performAction
	Receiver: a ButtonPresenter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announcer: 	an Announcer
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self defaultTransferFor...etc...
		color: 	a NewValueHolder[ nil ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuPresenter ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(153522944))
		announcer: 	nil
		model: 	a ButtonPresenter
		widget: 	a PluggableButtonMorph(153522944)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(153522944)
	Arguments and temporary variables: 
		event: 	[(564@250) mouseUp 239776041 nil]
	Receiver's instance variables: 
		bounds: 	(528.0@233.0) corner: (600.0@261.0)
		owner: 	a PanelMorph(990588160)
		submorphs: 	an Array(an AlignmentMorph(60399104))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (304775680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(618235648)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(153522944)
	Arguments and temporary variables: 
		evt: 	[(564@250) mouseUp 239776041 nil]
		all: 	an Array(a PluggableButtonMorph(168080640) a PluggableButtonMorph(15352294...etc...
		m: 	a PluggableButtonMorph(153522944)
	Receiver's instance variables: 
		bounds: 	(528.0@233.0) corner: (600.0@261.0)
		owner: 	a PanelMorph(990588160)
		submorphs: 	an Array(an AlignmentMorph(60399104))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (304775680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'OkTHERE_BE_DRAGONS_HERE
User Interrupt
20 September 2019 3:20:58.589894 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Alien class>>invokeCallbackContext:
	Receiver: Alien
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ByteArray
		methodDict: 	a MethodDictionary(#address->Alien>>#address #addressField->Alien>>...etc...
		format: 	1048576
		layout: 	a ByteLayout
		organization: 	a ClassOrganization
		subclasses: 	{FFICallbackReturnValue. FFICallbackThunk. VMCallbackContext32. VMC...etc...
		name: 	#Alien
		classPool: 	a Dictionary(#GCMallocedAliens->an AlienWeakTable #LoadedLibraries->...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Alien-Core'
		lifoCallbackSemaphore: 	a Semaphore(a Process in Alien class>>invokeCallbackCont...etc...


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitSafeFFICalloutAPI(FFICalloutAPI)>>function:module:
	Receiver: a LGitSafeFFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStrin...etc...
		moduleNameOrLibrary: 	LGitLibrary
		sender: 	LGitRemote>>remote_push:refspecs:opts:
		ffiMethod: 	LGitRemote>>#remote_push:refspecs:opts:
		ffiMethodSelector: 	#call:options:
	Receiver's instance variables: 
		context: 	LGitRemote>>remote_push:refspecs:opts:
		options: 	#(#optCoerceNilToNull)
		callingConvention: 	#cdecl


LGitRemote(LGitExternalObject)>>call:options:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		fnSpec: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStringArray #* #...etc...
		options: 	#(#optCoerceNilToNull)
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


[ self remote_push: self refspecs: refspecs opts: pushOptions ] in LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		callBlock: 	[ self remote_push: self refspecs: refspecs opts: pushOptions ]
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


IceGitLocalBranch>>pushBranchToRemote:gitRemote:progress:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBranchToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.
"Push tags"
self
	pushTagsToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.

"Verify we have an stream"
self setUpstreamIfMissing: aRemote ] in IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBr...etc...
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENONFASTFORWARD
		handlerAction: 	[ :e | 
e
	resignalAs:
		(IceRemoteDesynchronized new
			remote:...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>basicPushTo:
		startpc: 	159
		numArgs: 	0


IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ self basicPushTo: aRemote ] in IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ self basicPushTo: aRemote ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor oTHERE_BE_DRAGONS_HERE
Instance of IceExternalJob did not understand #isRunning
20 September 2019 3:20:59.465894 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceExternalJob(Object)>>doesNotUnderstand: #isRunning
	Receiver: an IceExternalJob
	Arguments and temporary variables: 
		aMessage: 	isRunning
		exception: 	MessageNotUnderstood: IceExternalJob>>isRunning
		resumeValue: 	nil
	Receiver's instance variables: 
		title: 	'Pushing... (0/50)'
		started: 	true
		min: 	0
		max: 	50
		current: 	0


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(764771328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(12.0@64.0) corner: (188.0@97.0)
		owner: 	a SystemProgressMorph(813356800)
		submorphs: 	an Array(a StringMorph(832326144)'Pushing... (0/50)' a JobProgressBa...etc...
		fullBounds: 	(12@64) corner: (188@97)
		color: 	Color transparent
		extension: 	a MorphExtension (197287936) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(385601024)
		endValue: 	nil
		hasResult: 	false
		job: 	an IceExternalJob
		labelMorph: 	a StringMorph(832326144)'Pushing... (0/50)'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(179@90) mouseUp 244995916 nil]
		sourceMorph: 	a JobProgressBarMorph(385601024)
		arity: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(764771328)
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(179@90) mouseUp 244995916 nil]
		eventType: 	#mouseUp
		sourceMorph: 	a JobProgressBarMorph(385601024)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(179@90) mouseUp 244995916 nil]
		eventType: 	#mouseUp
		sourceMorph: 	a JobProgressBarMorph(385601024)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(179@90) mouseUp 244995916 nil]
		sourceMorph: 	a JobProgressBarMorph(385601024)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>mouseUp:
	Receiver: a JobProgressBarMorph(385601024)
	Arguments and temporary variables: 
		evt: 	[(179@90) mouseUp 244995916 nil]
	Receiver's instance variables: 
		bounds: 	(12.0@81.0) corner: (188.0@97.0)
		owner: 	a JobProgressMorph(764771328)
		submorphs: 	an Array(a ProgressBarMorph(1017363200) an ImageMorph(51962624))
		fullBounds: 	(12@81) corner: (188@97)
		color: 	Color transparent
		extension: 	a MorphExtension (558765824) [eventHandler = a MorphicEventHandler] ...etc...
		progressBar: 	a ProgressBarMorph(1017363200)


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(385601024)
	Arguments and temporary variables: 
		anEvent: 	[(179@90) mouseUp 244995916 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(12.0@81.0) corner: (188.0@97.0)
		owner: 	a JobProgressMorph(764771328)
		submorphs: 	an Array(a ProgressBarMorph(1017363200) an ImageMorph(51962624))
		fullBounds: 	(12@81) corner: (188@97)
		color: 	Color transparent
		extension: 	a MorphExtension (558765824) [eventHandler = a MorphicEventHandler] ...etc...
		progressBar: 	a ProgressBarMorph(1017363200)


MouseButtonEvent>>sentTo:
	Receiver: [(179@90) mouseUp 244995916 nil]
	Arguments and temporary variables: 
		anObject: 	a JobProgressBarMorph(385601024)
	Receiver's instance variables: 
		timeStamp: 	244995916
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(179@90)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(385601024)
	Arguments and temporary variables: 
		anEvent: 	[(179@90) mouseUp 244995916 nil]
	Receiver's instance variables: 
		bounds: 	(12.0@81.0) corner: (188.0@97.0)
		owner: 	a JobProgressMorph(764771328)
		submorphs: 	an Array(a ProgressBarMorph(1017363200) an ImageMorph(51962624))
		fullBounds: 	(12@81) corner: (188@97)
		color: 	Color transparent
		extension: 	a MorphExtension (558765824) [eventHandler = a MorphicEventHandler] ...etc...
		progressBar: 	a ProgressBarMorph(1017363200)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(385601024)
	Arguments and temporary variables: 
		anEvent: 	[(179@90) mouseUp 244995916 nil]
	Receiver's instance variables: 
		bounds: 	(12.0@81.0) corner: (188.0@97.0)
		owner: 	a JobProgressMorph(764771328)
		submorphs: 	an Array(a ProgressBarMorph(1017363200) an ImageMorph(51962624))
		fullBounds: 	(12@81) corner: (188@97)
		color: 	Color transparent
		extension: 	a MorphExtension (558765824) [eventHandler = a MorphicEventHandler] ...etc...
		progressBar: 	a ProgressBarMorph(1017363200)


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		anEvent: 	[(179@90) mouseUp 244995916 nil]
		focusHolder: 	a JobProgressBarMorph(385601024)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(179@90.0) corner: (195@106.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(179@90.0) corner: (195@106.0)
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(23273984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(179@90) mouseUp 244995916 nil]
		targetOffset: 	(167.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 244995916 179 90 0 0 1 1)
		lastKeyScanCode: 	240
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(428085248) [world]
		priorHand: 	a HandMorph(628388864)
		priorEvent: 	[(179@90) mouseOver red 244995838 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(179@90) mouseUp 244995916 nil]
		focusHolder: 	a JobProgressBarMorph(385601024)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(179@90.0) corner: (195@106.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(1THERE_BE_DRAGONS_HERE
Debug
20 September 2019 3:21:00.313894 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Alien class>>invokeCallbackContext:
	Receiver: Alien
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ByteArray
		methodDict: 	a MethodDictionary(#address->Alien>>#address #addressField->Alien>>...etc...
		format: 	1048576
		layout: 	a ByteLayout
		organization: 	a ClassOrganization
		subclasses: 	{FFICallbackReturnValue. FFICallbackThunk. VMCallbackContext32. VMC...etc...
		name: 	#Alien
		classPool: 	a Dictionary(#GCMallocedAliens->an AlienWeakTable #LoadedLibraries->...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Alien-Core'
		lifoCallbackSemaphore: 	a Semaphore()


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitSafeFFICalloutAPI(FFICalloutAPI)>>function:module:
	Receiver: a LGitSafeFFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStrin...etc...
		moduleNameOrLibrary: 	LGitLibrary
		sender: 	LGitRemote>>remote_push:refspecs:opts:
		ffiMethod: 	LGitRemote>>#remote_push:refspecs:opts:
		ffiMethodSelector: 	#call:options:
	Receiver's instance variables: 
		context: 	LGitRemote>>remote_push:refspecs:opts:
		options: 	#(#optCoerceNilToNull)
		callingConvention: 	#cdecl


LGitRemote(LGitExternalObject)>>call:options:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		fnSpec: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStringArray #* #...etc...
		options: 	#(#optCoerceNilToNull)
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


[ self remote_push: self refspecs: refspecs opts: pushOptions ] in LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		callBlock: 	[ self remote_push: self refspecs: refspecs opts: pushOptions ]
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


IceGitLocalBranch>>pushBranchToRemote:gitRemote:progress:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBranchToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.
"Push tags"
self
	pushTagsToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.

"Verify we have an stream"
self setUpstreamIfMissing: aRemote ] in IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBr...etc...
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENONFASTFORWARD
		handlerAction: 	[ :e | 
e
	resignalAs:
		(IceRemoteDesynchronized new
			remote:...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>basicPushTo:
		startpc: 	159
		numArgs: 	0


IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ self basicPushTo: aRemote ] in IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ self basicPushTo: aRemote ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>pushTo:
		startpc: 	47
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ self basicPushTo: aRemote ]
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 - 64bit (stabl...etc...
		commitCache: 	a LRUCache(#30 30/30 [ 1 ] 80%)
		handle: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 - 64b...etc...


IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


IceGitLocalBranch(IceLocalBranch)>>push
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


IceLibgitRepository(IceRepository)>>push
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 - 64bit (stabl...etc...
		commitCache: 	a LRUCache(#30 30/30 [ 1 ] 80%)
		handle: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 - 64b...etc...


[ self repository push ] in IceTipPushAction>>basicExecute
	Receiver: an IceTipPushAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		successBlock: 	nil


[ :bar | 
bar label: aString.
aBlock value ] in MorphicUIManager(UIManager)>>informUser:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aString: 	'Pushing...'
		aBlock: 	[ self repository push ]
		bar: 	a Job
	Receiver's instance variables: 
		activeTranscript: 	nil


[ :bar | aBlock value: bar ] in MorphicUIManager>>informUserDuring:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aBlock: 	[ :bar | 
bar label: aString.
aBlock value ]
		bar: 	a Job
	Receiver's instance variables: 
		activeTranscript: 	nil


BlockClosure>>cull:
	Receiver: [ :bar | aBlock value: bar ]
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>informUserDuring:
		startpc: 	58
		numArgs: 	1


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
THERE_BE_DRAGONS_HERE
Debug
20 September 2019 3:21:09.970894 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Alien class>>invokeCallbackContext:
	Receiver: Alien
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ByteArray
		methodDict: 	a MethodDictionary(#address->Alien>>#address #addressField->Alien>>...etc...
		format: 	1048576
		layout: 	a ByteLayout
		organization: 	a ClassOrganization
		subclasses: 	{FFICallbackReturnValue. FFICallbackThunk. VMCallbackContext32. VMC...etc...
		name: 	#Alien
		classPool: 	a Dictionary(#GCMallocedAliens->an AlienWeakTable #LoadedLibraries->...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Alien-Core'
		lifoCallbackSemaphore: 	a Semaphore()


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitSafeFFICalloutAPI(FFICalloutAPI)>>function:module:
	Receiver: a LGitSafeFFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStrin...etc...
		moduleNameOrLibrary: 	LGitLibrary
		sender: 	LGitRemote>>remote_push:refspecs:opts:
		ffiMethod: 	LGitRemote>>#remote_push:refspecs:opts:
		ffiMethodSelector: 	#call:options:
	Receiver's instance variables: 
		context: 	LGitRemote>>remote_push:refspecs:opts:
		options: 	#(#optCoerceNilToNull)
		callingConvention: 	#cdecl


LGitRemote(LGitExternalObject)>>call:options:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		fnSpec: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStringArray #* #...etc...
		options: 	#(#optCoerceNilToNull)
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


[ self remote_push: self refspecs: refspecs opts: pushOptions ] in LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		callBlock: 	[ self remote_push: self refspecs: refspecs opts: pushOptions ]
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r10AA5C80
		repository: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 -...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


IceGitLocalBranch>>pushBranchToRemote:gitRemote:progress:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBranchToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.
"Push tags"
self
	pushTagsToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.

"Verify we have an stream"
self setUpstreamIfMissing: aRemote ] in IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBr...etc...
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENONFASTFORWARD
		handlerAction: 	[ :e | 
e
	resignalAs:
		(IceRemoteDesynchronized new
			remote:...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>basicPushTo:
		startpc: 	159
		numArgs: 	0


IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ self basicPushTo: aRemote ] in IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ self basicPushTo: aRemote ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>pushTo:
		startpc: 	47
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ self basicPushTo: aRemote ]
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 - 64bit (stabl...etc...
		commitCache: 	a LRUCache(#30 30/30 [ 1 ] 80%)
		handle: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 - 64b...etc...


IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


IceGitLocalBranch(IceLocalBranch)>>push
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


IceLibgitRepository(IceRepository)>>push
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 67%)
		location: 	File @ C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 - 64bit (stabl...etc...
		commitCache: 	a LRUCache(#30 30/30 [ 1 ] 80%)
		handle: 	a LGitRepository (C:\Users\ykorm\Documents\Pharo\images\Pharo 7.0 - 64b...etc...


[ self repository push ] in IceTipPushAction>>basicExecute
	Receiver: an IceTipPushAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		successBlock: 	nil


[ :bar | 
bar label: aString.
aBlock value ] in MorphicUIManager(UIManager)>>informUser:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aString: 	'Pushing...'
		aBlock: 	[ self repository push ]
		bar: 	a Job
	Receiver's instance variables: 
		activeTranscript: 	nil


[ :bar | aBlock value: bar ] in MorphicUIManager>>informUserDuring:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		aBlock: 	[ :bar | 
bar label: aString.
aBlock value ]
		bar: 	a Job
	Receiver's instance variables: 
		activeTranscript: 	nil


BlockClosure>>cull:
	Receiver: [ :bar | aBlock value: bar ]
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>informUserDuring:
		startpc: 	58
		numArgs: 	1


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | aBlock value: bar ]
		currentValue: 	1
		min: 	1
		max: 	100
		title: 	'Pushing...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in Alien class>>invokeCallbackContext:


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in Alien class>>invokeCallbackContext:
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of IceExternalJob did not understand #isRunning
20 September 2019 3:21:11.974894 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceExternalJob(Object)>>doesNotUnderstand: #isRunning
	Receiver: an IceExternalJob
	Arguments and temporary variables: 
		aMessage: 	isRunning
		exception: 	MessageNotUnderstood: IceExternalJob>>isRunning
		resumeValue: 	nil
	Receiver's instance variables: 
		title: 	'Pushing... (0/50)'
		started: 	true
		min: 	0
		max: 	50
		current: 	0


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(764771328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(434.0@229.0) corner: (610.0@262.0)
		owner: 	a SystemProgressMorph(813356800)
		submorphs: 	an Array(a StringMorph(832326144)'Pushing... (0/50)' a JobProgressBa...etc...
		fullBounds: 	(434@229.0) corner: (610@262.0)
		color: 	Color transparent
		extension: 	a MorphExtension (197287936) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(385601024)
		endValue: 	nil
		hasResult: 	false
		job: 	an IceExternalJob
		labelMorph: 	a StringMorph(832326144)'Pushing... (0/50)'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(603@254) mouseUp 245200713 nil]
		sourceMorph: 	a JobProgressBarMorph(385601024)
		arity: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(764771328)
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(603@254) mouseUp 245200713 nil]
		eventType: 	#mouseUp
		sourceMorph: 	a JobProgressBarMorph(385601024)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(603@254) mouseUp 245200713 nil]
		eventType: 	#mouseUp
		sourceMorph: 	a JobProgressBarMorph(385601024)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(603@254) mouseUp 245200713 nil]
		sourceMorph: 	a JobProgressBarMorph(385601024)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>mouseUp:
	Receiver: a JobProgressBarMorph(385601024)
	Arguments and temporary variables: 
		evt: 	[(603@254) mouseUp 245200713 nil]
	Receiver's instance variables: 
		bounds: 	(434.0@246.0) corner: (610.0@262.0)
		owner: 	a JobProgressMorph(764771328)
		submorphs: 	an Array(a ProgressBarMorph(1017363200) an ImageMorph(51962624))
		fullBounds: 	(434@246.0) corner: (610@262.0)
		color: 	Color transparent
		extension: 	a MorphExtension (558765824) [eventHandler = a MorphicEventHandler] ...etc...
		progressBar: 	a ProgressBarMorph(1017363200)


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(385601024)
	Arguments and temporary variables: 
		anEvent: 	[(603@254) mouseUp 245200713 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(434.0@246.0) corner: (610.0@262.0)
		owner: 	a JobProgressMorph(764771328)
		submorphs: 	an Array(a ProgressBarMorph(1017363200) an ImageMorph(51962624))
		fullBounds: 	(434@246.0) corner: (610@262.0)
		color: 	Color transparent
		extension: 	a MorphExtension (558765824) [eventHandler = a MorphicEventHandler] ...etc...
		progressBar: 	a ProgressBarMorph(1017363200)


MouseButtonEvent>>sentTo:
	Receiver: [(603@254) mouseUp 245200713 nil]
	Arguments and temporary variables: 
		anObject: 	a JobProgressBarMorph(385601024)
	Receiver's instance variables: 
		timeStamp: 	245200713
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(603@254)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(385601024)
	Arguments and temporary variables: 
		anEvent: 	[(603@254) mouseUp 245200713 nil]
	Receiver's instance variables: 
		bounds: 	(434.0@246.0) corner: (610.0@262.0)
		owner: 	a JobProgressMorph(764771328)
		submorphs: 	an Array(a ProgressBarMorph(1017363200) an ImageMorph(51962624))
		fullBounds: 	(434@246.0) corner: (610@262.0)
		color: 	Color transparent
		extension: 	a MorphExtension (558765824) [eventHandler = a MorphicEventHandler] ...etc...
		progressBar: 	a ProgressBarMorph(1017363200)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(385601024)
	Arguments and temporary variables: 
		anEvent: 	[(603@254) mouseUp 245200713 nil]
	Receiver's instance variables: 
		bounds: 	(434.0@246.0) corner: (610.0@262.0)
		owner: 	a JobProgressMorph(764771328)
		submorphs: 	an Array(a ProgressBarMorph(1017363200) an ImageMorph(51962624))
		fullBounds: 	(434@246.0) corner: (610@262.0)
		color: 	Color transparent
		extension: 	a MorphExtension (558765824) [eventHandler = a MorphicEventHandler] ...etc...
		progressBar: 	a ProgressBarMorph(1017363200)


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		anEvent: 	[(603@254) mouseUp 245200713 nil]
		focusHolder: 	a JobProgressBarMorph(385601024)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(603@254.0) corner: (619@270.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(603@254.0) corner: (619@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(168269568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(603@254) mouseUp 245200713 nil]
		targetOffset: 	(169.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 245200713 603 254 0 0 1 1)
		lastKeyScanCode: 	240
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(428085248) [world]
		priorHand: 	a HandMorph(628388864)
		priorEvent: 	[(603@254) mouseOver red 245200634 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a Syste...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(603@254) mouseUp 245200713 nil]
		focusHolder: 	a JobProgressBarMorph(385601024)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(603@254.0) corner: (619@270.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(603@254.0) corner: (619@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(168269568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(603@254) mouseUp 245200713 nil]
		targetOffset: 	(169.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 245200713 603 254 0 0 1 1)
		lastKeyScanCode: 	240
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		anEvent: 	[(603@254) mouseUp 245200713 nil]
		focusHolder: 	a JobProgressBarMorph(385601024)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(603@254.0) corner: (619@270.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(603@254.0) corner: (619@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(168269568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(603@254) mouseUp 245200713 nil]
		targetOffset: 	(169.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 245200713 603 254 0 0 1 1)
		lastKeyScanCode: 	240
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(628388864)
	Arguments and temporary variables: 
		anEvent: 	[(603@254) mouseUp 245200713 nil]
	Receiver's instance variables: 
		bounds: 	(603@254.0) corner: (619@270.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(603@254.0) corner: (619@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (728701696)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(1682695THERE_BE_DRAGONS_HERE
DuplicatedSlotName: Slot #'elementSize' appeared twice in LinkedDataVisualizer
23 September 2019 12:03:45.532022 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ :other | 
other name = current name
	ifTrue: [ DuplicatedSlotName new
			oldSlot: current;
			newSlot: other;
			host: host;
			signal ] ] in FixedLayout(PointerLayout)>>checkSlotNames
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		slots: 	an OrderedCollection(#view => InstanceVariableSlot #source => InstanceVa...etc...
		other: 	#elementSize => InstanceVariableSlot
		current: 	#elementSize => InstanceVariableSlot
	Receiver's instance variables: 
		host: 	LinkedDataVisualizer
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope(#view => InstanceVariableSlot #source => Instance...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(#view => InstanceVariableSlot #source => InstanceVariableSlot #elemen...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :other | 
other name = current name
	ifTrue: [ DuplicatedSlotName new...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	{#view => InstanceVariableSlot. #source => InstanceVariableSlot. #elemen...etc...
		firstIndex: 	1
		lastIndex: 	11


FixedLayout(PointerLayout)>>checkSlotNames
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		slots: 	an OrderedCollection(#view => InstanceVariableSlot #source => InstanceVa...etc...
		current: 	#elementSize => InstanceVariableSlot
	Receiver's instance variables: 
		host: 	LinkedDataVisualizer
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope(#view => InstanceVariableSlot #source => Instance...etc...


FixedLayout(PointerLayout)>>checkSanity
	Receiver: a FixedLayout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		host: 	LinkedDataVisualizer
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope(#view => InstanceVariableSlot #source => Instance...etc...


LinkedDataVisualizer class(ClassDescription)>>superclass:withLayoutType:slots:
	Receiver: LinkedDataVisualizer
	Arguments and temporary variables: 
		aSuperclass: 	Object
		layoutType: 	FixedLayout
		slotArray: 	{#view => InstanceVariableSlot. #source => InstanceVariableSlot. #el...etc...
		superLayout: 	a FixedLayout
		newScope: 	a LayoutClassScope(#view => InstanceVariableSlot #source => InstanceV...etc...
		newLayout: 	a FixedLayout
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	nil
		format: 	nil
		layout: 	nil
		organization: 	nil
		subclasses: 	nil
		name: 	#LinkedDataVisualizer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	nil


ShDefaultBuilderEnhancer>>configureClass:superclass:withLayoutType:slots:
	Receiver: a ShDefaultBuilderEnhancer
	Arguments and temporary variables: 
		newClass: 	LinkedDataVisualizer
		superclass: 	Object
		layoutType: 	FixedLayout
		slots: 	{#view => InstanceVariableSlot. #source => InstanceVariableSlot. #elemen...etc...
	Receiver's instance variables: 
a ShDefaultBuilderEnhancer

ShiftClassBuilder>>createClass
	Receiver: a ShiftClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		buildEnvironment: 	a ShSmalltalkGlobalsEnvironment
		superclassName: 	#Object
		name: 	#LinkedDataVisualizer
		layoutDefinition: 	a ShLayoutDefinition
		comment: 	nil
		commentStamp: 	nil
		superclass: 	Object
		category: 	'LNU-SparseMatrix-Visual'
		newMetaclass: 	LinkedDataVisualizer class
		newClass: 	LinkedDataVisualizer
		oldClass: 	LinkedDataVisualizer
		oldMetaclass: 	LinkedDataVisualizer class
		builderEnhancer: 	a ShDefaultBuilderEnhancer
		metaclassClass: 	nil
		extensibleProperties: 	a Dictionary()
		changeComparers: 	an OrderedCollection(ShSharedPoolChangeDetector ShSharedVariab...etc...
		changes: 	a Set(a ShClassChanged a ShInstanceShapeChanged)
		metaSuperclass: 	nil


ShiftClassBuilder>>build
	Receiver: a ShiftClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		buildEnvironment: 	a ShSmalltalkGlobalsEnvironment
		superclassName: 	#Object
		name: 	#LinkedDataVisualizer
		layoutDefinition: 	a ShLayoutDefinition
		comment: 	nil
		commentStamp: 	nil
		superclass: 	Object
		category: 	'LNU-SparseMatrix-Visual'
		newMetaclass: 	LinkedDataVisualizer class
		newClass: 	LinkedDataVisualizer
		oldClass: 	LinkedDataVisualizer
		oldMetaclass: 	LinkedDataVisualizer class
		builderEnhancer: 	a ShDefaultBuilderEnhancer
		metaclassClass: 	nilTHERE_BE_DRAGONS_HERE
KeyNotFound: key #header not found in Dictionary
24 September 2019 11:04:04.575061 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#data->Color blue #highlight->Color yellow #label->Color white #select->Color...etc...
	Arguments and temporary variables: 
		aKey: 	#header
	Receiver's instance variables: 
		tally: 	4
		array: 	{#highlight->Color yellow. #select->Color red. nil. #data->Color blue. n...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#data->Color blue #highlight->Color yellow #label->Color white #select->Color...etc...
	Arguments and temporary variables: 
		key: 	#header
	Receiver's instance variables: 
		tally: 	4
		array: 	{#highlight->Color yellow. #select->Color red. nil. #data->Color blue. n...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#data->Color blue #highlight->Color yellow #label->Color white #select->Color...etc...
	Arguments and temporary variables: 
		key: 	#header
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	4
		array: 	{#highlight->Color yellow. #select->Color red. nil. #data->Color blue. n...etc...


Dictionary>>at:
	Receiver: a Dictionary(#data->Color blue #highlight->Color yellow #label->Color white #select->Color...etc...
	Arguments and temporary variables: 
		key: 	#header
	Receiver's instance variables: 
		tally: 	4
		array: 	{#highlight->Color yellow. #select->Color red. nil. #data->Color blue. n...etc...


LinkedDataVisualizer>>getDefaultHeaderElementShape
	Receiver: a LinkedDataVisualizer
	Arguments and temporary variables: 
		box: 	nil
		valueLabel: 	nil
		indexLabel: 	nil
	Receiver's instance variables: 
		gap: 	35
		elementSize: 	30
		colors: 	a Dictionary(#data->Color blue #highlight->Color yellow #label->Color w...etc...
		shapes: 	nil
		operation: 	nil
		operands: 	nil
		process: 	nil
		operationBlock: 	nil
		composer: 	nil
		namedGroups: 	nil
		backgroundGroups: 	nil
		metaLinks: 	nil
		delay: 	nil
		semaphore: 	nil
		linkMessages: 	nil


LinkedDataVisualizer>>initialize
	Receiver: a LinkedDataVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gap: 	35
		elementSize: 	30
		colors: 	a Dictionary(#data->Color blue #highlight->Color yellow #label->Color w...etc...
		shapes: 	nil
		operation: 	nil
		operands: 	nil
		process: 	nil
		operationBlock: 	nil
		composer: 	nil
		namedGroups: 	nil
		backgroundGroups: 	nil
		metaLinks: 	nil
		delay: 	nil
		semaphore: 	nil
		linkMessages: 	nil


LinkedDataVisualizer class(Behavior)>>new
	Receiver: LinkedDataVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#display:->LinkedDataVisualizer>>#display: #draw...etc...
		format: 	65551
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#LinkedDataVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(210077440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(210077440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(232151808)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(210077440)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1225@126)
		owner: 	a TransformWithLayoutMorph(308954368)
		submorphs: 	an Array(a RubCursor(77062400) a RubPrimarySelectionMorph(229272832)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (255654656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(56553216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(77062400)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(750530304))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(232151808)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(76326656))(a DropListM...etc...
		lastStepTime: 	1637378
		lastStepMessage: 	nil
		lastCycleTime: 	1637418
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(77062400)))
		lastAlarmTime: 	1637378
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(76326656))(a DropListM...etc...
		lastStepTime: 	1637378
		lastStepMessage: 	nil
		lastCycleTime: 	1637418
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(77062400)))
		lastAlarmTime: 	1637378
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(6283THERE_BE_DRAGONS_HERE
User Interrupt
24 September 2019 11:05:08.698061 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setLinks.
process resume.
semaphore wait ] in LinkedDataVisualizer>>show:on:
	Receiver: a LinkedDataVisualizer
	Arguments and temporary variables: 
		operator: 	#transpose
		operand: 	a COOSparseMatrix
	Receiver's instance variables: 
		gap: 	35
		elementSize: 	30
		colors: 	a Dictionary(#data->Color blue #header->Color green #highlight->Color y...etc...
		shapes: 	a Dictionary(#data->a RTCompositeShape #edgeBuilder->a RTShapeBuilder #...etc...
		operation: 	#transpose
		operands: 	a Dictionary(#left->a COOSparseMatrix )
		process: 	a Process in Process>>terminate
		operationBlock: 	[ [ operand perform: operator asSymbol ]
	ensure: [ self unlink...etc...
		composer: 	a RTComposer
		namedGroups: 	#()
		backgroundGroups: 	#()
		metaLinks: 	an OrderedCollection()
		delay: 	<<error during printing>>

BlockClosure>>on:do:
	Receiver: [ self setLinks.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	LinkedDataVisualizer>>show:on:
		startpc: 	269
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setLinks.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	LinkedDataVisualizer>>show:on:
		startpc: 	269
		numArgs: 	0


LinkedDataVisualizer>>show:on:
	Receiver: a LinkedDataVisualizer
	Arguments and temporary variables: 
		operator: 	#transpose
		operand: 	a COOSparseMatrix
	Receiver's instance variables: 
		gap: 	35
		elementSize: 	30
		colors: 	a Dictionary(#data->Color blue #header->Color green #highlight->Color y...etc...
		shapes: 	a Dictionary(#data->a RTCompositeShape #edgeBuilder->a RTShapeBuilder #...etc...
		operation: 	#transpose
		operands: 	a Dictionary(#left->a COOSparseMatrix )
		process: 	a Process in Process>>terminate
		operationBlock: 	[ [ operand perform: operator asSymbol ]
	ensure: [ self unlink...etc...
		composer: 	a RTComposer
		namedGroups: 	#()
		backgroundGroups: 	#()
		metaLinks: 	an OrderedCollection()
		delay: 	<<error during printing>>

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(210077440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(210077440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(232151808)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(210077440)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (795@126)
		owner: 	a TransformWithLayoutMorph(308954368)
		submorphs: 	an Array(a RubCursor(77062400) a RubPrimarySelectionMorph(229272832)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (255654656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(56553216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(77062400)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(413583104))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(232151808)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(76326656))(a DropListM...etc...
		lastStepTime: 	1685371
		lastStepMessage: 	nil
		lastCycleTime: 	1685428
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(77062400)))
		lastAlarmTime: 	1685371
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fTHERE_BE_DRAGONS_HERE
AssertionFailure: Project location does not seems to be a valid git repository.
24 September 2019 5:31:13.14982 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceTipLocalRepositoryPanel(Object)>>assert:description:
	Receiver: an IceTipLocalRepositoryPanel
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Project location does not seems to be a valid git repository.'...etc...
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipDirectoryPresenter an OkCancelToolbar...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Import from existing clone' ]
		projectLocation: 	an IceTipDirectoryPresenter
		remoteLabel: 	nil
		remoteInputText: 	nil
		spacePanel: 	a MorphicGenericAdapter
		repository: 	nil


IceTipLocalRepositoryPanel>>validate
	Receiver: an IceTipLocalRepositoryPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipDirectoryPresenter an OkCancelToolbar...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Import from existing clone' ]
		projectLocation: 	an IceTipDirectoryPresenter
		remoteLabel: 	nil
		remoteInputText: 	nil
		spacePanel: 	a MorphicGenericAdapter
		repository: 	nil


[ dialog validate.
self repositoryModel updateLocation: dialog location.
true ] in IceTipRepairLocateRepository>>basicExecute
	Receiver: an IceTipRepairLocateRepository
	Arguments and temporary variables: 
		dialog: 	an IceTipLocalRepositoryPanel
	Receiver's instance variables: 
		repository: 	nil
		successBlock: 	nil
		repositoryModel: 	an IceTipCachedModel(an IceTipRepositoryModel)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(a ButtonPresenter a ButtonPresenter a DialogWi...etc...
		owner: 	a SpecDialogWindow(528587520) named: Import from existing clone
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonPresenter
		okAction: 	a NewValueHolder[ [ dialog validate.
self repositoryModel updateLocat...etc...
		cancelButton: 	a ButtonPresenter
		cancelAction: 	a NewValueHolder[ [ true ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonPresenter>>performAction
	Receiver: a ButtonPresenter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announcer: 	an Announcer
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self defaultTransferFor...etc...
		color: 	a NewValueHolder[ nil ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuPresenter ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(615123968))
		announcer: 	nil
		model: 	a ButtonPresenter
		widget: 	a PluggableButtonMorph(615123968)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		event: 	[(438@198) mouseUp 110466531 nil]
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		evt: 	[(438@198) mouseUp 110466531 nil]
		all: 	an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(61512396...etc...
		m: 	a PluggableButtonMorph(615123968)
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(615123968))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instancTHERE_BE_DRAGONS_HERE
AssertionFailure: Project location does not seems to be a valid git repository.
24 September 2019 5:31:21.79482 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceTipLocalRepositoryPanel(Object)>>assert:description:
	Receiver: an IceTipLocalRepositoryPanel
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Project location does not seems to be a valid git repository.'...etc...
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipDirectoryPresenter an OkCancelToolbar...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Import from existing clone' ]
		projectLocation: 	an IceTipDirectoryPresenter
		remoteLabel: 	nil
		remoteInputText: 	nil
		spacePanel: 	a MorphicGenericAdapter
		repository: 	nil


IceTipLocalRepositoryPanel>>validate
	Receiver: an IceTipLocalRepositoryPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipDirectoryPresenter an OkCancelToolbar...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Import from existing clone' ]
		projectLocation: 	an IceTipDirectoryPresenter
		remoteLabel: 	nil
		remoteInputText: 	nil
		spacePanel: 	a MorphicGenericAdapter
		repository: 	nil


[ dialog validate.
self repositoryModel updateLocation: dialog location.
true ] in IceTipRepairLocateRepository>>basicExecute
	Receiver: an IceTipRepairLocateRepository
	Arguments and temporary variables: 
		dialog: 	an IceTipLocalRepositoryPanel
	Receiver's instance variables: 
		repository: 	nil
		successBlock: 	nil
		repositoryModel: 	an IceTipCachedModel(an IceTipRepositoryModel)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(a ButtonPresenter a ButtonPresenter a DialogWi...etc...
		owner: 	a SpecDialogWindow(528587520) named: Import from existing clone
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonPresenter
		okAction: 	a NewValueHolder[ [ dialog validate.
self repositoryModel updateLocat...etc...
		cancelButton: 	a ButtonPresenter
		cancelAction: 	a NewValueHolder[ [ true ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonPresenter>>performAction
	Receiver: a ButtonPresenter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announcer: 	an Announcer
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self defaultTransferFor...etc...
		color: 	a NewValueHolder[ nil ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuPresenter ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(615123968))
		announcer: 	nil
		model: 	a ButtonPresenter
		widget: 	a PluggableButtonMorph(615123968)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		event: 	[(434@198) mouseUp 110475218 nil]
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		evt: 	[(434@198) mouseUp 110475218 nil]
		all: 	an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(61512396...etc...
		m: 	a PluggableButtonMorph(615123968)
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(615123968))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(615123968))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		evt: 	[(434@198) mouseUp 110475218 nil]
		all: 	an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(61512396...etc...
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		anEvent: 	[(434@198) mouseUp 110475218 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(434@198) mouseUp 110475218 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(615123968)
	Receiver's instance variables: 
		timeStamp: 	110475218
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(434@198)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(615THERE_BE_DRAGONS_HERE
AssertionFailure: Project location does not seems to be a valid git repository.
24 September 2019 5:32:13.79482 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceTipLocalRepositoryPanel(Object)>>assert:description:
	Receiver: an IceTipLocalRepositoryPanel
	Arguments and temporary variables: 
		aBlock: 	false
		aStringOrBlock: 	'Project location does not seems to be a valid git repository.'...etc...
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipDirectoryPresenter an OkCancelToolbar...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Import from existing clone' ]
		projectLocation: 	an IceTipDirectoryPresenter
		remoteLabel: 	nil
		remoteInputText: 	nil
		spacePanel: 	a MorphicGenericAdapter
		repository: 	nil


IceTipLocalRepositoryPanel>>validate
	Receiver: an IceTipLocalRepositoryPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(an IceTipDirectoryPresenter an OkCancelToolbar...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowPresenter ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Import from existing clone' ]
		projectLocation: 	an IceTipDirectoryPresenter
		remoteLabel: 	nil
		remoteInputText: 	nil
		spacePanel: 	a MorphicGenericAdapter
		repository: 	nil


[ dialog validate.
self repositoryModel updateLocation: dialog location.
true ] in IceTipRepairLocateRepository>>basicExecute
	Receiver: an IceTipRepairLocateRepository
	Arguments and temporary variables: 
		dialog: 	an IceTipLocalRepositoryPanel
	Receiver's instance variables: 
		repository: 	nil
		successBlock: 	nil
		repositoryModel: 	an IceTipCachedModel(an IceTipRepositoryModel)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announcer: 	an Announcer
		focusOrder: 	an OrderedCollection(a ButtonPresenter a ButtonPresenter a DialogWi...etc...
		owner: 	a SpecDialogWindow(528587520) named: Import from existing clone
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonPresenter
		okAction: 	a NewValueHolder[ [ dialog validate.
self repositoryModel updateLocat...etc...
		cancelButton: 	a ButtonPresenter
		cancelAction: 	a NewValueHolder[ [ true ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonPresenter>>performAction
	Receiver: a ButtonPresenter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announcer: 	an Announcer
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self defaultTransferFor...etc...
		color: 	a NewValueHolder[ nil ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuPresenter ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(615123968))
		announcer: 	nil
		model: 	a ButtonPresenter
		widget: 	a PluggableButtonMorph(615123968)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		event: 	[(432@203) mouseUp 110527156 nil]
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		evt: 	[(432@203) mouseUp 110527156 nil]
		all: 	an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(61512396...etc...
		m: 	a PluggableButtonMorph(615123968)
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(615123968))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(615123968))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		evt: 	[(432@203) mouseUp 110527156 nil]
		all: 	an Array(a PluggableButtonMorph(508347648) a PluggableButtonMorph(61512396...etc...
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		anEvent: 	[(432@203) mouseUp 110527156 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(432@203) mouseUp 110527156 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(615123968)
	Receiver's instance variables: 
		timeStamp: 	110527156
		source: 	a HandMorph(628388864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(432@203)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(615123968)
	Arguments and temporary variables: 
		anEvent: 	[(432@203) mouseUp 110527156 nil]
	Receiver's instance variables: 
		bounds: 	(399.0@183.0) corner: (471.0@211.0)
		owner: 	a PanelMorph(35495168)
		submorphs: 	an Array(an AlignmentMorph(402517504))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (909884416) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(196591104)
		iconMorph: 	nil
		iconPositTHERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #slot
24 September 2019 6:18:36.63082 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #slot
	Receiver: 'hasDefined:'
	Arguments and temporary variables: 
		aMessage: 	slot
		exception: 	MessageNotUnderstood: ByteString>>slot
		resumeValue: 	nil
	Receiver's instance variables: 
'hasDefined:'

ByteSymbol(Symbol)>>value:
	Receiver: #slot
	Arguments and temporary variables: 
		anObject: 	'hasDefined:'
	Receiver's instance variables: 
#slot

[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
		each: 	'hasDefined:'
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(SequenceableCollection)>>do:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	1
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(Collection)>>anySatisfy:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(Collection)>>contains:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

LinkType class>>hasDefined:
	Receiver: LinkType
	Arguments and temporary variables: 
		aLinkType: 	a LinkType(slot)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->LinkType>>#= #hash->LinkType>>#hash #printOn...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LinkType
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ LinkType hasDefined: LinkType slot
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(203197440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(203197440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(994663680)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(203197440)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (592@31)
		owner: 	a TransformWithLayoutMorph(642256128)
		submorphs: 	an Array(a RubPrimarySelectionMorph(666962432) a RubCursor(105653964...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (846962688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867894528)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1056539648)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(308418816))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(994663680)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(522409728) named: Pl...etc...
		lastStepTime: 	4100452
		lastStepMessage: 	nil
		lastCycleTime: 	4100516
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4100452
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(522409728) named: Pl...etc...
		lastStepTime: 	4100452
		lastStepMessage: 	nil
		lastCycleTime: 	4100516
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4100452
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(522409728) named: Pl...etc...
		lastStepTime: 	4100452
		lastStepMessage: 	nil
		lastCycleTime: 	4100516
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4100452
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #slot
24 September 2019 6:18:45.88882 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #slot
	Receiver: 'hasDefined:'
	Arguments and temporary variables: 
		aMessage: 	slot
		exception: 	MessageNotUnderstood: ByteString>>slot
		resumeValue: 	nil
	Receiver's instance variables: 
'hasDefined:'

ByteSymbol(Symbol)>>value:
	Receiver: #slot
	Arguments and temporary variables: 
		anObject: 	'hasDefined:'
	Receiver's instance variables: 
#slot

[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
		each: 	'hasDefined:'
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(SequenceableCollection)>>do:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	1
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(Collection)>>anySatisfy:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(Collection)>>contains:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

LinkType class>>hasDefined:
	Receiver: LinkType
	Arguments and temporary variables: 
		aLinkType: 	a LinkType(slot)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->LinkType>>#= #hash->LinkType>>#hash #printOn...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LinkType
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ LinkType hasDefined: LinkType slot
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(203197440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(203197440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(994663680)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(203197440)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (592@31)
		owner: 	a TransformWithLayoutMorph(642256128)
		submorphs: 	an Array(a RubPrimarySelectionMorph(666962432) a RubCursor(105653964...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (846962688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867894528)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1056539648)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(392557312))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(994663680)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	4109752
		lastStepMessage: 	nil
		lastCycleTime: 	4109778
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4109752
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	4109752
		lastStepMessage: 	nil
		lastCycleTime: 	4109778
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4109752
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(271004672) named: Pl...etc...
		lastStepTime: 	4109752
		lastStepMessage: 	nil
		lastCycleTime: 	4109778
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4109752
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #slot
ByteSymbol(Symbol)>>value:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Array(Collection)>>contains:
LinkType class>>hasDefined:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #slot
24 September 2019 6:27:43.11782 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #slot
	Receiver: 'hasDefined:'
	Arguments and temporary variables: 
		aMessage: 	slot
		exception: 	MessageNotUnderstood: ByteString>>slot
		resumeValue: 	nil
	Receiver's instance variables: 
'hasDefined:'

ByteSymbol(Symbol)>>value:
	Receiver: #slot
	Arguments and temporary variables: 
		anObject: 	'hasDefined:'
	Receiver's instance variables: 
#slot

[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
		each: 	'hasDefined:'
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(SequenceableCollection)>>do:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	1
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(Collection)>>anySatisfy:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

Array(Collection)>>contains:
	Receiver: #('hasDefined:' 'classVar' 'slot' 'tempVar')
	Arguments and temporary variables: 
		aBlock: 	#slot
	Receiver's instance variables: 
#('hasDefined:' 'classVar' 'slot' 'tempVar')

LinkType class>>hasDefined:
	Receiver: LinkType
	Arguments and temporary variables: 
		aLinkType: 	a LinkType(slot)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->LinkType>>#= #hash->LinkType>>#hash #printOn...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LinkType
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ LinkType hasDefined: LinkType slot
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(203197440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(203197440)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(994663680)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(203197440)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (592@31)
		owner: 	a TransformWithLayoutMorph(642256128)
		submorphs: 	an Array(a RubPrimarySelectionMorph(666962432) a RubCursor(105653964...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (846962688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(867894528)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1056539648)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(189842432))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(314.0@37.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(994663680)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(522409728) named: Pl...etc...
		lastStepTime: 	4646974
		lastStepMessage: 	nil
		lastCycleTime: 	4647010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4646974
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(522409728) named: Pl...etc...
		lastStepTime: 	4646974
		lastStepMessage: 	nil
		lastCycleTime: 	4647010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4646974
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(628388864))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(522409728) named: Pl...etc...
		lastStepTime: 	4646974
		lastStepMessage: 	nil
		lastCycleTime: 	4647010
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1056539648)))
		lastAlarmTime: 	4646974
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(628388864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(701919744) a TaskbarMorph(440578816) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (447025152) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #slot
ByteSymbol(Symbol)>>value:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
Array(SequenceableCollection)>>do:
Array(Collection)>>anySatisfy:
Array(Collection)>>contains:
LinkType class>>hasDefined:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneC