OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:27.585729+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.96zduvz5g4sk8iqu5gknijqmn', '44' ],		#self : OmReference [ '1' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:29.725729+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:37.096729+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:39.215729+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:41.418729+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:43.626729+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:45.804729+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:47.918729+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:50.083729+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:51.174729+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:30:51.289729+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:30',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:31:34.741729+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:31:36.871729+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:31:51.888729+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:31:53.634729+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:31:55.873729+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:31:55.918729+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:32:00.929729+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:32:03.032729+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:32:10.558729+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:32',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:32:19.625729+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:32:19.666729+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:32',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:36:24.334729+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.sumLink}',			#stamp : 'CompatibleUserName 5/5/2019 13:26:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay copy wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay copy wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay copy wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormushyn 5/11/2019 10:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:36:56.937729+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method |\r\tmethod := #+.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\r\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value inGroup: #left ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| leftMarkerHighlightLink |\r\t\t\tleftMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\telement isNotNil ifTrue: [leftMarkerHighlightLink := MetaLink new.\r\t\t\tleftMarkerHighlightLink\r\t\t\t\tmetaObject: [ self highlightModel: element inGroup: #left.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'highlight left \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tdelay wait.\r\t\t\t\t\tleftMarkerHighlightLink uninstall ].\r\t\t\tleftMarkerHighlightLink selector: #value.\r\t\t\tleftMarkerHighlightLink control: #after.\r\t\t\telement link: leftMarkerHighlightLink toMethodNamed: #copy].\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element inGroup: #left.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select left \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value inGroup: #right ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| rightMarkerHighlightLink |\r\t\t\trightMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\telement isNotNil ifTrue:[\r\t\t\trightMarkerHighlightLink := MetaLink new.\r\t\t\trightMarkerHighlightLink\r\t\t\t\tmetaObject: [ :elementCopy | \r\t\t\t\t\t"elementCopy is the copied object which we use to set a link to value:"\r\t\t\t\t\t"with that we know if it\'s selecting left and right markers or only one of them"\r\t\t\t\t\t| leftMatrixMarkerHightlightLink |\r\t\t\t\t\tleftMatrixMarkerHightlightLink := MetaLink new.\r\t\t\t\t\tleftMatrixMarkerHightlightLink\r\t\t\t\t\t\tmetaObject: [ "the link is set to right only according to the method code"\r\t\t\t\t\t\t\t"left is never the object which is copied in this situation"\r\t\t\t\t\t\t\tself highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tTranscript\r\t\t\t\t\t\t\t\tshow:\r\t\t\t\t\t\t\t\t\t\'highlight left \'\r\t\t\t\t\t\t\t\t\t\t, (leftMatrixMarker row @ leftMatrixMarker column) asString;\r\t\t\t\t\t\t\t\tcr.\r\t\t\t\t\t\t\tdelay wait\r\t\t\t\t\t\t\t"leftMatrixMarkerHightlightLink uninstall" ].\r\t\t\t\t\tleftMatrixMarkerHightlightLink selector: #value.\r\t\t\t\t\tleftMatrixMarkerHightlightLink control: #after.\r\t\t\t\t\telementCopy\r\t\t\t\t\t\tlink: leftMatrixMarkerHightlightLink\r\t\t\t\t\t\ttoMethodNamed: #value:.\r\t\t\t\t\t"highlight the right marker and uninstall itself after first use"\r\t\t\t\t\tself highlightModel: element inGroup: #right.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'highlight right \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tdelay wait.\r\t\t\t\t\t"add to metaLinks in case it won\'t run to uninstall after animation ends"\r\t\t\t\t\t"metaLinks add: leftMatrixMarkerHightlightLink."\r\t\t\t\t\trightMarkerHighlightLink uninstall ].\r\t\t\trightMarkerHighlightLink selector: #value:.\r\t\t\trightMarkerHighlightLink arguments: #(value).\r\t\t\trightMarkerHighlightLink control: #after.\r\t\t\telement link: rightMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: rightMarkerHighlightLink].\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element inGroup: #right.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select right \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter}',			#stamp : 'YaroslavKormushyn 5/5/2019 16:11',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method |\r\tmethod := #+.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\r\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value inGroup: #left ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| leftMarkerHighlightLink |\r\t\t\tleftMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ leftMarkerHighlightLink := MetaLink new.\r\t\t\t\t\tleftMarkerHighlightLink\r\t\t\t\t\t\tmetaObject: [ self highlightModel: element inGroup: #left.\r\t\t\t\t\t\t\tTranscript\r\t\t\t\t\t\t\t\tshow: \'highlight left \' , (element row @ element column) asString;\r\t\t\t\t\t\t\t\tcr.\r\t\t\t\t\t\t\tdelay copy wait.\r\t\t\t\t\t\t\tleftMarkerHighlightLink uninstall ].\r\t\t\t\t\tleftMarkerHighlightLink selector: #value.\r\t\t\t\t\tleftMarkerHighlightLink control: #after.\r\t\t\t\t\telement link: leftMarkerHighlightLink toMethodNamed: #copy ].\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element inGroup: #left.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select left \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay copy wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value inGroup: #right ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| rightMarkerHighlightLink |\r\t\t\trightMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ rightMarkerHighlightLink := MetaLink new.\r\t\t\t\t\trightMarkerHighlightLink\r\t\t\t\t\t\tmetaObject: [ :elementCopy | \r\t\t\t\t\t\t\t"elementCopy is the copied object which we use to set a link to value:"\r\t\t\t\t\t\t\t"with that we know if it\'s selecting left and right markers or only one of them"\r\t\t\t\t\t\t\t| leftMatrixMarkerHightlightLink |\r\t\t\t\t\t\t\tleftMatrixMarkerHightlightLink := MetaLink new.\r\t\t\t\t\t\t\tleftMatrixMarkerHightlightLink\r\t\t\t\t\t\t\t\tmetaObject: [ "the link is set to right only according to the method code"\r\t\t\t\t\t\t\t\t\t"left is never the object which is copied in this situation"\r\t\t\t\t\t\t\t\t\tself highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tTranscript\r\t\t\t\t\t\t\t\t\t\tshow:\r\t\t\t\t\t\t\t\t\t\t\t\'highlight left \'\r\t\t\t\t\t\t\t\t\t\t\t\t, (leftMatrixMarker row @ leftMatrixMarker column) asString;\r\t\t\t\t\t\t\t\t\t\tcr.\r\t\t\t\t\t\t\t\t\tdelay copy wait\r\t\t\t\t\t\t\t\t\t"leftMatrixMarkerHightlightLink uninstall" ].\r\t\t\t\t\t\t\tleftMatrixMarkerHightlightLink selector: #value.\r\t\t\t\t\t\t\tleftMatrixMarkerHightlightLink control: #after.\r\t\t\t\t\t\t\telementCopy\r\t\t\t\t\t\t\t\tlink: leftMatrixMarkerHightlightLink\r\t\t\t\t\t\t\t\ttoMethodNamed: #value:.\r\t\t\t\t\t\t\t"highlight the right marker and uninstall itself after first use"\r\t\t\t\t\t\t\tself highlightModel: element inGroup: #right.\r\t\t\t\t\t\t\tTranscript\r\t\t\t\t\t\t\t\tshow: \'highlight right \' , (element row @ element column) asString;\r\t\t\t\t\t\t\t\tcr.\r\t\t\t\t\t\t\tdelay copy wait.\r\t\t\t\t\t\t\t"add to metaLinks in case it won\'t run to uninstall after animation ends"\r\t\t\t\t\t\t\t"metaLinks add: leftMatrixMarkerHightlightLink."\r\t\t\t\t\t\t\trightMarkerHighlightLink uninstall ].\r\t\t\t\t\trightMarkerHighlightLink selector: #value:.\r\t\t\t\t\trightMarkerHighlightLink arguments: #(value).\r\t\t\t\t\trightMarkerHighlightLink control: #after.\r\t\t\t\t\telement link: rightMarkerHighlightLink toMethodNamed: #copy.\r\t\t\t\t\tmetaLinks add: rightMarkerHighlightLink ].\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element inGroup: #right.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select right \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay copy wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter}',			#stamp : 'YaroslavKormushyn 5/11/2019 10:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:37:06.868729+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:37',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:37:08.989729+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:37',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:37:51.212729+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:37',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:37:52.346729+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:37',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:37:53.445729+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:37',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:40:40.940729+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\t\tmetaLinks\r\t\taddAll: { resultMatrixUpdateLinkFirst .resultMatrixUpdateLinkLast } ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\t\tmetaLinks\r\t\tadd:resultMatrixLink',			#stamp : 'CompatibleUserName 5/5/2019 13:26:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled  ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:40:56.289729+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeAdditionView.\r\t\t\tself setPositionsForAddition.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'CompatibleUserName 5/5/2019 13:26:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeAdditionView.\r\t\t\tself setPositionsForAddition.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:41:54.579729+03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:41',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:41:56.695729+03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:41',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:01.515729+03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:41',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:03.650729+03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:41',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:05.822729+03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:42',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:08.023729+03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:42',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:10.138729+03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:42',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:12.291729+03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:42',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:14.462729+03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:42',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:15.570729+03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:42',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:42:15.684729+03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:41',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:43:14.159729+03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled  ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:43:53.263729+03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeAdditionView.\r\t\t\tself setPositionsForAddition.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeAdditionView.\r\t\t\tself setPositionsForAddition.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:44:23.438729+03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'updateResultWith:',			#protocol : #'build ui',			#sourceCode : 'updateResultWith: result\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups.\r\tcomposer view canvas camera focusOnCenter ',			#stamp : 'YaroslavKormushyn 5/5/2019 16:23',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'updateResultWith:',			#protocol : #'build ui',			#sourceCode : 'updateResultWith: result\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups.\r\tcomposer view canvas camera focusOnCenterScaled',			#stamp : 'YaroslavKormushyn 5/11/2019 10:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:44:27.540729+03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'updateResultWith:',			#protocol : #'build ui',			#sourceCode : 'updateResultWith: result\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups.\r\tcomposer view canvas camera focusOnCenterScaled',			#stamp : 'YaroslavKormushyn 5/11/2019 10:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'updateResultWith:',			#protocol : #'build ui',			#sourceCode : 'updateResultWith: result\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups.\r\tcomposer view canvas focusOnCenterScaled',			#stamp : 'YaroslavKormushyn 5/11/2019 10:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:44:44.961729+03:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:44:57.170729+03:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeAdditionView.\r\t\t\tself setPositionsForAddition.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tself composer view canvas focusOnCenterScaled ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeAdditionView.\r\t\t\tself setPositionsForAddition.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormushyn 5/11/2019 10:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:02.700729+03:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:04.816729+03:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:09.523729+03:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:11.677729+03:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:13.812729+03:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:15.968729+03:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:18.131729+03:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:20.277729+03:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:22.383729+03:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:23.514729+03:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-11T10:45:23.641729+03:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/11/2019 10:45',			#package : #_UnpackagedPackage		}	}}