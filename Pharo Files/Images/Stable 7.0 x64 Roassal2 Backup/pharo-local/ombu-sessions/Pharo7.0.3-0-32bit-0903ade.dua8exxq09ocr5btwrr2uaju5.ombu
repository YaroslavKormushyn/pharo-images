OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T11:04:44.399061+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.f44tx4x2ffsjzfsn66bkf791a', '74' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 16:00',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#header -> Color green).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/24/2019 11:04',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T11:05:35.253061+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not\r\t\tifTrue: [ Error signal: \'What?\' ].\r\t\t\t\toperands := Dictionary newFrom: { (#left -> operand) }.\r\toperation := operator.\r\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\tensure: [ self unlink ] ].\r\tprocess := operationBlock newProcess.\r\t[ self setLinks.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenu.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 9/23/2019 16:00',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not\r\t\tifTrue: [ Error signal: \'What?\' ].\r\toperands := Dictionary newFrom: {(#left -> operand)}.\r\toperation := operator.\r\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\tensure: [ self unlink ] ].\r\tprocess := operationBlock newProcess.\r\t"[ self setLinks.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ]."\r\tself setUpMenu.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 9/24/2019 11:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T11:18:02.312061+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#header -> Color green).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/24/2019 11:04',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#header -> Color green).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\t\t\tlinkMessages := #(#next #previous).\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/24/2019 11:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T11:19:55.649061+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'linkMessages:',			#protocol : #'as yet unclassified',			#sourceCode : 'linkMessages: messages\r\tmessages isCollection \r\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty \r\tifTrue: [ Error signal: \'Nomessages in collection.\' ].\r\tlinkMessages := messages collect: [ :msg | msg asSymbol ].',			#stamp : 'YaroslavKormushyn 9/24/2019 11:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T11:19:55.659061+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'linkMessages:',			#protocol : #'as yet unclassified',			#sourceCode : 'linkMessages: messages\r\tmessages isCollection \r\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty \r\tifTrue: [ Error signal: \'Nomessages in collection.\' ].\r\tlinkMessages := messages collect: [ :msg | msg asSymbol ].',			#stamp : 'YaroslavKormushyn 9/24/2019 11:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'linkMessages:',			#protocol : #accessing,			#sourceCode : 'linkMessages: messages\r\tmessages isCollection \r\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty \r\tifTrue: [ Error signal: \'Nomessages in collection.\' ].\r\tlinkMessages := messages collect: [ :msg | msg asSymbol ].',			#stamp : 'YaroslavKormushyn 9/24/2019 11:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T11:24:23.103061+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'addLinkMessages:',			#protocol : #accessing,			#sourceCode : 'addLinkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'Nomessages in collection.\' ].\r\tlinkMessages := linkMessages addAll:( messages collect: [ :msg | msg asSymbol ])',			#stamp : 'YaroslavKormushyn 9/24/2019 11:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T13:51:24.222061+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'addLinkMessages:',			#protocol : #accessing,			#sourceCode : 'addLinkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'Nomessages in collection.\' ].\r\tlinkMessages := linkMessages addAll:( messages collect: [ :msg | msg asSymbol ])',			#stamp : 'YaroslavKormushyn 9/24/2019 11:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'addLinkMessages:',			#protocol : #accessing,			#sourceCode : 'addLinkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'Nomessages in collection.\' ].\r\tlinkMessages\r\t\taddAll: (messages collect: [ :msg | msg asSymbol ])',			#stamp : 'YaroslavKormushyn 9/24/2019 13:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T13:52:36.083061+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'linkMessages:',			#protocol : #accessing,			#sourceCode : 'linkMessages: messages\r\tmessages isCollection \r\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty \r\tifTrue: [ Error signal: \'Nomessages in collection.\' ].\r\tlinkMessages := messages collect: [ :msg | msg asSymbol ].',			#stamp : 'YaroslavKormushyn 9/24/2019 11:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'linkMessages:',			#protocol : #accessing,			#sourceCode : 'linkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'No messages in collection.\' ].\r\tlinkMessages := messages collect: [ :msg | msg asSymbol ]',			#stamp : 'YaroslavKormushyn 9/24/2019 13:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T13:53:06.127061+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'addLinkMessages:',			#protocol : #accessing,			#sourceCode : 'addLinkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'Nomessages in collection.\' ].\r\tlinkMessages\r\t\taddAll: (messages collect: [ :msg | msg asSymbol ])',			#stamp : 'YaroslavKormushyn 9/24/2019 13:51',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'addLinkMessages:',			#protocol : #accessing,			#sourceCode : 'addLinkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'No messages in collection.\' ].\r\tlinkMessages addAll: (messages collect: [ :msg | msg asSymbol ])',			#stamp : 'YaroslavKormushyn 9/24/2019 13:53',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T14:07:33.209061+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'LNU-SparseMatrix-CompatibleUserName.1568981129'		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T14:08:28.921061+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'LNU-SparseMatrix-CompatibleUserName.1568981129'		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2019-09-24T14:08:47.892061+03:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCanvas,				#isMetaSide : false			},			#name : #focusOnCenterScaled,			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'focusOnCenterScaled\r\t^ self camera focusOnCenterScaled: self extent * 0.9',			#stamp : '',			#package : #Trachel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCanvas,				#isMetaSide : false			},			#name : #focusOnCenterScaled,			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'focusOnCenterScaled\r\t^ self camera focusOnCenterScaled: self extent * 0.9',			#stamp : 'CompatibleUserName 9/20/2019 15:05:29',			#package : #Trachel		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2019-09-24T14:08:47.909061+03:00' ],		#trigger : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCanvas,				#isMetaSide : false			},			#name : #focusOnCenterScaled,			#protocol : #actions,			#sourceCode : 'focusOnCenterScaled\r\t^ self camera focusOnCenterScaled: self extent * 0.9',			#stamp : 'CompatibleUserName 9/20/2019 15:05:29',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TRCanvas,				#isMetaSide : false			},			#name : #focusOnCenterScaled,			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'focusOnCenterScaled\r\t^ self camera focusOnCenterScaled: self extent * 0.9',			#stamp : 'CompatibleUserName 9/20/2019 15:05:29',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T14:20:23.994061+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #accessing,			#sourceCode : 'display: linkedStructure\r\t| nodes elements |\r\t(linkedStructure respondsTo: #viewElements)\r\t\tifFalse: [ ^ Error\r\t\t\t\tsignal: \'Container should expose \' , #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @ RTDraggable @ RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 9/23/2019 17:54',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #accessing,			#sourceCode : 'display: linkedStructure\r\t| nodes elements |\r\t(linkedStructure respondsTo: #viewElements)\r\t\tifFalse: [ ^ Error\r\t\t\t\tsignal: \'Container should expose \' , #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\tnodes isNil | nodes isEmpty \r\tifTrue: [ ^ self ].\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @ RTDraggable @ RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 9/24/2019 14:20',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T14:21:17.126061+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #accessing,			#sourceCode : 'display: linkedStructure\r\t| nodes elements |\r\t(linkedStructure respondsTo: #viewElements)\r\t\tifFalse: [ ^ Error\r\t\t\t\tsignal: \'Container should expose \' , #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\tnodes isNil | nodes isEmpty \r\tifTrue: [ ^ self ].\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @ RTDraggable @ RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 9/24/2019 14:20',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #accessing,			#sourceCode : 'display: linkedStructure\r\t| nodes elements |\r\tlinkedStructure isNil \r\tifTrue: [ ^self ].\r\t(linkedStructure respondsTo: #viewElements)\r\t\tifFalse: [ ^ Error\r\t\t\t\tsignal: \'Container should expose \' , #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\tnodes isNil | nodes isEmpty\r\t\tifTrue: [ ^ self ].\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @ RTDraggable @ RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 9/24/2019 14:21',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T15:03:05.763061+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'linkMessages:',			#protocol : #accessing,			#sourceCode : 'linkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'No messages in collection.\' ].\r\tlinkMessages := messages collect: [ :msg | msg asSymbol ]',			#stamp : 'YaroslavKormushyn 9/24/2019 13:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'linkMessages:',			#protocol : #accessing,			#sourceCode : 'linkMessages: messageConfigs\r\tmessageConfigs isCollection\r\t\tifFalse: [ Error signal: \'You should add message link configurations to a collection.\' ].\r\tmessageConfigs isEmpty\r\t\tifTrue: [ Error signal: \'No messages in collection.\' ].\r\tlinkMessages := messageConfigs collect: [ :msg | msg asSymbol ]',			#stamp : 'YaroslavKormushyn 9/24/2019 15:03',			#package : #LNU-SparseMatrix		}	}}