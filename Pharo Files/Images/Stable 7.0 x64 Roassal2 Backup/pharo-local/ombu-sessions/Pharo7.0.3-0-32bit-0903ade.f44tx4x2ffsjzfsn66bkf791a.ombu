OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2019-09-23T11:59:07.449022+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.1d6n9dzsmmmtreeanif900x2v', '26' ],		#self : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T12:03:00.799022+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newStamp : 'YaroslavKormushyn 9/23/2019 12:03'	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T12:03:31.705022+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'view source elementSize\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #view,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #source,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T12:03:58.817022+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'view source elementSize\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #view,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #source,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'view source elementSize selectColor leftMatrix rightMatrix resultMatrix process composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #view,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #source,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #selectColor,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @27				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @27			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @27,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T12:45:23.835022+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'view source elementSize selectColor leftMatrix rightMatrix resultMatrix process composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #view,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #source,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #selectColor,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'view source gap elementSize selectColor leftMatrix rightMatrix resultMatrix process composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #view,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #source,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #selectColor,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @49				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @49			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @49,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T12:45:40.208022+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 12:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T12:45:40.228022+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 12:45',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 12:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:04:30.017022+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'view source gap elementSize selectColor leftMatrix rightMatrix resultMatrix process composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #view,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #source,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #selectColor,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'view source gap elementSize colors left right result process composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #view,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #source,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @51				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @51			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @51,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:05:03.116022+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'view source gap elementSize colors left right result process composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #view,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #source,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors left right result process composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @51				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @51			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @51,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:13:58.189022+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 12:45',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary newFrom: { #data->Color blue . #select->Color red . #highlight->Color yellow . #label->Color white }.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {  }.\r\tbackgroundGroups := {  }. \r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new.',			#stamp : 'YaroslavKormushyn 9/23/2019 13:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:31:17.496022+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNotNil & operand isNotNil\r\tifTrue: [ \r\t\t[operand respondsTo: operator asSymbol] ifTrue: [ \r\t\t left:= operand.\r\t\tprocess := [[operand perform: operator asSymbol] ensure: [self unlink] ] newProcess.\r\t\t[self setLinks: operand.\r\t\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenuWithProcess: process.\r\t^ composer view]]',			#stamp : 'YaroslavKormushyn 9/23/2019 13:31',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:34:57.898022+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #'as yet unclassified',			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ]\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormushyn 9/23/2019 13:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:34:57.906022+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #'as yet unclassified',			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ]\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormushyn 9/23/2019 13:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ]\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormushyn 9/23/2019 13:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:35:22.865022+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ]\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormushyn 9/23/2019 13:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view\r\t\taddMenu: \'Resume\'\r\t\tcallback: [ process resume ]',			#stamp : 'YaroslavKormushyn 9/23/2019 13:35',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:36:22.899022+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors left right result process composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors left right result process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @47				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @47				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @47			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @47,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:36:56.964022+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNotNil & operand isNotNil\r\tifTrue: [ \r\t\t[operand respondsTo: operator asSymbol] ifTrue: [ \r\t\t left:= operand.\r\t\tprocess := [[operand perform: operator asSymbol] ensure: [self unlink] ] newProcess.\r\t\t[self setLinks: operand.\r\t\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenuWithProcess: process.\r\t^ composer view]]',			#stamp : 'YaroslavKormushyn 9/23/2019 13:31',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNotNil & operand isNotNil\r\t\tifTrue: [ [ operand respondsTo: operator asSymbol ]\r\t\t\t\tifTrue: [ left := operand.\r\t\t\t\t\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\t\t\t\t\tensure: [ self unlink ] ].\r\t\t\t\t\tprocess := operationBlock newProcess.\r\t\t\t\t\t[ self setLinks: operand.\r\t\t\t\t\tprocess resume.\r\t\t\t\t\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\t\t\t\t\tself setUpMenuWithProcess: process.\r\t\t\t\t\t^ composer view ] ]',			#stamp : 'YaroslavKormushyn 9/23/2019 13:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:38:22.302022+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view\r\t\taddMenu: \'Resume\'\r\t\tcallback: [ process resume ]',			#stamp : 'YaroslavKormushyn 9/23/2019 13:35',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ].\r\tcomposer view addMenu: \'Reset\' callback: [ process terminate. ]',			#stamp : 'YaroslavKormushyn 9/23/2019 13:38',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:39:23.644022+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ].\r\tcomposer view addMenu: \'Reset\' callback: [ process terminate. ]',			#stamp : 'YaroslavKormushyn 9/23/2019 13:38',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ].\r\t"composer view addMenu: \'Reset\' callback: [ process terminate ]"',			#stamp : 'YaroslavKormushyn 9/23/2019 13:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:39:47.276022+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ].\r\t"composer view addMenu: \'Reset\' callback: [ process terminate ]"',			#stamp : 'YaroslavKormushyn 9/23/2019 13:39',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ]\r\t"composer view addMenu: \'Reset\' callback: [ process terminate -> should reset the view and reinit the process and links]"',			#stamp : 'YaroslavKormushyn 9/23/2019 13:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:39:56.121022+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ process resume ]\r\t"composer view addMenu: \'Reset\' callback: [ process terminate -> should reset the view and reinit the process and links]"',			#stamp : 'YaroslavKormushyn 9/23/2019 13:39',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setUpMenu,			#protocol : #initialization,			#sourceCode : 'setUpMenu\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ process suspend ].\r\tcomposer view\r\t\taddMenu: \'Resume\'\r\t\tcallback: [  process resume ].\r\t\t"composer view addMenu: \'Reset\' callback: [ process terminate -> should reset the view and reinit the process and links]"',			#stamp : 'YaroslavKormushyn 9/23/2019 13:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:42:24.679022+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'gap:',			#protocol : #'as yet unclassified',			#sourceCode : 'gap: gapSize\r\tgap := gapSize',			#stamp : 'YaroslavKormushyn 9/23/2019 13:42',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:42:24.694022+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'gap:',			#protocol : #'as yet unclassified',			#sourceCode : 'gap: gapSize\r\tgap := gapSize',			#stamp : 'YaroslavKormushyn 9/23/2019 13:42',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'gap:',			#protocol : #accessing,			#sourceCode : 'gap: gapSize\r\tgap := gapSize',			#stamp : 'YaroslavKormushyn 9/23/2019 13:42',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:42:32.007022+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #gap,			#protocol : #accessing,			#sourceCode : 'gap\r\t^ gap ',			#stamp : 'YaroslavKormushyn 9/23/2019 13:42',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:42:42.450022+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #elementSize,			#protocol : #accessing,			#sourceCode : 'elementSize\r\t^ elementSize',			#stamp : 'YaroslavKormushyn 9/23/2019 13:42',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:42:51.548022+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'elementSize:',			#protocol : #accessing,			#sourceCode : 'elementSize: size\r\telementSize := size',			#stamp : 'YaroslavKormushyn 9/23/2019 13:42',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:43:50.427022+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors left right result process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes left right result process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @49				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @49			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @49,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:45:42.182022+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary newFrom: { #data->Color blue . #select->Color red . #highlight->Color yellow . #label->Color white }.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {  }.\r\tbackgroundGroups := {  }. \r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new.',			#stamp : 'YaroslavKormushyn 9/23/2019 13:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\t\t\tshapes := Dictionary newFrom: { (#data -> self getDefaultDataElementShape) . (#header->self getDefaultHeaderElementShape) . (#edge -> self getDefaultEdgeShape) }.\t\r\t\t\t\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 13:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:49:54.094022+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getDefaultDataElementShape,			#protocol : #'as yet unclassified',			#sourceCode : 'getDefaultDataElementShape\r| box valueLabel indexLabel |\r\tbox := RTBox new\r\t\tcolor: (self colors at: #data);\r\t\tsize: self elementSize.\r\tvalueLabel := RTLabel new\r\t\ttext: [ :el | \r\t\t\tel value isNil\r\t\t\t\tifTrue: 0\r\t\t\t\tifFalse: [ el value ] ];\r\t\tcolor: (self colors at: #label).\r\tindexLabel := RTLabel new\r\t\theight: self elementSize / 5;\r\t\ttext: [ :el | \r\t\t\t| row col |\r\t\t\trow := el row.\r\t\t\tcol := el column.\r\t\t\trow isNil\r\t\t\t\tifTrue: [ row := 0 ].\r\t\t\tcol isNil\r\t\t\t\tifTrue: [ col := 0 ].\r\t\t\trow @ col ];\r\t\tcolor: (self colors at: #label).\r\t^ RTCompositeShape new\r\t\tadd: box;\r\t\tadd: valueLabel;\r\t\tadd: indexLabel translateBy: 0 @ 10.',			#stamp : 'YaroslavKormushyn 9/23/2019 13:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:50:19.300022+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getDefaultDataElementShape,			#protocol : #'as yet unclassified',			#sourceCode : 'getDefaultDataElementShape\r| box valueLabel indexLabel |\r\tbox := RTBox new\r\t\tcolor: (self colors at: #data);\r\t\tsize: self elementSize.\r\tvalueLabel := RTLabel new\r\t\ttext: [ :el | \r\t\t\tel value isNil\r\t\t\t\tifTrue: 0\r\t\t\t\tifFalse: [ el value ] ];\r\t\tcolor: (self colors at: #label).\r\tindexLabel := RTLabel new\r\t\theight: self elementSize / 5;\r\t\ttext: [ :el | \r\t\t\t| row col |\r\t\t\trow := el row.\r\t\t\tcol := el column.\r\t\t\trow isNil\r\t\t\t\tifTrue: [ row := 0 ].\r\t\t\tcol isNil\r\t\t\t\tifTrue: [ col := 0 ].\r\t\t\trow @ col ];\r\t\tcolor: (self colors at: #label).\r\t^ RTCompositeShape new\r\t\tadd: box;\r\t\tadd: valueLabel;\r\t\tadd: indexLabel translateBy: 0 @ 10.',			#stamp : 'YaroslavKormushyn 9/23/2019 13:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getDefaultDataElementShape,			#protocol : #'as yet unclassified',			#sourceCode : 'getDefaultDataElementShape\r\t| box valueLabel indexLabel |\r\tbox := RTBox new\r\t\tcolor: (colors at: #data);\r\t\tsize: elementSize.\r\tvalueLabel := RTLabel new\r\t\ttext: [ :el | \r\t\t\tel value isNil\r\t\t\t\tifTrue: 0\r\t\t\t\tifFalse: [ el value ] ];\r\t\tcolor: (colors at: #label).\r\tindexLabel := RTLabel new\r\t\theight: elementSize / 5;\r\t\ttext: [ :el | \r\t\t\t| row col |\r\t\t\trow := el row.\r\t\t\tcol := el column.\r\t\t\trow isNil\r\t\t\t\tifTrue: [ row := 0 ].\r\t\t\tcol isNil\r\t\t\t\tifTrue: [ col := 0 ].\r\t\t\trow @ col ];\r\t\tcolor: (colors at: #label).\r\t^ RTCompositeShape new\r\t\tadd: box;\r\t\tadd: valueLabel;\r\t\tadd: indexLabel translateBy: 0 @ 10',			#stamp : 'YaroslavKormushyn 9/23/2019 13:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T13:54:06.581022+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getDefaultHeaderElementShape,			#protocol : #'as yet unclassified',			#sourceCode : 'getDefaultHeaderElementShape\r| box valueLabel indexLabel |\r\tbox := RTBox new\r\t\tcolor: (colors at: #header);\r\t\tsize: elementSize.\r\tvalueLabel := RTLabel new\r\t\ttext: \'H\';\r\t\tcolor: (colors at: #label).\r\tindexLabel := RTLabel new\r\t\theight: elementSize / 5;\r\t\ttext: [ :el | el row @ el column ];\r\t\tcolor: (colors at: #label).\r\t^ RTCompositeShape new\r\t\tadd: box;\r\t\tadd: valueLabel;\r\t\tadd: indexLabel translateBy: 0 @ 10.',			#stamp : 'YaroslavKormushyn 9/23/2019 13:54',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T14:45:30.568022+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getDefaultEdgeShapeBuilder,			#protocol : #'as yet unclassified',			#sourceCode : 'getDefaultEdgeShapeBuilder\r| shapeBuilder arrowHead arrowTail|\rshapeBuilder := RTShapeBuilder new.\r\tarrowHead := RTSimpleArrow asHead\r\t\tsize: 1;\r\t\tbaseSize: 3.\r\tarrowTail := RTSimpleArrow asTail\r\t\tsize: 1;\r\t\tbaseSize: 3.\r\tshapeBuilder styledLine\r\t\torthoHorizontalLine;\r\t\thorizontalAttachPoint;\r\t\thead: arrowHead;\r\t\ttail: arrowTail;\r\t\tcolor: Color black.\r\t\r\tarrowHead := RTSimpleArrow asHead\r\t\tsize: 1;\r\t\tbaseSize: 3.\r\tarrowTail := RTSimpleArrow asTail\r\t\tsize: 1;\r\t\tbaseSize: 3.\r\tshapeBuilder styledLine\r\t\torthoVerticalLine;\r\t\tverticalAttachPoint;\r\t\thead: arrowHead;\r\t\ttail: arrowTail;\r\t\tcolor: Color black.\r\t\t^ shapeBuilder ',			#stamp : 'YaroslavKormushyn 9/23/2019 14:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T14:45:48.473022+03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\t\t\tshapes := Dictionary newFrom: { (#data -> self getDefaultDataElementShape) . (#header->self getDefaultHeaderElementShape) . (#edge -> self getDefaultEdgeShape) }.\t\r\t\t\t\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 13:45',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edge -> self getDefaultEdgeShapeBuilder)}.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 14:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T14:46:00.156022+03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edge -> self getDefaultEdgeShapeBuilder)}.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 14:45',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 14:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:04:54.658022+03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getEdgeBuilder,			#protocol : #'as yet unclassified',			#sourceCode : 'getEdgeBuilder\r|edgeBuilder |\r\tedgeBuilder := RTEdgeBuilder new.\r\tedgeBuilder view: composer view.\r\tedgeBuilder shapeBuilder: (shapes at: #edgeBuilder).\r\tedgeBuilder elements: composer currentElements.',			#stamp : 'YaroslavKormushyn 9/23/2019 15:04',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:05:53.570022+03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getEdgeBuilder,			#protocol : #'as yet unclassified',			#sourceCode : 'getEdgeBuilder\r|edgeBuilder |\r\tedgeBuilder := RTEdgeBuilder new.\r\tedgeBuilder view: composer view.\r\tedgeBuilder shapeBuilder: (shapes at: #edgeBuilder).\r\tedgeBuilder elements: composer currentElements.',			#stamp : 'YaroslavKormushyn 9/23/2019 15:04',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getEdgeBuilder,			#protocol : #'as yet unclassified',			#sourceCode : 'getEdgeBuilder\r\t| edgeBuilder |\r\tedgeBuilder := RTEdgeBuilder new.\r\tedgeBuilder view: composer view.\r\tedgeBuilder shapeBuilder: (shapes at: #edgeBuilder)',			#stamp : 'YaroslavKormushyn 9/23/2019 15:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:06:02.228022+03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getEdgeBuilder,			#protocol : #'as yet unclassified',			#sourceCode : 'getEdgeBuilder\r\t| edgeBuilder |\r\tedgeBuilder := RTEdgeBuilder new.\r\tedgeBuilder view: composer view.\r\tedgeBuilder shapeBuilder: (shapes at: #edgeBuilder)',			#stamp : 'YaroslavKormushyn 9/23/2019 15:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #getEdgeBuilder,			#protocol : #'as yet unclassified',			#sourceCode : 'getEdgeBuilder\r\t| edgeBuilder |\r\tedgeBuilder := RTEdgeBuilder new.\r\tedgeBuilder view: composer view.\r\tedgeBuilder shapeBuilder: (shapes at: #edgeBuilder).\r\t^ edgeBuilder',			#stamp : 'YaroslavKormushyn 9/23/2019 15:06',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:25:48.900022+03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #unlink,			#protocol : #'as yet unclassified',			#sourceCode : 'unlink\r\tmetaLinks do: [ :link | link uninstall ].',			#stamp : 'YaroslavKormushyn 9/23/2019 15:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:25:48.937022+03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #unlink,			#protocol : #'as yet unclassified',			#sourceCode : 'unlink\r\tmetaLinks do: [ :link | link uninstall ].',			#stamp : 'YaroslavKormushyn 9/23/2019 15:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #unlink,			#protocol : #accessing,			#sourceCode : 'unlink\r\tmetaLinks do: [ :link | link uninstall ].',			#stamp : 'YaroslavKormushyn 9/23/2019 15:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:26:23.990022+03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNotNil & operand isNotNil\r\t\tifTrue: [ [ operand respondsTo: operator asSymbol ]\r\t\t\t\tifTrue: [ left := operand.\r\t\t\t\t\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\t\t\t\t\tensure: [ self unlink ] ].\r\t\t\t\t\tprocess := operationBlock newProcess.\r\t\t\t\t\t[ self setLinks: operand.\r\t\t\t\t\tprocess resume.\r\t\t\t\t\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\t\t\t\t\tself setUpMenuWithProcess: process.\r\t\t\t\t\t^ composer view ] ]',			#stamp : 'YaroslavKormushyn 9/23/2019 13:36',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNotNil & operand isNotNil\r\t\tifTrue: [ [ operand respondsTo: operator asSymbol ]\r\t\t\t\tifTrue: [ left := operand.\r\t\t\t\t\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\t\t\t\t\tensure: [ self unlink ] ].\r\t\t\t\t\tprocess := operationBlock newProcess.\r\t\t\t\t\t[ self setLinks: operand.\r\t\t\t\t\tprocess resume.\r\t\t\t\t\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\t\t\t\t\tself setUpMenu..\r\t\t\t\t\t^ composer view ] ]',			#stamp : 'YaroslavKormushyn 9/23/2019 15:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:28:25.506022+03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNotNil & operand isNotNil\r\t\tifTrue: [ [ operand respondsTo: operator asSymbol ]\r\t\t\t\tifTrue: [ left := operand.\r\t\t\t\t\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\t\t\t\t\tensure: [ self unlink ] ].\r\t\t\t\t\tprocess := operationBlock newProcess.\r\t\t\t\t\t[ self setLinks: operand.\r\t\t\t\t\tprocess resume.\r\t\t\t\t\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\t\t\t\t\tself setUpMenu..\r\t\t\t\t\t^ composer view ] ]',			#stamp : 'YaroslavKormushyn 9/23/2019 15:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil | (operand respondsTo: operator asSymbol) \r\t\t\t\tifTrue: [ left := operand.\r\t\t\t\t\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\t\t\t\t\tensure: [ self unlink ] ].\r\t\t\t\t\tprocess := operationBlock newProcess.\r\t\t\t\t\t[ self setLinks: operand.\r\t\t\t\t\tprocess resume.\r\t\t\t\t\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\t\t\t\t\tself setUpMenu.\r\t\t\t\t\t^ composer view ]',			#stamp : 'YaroslavKormushyn 9/23/2019 15:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:30:04.788022+03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil | (operand respondsTo: operator asSymbol) \r\t\t\t\tifTrue: [ left := operand.\r\t\t\t\t\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\t\t\t\t\tensure: [ self unlink ] ].\r\t\t\t\t\tprocess := operationBlock newProcess.\r\t\t\t\t\t[ self setLinks: operand.\r\t\t\t\t\tprocess resume.\r\t\t\t\t\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\t\t\t\t\tself setUpMenu.\r\t\t\t\t\t^ composer view ]',			#stamp : 'YaroslavKormushyn 9/23/2019 15:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\t(operator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not)\r\t\tifTrue: [ Error signal: \'What?\'].\r\t\t\r\tleft := operand.\r\t\t\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\t\t\tensure: [ self unlink ] ].\r\t\t\tprocess := operationBlock newProcess.\r\t\t\t[ self setLinks: operand.\r\t\t\tprocess resume.\r\t\t\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\t\t\tself setUpMenu.\r\t\t\t^ composer view',			#stamp : 'YaroslavKormushyn 9/23/2019 15:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:30:18.943022+03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestLNUSparseMatrix\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix\'',				#superclassName : 'PackageManifest'			},			#name : #ManifestLNUSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestLNUSparseMatrix class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestLNUSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestLNUSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:30:18.948022+03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpCategoryAddition {		#classCategoryName : #LNU-SparseMatrix-Manifest,		#affectedPackageName : #LNU-SparseMatrix	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:30:18.954022+03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpBehaviorCategoryChange {		#oldCategory : #LNU-SparseMatrix,		#newCategory : #LNU-SparseMatrix-Manifest,		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestLNUSparseMatrix\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Manifest\'',				#superclassName : 'PackageManifest'			},			#name : #ManifestLNUSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestLNUSparseMatrix class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestLNUSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestLNUSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Manifest,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:30:18.968022+03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PackageManifest subclass: #ManifestLNUSparseMatrix\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Manifest\'',				#superclassName : 'PackageManifest'			},			#name : #ManifestLNUSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ManifestLNUSparseMatrix class\r\tinstanceVariableNames: \'\''				},				#name : #'ManifestLNUSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestLNUSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Manifest,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:30:18.977022+03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestLNUSparseMatrix class',				#isMetaSide : true			},			#name : #ruleRBBadMessageRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBBadMessageRuleV1FalsePositive\r\t^ #()',			#stamp : 'YaroslavKormushyn 9/23/2019 15:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:30:18.985022+03:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestLNUSparseMatrix class',				#isMetaSide : true			},			#name : #ruleRBBadMessageRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBBadMessageRuleV1FalsePositive\r\t^ #()',			#stamp : 'YaroslavKormushyn 9/23/2019 15:30',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestLNUSparseMatrix class',				#isMetaSide : true			},			#name : #ruleRBBadMessageRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBBadMessageRuleV1FalsePositive\r\t^ #(#(#(#RGMethodDefinition #(#LinkedDataVisualizer #show:on: #false)) #\'2019-09-23T15:30:18.978022+03:00\') )',			#stamp : 'YaroslavKormushyn 9/23/2019 15:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:30:28.272022+03:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestLNUSparseMatrix class',				#isMetaSide : true			},			#name : #ruleRBBadMessageRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBBadMessageRuleV1FalsePositive\r\t^ #(#(#(#RGMethodDefinition #(#LinkedDataVisualizer #show:on: #false)) #\'2019-09-23T15:30:18.978022+03:00\') )',			#stamp : 'YaroslavKormushyn 9/23/2019 15:30',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestLNUSparseMatrix class',				#isMetaSide : true			},			#name : #ruleRBBadMessageRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleRBBadMessageRuleV1FalsePositive\r\t^ #(#(#(#RGMethodDefinition #(#LinkedDataVisualizer #show:on: #false)) #\'2019-09-23T15:30:18.978022+03:00\') #(#(#RGClassDefinition #(#LinkedDataVisualizer)) #\'2019-09-23T15:30:28.252022+03:00\') )',			#stamp : 'YaroslavKormushyn 9/23/2019 15:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:31:42.772022+03:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes left right result process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes left right operation result process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operation,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @51				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @51			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @51,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:31:52.197022+03:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\t(operator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not)\r\t\tifTrue: [ Error signal: \'What?\'].\r\t\t\r\tleft := operand.\r\t\t\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\t\t\tensure: [ self unlink ] ].\r\t\t\tprocess := operationBlock newProcess.\r\t\t\t[ self setLinks: operand.\r\t\t\tprocess resume.\r\t\t\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\t\t\tself setUpMenu.\r\t\t\t^ composer view',			#stamp : 'YaroslavKormushyn 9/23/2019 15:30',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not\r\t\tifTrue: [ Error signal: \'What?\' ].\r\tleft := operand.\r\toperation := operator.\r\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\tensure: [ self unlink ] ].\r\tprocess := operationBlock newProcess.\r\t[ self setLinks: operand.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenu.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 9/23/2019 15:31',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:32:03.977022+03:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not\r\t\tifTrue: [ Error signal: \'What?\' ].\r\tleft := operand.\r\toperation := operator.\r\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\tensure: [ self unlink ] ].\r\tprocess := operationBlock newProcess.\r\t[ self setLinks: operand.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenu.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 9/23/2019 15:31',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not\r\t\tifTrue: [ Error signal: \'What?\' ].\r\tleft := operand.\r\toperation := operator.\r\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\tensure: [ self unlink ] ].\r\tprocess := operationBlock newProcess.\r\t[ self setLinks.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenu.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 9/23/2019 15:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:49:29.434022+03:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 14:46',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 15:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:52:45.852022+03:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setLinks,			#protocol : #'as yet unclassified',			#sourceCode : 'setLinks\r"set links for operands in method operator and the result of its execution"',			#stamp : 'YaroslavKormushyn 9/23/2019 15:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:52:45.865022+03:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setLinks,			#protocol : #'as yet unclassified',			#sourceCode : 'setLinks\r"set links for operands in method operator and the result of its execution"',			#stamp : 'YaroslavKormushyn 9/23/2019 15:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setLinks,			#protocol : #initialization,			#sourceCode : 'setLinks\r"set links for operands in method operator and the result of its execution"',			#stamp : 'YaroslavKormushyn 9/23/2019 15:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T15:59:15.794022+03:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes left right operation result process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #left,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #right,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operation,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #result,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes operation operands process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operation,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operands,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @53				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @53				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @53			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @53,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T16:00:13.957022+03:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 15:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tgap := 35.\r\telementSize := 30.\r\tcolors := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> Color blue).\r\t\t\t(#select -> Color red).\r\t\t\t(#highlight -> Color yellow).\r\t\t\t(#label -> Color white)}.\r\tshapes := Dictionary\r\t\tnewFrom:\r\t\t\t{(#data -> self getDefaultDataElementShape).\r\t\t\t(#header -> self getDefaultHeaderElementShape).\r\t\t\t(#edgeBuilder -> self getDefaultEdgeShapeBuilder)}.\r\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: gap.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.\r\tnamedGroups := {}.\r\tbackgroundGroups := {}.\r\tmetaLinks := OrderedCollection new.\r\tdelay := Delay new.\r\tsemaphore := Semaphore new',			#stamp : 'YaroslavKormushyn 9/23/2019 16:00',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T16:00:32.179022+03:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not\r\t\tifTrue: [ Error signal: \'What?\' ].\r\tleft := operand.\r\toperation := operator.\r\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\tensure: [ self unlink ] ].\r\tprocess := operationBlock newProcess.\r\t[ self setLinks.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenu.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 9/23/2019 15:32',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'show:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'show: operator on: operand\r\toperator isNil | operand isNil\r\t\t| (operand respondsTo: operator asSymbol) not\r\t\tifTrue: [ Error signal: \'What?\' ].\r\t\t\t\toperands := Dictionary newFrom: { (#left -> operand) }.\r\toperation := operator.\r\toperationBlock := [ [ operand perform: operator asSymbol ]\r\t\tensure: [ self unlink ] ].\r\tprocess := operationBlock newProcess.\r\t[ self setLinks.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenu.\r\t^ composer view',			#stamp : 'YaroslavKormushyn 9/23/2019 16:00',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T17:47:37.666022+03:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setView,			#protocol : #'as yet unclassified',			#sourceCode : 'setView\roperands keysAndValuesDo: [ :key :value |\r\tself display: value.\r\tcomposer group: key.\r\t ].',			#stamp : 'YaroslavKormushyn 9/23/2019 17:47',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T17:47:37.677022+03:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setView,			#protocol : #'as yet unclassified',			#sourceCode : 'setView\roperands keysAndValuesDo: [ :key :value |\r\tself display: value.\r\tcomposer group: key.\r\t ].',			#stamp : 'YaroslavKormushyn 9/23/2019 17:47',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #setView,			#protocol : #initialization,			#sourceCode : 'setView\roperands keysAndValuesDo: [ :key :value |\r\tself display: value.\r\tcomposer group: key.\r\t ].',			#stamp : 'YaroslavKormushyn 9/23/2019 17:47',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T17:54:01.065022+03:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #'as yet unclassified',			#sourceCode : 'display: linkedStructure\r\t|nodes elements|\r\t(linkedStructure respondsTo: #viewElements) not \r\tifTrue: [ ^ Error signal: \'Container should expose \', #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @RTDraggable @RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements.',			#stamp : 'YaroslavKormushyn 9/23/2019 17:54',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T17:54:01.099022+03:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #'as yet unclassified',			#sourceCode : 'display: linkedStructure\r\t|nodes elements|\r\t(linkedStructure respondsTo: #viewElements) not \r\tifTrue: [ ^ Error signal: \'Container should expose \', #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @RTDraggable @RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements.',			#stamp : 'YaroslavKormushyn 9/23/2019 17:54',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #accessing,			#sourceCode : 'display: linkedStructure\r\t|nodes elements|\r\t(linkedStructure respondsTo: #viewElements) not \r\tifTrue: [ ^ Error signal: \'Container should expose \', #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @RTDraggable @RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements.',			#stamp : 'YaroslavKormushyn 9/23/2019 17:54',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T17:54:31.158022+03:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpCompositeRefactoring {		#childrenRefactorings : [ ]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2019-09-23T17:54:31.186022+03:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #accessing,			#sourceCode : 'display: linkedStructure\r\t|nodes elements|\r\t(linkedStructure respondsTo: #viewElements) not \r\tifTrue: [ ^ Error signal: \'Container should expose \', #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @RTDraggable @RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements.',			#stamp : 'YaroslavKormushyn 9/23/2019 17:54',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'display:',			#protocol : #accessing,			#sourceCode : 'display: linkedStructure\r\t| nodes elements |\r\t(linkedStructure respondsTo: #viewElements)\r\t\tifFalse: [ ^ Error\r\t\t\t\tsignal: \'Container should expose \' , #viewElements asByteString ].\r\tnodes := linkedStructure viewElements.\r\telements := (shapes at: #data) elementsOn: nodes.\r\telements @ RTDraggable @ RTPopup.\r\tcomposer view addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 9/23/2019 17:54',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:08:58.577022+03:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes operation operands process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operation,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operands,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes operation operands process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore linkMessages\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operation,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operands,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @49				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #linkMessages,					#parent : @49				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @49			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @49,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:08:58.651022+03:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'drawEdgesWith:',			#protocol : #'as yet unclassified',			#sourceCode : 'drawEdgesWith: elements\r\t|edgeBuilder|\r\tedgeBuilder := shapes at: #edgeBuilder.\r\tedgeBuilder elements: elements.\r\tedgeBuilder\r\t\tconnectTo: [ :el | \r\t\t\tlinkMessages collect: [ :msg | el perform: msg asSymbol ]\r\t\t\tthenReject: [ :res | res isNil ]\r\t\t\t ].',			#stamp : 'YaroslavKormushyn 9/23/2019 18:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:08:58.677022+03:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'drawEdgesWith:',			#protocol : #'as yet unclassified',			#sourceCode : 'drawEdgesWith: elements\r\t|edgeBuilder|\r\tedgeBuilder := shapes at: #edgeBuilder.\r\tedgeBuilder elements: elements.\r\tedgeBuilder\r\t\tconnectTo: [ :el | \r\t\t\tlinkMessages collect: [ :msg | el perform: msg asSymbol ]\r\t\t\tthenReject: [ :res | res isNil ]\r\t\t\t ].',			#stamp : 'YaroslavKormushyn 9/23/2019 18:08',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'drawEdgesWith:',			#protocol : #private,			#sourceCode : 'drawEdgesWith: elements\r\t|edgeBuilder|\r\tedgeBuilder := shapes at: #edgeBuilder.\r\tedgeBuilder elements: elements.\r\tedgeBuilder\r\t\tconnectTo: [ :el | \r\t\t\tlinkMessages collect: [ :msg | el perform: msg asSymbol ]\r\t\t\tthenReject: [ :res | res isNil ]\r\t\t\t ].',			#stamp : 'YaroslavKormushyn 9/23/2019 18:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:15:36.810022+03:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #utility,			#sourceCode : 'viewElements\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0 ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'YaroslavKormushyn 9/23/2019 18:15',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:15:53.959022+03:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #private,			#sourceCode : 'viewElements\r\t| result |\r\tself isEmpty\r\t\tifTrue: [ ^ rows\r\t\t\t\tcollectWithIndex: [ :head :rowIndex | MatrixElement row: rowIndex column: 0 value: nil ] ]\r\t\tifFalse: [ ^ (rows\r\t\t\t\tcollectWithIndex: [ :head :rowIndex | \r\t\t\t\t\tresult := OrderedCollection\r\t\t\t\t\t\twith: (MatrixElement row: rowIndex column: 0 value: nil).\r\t\t\t\t\tresult\r\t\t\t\t\t\taddAll:\r\t\t\t\t\t\t\t(head asOrderedCollection\r\t\t\t\t\t\t\t\tcollectWithIndex: [ :el :ind | \r\t\t\t\t\t\t\t\t\tMatrixElement\r\t\t\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\t\t\tcolumn: el column\r\t\t\t\t\t\t\t\t\t\tvalue: el value\r\t\t\t\t\t\t\t\t\t\tsource: el ]).\r\t\t\t\t\tresult\r\t\t\t\t\t\twithIndexDo: [ :el :ind | \r\t\t\t\t\t\t\tind % result size = 0\r\t\t\t\t\t\t\t\tifFalse: [ el next: (result at: ind + 1) ] ].\r\t\t\t\t\tresult ]) flattened ]',			#stamp : 'YaroslavKormushyn 9/23/2019 18:15',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:16:03.779022+03:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #private,			#sourceCode : 'viewElements\r\t| result marker |\r\tself isEmpty\r\t\tifTrue: [ result := rows asOrderedCollection.\r\t\t\tresult addAll: columns ]\r\t\tifFalse: [ result := rows asOrderedCollection.\r\t\t\tresult addAll: columns.\r\t\t\t1 to: rows size do: [ :rowInd | \r\t\t\t\tmarker := (rows at: rowInd) rightNeighbour.\r\t\t\t\t[ marker isNotNil and: [ marker column ~= 0 ] ]\r\t\t\t\t\twhileTrue: [ result add: marker.\r\t\t\t\t\t\tmarker := marker rightNeighbour ] ] ].\r\t^ result',			#stamp : 'YaroslavKormushyn 9/23/2019 18:16',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:16:44.852022+03:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #private,			#sourceCode : 'viewElements\r\t| result marker |\r\tself isEmpty\r\t\tifTrue: [ result := rows asOrderedCollection.\r\t\t\tresult addAll: columns ]\r\t\tifFalse: [ result := rows asOrderedCollection.\r\t\t\tresult addAll: columns.\r\t\t\t1 to: rows size do: [ :rowInd | \r\t\t\t\tmarker := (rows at: rowInd) rightNeighbour.\r\t\t\t\t[ marker isNotNil and: [ marker column ~= 0 ] ]\r\t\t\t\t\twhileTrue: [ result add: marker.\r\t\t\t\t\t\tmarker := marker rightNeighbour ] ] ].\r\t^ result',			#stamp : 'YaroslavKormushyn 9/23/2019 18:16',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #private,			#sourceCode : 'viewElements\r\t| result marker |\r\tresult := rows asOrderedCollection.\r\t\t\tresult addAll: columns.\r\tself isEmpty\r\t\tifFalse: [ \r\t\t\t1 to: rows size do: [ :rowInd | \r\t\t\t\tmarker := (rows at: rowInd) rightNeighbour.\r\t\t\t\t[ marker isNotNil and: [ marker column ~= 0 ] ]\r\t\t\t\t\twhileTrue: [ result add: marker.\r\t\t\t\t\t\tmarker := marker rightNeighbour ] ] ].\r\t^ result',			#stamp : 'YaroslavKormushyn 9/23/2019 18:16',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:17:27.904022+03:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #private,			#sourceCode : 'viewElements\r\t| result marker |\r\tresult := rows asOrderedCollection.\r\t\t\tresult addAll: columns.\r\tself isEmpty\r\t\tifFalse: [ \r\t\t\t1 to: rows size do: [ :rowInd | \r\t\t\t\tmarker := (rows at: rowInd) rightNeighbour.\r\t\t\t\t[ marker isNotNil and: [ marker column ~= 0 ] ]\r\t\t\t\t\twhileTrue: [ result add: marker.\r\t\t\t\t\t\tmarker := marker rightNeighbour ] ] ].\r\t^ result',			#stamp : 'YaroslavKormushyn 9/23/2019 18:16',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #private,			#sourceCode : 'viewElements\r\t| result marker |\r\tresult := rows asOrderedCollection.\r\tresult addAll: columns.\r\tself isEmpty\r\t\tifFalse: [ (1 to: rows size) do: [ :rowInd | \r\t\t\t\tmarker := (rows at: rowInd) rightNeighbour.\r\t\t\t\t[ marker isNotNil and: [ marker column ~= 0 ] ]\r\t\t\t\t\twhileTrue: [ result add: marker.\r\t\t\t\t\t\tmarker := marker rightNeighbour ] ] ].\r\t^ result',			#stamp : 'YaroslavKormushyn 9/23/2019 18:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:17:36.610022+03:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #private,			#sourceCode : 'viewElements\r\t| result marker |\r\tresult := rows asOrderedCollection.\r\tresult addAll: columns.\r\tself isEmpty\r\t\tifFalse: [ (1 to: rows size) do: [ :rowInd | \r\t\t\t\tmarker := (rows at: rowInd) rightNeighbour.\r\t\t\t\t[ marker isNotNil and: [ marker column ~= 0 ] ]\r\t\t\t\t\twhileTrue: [ result add: marker.\r\t\t\t\t\t\tmarker := marker rightNeighbour ] ] ].\r\t^ result',			#stamp : 'YaroslavKormushyn 9/23/2019 18:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #viewElements,			#protocol : #private,			#sourceCode : 'viewElements\r\t| result marker |\r\tresult := rows asOrderedCollection.\r\tresult addAll: columns.\r\tself isEmpty\r\t\tifFalse: [ 1 to: rows size\r\t\t\t\tdo: [ :rowInd | \r\t\t\t\t\tmarker := (rows at: rowInd) rightNeighbour.\r\t\t\t\t\t[ marker isNotNil and: [ marker column ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ result add: marker.\r\t\t\t\t\t\t\tmarker := marker rightNeighbour ] ] ].\r\t^ result',			#stamp : 'YaroslavKormushyn 9/23/2019 18:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:32:06.689022+03:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'setPositionsFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsFor: elements\r\telements\r\treject: [ :e | e model isNil ] thenDo:[ :e | \r\t\t\t| aNode |\r\t\t\taNode := e model.\r\t\t\te translateTo: (elementSize + gap) * (aNode column @ aNode row) ]',			#stamp : 'YaroslavKormushyn 9/23/2019 18:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-23T18:32:06.700022+03:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'setPositionsFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsFor: elements\r\telements\r\treject: [ :e | e model isNil ] thenDo:[ :e | \r\t\t\t| aNode |\r\t\t\taNode := e model.\r\t\t\te translateTo: (elementSize + gap) * (aNode column @ aNode row) ]',			#stamp : 'YaroslavKormushyn 9/23/2019 18:32',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'setPositionsFor:',			#protocol : #initialization,			#sourceCode : 'setPositionsFor: elements\r\telements\r\treject: [ :e | e model isNil ] thenDo:[ :e | \r\t\t\t| aNode |\r\t\t\taNode := e model.\r\t\t\te translateTo: (elementSize + gap) * (aNode column @ aNode row) ]',			#stamp : 'YaroslavKormushyn 9/23/2019 18:32',			#package : #LNU-SparseMatrix		}	}}