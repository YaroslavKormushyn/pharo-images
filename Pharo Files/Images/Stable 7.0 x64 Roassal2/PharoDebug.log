THERE_BE_DRAGONS_HERE
User Interrupt
27 April 2019 12:28:50.50129 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmalltalkImage>>wordSize
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	nil
		vm: 	a VirtualMachine


Alien class>>invokeCallbackContext:
	Receiver: Alien
	Arguments and temporary variables: 
		type: 	nil
		vmCallbackContextAddress: 	11890544
		callbackAlien: 	nil
	Receiver's instance variables: 
		superclass: 	ByteArray
		methodDict: 	a MethodDictionary(#address->Alien>>#address #addressField->Alien>>...etc...
		format: 	1048576
		layout: 	a ByteLayout
		organization: 	a ClassOrganization
		subclasses: 	{FFICallbackReturnValue. FFICallbackThunk. VMCallbackContext32. VMC...etc...
		name: 	#Alien
		classPool: 	a Dictionary(#GCMallocedAliens->an AlienWeakTable #LoadedLibraries->...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Alien-Core'
		lifoCallbackSemaphore: 	a Semaphore()


LGitRepository>>clone:url:local_path:options:
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 
		out: 	a LGitRepository (<not initialized>)
		url: 	'https://github.com/ObjectProfile/Roassal2.git'
		local_path: 	'C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectProfile\Roass...etc...
		options: 	a LGitCloneOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectPro...etc...
		isOpen: 	nil
		workingDirectory: 	nil


[ self
	clone: self
	url: aString
	local_path: aFileReference pathString
	options: cloneOptions ] in LGitRepository>>clone:options:to:
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 
		aString: 	'https://github.com/ObjectProfile/Roassal2.git'
		cloneOptions: 	a LGitCloneOptions ()
		aFileReference: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectPro...etc...
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectPro...etc...
		isOpen: 	nil
		workingDirectory: 	nil


LGitRepository(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 
		callBlock: 	[ self
	clone: self
	url: aString
	local_path: aFileReference pathSt...etc...
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectPro...etc...
		isOpen: 	nil
		workingDirectory: 	nil


LGitRepository>>clone:options:to:
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 
		aString: 	'https://github.com/ObjectProfile/Roassal2.git'
		cloneOptions: 	a LGitCloneOptions ()
		aFileReference: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectPro...etc...
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectPro...etc...
		isOpen: 	nil
		workingDirectory: 	nil


LGitRepository>>clone:options:
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 
		aString: 	'https://github.com/ObjectProfile/Roassal2.git'
		cloneOptions: 	a LGitCloneOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectPro...etc...
		isOpen: 	nil
		workingDirectory: 	nil


[ location ensureCreateDirectory.
repo := LGitRepository on: location.
cloneOptions := LGitCloneOptions
	withCredentialsProvider: (IceCredentialsProvider defaultForRemoteUrl: url).

"Keeping references, because if not the GC take them."
checkoutOptions := cloneOptions checkoutOptions.
callbacks := cloneOptions fetchOptions callbacks.
callbacks transferProgress: IceGitTransferProgress new.
checkoutOptions
	checkoutStrategy: LGitCheckoutStrategyEnum git_checkout_force.
checkoutOptions progressCallback: IceGitCheckoutProgress new.
repo clone: url options: cloneOptions.
(LGitRemote of: repo named: 'origin')
	lookup;
	setUrl: url ] in IceGitClone>>execute
	Receiver: an IceGitClone
	Arguments and temporary variables: 
		checkoutOptions: 	a LGitCheckoutOptions ()
		repo: 	a LGitRepository (<not initialized>)
		cloneOptions: 	a LGitCloneOptions ()
		callbacks: 	a LGitRemoteCallbacks ()
	Receiver's instance variables: 
		location: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectProfile\R...etc...
		url: 	'https://github.com/ObjectProfile/Roassal2.git'


BlockClosure>>on:do:
	Receiver: [ location ensureCreateDirectory.
repo := LGitRepository on: location.
cloneOptions := LGi...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :error | 
location exists
	ifTrue: [ location ensureDeleteAll ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitClone>>execute
		startpc: 	320
		numArgs: 	0


IceGitClone>>execute
	Receiver: an IceGitClone
	Arguments and temporary variables: 
		checkoutOptions: 	a LGitCheckoutOptions ()
		repo: 	a LGitRepository (<not initialized>)
		cloneOptions: 	a LGitCloneOptions ()
		callbacks: 	a LGitRemoteCallbacks ()
	Receiver's instance variables: 
		location: 	File @ C:\Stable 7.0 x64 Roassal2\pharo-local\iceberg\ObjectProfile\R...etc...
		url: 	'https://github.com/ObjectProfile/Roassal2.git'


IceRepositoryCreator>>cloneRepository
	Receiver: an IceRepositoryCreator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		location: 	nil
		url: 	'https://github.com/ObjectProfile/Roassal2.git'
		remote: 	nil
		branchName: 	'master'
		subdirectory: 	'src'
		repository: 	nil
		ensureProjectFile: 	true


[ self validate.
self isCloning
	ifTrue: [ self cloneRepository ]
	ifFalse: [ self addLocalRepository ] ] in IceRepositoryCreator>>createRepository
	Receiver: an IceRepositoryCreator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		location: 	nil
		url: 	'https://github.com/ObjectProfile/Roassal2.git'
		remote: 	nil
		branchName: 	'master'
		subdirectory: 	'src'
		repository: 	nil
		ensureProjectFile: 	true


BlockClosure>>on:do:
	Receiver: [ self validate.
self isCloning
	ifTrue: [ self cloneRepository ]
	ifFalse: [ self addLoca...etc...
	Arguments and temporary variables: 
		exception: 	IceDuplicatedRepository
		handlerAction: 	[ :e | "This is a HACK to allow process to recover from here" e ...etc...
	Receiver's instance variables: 
		outerContext: 	IceRepositoryCreator>>createRepository
		startpc: 	93
		numArgs: 	0


IceRepositoryCreator>>createRepository
	Receiver: an IceRepositoryCreator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		location: 	nil
		url: 	'https://github.com/ObjectProfile/Roassal2.git'
		remote: 	nil
		branchName: 	'master'
		subdirectory: 	'src'
		repository: 	nil
		ensureProjectFile: 	true


[ repository := builder createRepository ] in MCGitHubRepository(MCGitBasedNetworkRepository)>>createIcebergRepositoryFor:
	Receiver: a MCGitHubRepository(github://ObjectProfile/Roassal2:master/src)
	Arguments and temporary variables: 
		remoteUrl: 	'https://github.com/ObjectProfile/Roassal2.git'
		builder: 	an IceRepositoryCreator
		repository: 	nil
	Receiver's instance variables: 
		creationTemplate: 	nil
		projectPath: 	'ObjectProfile/Roassal2'
		projectVersion: 	'master'
		repoPath: 	'src'
		projectVersionPattern: 	nil
		localRepository: 	nil


BlockClosure>>on:do:
	Receiver: [ repository := builder createRepository ]
	Arguments and temporary variables: 
		exception: 	IceDuplicatedRepository
		handlerAction: 	[ :e | 
e
	resignalAs:
		(IceMetacelloDuplicatedNotification new...etc...
	Receiver's instance variables: 
		outerContext: 	MCGitHubRepository(MCGitBasedNetworkRepository)>>createIcebergRep...etc...
		startpc: 	166
		numArgs: 	0


MCGitHubRepository(MCGitBasedNetworkRepository)>>createIcebergRepositoryFor:
	Receiver: a MCGitHubRepository(github://ObjectProfile/Roassal2:master/src)
	Arguments and temporary variables: 
		repository: 	nil
		remoteUrl: 	'https://github.com/ObjectProfile/Roassal2.git'
		builder: 	an IceRepositoryCreator
	Receiver's instance variables: 
		creationTemplate: 	nil
		projectPath: 	'ObjectProfile/Roassal2'
		projectVersion: 	'master'
		repoPath: 	'src'
		projectVersionPattern: 	nil
		localRepository: 	nil


[ ^ self createIcebergRepositoryFor: urlToUse ] in MCGitHubRepository(MCGitBasedNetworkRepository)>>createIcebergRepositoryWithFallbackFor:url:
	Receiver: a MCGitHubRepository(github://ObjectProfile/Roassal2:master/src)
	Arguments and temporary variables: 
		remote: 	noname (git@github.com:ObjectProfile/Roassal2.git)
		remoteUrl: 	'git@github.com:ObjectProfile/Roassal2.git'
		urlToUse: 	'https://github.com/ObjectProfile/Roassal2.git'
	Receiver's instance variables: 
		creationTemplate: 	nil
		proTHERE_BE_DRAGONS_HERE
Instance of RTComposer did not understand #groupToExisting:
27 April 2019 12:37:58.53129 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTComposer(Object)>>doesNotUnderstand: #groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aMessage: 	groupToExisting: #labels
		exception: 	MessageNotUnderstood: RTComposer>>groupToExisting:
		resumeValue: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape)
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


[ leftSavedMatrixMarker := leftMatrixMarker := first.
self activate: leftMatrixMarker in: #left on: composer.
rightMatrixMarker := transposed first.
self activate: rightMatrixMarker in: #right on: composer.
currentLeftRow := leftMatrixMarker row.
currentRightColumn := rightMatrixMarker row.
leftMarkerElement := (COOSparseMatrixVisualizer new
	getElementShapeScaled: 5) elementOn: leftMatrixMarker.
composer view add: leftMarkerElement.
composer group: #leftMarker.
rightMarkerElement := (COOSparseMatrixVisualizer new
	getElementShapeScaled: 5) elementOn: rightMatrixMarker.
composer view add: rightMarkerElement.
composer group: #rightMarker.
composer move: #leftMarker below: #left.
composer move: #rightMarker below: #right.
composer nameGroup: #leftMarker as: 'left marker'.
composer nameGroup: #rightMarker as: 'right marker'.
composer groupToExisting: #labels.
composer view signalUpdate.
sum := 0.
self
	withEscaper: [ :end | 
		[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]
			whileTrue: [ self
					withEscaper: [ :outer | 
						"Switch to next row in left and reset right marker if right ended"
						rightMatrixMarker isNil
							ifTrue: [ rightMatrixMarker := transposed first.
								leftSavedMatrixMarker := leftMatrixMarker.
								self activate: leftMatrixMarker in: #left on: composer.
								self activate: rightMatrixMarker in: #right on: composer.
								leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
								rightMarkerElement updateModelAndRedraw: rightMatrixMarker.
								(Delay forSeconds: 1) wait ].
						"reset left marker to row beginning"
						self deactivate: leftMatrixMarker in: #left on: composer.
						(Delay forSeconds: 1) wait.
						leftMatrixMarker := leftSavedMatrixMarker.
						self activate: leftMatrixMarker in: #left on: composer.
						leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
						(Delay forSeconds: 1) wait.
						currentLeftRow := leftMatrixMarker row.
						currentRightColumn := rightMatrixMarker row.
						self
							withEscaper: [ :next | 
								[ leftMatrixMarker isNotNil
									and: [ rightMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow
													and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
									whileTrue: [ priorityColumn := {leftMatrixMarker column.
										rightMatrixMarker column} max.
										"Find same column as prioritized or higher in left"
										[ leftMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow
													and: [ leftMatrixMarker column < priorityColumn ] ] ]
											whileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.
												(Delay forSeconds: 1) wait.
												leftMatrixMarker := leftMatrixMarker rightNeighbour.
												self activate: leftMatrixMarker in: #left on: composer.
												leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
												(Delay forSeconds: 1) wait ].
										leftMatrixMarker isNil
											ifTrue: [ [ rightMatrixMarker isNotNil
													and: [ rightMatrixMarker row = currentRightColumn ] ]
													whileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.
														(Delay forSeconds: 1) wait.
														rightMatrixMarker := rightMatrixMarker rightNeighbour.
														rightMatrixMarker isNotNil
															ifTrue: [ self activate: rightMatrixMarker in: #right on: composer.
																rightMarkerElement
																	updateModelAndRedraw: rightMatrixMarker.
																(Delay forSeconds: 1) wait ] ].

												"If no intersection - end"
												rightMatrixMarker isNil
													ifTrue: [ end value ].
												"Else - continue loop"
												next value ].
										leftMatrixMarker row ~= currentLeftRow
											ifTrue: [ [ rightMatrixMarker isNotNil
													and: [ rightMatrixMarker row = currentRightColumn ] ]
													whileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.
														(Delay forSeconds: 1) wait.
														rightMatrixMarker := rightMatrixMarker rightNeighbour.
														rightMatrixMarker isNotNil
															ifTrue: [ self activate: rightMatrixMarker in: #right on: composer.
																rightMarkerElement
																	updateModelAndRedraw: rightMatrixMarker.
																(Delay forSeconds: 1) wait ] ].
												next value ].
										priorityColumn := leftMatrixMarker column.

										"Find same column as prioritized or higher in right"
										[ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn
													and: [ rightMatrixMarker column < priorityColumn ] ] ]
											whileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.
												(Delay forSeconds: 1) wait.
												rightMatrixMarker := rightMatrixMarker rightNeighbour.
												rightMarkerElement updateModelAndRedraw: rightMatrixMarker.
												self activate: rightMatrixMarker in: #right on: composer.
												(Delay forSeconds: 1) wait ].
										rightMatrixMarker isNil
											ifTrue: [ [ leftMatrixMarker isNotNil
													and: [ leftMatrixMarker row = currentLeftRow ] ]
													whileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.
														(Delay forSeconds: 1) wait.
														leftMatrixMarker := leftMatrixMarker rightNeighbour.
														self activate: leftMatrixMarker in: #left on: composer.
														leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
														(Delay forSeconds: 1) wait ].

												"If no intersectioTHERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #on:withView:
30 April 2019 4:45:37.177881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #on:withView:
	Receiver: MatrixVisualizer class
	Arguments and temporary variables: 
		aMessage: 	on: a COOSparseMatrix withView: a RTView
		exception: 	MessageNotUnderstood: Metaclass>>on:withView:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object class
		methodDict: 	a MethodDictionary(#getComposedViewOf:with:result:->MatrixVisualize...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	MatrixVisualizer


MatrixVisualizer class>>getComposedViewOf:with:result:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		composer: 	a RTComposer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


COOSparseMatrix>>byMatrixAnimated:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		priorityColumn: 	nil
		leftMatrixMarker: 	nil
		sum: 	nil
		newNode: 	nil
		rightMarkerElement: 	nil
		nowProcessingElementIndex: 	nil
		currentRightColumn: 	nil
		leftSavedMatrixMarker: 	nil
		leftMarkerElement: 	nil
		operationProcess: 	nil
		currentLeftRow: 	nil
		rightMatrixMarker: 	nil
		aCOOSparseMatrix: 	a COOSparseMatrix
		composer: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationBlock: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModTHERE_BE_DRAGONS_HERE
Instance of COOSparseMatrix class did not understand #getComposedViewOf:with:result:
30 April 2019 4:46:05.155881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrix class(Object)>>doesNotUnderstand: #getComposedViewOf:with:result:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		aMessage: 	getComposedViewOf: a COOSparseMatrix with: a COOSparseMatrix result: ...etc...
		exception: 	MessageNotUnderstood: COOSparseMatrix class>>getComposedViewOf:with:...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


COOSparseMatrix>>byMatrixAnimated:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		priorityColumn: 	nil
		leftMatrixMarker: 	nil
		sum: 	nil
		newNode: 	nil
		rightMarkerElement: 	nil
		nowProcessingElementIndex: 	nil
		currentRightColumn: 	nil
		leftSavedMatrixMarker: 	nil
		leftMarkerElement: 	nil
		operationProcess: 	nil
		currentLeftRow: 	nil
		rightMatrixMarker: 	nil
		aCOOSparseMatrix: 	a COOSparseMatrix
		composer: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationBlock: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@297)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(366224128) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(829325056))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(385@400)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	12637643
		lastStepMessage: 	nil
		lastCycleTime: 	12637674
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	12637643
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	12637643
		lastStepMessage: 	nil
		lastCycleTime: 	12637674
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	12637643
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	12637643
		lastStepMessage: 	nil
		lastCycleTime: 	12637674
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	12637643
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrix class(Object)>>doesNotUnderstand: #getComposedViewOf:with:result:
COOSparseMatrix>>byMatrixAnimated:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Metaclass did not understand #on:withView:
30 April 2019 4:46:52.241881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Metaclass(Object)>>doesNotUnderstand: #on:withView:
	Receiver: MatrixVisualizer class
	Arguments and temporary variables: 
		aMessage: 	on: a COOSparseMatrix withView: a RTView
		exception: 	MessageNotUnderstood: Metaclass>>on:withView:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object class
		methodDict: 	a MethodDictionary(#getComposedViewOf:with:result:->MatrixVisualize...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		thisClass: 	MatrixVisualizer


MatrixVisualizer class>>getComposedViewOf:with:result:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		composer: 	a RTComposer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


COOSparseMatrix>>byMatrixAnimated:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		priorityColumn: 	nil
		leftMatrixMarker: 	nil
		sum: 	nil
		newNode: 	nil
		rightMarkerElement: 	nil
		nowProcessingElementIndex: 	nil
		currentRightColumn: 	nil
		leftSavedMatrixMarker: 	nil
		leftMarkerElement: 	nil
		operationProcess: 	nil
		currentLeftRow: 	nil
		rightMatrixMarker: 	nil
		aCOOSparseMatrix: 	a COOSparseMatrix
		composer: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationBlock: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@297)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(366224128) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(809744384))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(385@400)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	12684737
		lastStepMessage: 	nil
		lastCycleTime: 	12684768
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	12684737
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	12684737
		lastStepMessage: 	nil
		lastCycleTime: 	12684768
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	12684737
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	12684737
		lastStepMessage: 	nil
		lastCycleTime: 	12684768
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	12684737
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Metaclass(Object)>>doesNotUnderstand: #on:withView:
MatrixVisualizer class>>getComposedViewOf:with:result:
COOSparseMatrix>>byMatrixAnimated:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#nextInt: was sent to nil
30 April 2019 5:07:44.899881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #nextInt:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	nextInt: 100
		exception: 	MessageNotUnderstood: receiver of "nextInt:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ second := rand nextInt: 100
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@297)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(366224128) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(829501440))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	13937383
		lastStepMessage: 	nil
		lastCycleTime: 	13937440
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13937383
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	13937383
		lastStepMessage: 	nil
		lastCycleTime: 	13937440
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13937383
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	13937383
		lastStepMessage: 	nil
		lastCycleTime: 	13937440
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13937383
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #nextInt:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of RTGroup did not understand #addCallback:
30 April 2019 5:07:53.643881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTGroup(Object)>>doesNotUnderstand: #addCallback:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aMessage: 	addCallback: a TRExtentCallback
		exception: 	MessageNotUnderstood: RTGroup>>addCallback:
		resumeValue: 	nil
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement a RTElement a R...etc...
		firstIndex: 	1
		lastIndex: 	6
		attributes: 	nil
		elementFromModelCache: 	nil


TRConstraint class>>keepExtentOf:like:plus:
	Receiver: TRConstraint
	Arguments and temporary variables: 
		conformingShape: 	a TRRoundedBoxShape
		originShape: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElem...etc...
		aPoint: 	(5@5)
		b: 	[ :shape :step | self changeExtentOf: conformingShape like: originShape plus...etc...
	Receiver's instance variables: 
		superclass: 	TRObject
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TRConstraint
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Trachel-Core'


RTComposer>>setBackgroundColor:forGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aColor: 	(Color r: 0.5 g: 0.5 b: 0.5 alpha: 0.2)
		aName: 	#right
		backgroundBox: 	a TRRoundedBoxShape
		g: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement a RTEl...etc...
		outterGap: 	(5@5)
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


MatrixVisualizer class>>getComposedViewOf:with:result:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		composer: 	a RTComposer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


COOSparseMatrix>>byMatrixAnimated:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		priorityColumn: 	nil
		leftMatrixMarker: 	nil
		sum: 	nil
		newNode: 	nil
		rightMarkerElement: 	nil
		nowProcessingElementIndex: 	nil
		currentRightColumn: 	nil
		leftSavedMatrixMarker: 	nil
		leftMarkerElement: 	nil
		operationProcess: 	nil
		currentLeftRow: 	nil
		rightMatrixMarker: 	nil
		aCOOSparseMatrix: 	a COOSparseMatrix
		composer: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationBlock: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@145)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1042907392) a RubCursor(70210227...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(501240576))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	13946133
		lastStepMessage: 	nil
		lastCycleTime: 	13946156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13946133
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	13946133
		lastStepMessage: 	nil
		lastCycleTime: 	13946156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13946133
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	13946133
		lastStepMessage: 	nil
		lastCycleTime: 	13946156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13946133
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
RTGroup(Object)>>doesNotUnderstand: #addCallback:
TRConstraint class>>keepExtentOf:like:plus:
RTComposer>>setBackgroundColor:forGroup:
MatrixVisualizer class>>getComposedViewOf:with:result:
COOSparseMatrix>>byMatrixAnimated:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ClyFullBrowser did not understand #ui
30 April 2019 5:13:43.167881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ClyFullBrowser(Object)>>doesNotUnderstand: #ui
	Receiver: a ClyFullBrowser(1041805568)
	Arguments and temporary variables: 
		aMessage: 	ui
		exception: 	MessageNotUnderstood: ClyFullBrowser>>ui
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(572.0@179.0) corner: (1422.0@799.0)
		owner: 	a SystemWindow(54500352) named: RBSelectorEnvironment
		submorphs: 	an Array(a ProportionalSplitterMorph(89673728) a PanelMorph(68898739...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (583300864) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(688987392)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(277188096) a ClyQuery...etc...
		toolPanel: 	a PanelMorph(812330496)
		toolbar: 	a ClyToolbarMorph(213774080)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		packageView: 	a ClyQueryViewMorph(277188096)
		classView: 	a ClyQueryViewMorph(164852992)
		methodGroupView: 	a ClyQueryViewMorph(432750592)
		methodView: 	a ClyQueryViewMorph(789859328)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: RBSelectorEnvironm...etc...


RBSelectorEnvironment>>gtBrowseFor:
	Receiver: some methods
	Arguments and temporary variables: 
		aString: 	'Examples with literal "exampleBelowAndStick"'
		browser: 	a ClyFullBrowser(1041805568)
	Receiver's instance variables: 
		label: 	nil
		searchStrings: 	nil
		environment: 	Smalltalk
		classSelectors: 	an IdentityDictionary(#RTConstraintExample->an IdentitySet(#exa...etc...
		metaClassSelectors: 	an IdentityDictionary()


GtExampleNavigation class>>browse:examples:
	Receiver: GtExampleNavigation
	Arguments and temporary variables: 
		aString: 	'Examples with literal "exampleBelowAndStick"'
		aCollection: 	an OrderedCollection(a RTExampleSelection)
		env: 	some methods
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GtExampleNavigation
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GToolkit-Examples-UI'


GtExampleNavigation class>>browseExamples:select:
	Receiver: GtExampleNavigation
	Arguments and temporary variables: 
		aString: 	'Examples with literal "exampleBelowAndStick"'
		aBlock: 	[ :example | example hasLiteralThorough: aString ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GtExampleNavigation
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GToolkit-Examples-UI'


GtExampleNavigation class>>browseExamplesLiteralThorough:
	Receiver: GtExampleNavigation
	Arguments and temporary variables: 
		aString: 	'exampleBelowAndStick'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GtExampleNavigation
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GToolkit-Examples-UI'


[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ] in [ " this is yet too complicated - SIMPLIFY term and behavior for the user
			
			(lastItem := aBuilder item: #'Browse examples with subject ""' , selectedString , '""')
				action: [ GTExampleNavigation browseExamplesWithSubjectMatching: selectedString ].
			"
(lastItem := aBuilder
	item: #'Browse examples with literal "' , selectedString , '"')
	action: [ GtExampleNavigation browseExamplesLiteralThorough: selectedString ] ] in GtExampleRubEditor>>menuFor:
	Receiver: a GtExampleRubEditor
	Arguments and temporary variables: 
		aBuilder: 	nil
		selection: 	nil
		selectedText: 	nil
		selectedString: 	'exampleBelowAndStick'
	Receiver's instance variables: 
		lastItem: 	a PragmaMenuAndShortcutRegistration


BlockClosure>>cull:
	Receiver: [ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(629172224)
	Receiver's instance variables: 
		outerContext: 	[ " this is yet too complicated - SIMPLIFY term and behavior for ...etc...
		startpc: 	254
		numArgs: 	0


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		evt: 	[(930@423) mouseUp 505976437 nil]
		w: 	a WorldMorph(428085248) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
		selector: 	#cull:
		arguments: 	an Array(a RubEditingArea(629172224))
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		evt: 	[(930@423) mouseUp 505976437 nil]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
		selector: 	#cull:
		arguments: 	an Array(a RubEditingArea(629172224))
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		evt: 	[(930@423) mouseUp 505976437 nil]
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
		selector: 	#cull:
		arguments: 	an Array(a RubEditingArea(629172224))
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		anEvent: 	[(930@423) mouseUp 505976437 nil]
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseTHERE_BE_DRAGONS_HERE
Instance of ClyFullBrowser did not understand #ui
30 April 2019 5:13:50.875881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ClyFullBrowser(Object)>>doesNotUnderstand: #ui
	Receiver: a ClyFullBrowser(1041805568)
	Arguments and temporary variables: 
		aMessage: 	ui
		exception: 	MessageNotUnderstood: ClyFullBrowser>>ui
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(572.0@179.0) corner: (1422.0@799.0)
		owner: 	a SystemWindow(54500352) named: RBSelectorEnvironment
		submorphs: 	an Array(a ProportionalSplitterMorph(89673728) a PanelMorph(68898739...etc...
		fullBounds: 	(572@179) corner: (1422@799)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (583300864) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(688987392)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(277188096) a ClyQuery...etc...
		toolPanel: 	a PanelMorph(812330496)
		toolbar: 	a ClyToolbarMorph(213774080)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		packageView: 	a ClyQueryViewMorph(277188096)
		classView: 	a ClyQueryViewMorph(164852992)
		methodGroupView: 	a ClyQueryViewMorph(432750592)
		methodView: 	a ClyQueryViewMorph(789859328)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: RBSelectorEnvironm...etc...


Message>>sentTo:
	Receiver: ui
	Arguments and temporary variables: 
		receiver: 	a ClyFullBrowser(1041805568)
	Receiver's instance variables: 
		selector: 	#ui
		args: 	#()
		lookupClass: 	ClyFullBrowser


ClyFullBrowser(Object)>>doesNotUnderstand: #ui
	Receiver: a ClyFullBrowser(1041805568)
	Arguments and temporary variables: 
		aMessage: 	ui
		exception: 	MessageNotUnderstood: ClyFullBrowser>>ui
		resumeValue: 	MessageNotUnderstood: ClyFullBrowser>>ui
	Receiver's instance variables: 
		bounds: 	(572.0@179.0) corner: (1422.0@799.0)
		owner: 	a SystemWindow(54500352) named: RBSelectorEnvironment
		submorphs: 	an Array(a ProportionalSplitterMorph(89673728) a PanelMorph(68898739...etc...
		fullBounds: 	(572@179) corner: (1422@799)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (583300864) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(688987392)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(277188096) a ClyQuery...etc...
		toolPanel: 	a PanelMorph(812330496)
		toolbar: 	a ClyToolbarMorph(213774080)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		packageView: 	a ClyQueryViewMorph(277188096)
		classView: 	a ClyQueryViewMorph(164852992)
		methodGroupView: 	a ClyQueryViewMorph(432750592)
		methodView: 	a ClyQueryViewMorph(789859328)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: RBSelectorEnvironm...etc...


RBSelectorEnvironment>>gtBrowseFor:
	Receiver: some methods
	Arguments and temporary variables: 
		aString: 	'Examples with literal "exampleBelowAndStick"'
		browser: 	a ClyFullBrowser(1041805568)
	Receiver's instance variables: 
		label: 	nil
		searchStrings: 	nil
		environment: 	Smalltalk
		classSelectors: 	an IdentityDictionary(#RTConstraintExample->an IdentitySet(#exa...etc...
		metaClassSelectors: 	an IdentityDictionary()


GtExampleNavigation class>>browse:examples:
	Receiver: GtExampleNavigation
	Arguments and temporary variables: 
		aString: 	'Examples with literal "exampleBelowAndStick"'
		aCollection: 	an OrderedCollection(a RTExampleSelection)
		env: 	some methods
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GtExampleNavigation
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GToolkit-Examples-UI'


GtExampleNavigation class>>browseExamples:select:
	Receiver: GtExampleNavigation
	Arguments and temporary variables: 
		aString: 	'Examples with literal "exampleBelowAndStick"'
		aBlock: 	[ :example | example hasLiteralThorough: aString ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GtExampleNavigation
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GToolkit-Examples-UI'


GtExampleNavigation class>>browseExamplesLiteralThorough:
	Receiver: GtExampleNavigation
	Arguments and temporary variables: 
		aString: 	'exampleBelowAndStick'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GtExampleNavigation
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'GToolkit-Examples-UI'


[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ] in [ " this is yet too complicated - SIMPLIFY term and behavior for the user
			
			(lastItem := aBuilder item: #'Browse examples with subject ""' , selectedString , '""')
				action: [ GTExampleNavigation browseExamplesWithSubjectMatching: selectedString ].
			"
(lastItem := aBuilder
	item: #'Browse examples with literal "' , selectedString , '"')
	action: [ GtExampleNavigation browseExamplesLiteralThorough: selectedString ] ] in GtExampleRubEditor>>menuFor:
	Receiver: a GtExampleRubEditor
	Arguments and temporary variables: 
		aBuilder: 	nil
		selection: 	nil
		selectedText: 	nil
		selectedString: 	'exampleBelowAndStick'
	Receiver's instance variables: 
		lastItem: 	a PragmaMenuAndShortcutRegistration


BlockClosure>>cull:
	Receiver: [ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(629172224)
	Receiver's instance variables: 
		outerContext: 	[ " this is yet too complicated - SIMPLIFY term and behavior for ...etc...
		startpc: 	254
		numArgs: 	0


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		evt: 	[(930@423) mouseUp 505976437 nil]
		w: 	a WorldMorph(428085248) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
		selector: 	#cull:
		arguments: 	an Array(a RubEditingArea(629172224))
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		evt: 	[(930@423) mouseUp 505976437 nil]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
		selector: 	#cull:
		arguments: 	an Array(a RubEditingArea(629172224))
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		evt: 	[(930@423) mouseUp 505976437 nil]
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
		selector: 	#cull:
		arguments: 	an Array(a RubEditingArea(629172224))
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		anEvent: 	[(930@423) mouseUp 505976437 nil]
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
		selector: 	#cull:
		arguments: 	an Array(a RubEditingArea(629172224))
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(930@423) mouseUp 505976437 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampl...etc...
	Receiver's instance variables: 
		timeStamp: 	505976437
		source: 	a HandMorph(307716864)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(930@423)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(988158464)'Browse examples with literal "exampleBelowAndStick"'
	Arguments and temporary variables: 
		anEvent: 	[(930@423) mouseUp 505976437 nil]
	Receiver's instance variables: 
		bounds: 	(874.0@408.0) corner: (1184.0@425.0)
		owner: 	a MenuMorph(418546176)
		submorphs: 	#()
		fullBounds: 	(874.0@408.0) corner: (1184.0@425.0)
		color: 	Color black
		extension: 	a MorphExtension (696415488)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse examples with literal "exampleBelowAndStick"'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ GtExampleNavigation browseExamplesLiteralThorough: selectedString ]
		selector: 	#cull:
		arguments: 	an Array(a RubEditingArea(629172224))
		icon: 	nil
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1025 is out of range -1024 to 1023
30 April 2019 6:10:54.822881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1025 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1025
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1025
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1023
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 113)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 113)
		jumps: 	an IdentityDictionary(size 113)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	103
		currentSeqNum: 	113
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 113)
		instrMap: 	an OrderedCollection(send: #addMenu:callback:->1 popTop->4 pushTemp: ...etc...
		stacks: 	an IdentityDictionary(size 113)
		stack: 	an IRStackCount start 3 stop 0 max 3
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	7
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifNil: #ifFal...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	90
		toSeqId: 	12
		distance: 	1023
		from: 	96
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 113)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 113)
		jumps: 	an IdentityDictionary(size 113)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	103
		currentSeqNum: 	113
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 113)
		instrMap: 	an OrderedCollection(send: #addMenu:callback:->1 popTop->4 pushTemp: ...etc...
		stacks: 	an IdentityDictionary(size 113)
		stack: 	an IRStackCount start 3 stop 0 max 3
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	7
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifNil: #ifFal...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 90 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(90 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	90
		pair: 	an Array(0 from: 90 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 113)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 113)
		jumps: 	an IdentityDictionary(size 113)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	103
		currentSeqNum: 	113
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 113)
		instrMap: 	an OrderedCollection(send: #addMenu:callback:->1 popTop->4 pushTemp: ...etc...
		stacks: 	an IdentityDictionary(size 113)
		stack: 	an IRStackCount start 3 stop 0 max 3
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	7
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifNil: #ifFal...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	90
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 113)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 113)
		jumps: 	an IdentityDictionary(size 113)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	103
		currentSeqNum: 	113
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 113)
		instrMap: 	an OrderedCollection(send: #addMenu:callback:->1 popTop->4 pushTemp: ...etc...
		stacks: 	an IdentityDictionary(size 113)
		stack: 	an IRStackCount start 3 stop 0 max 3
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	7
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifNil: #ifFal...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	90
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	113


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	96
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	113


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	113


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 113)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 113)
		jumps: 	an IdentityDictionary(size 113)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	103
		currentSeqNum: 	113
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 113)
		instrMap: 	an OrderedCollection(send: #addMenu:callback:->1 popTop->4 pushTemp: ...etc...
		stacks: 	an IdentityDictionary(size 113)
		stack: 	an IRStackCount start 3 stop 0 max 3
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	7
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifNil: #ifFal...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 113)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 113)
		jumps: 	an IdentityDictionary(size 113)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	103
		currentSeqNum: 	113
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 113)
		instrMap: 	an OrderedCollection(send: #addMenu:callback:->1 popTop->4 pushTemp: ...etc...
		stacks: 	an IdentityDictionary(size 113)
		stack: 	an IRStackCount start 3 stop 0 max 3
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	7
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifNil: #ifFal...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35389543
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 113)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 113)
		jumps: 	an IdentityDictionary(size 113)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	103
		currentSeqNum: 	113
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 113)
		instrMap: 	an OrderedCollection(send: #addMenu:callback:->1 popTop->4 pushTemp: ...etc...
		stacks: 	an IdentityDictionary(size 113)
		stack: 	an IRStackCount start 3 stop 0 max 3
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	7
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifNil: #ifFal...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35389543
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 113)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 113)
		jumps: 	an IdentityDictionary(size 113)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	103
		currentSeqNum: 	113
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 113)
		instrMap: 	an OrderedCollection(send: #addMenu:callback:->1 popTop->4 pushTemp: ...etc...
		stacks: 	an IdentityDictionary(size 113)
		stack: 	an IRStackCount start 3 stop 0 max 3
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	7
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifNil: #ifFal...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1025 is out of range -1024 to 1023
30 April 2019 6:56:14.359881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1025 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1025
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1025
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1023
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->21 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	90
		toSeqId: 	12
		distance: 	1023
		from: 	96
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->21 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 90 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(90 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	90
		pair: 	an Array(0 from: 90 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->21 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	90
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->21 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	90
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	96
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->21 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->21 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651662
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->21 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651662
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->21 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1025 is out of range -1024 to 1023
30 April 2019 6:56:55.225881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1025 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1025
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1025
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1023
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->15 an Object->1 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 6 stop 6 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	90
		toSeqId: 	12
		distance: 	1023
		from: 	96
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->15 an Object->1 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 6 stop 6 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 90 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(90 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	90
		pair: 	an Array(0 from: 90 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->15 an Object->1 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 6 stop 6 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	90
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->15 an Object->1 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 6 stop 6 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	90
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	96
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->15 an Object->1 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 6 stop 6 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->15 an Object->1 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 6 stop 6 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651662
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->15 an Object->1 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 6 stop 6 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651662
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->15 an Object->1 an Object->10 an Obj...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 6 stop 6 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1025 is out of range -1024 to 1023
30 April 2019 6:57:11.422881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1025 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1025
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1025
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1023
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->21 an Object->25 an Object->15 an Ob...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 7 stop 7 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	90
		toSeqId: 	12
		distance: 	1023
		from: 	96
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->21 an Object->25 an Object->15 an Ob...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 7 stop 7 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 90 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(90 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	90
		pair: 	an Array(0 from: 90 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->21 an Object->25 an Object->15 an Ob...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 7 stop 7 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	90
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->21 an Object->25 an Object->15 an Ob...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 7 stop 7 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	90
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	96
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	99


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->21 an Object->25 an Object->15 an Ob...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 7 stop 7 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->21 an Object->25 an Object->15 an Ob...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 7 stop 7 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651662
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->21 an Object->25 an Object->15 an Ob...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 7 stop 7 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651662
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->21 an Object->25 an Object->15 an Ob...etc...
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil an Ob...etc...
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	93
		currentSeqNum: 	99
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 7 stop 7 ...etc...
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatTHERE_BE_DRAGONS_HERE
Halt
30 April 2019 6:59:22.965881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixVisualizer class(Object)>>halt
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


MatrixVisualizer class>>getComposedViewOf:with:result:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		composer: 	a RTComposer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


COOSparseMatrix>>byMatrixAnimated:withDelay:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		priorityColumn: 	nil
		backgroundGroups: 	nil
		leftMatrixMarker: 	nil
		sum: 	nil
		newNode: 	nil
		rightMarkerElement: 	nil
		nowProcessingElementIndex: 	nil
		currentRightColumn: 	nil
		leftMarkerElement: 	nil
		leftSavedMatrixMarker: 	nil
		currentLeftRow: 	nil
		rightMatrixMarker: 	nil
		namedGroups: 	nil
		aCOOSparseMatrix: 	a COOSparseMatrix
		delay: 	0.5
		composer: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationProcess: 	nil
		operationBlock: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@145)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(1050852352) a RubCursor(70210227...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(773992448))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(506@192)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	20635412
		lastStepMessage: 	nil
		lastCycleTime: 	20635464
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	20635412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	20635412
		lastStepMessage: 	nil
		lastCycleTime: 	20635464
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	20635412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	20635412
		lastStepMessage: 	nil
		lastCycleTime: 	20635464
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	20635412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixVisualizer class(Object)>>halt
MatrixVisualizer class>>getComposedViewOf:with:result:
COOSparseMatrix>>byMatrixAnimated:withDelay:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1037 is out of range -1024 to 1023
30 April 2019 7:26:15.272881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1037 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1037
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1037
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1035
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	94
		toSeqId: 	12
		distance: 	1035
		from: 	100
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 94 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(94 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	94
		pair: 	an Array(0 from: 94 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	94
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	94
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	103


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	100
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	103


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	103


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651661
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651661
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer result currentLeftRow curr...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1030 is out of range -1024 to 1023
30 April 2019 7:33:16.248881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1030 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1030
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1030
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1028
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	92
		toSeqId: 	12
		distance: 	1028
		from: 	98
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 92 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(92 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	92
		pair: 	an Array(0 from: 92 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	92
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	92
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	98
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651661
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651661
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer result currentLeftRow curr...etc...
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 4
		selector: 	#byMatrixAnimated:withDelay:
		keywordsPositions: 	an IntegerArray(1 36)
		body: 	THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1028 is out of range -1024 to 1023
30 April 2019 7:37:18.453881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1028 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1028
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1028
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1026
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	92
		toSeqId: 	12
		distance: 	1026
		from: 	98
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 92 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(92 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	92
		pair: 	an Array(0 from: 92 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	92
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	92
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	98
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651662
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651662
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer result currentLeftRow curr...etc...
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 3
		selector: 	#byMatrixAnimated:withDelay:
		keywordsPositions: 	an IntegerArray(1 36)
		body: 	THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1031 is out of range -1024 to 1023
30 April 2019 7:40:16.084881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1031 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1031
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1031
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1029
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	94
		toSeqId: 	12
		distance: 	1029
		from: 	100
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 94 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(94 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	94
		pair: 	an Array(0 from: 94 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	94
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	94
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	103


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	100
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	103


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	103


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651662
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651662
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 103)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 103)
		jumps: 	an IdentityDictionary(size 103)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	97
		currentSeqNum: 	103
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 103)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 103)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer result currentLeftRow curr...etc...
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 3
		selector: 	#byMatrixAnimated:withDelay:
		keywordsPositions: 	an IntegerArray(1 36)
		body: 	RBSequenceNode(| composer result currentLeftRow currentRightColumn priori...etc...
		source: 	a Text for 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| comp...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(aCOOSparseMatrix) RBArgumentNode...etc...
		pragmas: 	#()
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1042 is out of range -1024 to 1023
30 April 2019 7:56:44.418881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1042 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1042
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1042
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1040
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	92
		toSeqId: 	12
		distance: 	1040
		from: 	98
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 92 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(92 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	92
		pair: 	an Array(0 from: 92 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	92
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	92
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	98
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651662
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651662
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer result currentLeftRow curr...etc...
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 4
		selector: 	#byMatrixAnimated:withDelay:
		keywordsPositions: 	an IntegerArray(1 36)
		body: 	THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1042 is out of range -1024 to 1023
30 April 2019 8:00:48.007881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1042 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1042
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1042
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1040
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	92
		toSeqId: 	12
		distance: 	1040
		from: 	98
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 92 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(92 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	92
		pair: 	an Array(0 from: 92 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	92
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	92
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	98
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	101


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	35651662
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty. #c...etc...
		header: 	35651662
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 101)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 101)
		jumps: 	an IdentityDictionary(size 101)
		literals: 	{#rowNumber. #Error->Error. 'Invalid matrix size'. #signal:. #isEmpty...etc...
		lastLiteral: 	nil
		currentSeqId: 	95
		currentSeqNum: 	101
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 101)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 101)
		stack: 	an IRStackCount start 1 stop 0 max 4
		numArgs: 	2
		properties: 	nil
		numberOfTemps: 	8
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector0' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer res...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	2
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->8 #aCOOSparseMatrix->1 #composer->3 #delay->2...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| composer result currentLeftRow curr...etc...
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 4
		selector: 	#byMatrixAnimated:withDelay:
		keywordsPositions: 	an IntegerArray(1 36)
		body: 	RBSequenceNode(| composer result currentLeftRow currentRightColumn priori...etc...
		source: 	a Text for 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay
	| comp...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(aCOOSparseMatrix) RBArgumentNode...etc...
		pragmas: 	#()
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	byMatrixAnimated: aCOOSparseMatrix withDelay: deTHERE_BE_DRAGONS_HERE
User Interrupt
30 April 2019 8:12:54.491881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Alien class>>invokeCallbackContext:
	Receiver: Alien
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ByteArray
		methodDict: 	a MethodDictionary(#address->Alien>>#address #addressField->Alien>>...etc...
		format: 	1048576
		layout: 	a ByteLayout
		organization: 	a ClassOrganization
		subclasses: 	{FFICallbackReturnValue. FFICallbackThunk. VMCallbackContext32. VMC...etc...
		name: 	#Alien
		classPool: 	a Dictionary(#GCMallocedAliens->an AlienWeakTable #LoadedLibraries->...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Alien-Core'
		lifoCallbackSemaphore: 	a Semaphore(a Process in Alien class>>invokeCallbackCont...etc...


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r04C89FE0
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitSafeFFICalloutAPI(FFICalloutAPI)>>function:module:
	Receiver: a LGitSafeFFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStrin...etc...
		moduleNameOrLibrary: 	LGitLibrary
		sender: 	LGitRemote>>remote_push:refspecs:opts:
		ffiMethod: 	LGitRemote>>#remote_push:refspecs:opts:
		ffiMethodSelector: 	#call:options:
	Receiver's instance variables: 
		context: 	LGitRemote>>remote_push:refspecs:opts:
		options: 	#(#optCoerceNilToNull)
		callingConvention: 	#cdecl


LGitRemote(LGitExternalObject)>>call:options:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		fnSpec: 	#(#LGitReturnCodeEnum #git_remote_push #(#self #, #LGitStringArray #* #...etc...
		options: 	#(#optCoerceNilToNull)
	Receiver's instance variables: 
		handle: 	@ 16r04C89FE0
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>remote_push:refspecs:opts:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		remote: 	a LGitRemote (origin)
		refspecs: 	a LGitStringArray ()
		opts: 	a LGitPushOptions ()
	Receiver's instance variables: 
		handle: 	@ 16r04C89FE0
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


[ self remote_push: self refspecs: refspecs opts: pushOptions ] in LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r04C89FE0
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		callBlock: 	[ self remote_push: self refspecs: refspecs opts: pushOptions ]
	Receiver's instance variables: 
		handle: 	@ 16r04C89FE0
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


LGitRemote>>pushWithRefSpec:pushOptions:
	Receiver: a LGitRemote (origin)
	Arguments and temporary variables: 
		aRefSpec: 	refs/heads/master:refs/heads/master
		pushOptions: 	a LGitPushOptions ()
		refspecs: 	a LGitStringArray ()
		return: 	nil
	Receiver's instance variables: 
		handle: 	@ 16r04C89FE0
		repository: 	a LGitRepository (C:\Users\yaroslav\Downloads\git\YaroslavKormushyn...etc...
		remoteName: 	'origin'
		url: 	'https://github.com/YaroslavKormushyn/SparseMatrix.git'
		fetchSpec: 	nil


IceGitLocalBranch>>pushBranchToRemote:gitRemote:progress:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBranchToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.
"Push tags"
self
	pushTagsToRemote: aRemote
	gitRemote: gitRemote
	progress: pushProgress.

"Verify we have an stream"
self setUpstreamIfMissing: aRemote ] in IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
		pushProgress: 	an IcePushTransferProgress
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ | pushProgress |
pushProgress := IcePushTransferProgress new.
"Push branch"
self
	pushBr...etc...
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENONFASTFORWARD
		handlerAction: 	[ :e | 
e
	resignalAs:
		(IceRemoteDesynchronized new
			remote:...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>basicPushTo:
		startpc: 	159
		numArgs: 	0


IceGitLocalBranch>>basicPushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
		gitRemote: 	a LGitRemote (origin)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


[ self basicPushTo: aRemote ] in IceGitLocalBranch>>pushTo:
	Receiver: IceGitLocalBranch(master)
	Arguments and temporary variables: 
		aRemote: 	origin (https://github.com/YaroslavKormushyn/SparseMatrix.git)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(SparseMatrix)
		name: 	'refs/heads/master'


BlockClosure>>on:do:
	Receiver: [ self basicPushTo: aRemote ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitLocalBranch>>pushTo:
		startpc: 	47
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(SparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ self basicPushTo: aRemote ]
	Receiver's instance variables: 
		name: 	'SparseMatrix'
		workingCopy: 	an IceWorkingCopy
		index: 	an IcTHERE_BE_DRAGONS_HERE
User Interrupt
30 April 2019 8:12:54.675881 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(982366720) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(100 msecs; 65 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(100 msecs; 81 msecs remaining))
		activeDelay: 	a Delay(100 msecs; 64 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(100 msecs; 63 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734097174745881


Delay>>wait
	Receiver: a Delay(100 msecs; 60 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		millisecondDelayDuration: 	100
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734097174745881


Duration>>wait
	Receiver: 0:00:00:00.1
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nanos: 	100000000
		seconds: 	0


[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
	Receiver: a GLMAsyncTask
	Arguments and temporary variables: 
		aBlock: 	[ :isSmooth | isSmooth ]
		aCollection: 	#(false)
		callbackBlock: 	[ :isSmooth | self scrollToRight: isSmooth ]
		aPriority: 	40
		anIntegerMilliseconds: 	100
		result: 	nil
	Receiver's instance variables: 
		process: 	a Process in DelaySemaphoreScheduler>>schedule:
		callback: 	[ :isSmooth | self scrollToRight: isSmooth ]
		delay: 	100
		task: 	[ :isSmooth | isSmooth ]
		priority: 	40
		arguments: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	GLMAsyncTask>>execute:withArguments:callback:priority:delay:
		startpc: 	134
		numArgs: 	0



--- The full stack ---
DelaySemaphoreScheduler>>schedule:
Delay>>schedule
Delay>>wait
Duration>>wait
[ | result |
anIntegerMilliseconds > 0
	ifTrue: [ anIntegerMilliseconds milliSeconds wait ].
result := aBlock valueWithEnoughArguments: aCollection.
"we use it to pass result from background thread and execute callback block in UI thread"
UIManager default
	defer: [ self complete: result callback: callbackBlock ] ] in GLMAsyncTask>>execute:withArguments:callback:priority:delay:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#isReturnSpecial was sent to nil
1 May 2019 3:20:47.487677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #isReturnSpecial
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	isReturnSpecial
		exception: 	MessageNotUnderstood: receiver of "isReturnSpecial" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyTextEditor(RubSmalltalkEditor)>>debug:
	Receiver: a ClyTextEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		method: 	nil
		receiver: 	MatrixOperationVisualizer
		context: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(543021568)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


ClyTextEditor(RubSmalltalkEditor)>>debugSelection
	Receiver: a ClyTextEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(543021568)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


ClyTextEditor(RubSmalltalkEditor)>>debugIt
	Receiver: a ClyTextEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(543021568)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


ClyTextEditor(RubSmalltalkEditor)>>debugIt:
	Receiver: a ClyTextEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(543021568)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor debugIt: nil ] in RubSmalltalkEditor class>>buildPatchShortcutsForDoItInWindowsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(543021568)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ClyTextEditor}
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'


BlockClosure>>cull:
	Receiver: [ :target | target editor debugIt: nil ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(543021568)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildPatchShortcutsForDoItInWindowsOn:
		startpc: 	189
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor debugIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(543021568)
		secondArg: 	a RubEditingArea(543021568)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildPatchShortcutsForDoItInWindowsOn:
		startpc: 	189
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor debugIt: nil ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(543021568)
		secondArg: 	a RubEditingArea(543021568)
		thirdArg: 	[keystroke '<Ctrl-Shift-end>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildPatchShortcutsForDoItInWindowsOn:
		startpc: 	189
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#debugItPatchForWindows on Shift + Ctrl + End do [ :target | target ed...etc...
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-Shift-end>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(543021568)
		category: 	a KMCategory
		morph: 	a RubEditingArea(543021568)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #debugItPatchForWindows on Shift + Ctrl + End do [ :target | target editor debugIt: nil ]
...etc...
	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-Shift-end>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor debugIt: nil ]
		name: 	#debugItPatchForWindows
		shortcut: 	Shift + Ctrl + End
		defaultShortcut: 	Shift + Ctrl + End
		description: 	'Debug it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #debugItPatchForWindows on Shift + Ctrl + End do [ :target | target editor debugIt: nil ]
...etc...
	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-Shift-end>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor debugIt: nil ]
		name: 	#debugItPatchForWindows
		shortcut: 	Shift + Ctrl + End
		defaultShortcut: 	Shift + Ctrl + End
		description: 	'Debug it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #debugItPatchForWindows on Shift + Ctrl + End do [ :target | target editor debugIt: nil ]
...etc...
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-Shift-end>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatch...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor debugIt: nil ]
		name: 	#debugItPatchForWindows
		shortcut: 	Shift + Ctrl + End
		defaultShortcut: 	Shift + Ctrl + End
		description: 	'Debug it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-Shift-end>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatch...etc...
		aBlock: 	[ ^ self ]
		entry: 	#debugItPatchForWindows on Shift + Ctrl + End do [ :target | target edit...etc...
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#Windows->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#querySymbol on Meta + q do [ :target | target editor querySymbol: nil ]
 #debugIt o...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	19
		each: 	#debugItPatchForWindows on Shift + Ctrl + End do [ :target | target edito...etc...
	Receiver's instance variables: 
		tally: 	17
		array: 	an Array(nil nil nil #querySymbol on Meta + q do [ :target | target edit...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-Shift-end>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatch...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#Windows->a KMStorage #all->a KMStorage )


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-Shift-end>'])
		aListener: 	a CmdKMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(543021568)
		category: 	a KMCategory
		morph: 	a RubEditingArea(543021568)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in CmdKMDispatcher(KMDispatcher)>>dispatch:
	Receiver: a CmdKMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-Shift-end>'])
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#RubTextEditor) aKMCategoryTarget(#MorphFocusC...etc...
		morph: 	a RubEditingArea(543021568)
		directKeymaps: 	a KMCategory
		commandProvider: 	a ClyMethodCodeEditorToolMorph(646124032)


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#RubTextEditor) aKMCategoryT...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verify...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#RubTextEditor) aKMCat...etc...
		firstIndex: 	1
		lastIndex: 	4


CmdKMDispatcher(KMDispatcher)>>dispatch:
	Receiver: a CmdKMDispatcher
	Arguments aTHERE_BE_DRAGONS_HERE
Instance of RTComposer did not understand #setUpMenuWithProcess:
1 May 2019 3:26:03.254677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTComposer(Object)>>doesNotUnderstand: #setUpMenuWithProcess:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aMessage: 	setUpMenuWithProcess: a Process in [ self value.
Processor terminateA...etc...
		exception: 	MessageNotUnderstood: RTComposer>>setUpMenuWithProcess:
		resumeValue: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement)


COOSparseMatrix>>byMatrixAnimated:withDelay:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	a COOSparseMatrix
		delay: 	0.01
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationProcess: 	a Process in [ self value.
Processor terminateActive ] in Blo...etc...
		operationBlock: 	[ | priorityColumn leftMarkerElement rightMarkerElement nowProc...etc...
		visualizer: 	a RTComposer
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@145)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(894078208) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(570274048))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(571@188)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(907825408))(a DropList...etc...
		lastStepTime: 	7289473
		lastStepMessage: 	nil
		lastCycleTime: 	7289504
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	7289473
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(907825408))(a DropList...etc...
		lastStepTime: 	7289473
		lastStepMessage: 	nil
		lastCycleTime: 	7289504
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	7289473
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(907825408))(a DropList...etc...
		lastStepTime: 	7289473
		lastStepMessage: 	nil
		lastCycleTime: 	7289504
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	7289473
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
RTComposer(Object)>>doesNotUnderstand: #setUpMenuWithProcess:
COOSparseMatrix>>byMatrixAnimated:withDelay:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
1 May 2019 3:40:19.912677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer(Object)>>halt
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		composer: 	a RTComposer
		leftMatrix: 	nil
		rightMatrix: 	nil
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		metaLinks: 	an OrderedCollection()


MatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkBefore: 	a MetaLink
		leftMarkerLinkAfter: 	nil
		leftSavedMarkerLink: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
	Receiver's instance variables: 
		composer: 	a RTComposer
		leftMatrix: 	nil
		rightMatrix: 	nil
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		metaLinks: 	an OrderedCollection()


COOSparseMatrix>>byMatrixAnimated:withDelay:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	a COOSparseMatrix
		delay: 	2
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationProcess: 	nil
		operationBlock: 	nil
		visualizer: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (753@145)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(439439872) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(327397632))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(721046016))(a DropList...etc...
		lastStepTime: 	8146153
		lastStepMessage: 	nil
		lastCycleTime: 	8146183
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	8146153
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(721046016))(a DropList...etc...
		lastStepTime: 	8146153
		lastStepMessage: 	nil
		lastCycleTime: 	8146183
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	8146153
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(721046016))(a DropList...etc...
		lastStepTime: 	8146153
		lastStepMessage: 	nil
		lastCycleTime: 	8146183
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	8146153
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixOperationVisualizer(Object)>>halt
MatrixOperationVisualizer>>setLinksForMultiplicationOn:
COOSparseMatrix>>byMatrixAnimated:withDelay:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1059 is out of range -1024 to 1023
1 May 2019 4:26:22.348677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1059 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1059
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1059
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1057
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	96
		toSeqId: 	12
		distance: 	1057
		from: 	102
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 96 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(96 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	96
		pair: 	an Array(0 from: 96 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	96
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	96
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	102
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	52953179
		lits: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isEmpty...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isEmpty...etc...
		header: 	52953179
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector4' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	3
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->10 #RFReifyValueVar->4 #aCOOSparseMatrix->1 #...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	3
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->10 #RFReifyValueVar->4 #aCOOSparseMatrix->1 #...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1059 is out of range -1024 to 1023
1 May 2019 4:26:33.640677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1059 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1059
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1059
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1057
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	96
		toSeqId: 	12
		distance: 	1057
		from: 	102
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 96 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(96 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	96
		pair: 	an Array(0 from: 96 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	96
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	96
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	102
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	52953179
		lits: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isEmpty...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isEmpty...etc...
		header: 	52953179
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector4' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	3
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->10 #RFReifyValueVar->4 #aCOOSparseMatrix->1 #...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	3
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->10 #RFReifyValueVar->4 #aCOOSparseMatrix->1 #...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethod
	Receiver: an IRMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	3
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->10 #RFReifyValueVar->4 #aCOOSparseMatrix->1 #...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>compiledMethod
	Receiver: byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	| result transposed n...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: genJumpLong: distance index -1059 is out of range -1024 to 1023
1 May 2019 4:26:42.500677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

EncoderForV3PlusClosures(Object)>>error:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		aString: 	#'genJumpLong: distance index -1059 is out of range -1024 to 1023'
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(BytecodeEncoder)>>outOfRangeError:index:range:to:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		string: 	'distance'
		index: 	-1059
		rangeStart: 	-1024
		rangeEnd: 	1023
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


EncoderForV3PlusClosures(EncoderForV3)>>genJumpLong:
	Receiver: an EncoderForV3PlusClosures
	Arguments and temporary variables: 
		distance: 	-1059
	Receiver's instance variables: 
		stream: 	an IRBytecodeGenerator
		position: 	nil
		rootNode: 	nil
		blockExtentsToLocals: 	nil


IRBytecodeGenerator>>jumpBackward:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		distance: 	1057
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>from:goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		fromSeqId: 	96
		toSeqId: 	12
		distance: 	1057
		from: 	102
		to: 	16
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


Message>>sendTo:
	Receiver: from: 96 goto: 12
	Arguments and temporary variables: 
		receiver: 	an IRBytecodeGenerator
	Receiver's instance variables: 
		selector: 	#from:goto:
		args: 	#(96 12)
		lookupClass: 	nil


IRBytecodeGenerator>>updateJump:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	96
		pair: 	an Array(0 from: 96 goto: 12)
		s1: 	2
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ] in IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		changed: 	true
		seqId: 	96
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


[ :each | nextValue := binaryBlock value: nextValue value: each ] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
		nextValue: 	true
		each: 	96
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


OrderedCollection>>do:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	102
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object 12 13...etc...
	Arguments and temporary variables: 
		nextValue: 	true
		thisValue: 	false
		binaryBlock: 	[ :changed :seqId | (self updateJump: seqId) or: [ changed ] ]
	Receiver's instance variables: 
		array: 	an Array(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object 10 11 an Object...etc...
		firstIndex: 	1
		lastIndex: 	105


IRBytecodeGenerator>>updateJumpOffsets
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 

	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>bytecodes
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		stream: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:header:literals:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		header: 	52953179
		lits: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isEmpty...etc...
		cm: 	nil
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRBytecodeGenerator>>compiledMethodWith:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		lits: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isEmpty...etc...
		header: 	52953179
		quickPrimitive: 	0
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(size 105)
		orderSeq: 	an OrderedCollection(an Object 1 2 3 4 5 6 7 8 an Object 9 an Object ...etc...
		seqBytes: 	an IdentityDictionary(size 105)
		jumps: 	an IdentityDictionary(size 105)
		literals: 	an Array(#rowNumber #Error->Error 'Invalid matrix size' #signal: #isE...etc...
		lastLiteral: 	nil
		currentSeqId: 	99
		currentSeqNum: 	105
		bytes: 	an OrderedCollection()
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(size 105)
		instrMap: 	an OrderedCollection(popIntoTemp: #operationBlock->1 pushTemp: #opera...etc...
		stacks: 	an IdentityDictionary(size 105)
		stack: 	an IRStackCount start 1 stop 0 max 2
		numArgs: 	3
		properties: 	nil
		numberOfTemps: 	10
		additionalLiterals: 	#(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: #ifFalse: #and...etc...
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>compiledMethod
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 

	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack(createTempVectorNamed: '0vector4' withVars: #(#priorit...etc...
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	3
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->10 #RFReifyValueVar->4 #aCOOSparseMatrix->1 #...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	3
		properties: 	nil
		tempMap: 	a Dictionary('0vector0'->10 #RFReifyValueVar->4 #aCOOSparseMatrix->1 #...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue: #whileTrue: #ifTrue:ifFalse: #or: ...etc...
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>generate:
	Receiver: byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	| result transposed n...etc...
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod #beforeHooks->an OrderedCollecti...etc...
		scope: 	an OCMethodScope 3
		selector: 	#byMatrixAnimated:withDelay:visualizer:
		keywordsPositions: 	an IntegerArray(1 36 53)
		body: 	RBSequenceNode(| result transposed newNode sum operationProcess operation...etc...
		source: 	'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	|...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(aCOOSparseMatrix) RBArgumentNode...etc...
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


ReflectiveMethod>>recompileAST
	Receiver: a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer: (ReflectiveMethod)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		ast: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	| res...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visu...etc...
		linkCount: 	22


ReflectiveMethod>>compileAndInstallCompiledMethod
	Receiver: a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer: (ReflectiveMethod)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		ast: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	| res...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visu...etc...
		linkCount: 	22


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrixAnimated:withDelay:visualizer:
		anArray: 	an Array(an a subclass of COOSparseMatrix 1 a MatrixOperationVisualize...etc...
		aReceiver: 	an a subcTHERE_BE_DRAGONS_HERE
Instance of RTComposer did not understand #deselectModels:
1 May 2019 4:37:45.927677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTComposer(Object)>>doesNotUnderstand: #deselectModels:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aMessage: 	deselectModels: #(nil)
		exception: 	MessageNotUnderstood: RTComposer>>deselectModels:
		resumeValue: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement) #...etc...
		groups: 	an OrderedCollection(a RTGroup() a RTGroup(a RTElement a RTElement a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement)


MatrixOperationVisualizer>>deselectModels:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		modelCollection: 	#(nil)
	Receiver's instance variables: 
		composer: 	a RTComposer
		leftMatrix: 	nil
		rightMatrix: 	nil
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink)


[ :value | 
self deselectModels: {value}.
Transcript show: 'Im in left marker before' ] in MatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		leftSavedMarkerLink: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		value: 	nil
	Receiver's instance variables: 
		composer: 	a RTComposer
		leftMatrix: 	nil
		rightMatrix: 	nil
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink)


[ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |
leftSavedMatrixMarker := leftMatrixMarker := first.
rightMatrixMarker := transposed first.
currentLeftRow := leftMatrixMarker row.
currentRightColumn := rightMatrixMarker row.
nowProcessingElementIndex := (RTLabel
	text:
		[ :indices | 'Now processing ' , (indices first @ indices last) asString ])
	elementOn:
		{currentLeftRow.
		currentRightColumn}.
visualizer add: nowProcessingElementIndex.
visualizer group: #nowProcessing.
leftMarkerElement := (COOSparseMatrixVisualizer new
	getElementShapeScaled: 5) elementOn: leftMatrixMarker.
visualizer add: leftMarkerElement.
visualizer group: #leftMarker.
rightMarkerElement := (COOSparseMatrixVisualizer new
	getElementShapeScaled: 5) elementOn: rightMatrixMarker.
visualizer add: rightMarkerElement.
visualizer group: #rightMarker.
visualizer setPositionsForCOOMultiplication.
visualizer
	namedGroups: #(#left #result #right #leftMarker #rightMarker).
visualizer backgroundGroups: #(#left #result #right).
visualizer update.
sum := 0.
self
	withEscaper: [ :end | 
		[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]
			whileTrue: [ self
					withEscaper: [ :outer | 
						"Switch to next row in left and reset right marker if right ended"
						rightMatrixMarker isNil
							ifTrue: [ rightMatrixMarker := transposed first.
								leftSavedMatrixMarker := leftMatrixMarker.
								leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
								rightMarkerElement updateModelAndRedraw: rightMatrixMarker.
								(Delay forSeconds: delay) wait ].
						"reset left marker to row beginning"
						(Delay forSeconds: delay) wait.
						leftMatrixMarker := leftSavedMatrixMarker.
						leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
						(Delay forSeconds: delay) wait.
						currentLeftRow := leftMatrixMarker row.
						currentRightColumn := rightMatrixMarker row.
						nowProcessingElementIndex
							model:
								{currentLeftRow.
								currentRightColumn}.
						nowProcessingElementIndex update.
						self
							withEscaper: [ :next | 
								[ leftMatrixMarker isNotNil
									and: [ rightMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow
													and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
									whileTrue: [ priorityColumn := {leftMatrixMarker column.
										rightMatrixMarker column} max.
										"Find same column as prioritized or higher in left"
										[ leftMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow
													and: [ leftMatrixMarker column < priorityColumn ] ] ]
											whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.
												leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
												(Delay forSeconds: delay) wait ].
										leftMatrixMarker isNil
											ifTrue: [ [ rightMatrixMarker isNotNil
													and: [ rightMatrixMarker row = currentRightColumn ] ]
													whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.
														rightMatrixMarker isNotNil
															ifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.
																(Delay forSeconds: delay) wait ] ].

												"If no intersection - end"
												rightMatrixMarker isNil
													ifTrue: [ end value ].
												"Else - continue loop"
												next value ].
										leftMatrixMarker row ~= currentLeftRow
											ifTrue: [ [ rightMatrixMarker isNotNil
													and: [ rightMatrixMarker row = currentRightColumn ] ]
													whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.
														rightMatrixMarker isNotNil
															ifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.
																(Delay forSeconds: delay) wait ] ].
												next value ].
										priorityColumn := leftMatrixMarker column.

										"Find same column as prioritized or higher in right"
										[ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn
													and: [ rightMatrixMarker column < priorityColumn ] ] ]
											whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.
												rightMatrixMarker isNotNil
													ifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].
												(Delay forSeconds: delay) wait ].
										rightMatrixMarker isNil
											ifTrue: [ [ leftMatrixMarker isNotNil
													and: [ leftMatrixMarker row = currentLeftRow ] ]
													whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.
														leftMatrixMarker isNotNil
															ifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].
														(Delay forSeconds: delay) wait ].

												"If no intersections - end"
												leftMatrixMarker isNil
													ifTrue: [ end value ].
												"Else - continue loop"
												next value ].
										rightMatrixMarker row ~= currentRightColumn
											ifTrue: [ next vTHERE_BE_DRAGONS_HERE
Halt
1 May 2019 4:40:49.030677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of COOSparseMatrix(Object)>>halt
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		delay: 	1
		viz: 	a MatrixOperationVisualizer
		RFReifyValueVar: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationProcess: 	nil
		operationBlock: 	nil
		visualizer: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrixAnimated:withDelay:visualizer:
		anArray: 	an Array(an a subclass of COOSparseMatrix 1 a MatrixOperationVisualize...etc...
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	| res...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visu...etc...
		linkCount: 	18


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(189419776) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(953366784))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	11775152
		lastStepMessage: 	nil
		lastCycleTime: 	11775179
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	11775152
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	11775152
		lastStepMessage: 	nil
		lastCycleTime: 	11775179
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	11775152
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	11775152
		lastStepMessage: 	nil
		lastCycleTime: 	11775179
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	11775152
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
a subclass of COOSparseMatrix(Object)>>halt
a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
ReflectiveMethod>>run:with:in:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#removeLink: was sent to nil
1 May 2019 5:10:24.605677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #removeLink:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	removeLink: a MetaLink
		exception: 	MessageNotUnderstood: receiver of "removeLink:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :ast | ast removeLink: link ] in MetaLinkInstaller>>propagateLinkRemoval:forNode:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		link: 	a MetaLink
		aNode: 	RBMessageNode(visualizer getComposedViewOf: self with: transposed result...etc...
		ast: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(nil)
	Arguments and temporary variables: 
		aBlock: 	[ :ast | ast removeLink: link ]
		index: 	3
		object: 	a SetElement
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object a SetElement an Object an Object an Obje...etc...
		flag: 	an Object


MetaLinkInstaller>>propagateLinkRemoval:forNode:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		link: 	a MetaLink
		aNode: 	RBMessageNode(visualizer getComposedViewOf: self with: transposed result...etc...
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>metalinkChanged:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLinkChanged: 	a MetalinkChanged
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#metalinkChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		anObject: 	a MetalinkChanged
		strongReceiver: 	a MetaLinkInstaller
	Receiver's instance variables: 
		selector: 	#metalinkChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#metalinkChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		arg: 	a MetalinkChanged
	Receiver's instance variables: 
		selector: 	#metalinkChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#metalinkChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		arg1: 	a MetalinkChanged
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#metalinkChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#metalinkChanged: -> a MetaLinkInstaller)...etc...
	Arguments and temporary variables: 
		anAnnouncement: 	a MetalinkChanged
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MetalinkChanged
		action: 	a WeakMessageSend(#metalinkChanged: -> a MetaLinkInstaller)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #removeLink:
[ :ast | ast removeLink: link ] in MetaLinkInstaller>>propagateLinkRemoval:forNode:
WeakSet>>do:
MetaLinkInstaller>>propagateLinkRemoval:forNode:
MetaLinkInstaller>>metalinkChanged:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
1 May 2019 5:11:32.305677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of COOSparseMatrix(Object)>>halt
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		delay: 	1
		viz: 	a MatrixOperationVisualizer
		RFReifyValueVar: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationProcess: 	nil
		operationBlock: 	nil
		visualizer: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrixAnimated:withDelay:visualizer:
		anArray: 	an Array(an a subclass of COOSparseMatrix 1 a MatrixOperationVisualize...etc...
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	| res...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visu...etc...
		linkCount: 	18


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(189419776) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(974356736))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13618415
		lastStepMessage: 	nil
		lastCycleTime: 	13618452
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13618415
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13618415
		lastStepMessage: 	nil
		lastCycleTime: 	13618452
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13618415
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13618415
		lastStepMessage: 	nil
		lastCycleTime: 	13618452
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13618415
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
a subclass of COOSparseMatrix(Object)>>halt
a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
ReflectiveMethod>>run:with:in:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
1 May 2019 5:13:23.969677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of COOSparseMatrix(Object)>>halt
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 

	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		delay: 	1
		viz: 	a MatrixOperationVisualizer
		RFReifyValueVar: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationProcess: 	nil
		operationBlock: 	nil
		visualizer: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrixAnimated:withDelay:visualizer:
		anArray: 	an Array(an a subclass of COOSparseMatrix 1 a MatrixOperationVisualize...etc...
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	| res...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visu...etc...
		linkCount: 	18


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(189419776) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(886257920))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13730101
		lastStepMessage: 	nil
		lastCycleTime: 	13730137
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13730101
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13730101
		lastStepMessage: 	nil
		lastCycleTime: 	13730137
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13730101
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13730101
		lastStepMessage: 	nil
		lastCycleTime: 	13730137
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13730101
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
a subclass of COOSparseMatrix(Object)>>halt
a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
ReflectiveMethod>>run:with:in:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
computation has been terminated
1 May 2019 5:14:05.488677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Context>>cannotReturn:
	Receiver: Context>>jump
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		sender: 	Context>>stepToHome:
		pc: 	nil
		stackp: 	2
		method: 	Context>>#jump
		closureOrNil: 	nil
		receiver: 	Context>>stepToHome:


Context>>jump
	Receiver: Context>>stepToHome:
	Arguments and temporary variables: 
		top: 	nil
	Receiver's instance variables: 
		sender: 	nil
		pc: 	nil
		stackp: 	5
		method: 	Context>>#stepToHome:
		closureOrNil: 	nil
		receiver: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}...etc...


Context>>stepToHome:
	Receiver: [ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name su...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sender: 	BlockClosure>>on:do:
		pc: 	73
		stackp: 	3
		method: 	MatrixVisualizer class>>#on:withView:
		closureOrNil: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualiz...etc...
		receiver: 	MatrixVisualizer



--- The full stack ---
Context>>cannotReturn:
Context>>jump
Context>>stepToHome:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
computation has been terminated
1 May 2019 5:14:12.035677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Context>>cannotReturn:
	Receiver: Context>>jump
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		sender: 	Context>>stepToHome:
		pc: 	nil
		stackp: 	2
		method: 	Context>>#jump
		closureOrNil: 	nil
		receiver: 	Context>>stepToHome:


Context>>jump
	Receiver: Context>>stepToHome:
	Arguments and temporary variables: 
		top: 	nil
	Receiver's instance variables: 
		sender: 	nil
		pc: 	nil
		stackp: 	5
		method: 	Context>>#stepToHome:
		closureOrNil: 	nil
		receiver: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}...etc...


Context>>stepToHome:
	Receiver: [ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name su...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sender: 	BlockClosure>>on:do:
		pc: 	73
		stackp: 	3
		method: 	MatrixVisualizer class>>#on:withView:
		closureOrNil: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualiz...etc...
		receiver: 	MatrixVisualizer



--- The full stack ---
Context>>cannotReturn:
Context>>jump
Context>>stepToHome:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Matrix should be of class COOSparseMatrix class
1 May 2019 5:14:32.557677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixVisualizer class>>on:withView:
	Receiver: COOSparseMatrixVisualizer
	Arguments and temporary variables: 
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	MatrixVisualizer
		methodDict: 	a MethodDictionary(#add:to:->COOSparseMatrixVisualizer>>#add:to: #d...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name substrings: '#') first"
(aMatrix isKindOf: subclass getVisualizedClass)
	ifTrue: [ ^ subclass on: aMatrix withView: aView ] ] in MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	an a subclass of COOSparseMatrix
		aView: 	a RTView
		subclass: 	COOSparseMatrixVisualizer
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


Array(SequenceableCollection)>>do:
	Receiver: {COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}
	Arguments and temporary variables: 
		aBlock: 	[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) ...etc...
		index: 	1
	Receiver's instance variables: 
{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatrixVisualizer}

MatrixVisualizer class>>on:withView:
	Receiver: MatrixVisualizer
	Arguments and temporary variables: 
		aMatrix: 	an a subclass of COOSparseMatrix
		aView: 	a RTView
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#drawEdgesWith:->MatrixVisualizer>>#drawEdgesWit...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixVisualizer. LILSparseMatrixVisualizer. TWSparseMatr...etc...
		name: 	#MatrixVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


MatrixOperationVisualizer>>getComposedViewOf:with:result:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	a COOSparseMatrix
		result: 	a COOSparseMatrix
	Receiver's instance variables: 
		composer: 	a RTComposer
		leftMatrix: 	nil
		rightMatrix: 	nil
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink)


a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		delay: 	1
		viz: 	a MatrixOperationVisualizer
		RFReifyValueVar: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationProcess: 	nil
		operationBlock: 	nil
		visualizer: 	a MatrixOperationVisualizer
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrixAnimated:withDelay:visualizer:
		anArray: 	an Array(an a subclass of COOSparseMatrix 1 a MatrixOperationVisualize...etc...
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz
	| res...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrixAnimated:withDelay:visu...etc...
		linkCount: 	18


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(189419776) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(119107840))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13798706
		lastStepMessage: 	nil
		lastCycleTime: 	13798751
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13798706
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13798706
		lastStepMessage: 	nil
		lastCycleTime: 	13798751
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13798706
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(862192128))(a DropList...etc...
		lastStepTime: 	13798706
		lastStepMessage: 	nil
		lastCycleTime: 	13798751
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	13798706
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixVisualizer class>>on:withView:
[ :subclass | 
"(''
				join:
					{aMatrix class.
					'Visualizer'}) = (subclass name substrings: '#') first"
(aMatrix isKindOf: subclass getVisualizedClass)
	ifTrue: [ ^ subclass on: aMatrix withView: aView ] ] in MatrixVisualizer class>>on:withView:
Array(SequenceableCollection)>>do:
MatrixVisualizer class>>on:withView:
MatrixOperationVisualizer>>getComposedViewOf:with:result:
a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
ReflectiveMethod>>run:with:in:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 May 2019 5:22:10.600677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

BorderStyle>>frameRectangle:on:
	Receiver: (BorderStyle width: 0 color: Color transparent)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@258.0) corner: (1531.0@767.0)
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
	Receiver's instance variables: 
(BorderStyle width: 0 color: Color transparent)

FormCanvas(Canvas)>>fillRectangle:fillStyle:borderStyle:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@258.0) corner: (1531.0@767.0)
		aFillStyle: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.82300000000...etc...
		aBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(25@314) corner: (1518@649)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


PanelMorph(Morph)>>drawOn:
	Receiver: a PanelMorph(390326016)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
	Receiver's instance variables: 
		bounds: 	(5.0@258.0) corner: (1531.0@767.0)
		owner: 	a ClyFullBrowser(863644928)
		submorphs: 	an Array(a ClyToolbarMorph(1050683904) a TabManagerMorph(63206912))
		fullBounds: 	(5@258) corner: (1531@767)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (43739392) [sticky]  [externalName = tools panel ] ...etc...
		borderWidth: 	0
		borderColor: 	Color black


FormCanvas(Canvas)>>draw:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		anObject: 	a PanelMorph(390326016)
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(25@314) corner: (1518@649)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>drawMorph:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(390326016)
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(25@314) corner: (1518@649)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


[ (aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ].
self drawSubmorphsOn: aCanvas.
self drawDropHighlightOn: aCanvas.
self drawMouseDownHighlightOn: aCanvas ] in [ "Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].

"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ (aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in PanelMorph(Morph)>>fullDrawOn:
	Receiver: a PanelMorph(390326016)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
	Receiver's instance variables: 
		bounds: 	(5.0@258.0) corner: (1531.0@767.0)
		owner: 	a ClyFullBrowser(863644928)
		submorphs: 	an Array(a ClyToolbarMorph(1050683904) a TabManagerMorph(63206912))
		fullBounds: 	(5@258) corner: (1531@767)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (43739392) [sticky]  [externalName = tools panel ] ...etc...
		borderWidth: 	0
		borderColor: 	Color black


FormCanvas>>roundCornersOf:in:during:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(390326016)
		bounds: 	(5.0@258.0) corner: (1531.0@767.0)
		aBlock: 	[ (aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ]...etc...
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(25@314) corner: (1518@649)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>roundCornersOf:during:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(390326016)
		aBlock: 	[ (aCanvas isVisible: self bounds)
	ifTrue: [ aCanvas drawMorph: self ]...etc...
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(25@314) corner: (1518@649)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


[ "Note: At some point we should generalize this into some sort of 
		multi-canvas so that we can cross-optimize some drawing operations."
"Pass 1: Draw eventual drop-shadow"
self hasDropShadow
	ifTrue: [ self drawDropShadowOn: aCanvas ].

"Pass 2: Draw receiver itself"
aCanvas
	roundCornersOf: self
	during: [ (aCanvas isVisible: self bounds)
			ifTrue: [ aCanvas drawMorph: self ].
		self drawSubmorphsOn: aCanvas.
		self drawDropHighlightOn: aCanvas.
		self drawMouseDownHighlightOn: aCanvas ] ] in PanelMorph(Morph)>>fullDrawOn:
	Receiver: a PanelMorph(390326016)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
	Receiver's instance variables: 
		bounds: 	(5.0@258.0) corner: (1531.0@767.0)
		owner: 	a ClyFullBrowser(863644928)
		submorphs: 	an Array(a ClyToolbarMorph(1050683904) a TabManagerMorph(63206912))
		fullBounds: 	(5@258) corner: (1531@767)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (43739392) [sticky]  [externalName = tools panel ] ...etc...
		borderWidth: 	0
		borderColor: 	Color black


BlockClosure>>on:do:
	Receiver: [ "Note: At some point we should generalize this into some sort of 
		multi-canvas so that...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :err | 
self setProperty: #errorOnDraw toValue: true.
self set...etc...
	Receiver's instance variables: 
		outerContext: 	PanelMorph(Morph)>>fullDrawOn:
		startpc: 	218
		numArgs: 	0


PanelMorph(Morph)>>fullDrawOn:
	Receiver: a PanelMorph(390326016)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
	Receiver's instance variables: 
		bounds: 	(5.0@258.0) corner: (1531.0@767.0)
		owner: 	a ClyFullBrowser(863644928)
		submorphs: 	an Array(a ClyToolbarMorph(1050683904) a TabManagerMorph(63206912))
		fullBounds: 	(5@258) corner: (1531@767)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (43739392) [sticky]  [externalName = tools panel ] ...etc...
		borderWidth: 	0
		borderColor: 	Color black


FormCanvas(Canvas)>>fullDraw:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		anObject: 	a PanelMorph(390326016)
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(25@314) corner: (1518@649)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


FormCanvas(Canvas)>>fullDrawMorph:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(390326016)
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(25@314) corner: (1518@649)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort


[ :m | canvas fullDrawMorph: m ] in [ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in ClyFullBrowser(Morph)>>drawSubmorphsOn:
	Receiver: a ClyFullBrowser(863644928)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		drawBlock: 	[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ]
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		m: 	a PanelMorph(390326016)
	Receiver's instance variables: 
		bounds: 	(5.0@51.0) corner: (1531.0@767.0)
		owner: 	a SystemWindow(360187392) named: COOSparseMatrix>>byMatrixAnimated:withD...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(843765504) a PanelMorph(4480358...etc...
		fullBounds: 	(5@51) corner: (1531@767)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (443755008) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(448035840)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(314799872) a ClyQuery...etc...
		toolPanel: 	a PanelMorph(390326016)
		toolbar: 	a ClyToolbarMorph(1050683904)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		packageView: 	a ClyQueryViewMorph(314799872)
		classView: 	a ClyQueryViewMorph(686807296)
		methodGroupView: 	a ClyQueryViewMorph(365444864)
		methodView: 	a ClyQueryViewMorph(1060887808)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: COOSparseMatrix


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a ProportionalSplitterMorph(843765504) a PanelMorph(448035840) a PanelMorph(39032...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | canvas fullDrawMorph: m ]
		index: 	3
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(843765504) a PanelMorph(448035840) a PanelMorph(39032...etc...

[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ] in ClyFullBrowser(Morph)>>drawSubmorphsOn:
	Receiver: a ClyFullBrowser(863644928)
	Arguments and temporary variables: 
		aCanvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		drawBlock: 	[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ]
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
	Receiver's instance variables: 
		bounds: 	(5.0@51.0) corner: (1531.0@767.0)
		owner: 	a SystemWindow(360187392) named: COOSparseMatrix>>byMatrixAnimated:withD...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(843765504) a PanelMorph(4480358...etc...
		fullBounds: 	(5@51) corner: (1531@767)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (443755008) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(448035840)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(314799872) a ClyQuery...etc...
		toolPanel: 	a PanelMorph(390326016)
		toolbar: 	a ClyToolbarMorph(1050683904)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		packageView: 	a ClyQueryViewMorph(314799872)
		classView: 	a ClyQueryViewMorph(686807296)
		methodGroupView: 	a ClyQueryViewMorph(365444864)
		methodView: 	a ClyQueryViewMorph(1060887808)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: COOSparseMatrix


FormCanvas>>clipBy:during:
	Receiver: a FormCanvas on: DisplayScreen(1536x801x32)
	Arguments and temporary variables: 
		aRectangle: 	(25@314) corner: (1518@649)
		aBlock: 	[ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ]
	Receiver's instance variables: 
		origin: 	(0@0)
		clipRect: 	(25@314) corner: (1518@649)
		form: 	DisplayScreen(1536x801x32)
		port: 	a GrafPort

THERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrix not found in WeakKeyDictionary
1 May 2019 5:27:04.521677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary()
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	0
		array: 	an Array(nil nil nil nil nil->nil->nil->nil->nil->nil->nil->nil->nil->ni...etc...
		expired: 	1
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>at:
	Receiver: a WeakKeyDictionary()
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	0
		array: 	an Array(nil nil nil nil nil->nil->nil->nil->nil->nil->nil->nil->nil->ni...etc...
		expired: 	1
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>at:ifAbsent:
	Receiver: a WeakKeyDictionary()
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	0
		array: 	an Array(nil nil nil nil nil->nil->nil->nil->nil->nil->nil->nil->nil->ni...etc...
		expired: 	1
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>at:
	Receiver: a WeakKeyDictionary()
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		tally: 	0
		array: 	an Array(nil nil nil nil nil->nil->nil->nil->nil->nil->nil->nil->nil->ni...etc...
		expired: 	1
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>soleInstanceOf:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anAnonymousClass: 	a subclass of COOSparseMatrix
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix)...etc...
		migratedObjects: 	a WeakKeyDictionary()


[ :c | 
| object anonMethodNode anonNodes |
object := anonSubclassesBuilder soleInstanceOf: c.
anonMethodNode := (c >> selector) ast.

"Getting all nodes in the method with links,
			they are instance specific because located 
			in the sole instance of a anonymous class"
anonNodes := anonMethodNode allChildren select: [ :n | n hasLinks ].

"We remove the existing links"
anonNodes
	do: [ :node | 
		node links
			do: [ :link | self uninstall: link fromNode: node forObject: object ] ].

"We remove links from the anonymous method node if any"
anonMethodNode hasLinks
	ifTrue: [ anonMethodNode links
			do:
				[ :link | self uninstall: link fromNode: anonMethodNode forObject: object ].
		anonMethodNode links removeAll ] ] in MetaLinkInstaller>>removeAllAnonymousNodesIn:fromAnonSubclassesOf:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		methodNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		aClass: 	COOSparseMatrix
		selector: 	#byMatrixAnimated:withDelay:visualizer:
		anonClassesWithSelector: 	an OrderedCollection(a subclass of COOSparseMatrix)
		c: 	a subclass of COOSparseMatrix
		object: 	nil
		anonMethodNode: 	nil
		anonNodes: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


OrderedCollection>>do:
	Receiver: an OrderedCollection(a subclass of COOSparseMatrix)
	Arguments and temporary variables: 
		aBlock: 	[ :c | 
| object anonMethodNode anonNodes |
object := anonSubclassesBui...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{a subclass of COOSparseMatrix}
		firstIndex: 	1
		lastIndex: 	1


MetaLinkInstaller>>removeAllAnonymousNodesIn:fromAnonSubclassesOf:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		methodNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		aClass: 	COOSparseMatrix
		selector: 	#byMatrixAnimated:withDelay:visualizer:
		anonClassesWithSelector: 	an OrderedCollection(a subclass of COOSparseMatrix)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>methodChanged:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMethodChanged: 	a MethodModified
		methodNode: 	byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz...etc...
		methodClass: 	COOSparseMatrix
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		anObject: 	a MethodModified
		strongReceiver: 	a MetaLinkInstaller
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		arg: 	a MethodModified
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)
	Arguments and temporary variables: 
		arg1: 	a MethodModified
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#methodChanged:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller))
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	MethodModified
		action: 	a WeakMessageSend(#methodChanged: -> a MetaLinkInstaller)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
		startIndex: 	1
		index: 	4
		subscription: 	a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: ...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription(a WeakMessageSend(#methodChanged: ...etc...
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		subs: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#methodAnnounce...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(a WeakAnnouncementSubscription(a WeakMessageS...etc...
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
		announcement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a MethodModified
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>methodChangedFrom:to:oldProtocol:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		oldMethod: 	COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer:
		newMethod: 	COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer:
		oldProtocol: 	#'as yet unclassified'
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


COOSparseMatrix class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		selector: 	#byMatrixAnimated:withDelay:visualizer:
		compiledMethod: 	COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer:
		category: 	#'as yet unclassified'
		priorMethodOrNil: 	COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer:
		priorOriginOrNil: 	COOSparseMatrix
		oldProtocol: 	#'as yet unclassified'
		newProtocol: 	#'as yet unclassified'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


COOSparseMatrix class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		text: 	a Text for 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualize...etc...
		category: 	#'as yet unclassified'
		changeStamp: 	'YaroslavKormusyn 5/1/2019 17:27'
		requestor: 	a RubScrolledTextMorph(199039232)
		logSource: 	true
		method: 	COOSparseMatrix>>#byMatrixAnimated:withDelay:visualizer:
		selector: 	#byMatrixAnimated:withDelay:visualizer:
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


COOSparseMatrix class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		text: 	a Text for 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualize...etc...
		category: 	#'as yet unclassified'
		changeStamp: 	'YaroslavKormusyn 5/1/2019 17:27'
		requestor: 	a RubScrolledTextMorph(199039232)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


COOSparseMatrix class(ClassDescription)>>compile:classified:notifying:
	Receiver: COOSparseMatrix
	Arguments and temporary variables: 
		text: 	a Text for 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualize...etc...
		category: 	#'as yet unclassified'
		requestor: 	a RubScrolledTextMorph(199039232)
		stamp: 	'YaroslavKormusyn 5/1/2019 17:27'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#*->COOSparseMatrix>>#* #+->COOSparseMatrix>>#+ ...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#COOSparseMatrix
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Data'


ClyMethodCodeEditorToolMorph>>applyChanges
	Receiver:THERE_BE_DRAGONS_HERE
#row was sent to nil
1 May 2019 5:29:47.737677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :value | 
self deselectModels: {value}.
Transcript
	show: value row @ value column;
	show: 'Im in left marker before';
	cr ] in MatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		leftSavedMarkerLink: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		value: 	nil
	Receiver's instance variables: 
		composer: 	a RTComposer
		leftMatrix: 	nil
		rightMatrix: 	nil
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink)


[ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |
leftSavedMatrixMarker := leftMatrixMarker := first.
rightMatrixMarker := transposed first.
currentLeftRow := leftMatrixMarker row.
currentRightColumn := rightMatrixMarker row.
nowProcessingElementIndex := (RTLabel
	text:
		[ :indices | 'Now processing ' , (indices first @ indices last) asString ])
	elementOn:
		{currentLeftRow.
		currentRightColumn}.
visualizer add: nowProcessingElementIndex.
visualizer group: #nowProcessing.
leftMarkerElement := (COOSparseMatrixVisualizer new
	getElementShapeScaled: 5) elementOn: leftMatrixMarker.
visualizer add: leftMarkerElement.
visualizer group: #leftMarker.
rightMarkerElement := (COOSparseMatrixVisualizer new
	getElementShapeScaled: 5) elementOn: rightMatrixMarker.
visualizer add: rightMarkerElement.
visualizer group: #rightMarker.
visualizer setPositionsForCOOMultiplication.
visualizer
	namedGroups: #(#left #result #right #leftMarker #rightMarker).
visualizer backgroundGroups: #(#left #result #right).
visualizer update.
sum := 0.
self
	withEscaper: [ :end | 
		[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]
			whileTrue: [ self
					withEscaper: [ :outer | 
						"Switch to next row in left and reset right marker if right ended"
						rightMatrixMarker isNil
							ifTrue: [ rightMatrixMarker := transposed first.
								leftSavedMatrixMarker := leftMatrixMarker.
								leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
								rightMarkerElement updateModelAndRedraw: rightMatrixMarker.
								(Delay forSeconds: delay) wait ].
						"reset left marker to row beginning"
						(Delay forSeconds: delay) wait.
						leftMatrixMarker := leftSavedMatrixMarker.
						leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
						(Delay forSeconds: delay) wait.
						currentLeftRow := leftMatrixMarker row.
						currentRightColumn := rightMatrixMarker row.
						nowProcessingElementIndex
							model:
								{currentLeftRow.
								currentRightColumn}.
						nowProcessingElementIndex update.
						self
							withEscaper: [ :next | 
								[ leftMatrixMarker isNotNil
									and: [ rightMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow
													and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
									whileTrue: [ priorityColumn := {leftMatrixMarker column.
										rightMatrixMarker column} max.
										"Find same column as prioritized or higher in left"
										[ leftMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow
													and: [ leftMatrixMarker column < priorityColumn ] ] ]
											whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.
												leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
												(Delay forSeconds: delay) wait ].
										leftMatrixMarker isNil
											ifTrue: [ [ rightMatrixMarker isNotNil
													and: [ rightMatrixMarker row = currentRightColumn ] ]
													whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.
														rightMatrixMarker isNotNil
															ifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.
																(Delay forSeconds: delay) wait ] ].

												"If no intersection - end"
												rightMatrixMarker isNil
													ifTrue: [ end value ].
												"Else - continue loop"
												next value ].
										leftMatrixMarker row ~= currentLeftRow
											ifTrue: [ [ rightMatrixMarker isNotNil
													and: [ rightMatrixMarker row = currentRightColumn ] ]
													whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.
														rightMatrixMarker isNotNil
															ifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.
																(Delay forSeconds: delay) wait ] ].
												next value ].
										priorityColumn := leftMatrixMarker column.

										"Find same column as prioritized or higher in right"
										[ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn
													and: [ rightMatrixMarker column < priorityColumn ] ] ]
											whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.
												rightMatrixMarker isNotNil
													ifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].
												(Delay forSeconds: delay) wait ].
										rightMatrixMarker isNil
											ifTrue: [ [ leftMatrixMarker isNotNil
													and: [ leftMatrixMarker row = currentLeftRow ] ]
													whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.
														leftMatrixMarker isNotNil
															ifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].
														(Delay forSeconds: delay) wait ].

												"If no intersections - end"
												leftMatrixMarker isNil
													ifTrue: [ end value ].
												"Else - continue loop"
												next value ].
										rightMatrixMarker row ~= currentRightColumn
											ifTrue: [ next value ].
										leftMatrixMarker column = rightMatrixMarker column
											ifTrue: [ self halt.
												visualizer highlightModel: leftMatrixMarker inGroup: #left.
												visualizer
													highlightModel: rightMatrixMarker
													inGroup: #right.
												(Delay forSeconds: delay) wait.
												sum := sum
													+ (leftMatrixMarker value * rightMatrixMarker value).
												leftMarkerElement updateModelAndRedraw: leftMatrixMarker.
												rightMatrixMarker isNotNil
													ifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].
												(Delay forSeconds: delay) wait ]
											ifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].
						sum = 0
							ifFalse: [ newNode := COOSparseMatrixNode
									row: currentLeftRow
									column: currentRightColumn
									value: sum.
								result last rightNeighbour: newNode.
								newNode leftNeighbour: result last.
								result last: newNode.
								sum := 0.
								visualizer updateResultWith: result ] ].
				sum = 0
					ifFalse: [ newNode := COOSparseMatrixNode
							row: currentLeftRow
							column: currentRightColumn
							value: sum.
						result last rightNeighbour: newNode.
						newNode leftNeighbour: result last.
						result last: newNode.
						sum := 0.
						visualizer updateResultWith: result ] ] ].
"nil the reference to dummy head"
result first rightNeighbour leftNeighbour: nil.
result first: result first rightNeighbour.
visualizer updateResultWith: result ] in a subclass of COOSparseMatrix>>byMatrixAnimated:withDelay:visualizer:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		delay: 	2
		viz: 	a MatrixOperationVisualizer
		RFReifyValueVar: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
		operationProcess: 	nil
		operationBlock: 	nil
		visualizer: 	a MatrixOperationVisualizer
		leftMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		priorityColumn: 	nil
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil
		nowProcessingElementIndex: THERE_BE_DRAGONS_HERE
DuplicatedSlotName: Slot #'rightMatrixMarker' appeared twice in COOSparseMatrixOperationVisualizer
1 May 2019 6:17:08.348677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ :other | 
other name = current name
	ifTrue: [ DuplicatedSlotName new
			oldSlot: current;
			newSlot: other;
			host: host;
			signal ] ] in FixedLayout(PointerLayout)>>checkSlotNames
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		slots: 	an OrderedCollection(#composer => InstanceVariableSlot #leftMatrix => In...etc...
		other: 	#rightMatrixMarker => InstanceVariableSlot
		current: 	#rightMatrixMarker => InstanceVariableSlot
	Receiver's instance variables: 
		host: 	COOSparseMatrixOperationVisualizer
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope(#composer => InstanceVariableSlot #leftMatrix => ...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(#composer => InstanceVariableSlot #leftMatrix => InstanceVariableSlot...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :other | 
other name = current name
	ifTrue: [ DuplicatedSlotName new...etc...
		index: 	11
	Receiver's instance variables: 
		array: 	{#composer => InstanceVariableSlot. #leftMatrix => InstanceVariableSlot....etc...
		firstIndex: 	1
		lastIndex: 	16


FixedLayout(PointerLayout)>>checkSlotNames
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		slots: 	an OrderedCollection(#composer => InstanceVariableSlot #leftMatrix => In...etc...
		current: 	#rightMatrixMarker => InstanceVariableSlot
	Receiver's instance variables: 
		host: 	COOSparseMatrixOperationVisualizer
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope(#composer => InstanceVariableSlot #leftMatrix => ...etc...


FixedLayout(PointerLayout)>>checkSanity
	Receiver: a FixedLayout
	Arguments and temporary variables: 

	Receiver's instance variables: 
		host: 	COOSparseMatrixOperationVisualizer
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope(#composer => InstanceVariableSlot #leftMatrix => ...etc...


COOSparseMatrixOperationVisualizer class(ClassDescription)>>superclass:withLayoutType:slots:
	Receiver: COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		aSuperclass: 	MatrixOperationVisualizer
		layoutType: 	FixedLayout
		slotArray: 	{#currentLeftRow => InstanceVariableSlot. #currentRightColumn => Ins...etc...
		superLayout: 	a FixedLayout
		newScope: 	a LayoutClassScope(#composer => InstanceVariableSlot #leftMatrix => I...etc...
		newLayout: 	a FixedLayout
	Receiver's instance variables: 
		superclass: 	nil
		methodDict: 	nil
		format: 	nil
		layout: 	nil
		organization: 	nil
		subclasses: 	nil
		name: 	#COOSparseMatrixOperationVisualizer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	nil
		category: 	nil


ShDefaultBuilderEnhancer>>configureClass:superclass:withLayoutType:slots:
	Receiver: a ShDefaultBuilderEnhancer
	Arguments and temporary variables: 
		newClass: 	COOSparseMatrixOperationVisualizer
		superclass: 	MatrixOperationVisualizer
		layoutType: 	FixedLayout
		slots: 	{#currentLeftRow => InstanceVariableSlot. #currentRightColumn => Instanc...etc...
	Receiver's instance variables: 
a ShDefaultBuilderEnhancer

ShiftClassBuilder>>createClass
	Receiver: a ShiftClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		buildEnvironment: 	a ShSmalltalkGlobalsEnvironment
		superclassName: 	#Object
		name: 	#COOSparseMatrixOperationVisualizer
		layoutDefinition: 	a ShLayoutDefinition
		comment: 	nil
		commentStamp: 	nil
		superclass: 	MatrixOperationVisualizer
		category: 	'LNU-SparseMatrix-Visual'
		newMetaclass: 	COOSparseMatrixOperationVisualizer class
		newClass: 	COOSparseMatrixOperationVisualizer
		oldClass: 	COOSparseMatrixOperationVisualizer
		oldMetaclass: 	COOSparseMatrixOperationVisualizer class
		builderEnhancer: 	a ShDefaultBuilderEnhancer
		metaclassClass: 	nil
		extensibleProperties: 	a Dictionary()
		changeComparers: 	an OrderedCollection(ShSharedPoolChangeDetector ShSharedVariab...etc...
		changes: 	a Set(a ShClassChanged a ShInstanceShapeChanged)
		metaSuperclass: 	nil


ShiftClassBuilder>>build
	Receiver: a ShiftClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		buildEnvironment: 	a ShSmalltalkGlobalsEnvironment
		superclassName: 	#Object
		name: 	#COOSparseMatrixOperationVisualizer
		layoutDefinition: 	a ShLayoutDefinition
		comment: 	nil
		commentStamp: 	nil
		superclass: 	MatrixOperationVisualizer
		category: 	'LNU-SparseMatrix-Visual'
		newMetaclass: 	COOSparseMatrixOperationVisualizer class
		newClass: 	COOSparseMatrixOperationVisualizer
		oldClass: 	COOSparseMatrixOperationVisualizer
		oldMetaclass: 	COOSparseMatrixOperationVisualizer class
		builderEnhancer: 	a ShDefaultBuilderEnhancer
		metaclassClass: 	nil
		extensibleProperties: 	a Dictionary()
		changeComparers: 	an OrderedCollection(ShSharedPoolChangeDetector ShSharedVariab...etc...
		changes: 	a Set(a ShClassChanged a ShInstanceShapeChanged)
		metaSuperclass: 	nil


[ builder oldClass: oldClass.
newClass := builder build.
self validateReadOnlyInstancesOf: oldClass.
self installInEnvironment: newClass.
self installSubclassInSuperclass: newClass.
builder builderEnhancer beforeMigratingClass: builder installer: self.
self migrateClassTo: newClass.
builder builderEnhancer afterMigratingClass: builder installer: self.
builder builderEnhancer
	propagateChangesToRelatedClasses: newClass
	installer: self ] in ShiftClassInstaller>>make:
	Receiver: a ShiftClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc...
		newClass: 	nil
	Receiver's instance variables: 
		oldClass: 	COOSparseMatrixOperationVisualizer
		builder: 	a ShiftClassBuilder
		installingEnvironment: 	nil


BlockClosure>>on:do:
	Receiver: [ builder oldClass: oldClass.
newClass := builder build.
self validateReadOnlyInstancesOf:...etc...
	Arguments and temporary variables: 
		exception: 	ShNoChangesInClass
		handlerAction: 	[ "If there are no changes in the building, I am not building or...etc...
	Receiver's instance variables: 
		outerContext: 	ShiftClassInstaller>>make:
		startpc: 	192
		numArgs: 	0


ShiftClassInstaller>>make:
	Receiver: a ShiftClassInstaller
	Arguments and temporary variables: 
		newClass: 	nil
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc...
	Receiver's instance variables: 
		oldClass: 	COOSparseMatrixOperationVisualizer
		builder: 	a ShiftClassBuilder
		installingEnvironment: 	nil


ShiftClassInstaller class>>make:
	Receiver: ShiftClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: self;
	name: t;
	layoutClass: self c...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#builder->ShiftClassInstaller>>#builder #comment...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ShiftAnonymousClassInstaller}
		name: 	#ShiftClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Shift-ClassInstaller-Base'


MatrixOperationVisualizer class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: MatrixOperationVisualizer
	Arguments and temporary variables: 
		t: 	#COOSparseMatrixOperationVisualizer
		f: 	' currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker r...etc...
		d: 	''
		s: 	''
		cat: 	'LNU-SparseMatrix-Visual'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#add:->MatrixOperationVisualizer>>#add: #backgro...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixOperationVisualizer. LILSparseMatrixOperationVisual...etc...
		name: 	#MatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


MatrixOperationVisualizer class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
	Receiver: MatrixOperationVisualizer
	Arguments and temporary variables: 
		aSubclassSymbol: 	#COOSparseMatrixOperationVisualizer
		instVarNames: 	' currentLeftRow currentRightColumn leftMatrixMarker leftSavedMat...etc...
		classVarNames: 	''
		aPackageSymbol: 	'LNU-SparseMatrix-Visual'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#add:->MatrixOperationVisualizer>>#add: #backgro...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{COOSparseMatrixOperationVisualizer. LILSparseMatrixOperationVisual...etc...
		name: 	#MatrixOperationVisualizer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LNU-SparseMatrix-Visual'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MatrixOperationVisualizer
		subclass: #COOSparseMatrixOperationVis...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


ClySystemEnvironment>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a ClySystemEnvironment(current image)
	Arguments and temporary variables: 
		aString: 	'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualiz...etc...
		aController: 	a RubScrolledTextMorph(610316544)
		aClass: 	COOSparseMatrixOperationVisualizer
		oldClass: 	COOSparseMatrixOperationVisualizer
		class: 	nil
		newClassName: 	'COOSparseMatrixOperationVisualizer'
		defTokens: 	an OrderedCollection('MatrixOperationVisualizer' 'subclass:' '#COOSp...etc...
		keywdIx: 	2
		classCompiler: 	an OpalCompiler
	Receiver's instance variables: 
		name: 	'current image'
		globals: 	a SystemDictionary(lots of globals)
		changesAnnouncer: 	a SystemAnnouncer
		packageOrganizer: 	a RPackageOrganizer
		projectManager: 	a ClyProjectManagerRegistry


ClyFullBrowser>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a ClyFullBrowser(254652160)
	Arguments and temporary variables: 
		aString: 	'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualiz...etc...
		aController: 	a RubScrolledTextMorph(610316544)
		aClass: 	COOSparseMatrixOperationVisualizer
	Receiver's instance variables: 
		bounds: 	(5.0@38.0) corner: (1075.0@754.0)
		owner: 	a SystemWindow(147962880) named: COOSparseMatrixOperationVisualizer
		submorphs: 	an Array(a ProportionalSplitterMorph(261829120) a PanelMorph(4702827...etc...
		fullBounds: 	(5@38) corner: (1075@754)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (1011927296) [sticky]  [other:  (announcer -> an An...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(470282752)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(963843328) a ClyQuery...etc...
		toolPanel: 	a PanelMorph(103221760)
		toolbar: 	a ClyToolbarMorph(547520512)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		packageView: 	a ClyQueryViewMorph(963843328)
		classView: 	a ClyQueryViewMorph(152269568)
		methodGroupView: 	a ClyQueryViewMorph(474883328)
		methodView: 	a ClyQueryViewMorph(848227072)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: COOSparseMatrixOpe...etc...


ClyClassDefinitionEditorToolMorph>>applyChanges
	Receiver: a ClyClassDefinitionEditorToolMorph(793895168)
	Arguments and temporary variables: 
		newClass: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@266.0) corner: (1074.0@753.0)
		owner: 	a Morph(561251328)
		submorphs: 	an Array(a ProportionalSplitterMorph(997816832) a ClyQueryViewMorph(...etc...
		fullBounds: 	(7@266) corner: (1074@753)
		color: 	Color transparent
		extension: 	a MorphExtension (706564608) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(254652160)
		context: 	a ClyClassContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(722686208)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(21735936)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(610316544)
		changesCancelRequested: 	false
		applyingChanges: 	true
		editingClass: 	COOSparseMatrixOperationVisualizer


THERE_BE_DRAGONS_HERE
SubclassResponsibility: MatrixOperationVisualizer had the subclass responsibility to implement #setLinksForMultiplicationOn:
1 May 2019 6:50:24.408677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer(Object)>>subclassResponsibility
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	nil


MatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
	Receiver's instance variables: 
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(189419776) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1051042304))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(529.0@271.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	19550665
		lastStepMessage: 	nil
		lastCycleTime: 	19550688
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19550665
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	19550665
		lastStepMessage: 	nil
		lastCycleTime: 	19550688
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19550665
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	19550665
		lastStepMessage: 	nil
		lastCycleTime: 	19550688
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19550665
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixOperationVisualizer(Object)>>subclassResponsibility
MatrixOperationVisualizer>>setLinksForMultiplicationOn:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of MatrixOperationVisualizer did not understand #delay:
1 May 2019 6:51:32.949677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer(Object)>>doesNotUnderstand: #delay:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		aMessage: 	delay: 2
		exception: 	MessageNotUnderstood: MatrixOperationVisualizer>>delay:
		resumeValue: 	nil
	Receiver's instance variables: 
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(342282752))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	19619203
		lastStepMessage: 	nil
		lastCycleTime: 	19619233
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19619203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	19619203
		lastStepMessage: 	nil
		lastCycleTime: 	19619233
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19619203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	19619203
		lastStepMessage: 	nil
		lastCycleTime: 	19619233
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19619203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixOperationVisualizer(Object)>>doesNotUnderstand: #delay:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubclassResponsibility: MatrixOperationVisualizer had the subclass responsibility to implement #setLinksForMultiplicationOn:
1 May 2019 6:51:58.057677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

MatrixOperationVisualizer(Object)>>subclassResponsibility
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	2


MatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
	Receiver's instance variables: 
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	2


MatrixOperationVisualizer>>multiplyAnimated:by:
	Receiver: a MatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
	Receiver's instance variables: 
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(734714368))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	19644310
		lastStepMessage: 	nil
		lastCycleTime: 	19644357
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19644310
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	19644310
		lastStepMessage: 	nil
		lastCycleTime: 	19644357
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19644310
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	19644310
		lastStepMessage: 	nil
		lastCycleTime: 	19644357
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19644310
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MatrixOperationVisualizer(Object)>>subclassResponsibility
MatrixOperationVisualizer>>setLinksForMultiplicationOn:
MatrixOperationVisualizer>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #leftMarker not found in Dictionary
1 May 2019 6:52:17.669677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aKey: 	#leftMarker
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#leftMarker
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#leftMarker
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#leftMarker
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


RTComposer>>move:below:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		name1: 	#leftMarker
		name2: 	#left
		g1: 	nil
		g2: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


COOSparseMatrixOperationVisualizer>>setPositionsForMultiplication
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink)
		delay: 	2
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTLabel


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink)
		delay: 	2
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTLabel


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(941101312))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(383.0@117.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	19663807
		lastStepMessage: 	nil
		lastCycleTime: 	19663850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19663807
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	19663807
		lastStepMessage: 	nil
		lastCycleTime: 	19663850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19663807
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	19663807
		lastStepMessage: 	nil
		lastCycleTime: 	19663850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	19663807
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>move:below:
COOSparseMatrixOperationVisualizer>>setPositionsForMultiplication
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestTookTooMuchTime
1 May 2019 8:31:01.227677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>pvtSignal:list:
	Receiver: a Process in nil
	Arguments and temporary variables: 
		anException: 	TestTookTooMuchTime
		aList: 	a ProcessList()
		blocker: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	nil
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(a TestExecutionEnvironment nil nil nil nil nil nil nil nil nil...etc...
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil


COOSparseMatrix>>withEscaper:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		aBlock: 	[ :next | 
[ leftMatrixMarker isNotNil
	and: [ rightMatrixMarker isNotN...etc...
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	3
		columnNumber: 	3


[ :outer | 
"Switch to next row in left and reset right marker if right ended"
rightMatrixMarker isNil
	ifTrue: [ rightMatrixMarker := transposed first.
		leftSavedMatrixMarker := leftMatrixMarker ].
"reset left marker to row beginning"
leftMatrixMarker := leftSavedMatrixMarker.
currentLeftRow := leftMatrixMarker row.
currentRightColumn := rightMatrixMarker row.
self
	withEscaper: [ :next | 
		[ leftMatrixMarker isNotNil
			and: [ rightMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
			whileTrue: [ priorityColumn := {leftMatrixMarker column.
				rightMatrixMarker column} max.
				"Find same column as prioritized or higher in left"
				[ leftMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ leftMatrixMarker column < priorityColumn ] ] ]
					whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.
						leftMatrixMarker isNil
							ifTrue: [ [ rightMatrixMarker isNotNil
									and: [ rightMatrixMarker row = currentRightColumn ] ]
									whileTrue:
										[ rightMatrixMarker := rightMatrixMarker rightNeighbour ] ].

						"If no intersection - end"
						rightMatrixMarker isNil
							ifTrue: [ end value ].
						"Else - continue loop"
						next value ].
				leftMatrixMarker row ~= currentLeftRow
					ifTrue: [ [ rightMatrixMarker isNotNil
							and: [ rightMatrixMarker row = currentRightColumn ] ]
							whileTrue:
								[ rightMatrixMarker := rightMatrixMarker rightNeighbour ] ].
				next value ].
		priorityColumn := leftMatrixMarker column.

		"Find same column as prioritized or higher in right"
		[ rightMatrixMarker isNotNil
			and: [ rightMatrixMarker row = currentRightColumn
					and: [ rightMatrixMarker column < priorityColumn ] ] ]
			whileTrue:
				[ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
		rightMatrixMarker isNil
			ifTrue: [ [ leftMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow ] ]
					whileTrue:
						[ leftMatrixMarker := leftMatrixMarker rightNeighbour ].

				"If no intersections - end"
				leftMatrixMarker isNil
					ifTrue: [ end value ].
				"Else - continue loop"
				next value ].
		rightMatrixMarker row ~= currentRightColumn
			ifTrue: [ next value ].
		leftMatrixMarker column = rightMatrixMarker column
			ifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).
				leftMatrixMarker := leftMatrixMarker rightNeighbour.
				rightMatrixMarker := rightMatrixMarker rightNeighbour ]
			ifFalse: [ priorityColumn := rightMatrixMarker column ] ] ] in [ :end | 
[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]
	whileTrue: [ self
			withEscaper: [ :outer | 
				"Switch to next row in left and reset right marker if right ended"
				rightMatrixMarker isNil
					ifTrue: [ rightMatrixMarker := transposed first.
						leftSavedMatrixMarker := leftMatrixMarker ].
				"reset left marker to row beginning"
				leftMatrixMarker := leftSavedMatrixMarker.
				currentLeftRow := leftMatrixMarker row.
				currentRightColumn := rightMatrixMarker row.
				self
					withEscaper: [ :next | 
						[ leftMatrixMarker isNotNil
							and: [ rightMatrixMarker isNotNil
									and: [ leftMatrixMarker row = currentLeftRow
											and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
							whileTrue: [ priorityColumn := {leftMatrixMarker column.
								rightMatrixMarker column} max.
								"Find same column as prioritized or higher in left"
								[ leftMatrixMarker isNotNil
									and: [ leftMatrixMarker row = currentLeftRow
											and: [ leftMatrixMarker column < priorityColumn ] ] ]
									whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.
										leftMatrixMarker isNil
											ifTrue: [ [ rightMatrixMarker isNotNil
													and: [ rightMatrixMarker row = currentRightColumn ] ]
													whileTrue:
														[ rightMatrixMarker := rightMatrixMarker rightNeighbour ] ].

										"If no intersection - end"
										rightMatrixMarker isNil
											ifTrue: [ end value ].
										"Else - continue loop"
										next value ].
								leftMatrixMarker row ~= currentLeftRow
									ifTrue: [ [ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn ] ]
											whileTrue:
												[ rightMatrixMarker := rightMatrixMarker rightNeiTHERE_BE_DRAGONS_HERE
#rightNeighbour: was sent to nil
1 May 2019 8:32:42.604677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #rightNeighbour:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	rightNeighbour: a COOSparseMatrixNode
		exception: 	MessageNotUnderstood: receiver of "rightNeighbour:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :outer | 
"Switch to next row in left and reset right marker if right ended"
rightMatrixMarker isNil
	ifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.
		rightMatrixMarker := transposed first ].
"reset left marker to row beginning"
leftMatrixMarker := leftSavedMatrixMarker.
currentLeftRow := leftMatrixMarker row.
currentRightColumn := rightMatrixMarker row.
self
	withEscaper: [ :next | 
		[ leftMatrixMarker isNotNil
			and: [ rightMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
			whileTrue: [ priorityColumn := {leftMatrixMarker column.
				rightMatrixMarker column} max.
				"Find same column as prioritized or higher in left"
				[ leftMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ leftMatrixMarker column < priorityColumn ] ] ]
					whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].
				leftMatrixMarker isNil
					ifTrue: [ [ rightMatrixMarker isNotNil
							and: [ rightMatrixMarker row = currentRightColumn ] ]
							whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].

						"If no intersection - end"
						rightMatrixMarker isNil
							ifTrue: [ end value ].
						"Else - continue loop"
						next value ].
				leftMatrixMarker row ~= currentLeftRow
					ifTrue: [ [ rightMatrixMarker isNotNil
							and: [ rightMatrixMarker row = currentRightColumn ] ]
							whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
						next value ].
				priorityColumn := leftMatrixMarker column.

				"Find same column as prioritized or higher in right"
				[ rightMatrixMarker isNotNil
					and: [ rightMatrixMarker row = currentRightColumn
							and: [ rightMatrixMarker column < priorityColumn ] ] ]
					whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
				rightMatrixMarker isNil
					ifTrue: [ [ leftMatrixMarker isNotNil
							and: [ leftMatrixMarker row = currentLeftRow ] ]
							whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].

						"If no intersections - end"
						leftMatrixMarker isNil
							ifTrue: [ end value ].
						"Else - continue loop"
						next value ].
				rightMatrixMarker row ~= currentRightColumn
					ifTrue: [ next value ].
				leftMatrixMarker column = rightMatrixMarker column
					ifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).
						leftMatrixMarker := leftMatrixMarker rightNeighbour.
						rightMatrixMarker := rightMatrixMarker rightNeighbour ]
					ifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].
sum = 0
	ifFalse: [ newNode := COOSparseMatrixNode
			row: currentLeftRow
			column: currentRightColumn
			value: sum.
		tail rightNeighbour: newNode.
		newNode leftNeighbour: tail.
		tail := newNode.
		sum := 0 ] ] in [ :end | 
[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]
	whileTrue: [ self
			withEscaper: [ :outer | 
				"Switch to next row in left and reset right marker if right ended"
				rightMatrixMarker isNil
					ifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.
						rightMatrixMarker := transposed first ].
				"reset left marker to row beginning"
				leftMatrixMarker := leftSavedMatrixMarker.
				currentLeftRow := leftMatrixMarker row.
				currentRightColumn := rightMatrixMarker row.
				self
					withEscaper: [ :next | 
						[ leftMatrixMarker isNotNil
							and: [ rightMatrixMarker isNotNil
									and: [ leftMatrixMarker row = currentLeftRow
											and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
							whileTrue: [ priorityColumn := {leftMatrixMarker column.
								rightMatrixMarker column} max.
								"Find same column as prioritized or higher in left"
								[ leftMatrixMarker isNotNil
									and: [ leftMatrixMarker row = currentLeftRow
											and: [ leftMatrixMarker column < priorityColumn ] ] ]
									whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].
								leftMatrixMarker isNil
									ifTrue: [ [ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn ] ]
											whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].

										"If no intersection - end"
										rightMatrixMarker isNil
											ifTrue: [ end value ].
										"Else - continue loop"
										next value ].
								leftMatrixMarker row ~= currentLeftRow
									ifTrue: [ [ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn ] ]
											whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
										next value ].
								priorityColumn := leftMatrixMarker column.

								"Find same column as prioritized or higher in right"
								[ rightMatrixMarker isNotNil
									and: [ rightMatrixMarker row = currentRightColumn
											and: [ rightMatrixMarker column < priorityColumn ] ] ]
									whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
								rightMatrixMarker isNil
									ifTrue: [ [ leftMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow ] ]
											whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].

										"If no intersections - end"
										leftMatrixMarker isNil
											ifTrue: [ end value ].
										"Else - continue loop"
										next value ].
								rightMatrixMarker row ~= currentRightColumn
									ifTrue: [ next value ].
								leftMatrixMarker column = rightMatrixMarker column
									ifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).
										leftMatrixMarker := leftMatrixMarker rightNeighbour.
										rightMatrixMarker := rightMatrixMarker rightNeighbour ]
									ifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].
				sum = 0
					ifFalse: [ newNode := COOSparseMatrixNode
							row: currentLeftRow
							column: currentRightColumn
							value: sum.
						tail rightNeighbour: newNode.
						newNode leftNeighbour: tail.THERE_BE_DRAGONS_HERE
#rightNeighbour: was sent to nil
1 May 2019 8:33:12.347677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #rightNeighbour:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	rightNeighbour: a COOSparseMatrixNode
		exception: 	MessageNotUnderstood: receiver of "rightNeighbour:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :outer | 
"Switch to next row in left and reset right marker if right ended"
rightMatrixMarker isNil
	ifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.
		rightMatrixMarker := transposed first ].
"reset left marker to row beginning"
leftMatrixMarker := leftSavedMatrixMarker.
currentLeftRow := leftMatrixMarker row.
currentRightColumn := rightMatrixMarker row.
self
	withEscaper: [ :next | 
		[ leftMatrixMarker isNotNil
			and: [ rightMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
			whileTrue: [ priorityColumn := {leftMatrixMarker column.
				rightMatrixMarker column} max.
				"Find same column as prioritized or higher in left"
				[ leftMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ leftMatrixMarker column < priorityColumn ] ] ]
					whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].
				leftMatrixMarker isNil
					ifTrue: [ [ rightMatrixMarker isNotNil
							and: [ rightMatrixMarker row = currentRightColumn ] ]
							whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].

						"If no intersection - end"
						rightMatrixMarker isNil
							ifTrue: [ end value ].
						"Else - continue loop"
						next value ].
				leftMatrixMarker row ~= currentLeftRow
					ifTrue: [ [ rightMatrixMarker isNotNil
							and: [ rightMatrixMarker row = currentRightColumn ] ]
							whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
						next value ].
				priorityColumn := leftMatrixMarker column.

				"Find same column as prioritized or higher in right"
				[ rightMatrixMarker isNotNil
					and: [ rightMatrixMarker row = currentRightColumn
							and: [ rightMatrixMarker column < priorityColumn ] ] ]
					whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
				rightMatrixMarker isNil
					ifTrue: [ [ leftMatrixMarker isNotNil
							and: [ leftMatrixMarker row = currentLeftRow ] ]
							whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].

						"If no intersections - end"
						leftMatrixMarker isNil
							ifTrue: [ end value ].
						"Else - continue loop"
						next value ].
				rightMatrixMarker row ~= currentRightColumn
					ifTrue: [ next value ].
				leftMatrixMarker column = rightMatrixMarker column
					ifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).
						leftMatrixMarker := leftMatrixMarker rightNeighbour.
						rightMatrixMarker := rightMatrixMarker rightNeighbour ]
					ifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].
sum = 0
	ifFalse: [ newNode := COOSparseMatrixNode
			row: currentLeftRow
			column: currentRightColumn
			value: sum.
		tail rightNeighbour: newNode.
		newNode leftNeighbour: tail.
		tail := newNode.
		sum := 0 ] ] in [ :end | 
[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]
	whileTrue: [ self
			withEscaper: [ :outer | 
				"Switch to next row in left and reset right marker if right ended"
				rightMatrixMarker isNil
					ifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.
						rightMatrixMarker := transposed first ].
				"reset left marker to row beginning"
				leftMatrixMarker := leftSavedMatrixMarker.
				currentLeftRow := leftMatrixMarker row.
				currentRightColumn := rightMatrixMarker row.
				self
					withEscaper: [ :next | 
						[ leftMatrixMarker isNotNil
							and: [ rightMatrixMarker isNotNil
									and: [ leftMatrixMarker row = currentLeftRow
											and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
							whileTrue: [ priorityColumn := {leftMatrixMarker column.
								rightMatrixMarker column} max.
								"Find same column as prioritized or higher in left"
								[ leftMatrixMarker isNotNil
									and: [ leftMatrixMarker row = currentLeftRow
											and: [ leftMatrixMarker column < priorityColumn ] ] ]
									whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].
								leftMatrixMarker isNil
									ifTrue: [ [ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn ] ]
											whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].

										"If no intersection - end"
										rightMatrixMarker isNil
											ifTrue: [ end value ].
										"Else - continue loop"
										next value ].
								leftMatrixMarker row ~= currentLeftRow
									ifTrue: [ [ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn ] ]
											whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
										next value ].
								priorityColumn := leftMatrixMarker column.

								"Find same column as prioritized or higher in right"
								[ rightMatrixMarker isNotNil
									and: [ rightMatrixMarker row = currentRightColumn
											and: [ rightMatrixMarker column < priorityColumn ] ] ]
									whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
								rightMatrixMarker isNil
									ifTrue: [ [ leftMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow ] ]
											whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].

										"If no intersections - end"
										leftMatrixMarker isNil
											ifTrue: [ end value ].
										"Else - continue loop"
										next value ].
								rightMatrixMarker row ~= currentRightColumn
									ifTrue: [ next value ].
								leftMatrixMarker column = rightMatrixMarker column
									ifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).
										leftMatrixMarker := leftMatrixMarker rightNeighbour.
										rightMatrixMarker := rightMatrixMarker rightNeighbour ]
									ifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].
				sum = 0
					ifFalse: [ newNode := COOSparseMatrixNode
							row: currentLeftRow
							column: currentRightColumn
							value: sum.
						tail rightNeighbour: newNode.
						newNode leftNeighbour: tail.
						tail := newNode.
						sum := 0 ] ].
		sum = 0
			ifFalse: [ newNode := COOSparseMatrixNode
					row: currentLeftRow
					column: currentRightColumn
					value: sum.
				tail rightNeighbour: newNode.
				newNode leftNeighbour: tail.
				tail := newNode.
				sum := 0 ] ] ] in COOSparseMatrix>>byMatrix:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SlotNotFound: Slot 'value' not found
1 May 2019 8:35:49.029677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
		aBlock: 	[ SlotNotFound signalForName: aName ]
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		host: 	UndefinedObject
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope()


UndefinedObject class(ClassDescription)>>slotNamed:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


MetalinkTargetResolver class>>lookupSlotNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>slotNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onSlotNamed:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aSlotName: 	#value
		slot: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		option: 	#read
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :value | 
self highlightModel: value.
delay wait ]
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


UndefinedObject(Object)>>link:toSlotNamed:option:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aSlotName: 	#value
		option: 	#read
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
		leftMarkerHighlightLink: 	a MetaLink
		rightMarkerHighlightLink: 	a MetaLink
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
		transposedLeftMatrixLink: 	nil
		method: 	#byMatrix:
	Receiver's instance variables: 
		process: 	a Process in [ self value.
Processor terminateActive ] in BlockClosure...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(2000 msecs)
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in [ self value.
Processor terminateActive ] in BlockClosure...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(2000 msecs)
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(817271040))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(420.0@191.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	25875261
		lastStepMessage: 	nil
		lastCycleTime: 	25875298
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	25875261
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	25875261
		lastStepMessage: 	nil
		lastCycleTime: 	25875298
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	25875261
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	25875261
		lastStepMessage: 	nil
		lastCycleTime: 	25875298
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	25875261
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
LayoutClassScope(LayoutAbstractScope)>>atName:
FixedLayout(PointerLayout)>>resolveSlot:
UndefinedObject class(ClassDescription)>>slotNamed:
MetalinkTargetResolver class>>lookupSlotNamed:in:
MetalinkTargetResolver class>>slotNamed:for:
MetaLinkInstaller>>installPermaLink:onSlotNamed:
MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
UndefinedObject(Object)>>link:toSlotNamed:option:
COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
--------------------------------------THERE_BE_DRAGONS_HERE
SlotNotFound: Slot 'value' not found
1 May 2019 8:37:29.857677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
		aBlock: 	[ SlotNotFound signalForName: aName ]
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		host: 	UndefinedObject
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope()


UndefinedObject class(ClassDescription)>>slotNamed:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


MetalinkTargetResolver class>>lookupSlotNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>slotNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onSlotNamed:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aSlotName: 	#value
		slot: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		option: 	#read
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :value | 
self highlightModel: value.
delay wait ]
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


UndefinedObject(Object)>>link:toSlotNamed:option:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aSlotName: 	#value
		option: 	#read
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
		leftMarkerHighlightLink: 	a MetaLink
		rightMarkerHighlightLink: 	a MetaLink
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
		transposedLeftMatrixLink: 	nil
		method: 	#byMatrix:
	Receiver's instance variables: 
		process: 	a Process in Array(SequenceableCollection)>>do:
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(2000 msecs)
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in Array(SequenceableCollection)>>do:
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(2000 msecs)
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(263973376))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(450.0@164.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	25976124
		lastStepMessage: 	nil
		lastCycleTime: 	25976156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	25976124
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	25976124
		lastStepMessage: 	nil
		lastCycleTime: 	25976156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	25976124
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	25976124
		lastStepMessage: 	nil
		lastCycleTime: 	25976156
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	25976124
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
LayoutClassScope(LayoutAbstractScope)>>atName:
FixedLayout(PointerLayout)>>resolveSlot:
UndefinedObject class(ClassDescription)>>slotNamed:
MetalinkTargetResolver class>>lookupSlotNamed:in:
MetalinkTargetResolver class>>slotNamed:for:
MetaLinkInstaller>>installPermaLink:onSlotNamed:
MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
UndefinedObject(Object)>>link:toSlotNamed:option:
COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SlotNotFound: Slot 'value' not found
1 May 2019 8:53:06.180677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
		aBlock: 	[ SlotNotFound signalForName: aName ]
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		host: 	UndefinedObject
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope()


UndefinedObject class(ClassDescription)>>slotNamed:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


MetalinkTargetResolver class>>lookupSlotNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>slotNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onSlotNamed:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aSlotName: 	#value
		slot: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		option: 	#read
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :value | 
self highlightModel: value.
delay wait ]
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


UndefinedObject(Object)>>link:toSlotNamed:option:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aSlotName: 	#value
		option: 	#read
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerHighlightLink: 	a MetaLink
		rightMarkerHighlightLink: 	a MetaLink
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ :value | 
resultMatrix := value.
process suspend ] in C...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in [ :value | 
resultMatrix := value.
process suspend ] in C...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(984404480))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(450.0@164.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	26912278
		lastStepMessage: 	nil
		lastCycleTime: 	26912344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	26912278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	26912278
		lastStepMessage: 	nil
		lastCycleTime: 	26912344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	26912278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	26912278
		lastStepMessage: 	nil
		lastCycleTime: 	26912344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	26912278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
LayoutClassScope(LayoutAbstractScope)>>atName:
FixedLayout(PointerLayout)>>resolveSlot:
UndefinedObject class(ClassDescription)>>slotNamed:
MetalinkTargetResolver class>>lookupSlotNamed:in:
MetalinkTargetResolver class>>slotNamed:for:
MetaLinkInstaller>>installPermaLink:onSlotNamed:
MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
UndefinedObject(Object)>>link:toSlotNamed:option:
COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOnTHERE_BE_DRAGONS_HERE
SlotNotFound: Slot 'value' not found
1 May 2019 8:58:00.501677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
		aBlock: 	[ SlotNotFound signalForName: aName ]
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		host: 	UndefinedObject
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope()


UndefinedObject class(ClassDescription)>>slotNamed:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


MetalinkTargetResolver class>>lookupSlotNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>slotNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onSlotNamed:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aSlotName: 	#value
		slot: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		option: 	#read
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :value | 
self highlightModel: value.
delay wait ]
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


UndefinedObject(Object)>>link:toSlotNamed:option:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aSlotName: 	#value
		option: 	#read
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerHighlightLink: 	a MetaLink
		rightMarkerHighlightLink: 	a MetaLink
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ self class open: name utf8Encoded writable: writeMode ]...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	nil
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in [ self class open: name utf8Encoded writable: writeMode ]...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	nil
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(61432320))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(450.0@164.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
SlotNotFound: Slot 'value' not found
1 May 2019 9:09:05.090677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
		aBlock: 	[ SlotNotFound signalForName: aName ]
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		host: 	UndefinedObject
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope()


UndefinedObject class(ClassDescription)>>slotNamed:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


MetalinkTargetResolver class>>lookupSlotNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>slotNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onSlotNamed:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aSlotName: 	#value
		slot: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		option: 	#read
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :value | 
self highlightModel: value.
delay wait ]
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


UndefinedObject(Object)>>link:toSlotNamed:option:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aSlotName: 	#value
		option: 	#read
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerHighlightLink: 	a MetaLink
		rightMarkerHighlightLink: 	a MetaLink
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		process: 	a Process in ByteSymbol(Symbol)>>=
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	nil
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in ByteSymbol(Symbol)>>=
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	nil
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(64633088))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(497.0@324.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	27871189
		lastStepMessage: 	nil
		lastCycleTime: 	27871238
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	27871189
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extensiTHERE_BE_DRAGONS_HERE
#wait was sent to nil
1 May 2019 9:13:33.951677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #wait
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	wait
		exception: 	MessageNotUnderstood: receiver of "wait" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in SmallDictionary>>privateAt:put:
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	nil
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(161538560))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	28140037
		lastStepMessage: 	nil
		lastCycleTime: 	28140104
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28140037
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	28140037
		lastStepMessage: 	nil
		lastCycleTime: 	28140104
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28140037
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	28140037
		lastStepMessage: 	nil
		lastCycleTime: 	28140104
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28140037
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #wait
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of COOSparseMatrixNode did not understand #updateModelAndRedraw:
1 May 2019 9:13:34.024677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixNode(Object)>>doesNotUnderstand: #updateModelAndRedraw:
	Receiver: a COOSparseMatrixNode
	Arguments and temporary variables: 
		aMessage: 	updateModelAndRedraw: a COOSparseMatrixNode
		exception: 	MessageNotUnderstood: COOSparseMatrixNode>>updateModelAndRedraw:
		resumeValue: 	nil
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	1
		leftNeighbour: 	nil
		rightNeighbour: 	a COOSparseMatrixNode


[ :value | 
self selectModel: value.
leftMatrixMarker updateModelAndRedraw: value.
delay wait ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedLeftMatrixLink: 	nil
		method: 	nil
		value: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	nil
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	a COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	39


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	nil
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	95
		numArgs: 	0



--- The full stack ---
COOSparseMatrixNode(Object)>>doesNotUnderstand: #updateModelAndRedraw:
THERE_BE_DRAGONS_HERE
Instance of COOSparseMatrixNode did not understand #updateModelAndRedraw:
1 May 2019 9:14:26.129677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixNode(Object)>>doesNotUnderstand: #updateModelAndRedraw:
	Receiver: a COOSparseMatrixNode
	Arguments and temporary variables: 
		aMessage: 	updateModelAndRedraw: a COOSparseMatrixNode
		exception: 	MessageNotUnderstood: COOSparseMatrixNode>>updateModelAndRedraw:
		resumeValue: 	nil
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	1
		leftNeighbour: 	nil
		rightNeighbour: 	a COOSparseMatrixNode


[ :value | 
self selectModel: value.
leftMatrixMarker updateModelAndRedraw: value.
delay wait ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedLeftMatrixLink: 	nil
		method: 	nil
		value: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	a COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	39


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	95
		numArgs: 	0



--- The full stack ---
COOSparseMatrixNode(Object)>>doesNotUnderstand: #updateModelAndRedraw:
[ :value | 
self selectModel: value.
leftMatrixMarker updateModelAndRedraw: value.
delay wait ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 May 2019 9:14:44.925677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(1000 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734187284860677


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(1000 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734187284860677


rightMatrixMarker isNotNil in leftMatrixMarker in rightMatrixMarker row in self in COOSparseMatrix(a subclass of COOSparseMatrix)>>byMatrixAnimated:withDelay:visualizer:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


COOSparseMatrix>>withEscaper:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
		aBlock: 	rightMatrixMarker isNotNil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


leftMatrixMarker in rightMatrixMarker row in self in COOSparseMatrix(a subclass of COOSparseMatrix)>>byMatrixAnimated:withDelay:visualizer:
	Receiver: a COOSparseMatrix
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
1 May 2019 9:14:50.401677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(847151616))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 3 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	28192230
		lastStepMessage: 	nil
		lastCycleTime: 	28192299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28192230
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	28192230
		lastStepMessage: 	nil
		lastCycleTime: 	28192299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28192230
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	28192230
		lastStepMessage: 	nil
		lastCycleTime: 	28192299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28192230
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 May 2019 9:14:50.685677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallFloat64(Magnitude)>>min:max:
	Receiver: 0.673069403714565
	Arguments and temporary variables: 
		aMin: 	1.0
		aMax: 	0.005
	Receiver's instance variables: 
0.673069403714565

Color>>adjustBrightness:
	Receiver: (Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001 alpha: 1.0)
	Arguments and temporary variables: 
		brightness: 	-0.15
	Receiver's instance variables: 
		rgb: 	883764042
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


Color>>twiceDarker
	Receiver: (Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001 alpha: 1.0)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rgb: 	883764042
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


ThemeSettings>>menuBorderColor
	Receiver: a ThemeSettings
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		windowColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		autoSelectionColor: 	false
		buttonColor: 	Color gray
		scrollbarColor: 	Color gray
		standardColorsOnly: 	true
		progressBarColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.82300...etc...
		progressBarProgressColor: 	nil
		menuColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.823000000000...etc...
		menuTitleColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000...etc...
		preferGradientFill: 	false
		preferRoundCorner: 	false
		autoMenuColor: 	nil
		flatMenu: 	true
		fadedBackgroundWindows: 	false
		fastDragging: 	false
		animationSettings: 	an AnimationSettings
		scrollBarThickness: 	nil
		balloonHelpEnabled: 	true
		tabAmongFields: 	nil
		balloonHelpDelayTime: 	800
		maxBalloonHelpLineLength: 	40
		desktopImageLayout: 	nil
		menuSelectionColor: 	(Color r: 0.38 g: 0.638 b: 0.882 alpha: 1.0)
		secondarySelectionColor: 	nil
		findReplaceSelectionColor: 	(Color r: 1.0 g: 0.6 b: 0.0 alpha: 0.4)
		selectionBarColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 0.05900000000000000...etc...
		unfocusedSelectionColor: 	(Color r: 0.729 g: 0.8320000000000001 b: 0.934 alpha: ...etc...
		menuSelectionTextColor: 	Color black
		selectionTextColor: 	nil
		secondarySelectionTextColor: 	nil
		findReplaceSelectionTextColor: 	nil


PharoLightTheme(UITheme)>>menuBorderColor
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a FTTableMorph(788289792)->a BorderedMorph(962060800)
		windowActiveDropShadowStyle: 	#diffuse


ToolDockingBarMorph(DockingBarMorph)>>defaultBorderColor
	Receiver: a ToolDockingBarMorph(953630976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		originalColor: 	nil
		gradientRamp: 	nil
		fillsOwner: 	nil
		avoidVisibleBordersAtEdge: 	nil
		autoGradient: 	nil
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph(BorderedMorph)>>borderInitialize
	Receiver: a ToolDockingBarMorph(953630976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		originalColor: 	nil
		gradientRamp: 	nil
		fillsOwner: 	nil
		avoidVisibleBordersAtEdge: 	nil
		autoGradient: 	nil
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph(BorderedMorph)>>initialize
	Receiver: a ToolDockingBarMorph(953630976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		originalColor: 	nil
		gradientRamp: 	nil
		fillsOwner: 	nil
		avoidVisibleBordersAtEdge: 	nil
		autoGradient: 	nil
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph(AlignmentMorph)>>initialize
	Receiver: a ToolDockingBarMorph(953630976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		originalColor: 	nil
		gradientRamp: 	nil
		fillsOwner: 	nil
		avoidVisibleBordersAtEdge: 	nil
		autoGradient: 	nil
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph(DockingBarMorph)>>initialize
	Receiver: a ToolDockingBarMorph(953630976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	nil
		borderWidth: 	nil
		borderColor: 	nil
		originalColor: 	nil
		gradientRamp: 	nil
		fillsOwner: 	nil
		avoidVisibleBordersAtEdge: 	nil
		autoGradient: 	nil
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph class(Behavior)>>new
	Receiver: ToolDockingBarMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	DockingBarMorph
		methodDict: 	a MethodDictionary(#adoptMenuGroupModel:first:->ToolDockingBarMorph...etc...
		format: 	65551
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#ToolDockingBarMorph
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Polymorph-Widgets'
		announcer: 	nil
		users: 	nil


PharoLightTheme(UITheme)>>newToolDockingBarIn:
	Receiver: a PharoLightTheme
	Arguments and temporary variables: 
		aThemedMorph: 	a LazyTabGroupMorph(488931584)
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		settings: 	a ThemeSettings
		forms: 	a Dictionary(#buttonBottomLeft->Form(12x12x32) #buttonBottomMiddle->Form...etc...
		soundTheme: 	nil
		focusIndicator: 	a FTTableMorph(788289792)->a BorderedMorph(962060800)
		windowActiveDropShadowStyle: 	#diffuse


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderToolbarForPresentation:inMorph:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTabulator(id=236335616 title='Variables' pane=a GLMPane(323...etc...
		aMorph: 	a LazyTabGroupMorph(488931584)
		dock: 	nil
		buttons: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(488931584)


[ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	nil
		aPresentation: 	a GLMCompositePresentation(id=22448640 title=nil pane=a GLMPane(...etc...
		presentations: 	an OrderedCollection(a GLMTabulator(id=236335616 title='Variable...etc...
		each: 	a GLMTabulator(id=236335616 title='Variables' pane=a GLMPane(323842304 ma...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(488931584)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMTabulator(id=236335616 title='Variables' pane=a GLMPane(32384230...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMTabulator(id=236335616 title='Variables' pane=a GLMPane(32...etc...
		firstIndex: 	1
		lastIndex: 	2


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	nil
		aPresentation: 	a GLMCompositePresentation(id=22448640 title=nil pane=a GLMPane(...etc...
		presentations: 	an OrderedCollection(a GLMTabulator(id=236335616 title='Variable...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(488931584)


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=22448640 title=nil pane=a GLMPane(...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->GLMMorphicTabbedRenderer>...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=22448640 title=nil pane=a...etc...
	Receiver's instance variables: 
		window: 	nil


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=22448640 title=nil pane=a GLMPane(3238...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=22448640 title=nil pane=a GLMPane(323842304 main))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(323842304 main)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=973889792 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection(a GLMPortChangeAction)
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=236335616 title='Variable...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=22448640 title=nil pane=a GLMPane(32...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=22448640 title=nil pane=a GLMPane(32384...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMPanelMorph(143270400)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>renderContainerFor:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(323842304 main)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMPanelMorph(143270400)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>render:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(323842304 main)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a GLMPanelMorph(143270400)
		contentMorph: 	nil


GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPane(323842304 main)
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnMatchingPresentationChanged:->GLMMorphicPa...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPaneRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'


GLMMorphicRenderer>>renderPane:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(323842304 main)
	Receiver's instance variables: 
		window: 	nil


GLMPane>>renderGlamorouslyOn:
	Receiver: a GLMPane(323842304 main)
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variaTHERE_BE_DRAGONS_HERE
Halt
1 May 2019 9:26:18.679677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
resultMatrix := value.
self halt.
semaphore signal.
process suspend ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedLeftMatrixLink: 	nil
		method: 	nil
		value: 	a COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	a COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	a COOSparseMatrixNode
		rightMatrixMarker: 	a COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	95
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(Object)>>halt
[ :value | 
resultMatrix := value.
self halt.
semaphore signal.
process suspend ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 May 2019 9:26:22.873677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(934426880))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	28900699
		lastStepMessage: 	nil
		lastCycleTime: 	28900720
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28900699
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	28900699
		lastStepMessage: 	nil
		lastCycleTime: 	28900720
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28900699
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	28900699
		lastStepMessage: 	nil
		lastCycleTime: 	28900720
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28900699
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 May 2019 9:26:23.324677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(20 msecs; 1 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore(a Process in [ delaySemaphore wait ] in Delay>>wait...etc...
		beingWaitedOn: 	true
		millisecondDelayDuration: 	20
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734187983328677


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	20
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734187983328677


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		milliSecs: 	20
		wait: 	20
		wait2: 	20
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	28909629
		lastStepMessage: 	nil
		lastCycleTime: 	28909629
		alarms: 	a Heap()
		lastAlarmTime: 	28909629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	28909629
		lastStepMessage: 	nil
		lastCycleTime: 	28909629
		alarms: 	a Heap()
		lastAlarmTime: 	28909629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SlotNotFound: Slot 'value' not found
1 May 2019 9:26:48.633677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
		aBlock: 	[ SlotNotFound signalForName: aName ]
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		host: 	UndefinedObject
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope()


UndefinedObject class(ClassDescription)>>slotNamed:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


MetalinkTargetResolver class>>lookupSlotNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>slotNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onSlotNamed:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aSlotName: 	#value
		slot: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		option: 	#read
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :value | 
self highlightModel: value.
delay wait ]
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


UndefinedObject(Object)>>link:toSlotNamed:option:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aSlotName: 	#value
		option: 	#read
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerHighlightLink: 	a MetaLink
		rightMarkerHighlightLink: 	a MetaLink
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		process: 	a Process in IdentitySet(Set)>>do:
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	nil


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in IdentitySet(Set)>>do:
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	nil
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(548952320))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	28934733
		lastStepMessage: 	nil
		lastCycleTime: 	28934768
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28934733
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	28934733
		lastStepMessage: 	nil
		lastCycleTime: 	28934768
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28934733
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	28934733
		lastStepMessage: 	nil
		lastCycleTime: 	28934768
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	28934733
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		enviTHERE_BE_DRAGONS_HERE
Halt
1 May 2019 9:26:52.715677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
resultMatrix := value.
self halt.
semaphore signal.
process suspend ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedLeftMatrixLink: 	nil
		method: 	nil
		value: 	a COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	a COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	a COOSparseMatrixNode
		rightMatrixMarker: 	a COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	a COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	a COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	87
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(Object)>>halt
[ :value | 
resultMatrix := value.
self halt.
semaphore signal.
process suspend ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Break
1 May 2019 9:46:23.713677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer>>setPositionsForMultiplication
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		process: 	a Process in [ :value | 
resultMatrix := value.
semaphore signal.
proc...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	an a subclass of COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		process: 	a Process in [ :value | 
resultMatrix := value.
semaphore signal.
proc...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	an a subclass of COOSparseMatrix
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(901016064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(499@354)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	30105610
		lastStepMessage: 	nil
		lastCycleTime: 	30105636
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	30105610
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	30105610
		lastStepMessage: 	nil
		lastCycleTime: 	30105636
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	30105610
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	30105610
		lastStepMessage: 	nil
		lastCycleTime: 	30105636
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	30105610
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer>>setPositionsForMultiplication
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Break
1 May 2019 11:24:42.672677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	nil
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in [ :value | 
resultMatrix := value.
semaphore signal.
proc...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(241832192))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(499@354)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	36004532
		lastStepMessage: 	nil
		lastCycleTime: 	36004575
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36004532
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	36004532
		lastStepMessage: 	nil
		lastCycleTime: 	36004575
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36004532
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	36004532
		lastStepMessage: 	nil
		lastCycleTime: 	36004575
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36004532
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Break
1 May 2019 11:25:57.319677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		leftMatrix: 	nil
		rightMatrix: 	nil
		resultMatrix: 	nil
		process: 	nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(132168192))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(499@354)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	36083546
		lastStepMessage: 	nil
		lastCycleTime: 	36083599
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36083546
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	36083546
		lastStepMessage: 	nil
		lastCycleTime: 	36083599
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36083546
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	36083546
		lastStepMessage: 	nil
		lastCycleTime: 	36083599
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36083546
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SlotNotFound: Slot 'last' not found
1 May 2019 11:35:41.061677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#last
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#last
		aBlock: 	[ SlotNotFound signalForName: aName ]
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#last
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aName: 	#last
	Receiver's instance variables: 
		host: 	UndefinedObject
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope()


UndefinedObject class(ClassDescription)>>slotNamed:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		aName: 	#last
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


MetalinkTargetResolver class>>lookupSlotNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#last
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>slotNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#last
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onSlotNamed:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aSlotName: 	#last
		slot: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aSlotName: 	#last
		aClassOrObject: 	nil
		option: 	#write
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :value | 
self updateResultWith: value.
Transcript
	show: 'update...etc...
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


UndefinedObject(Object)>>link:toSlotNamed:option:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aSlotName: 	#last
		option: 	#write
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	a MetaLink
		transposedLeftMatrixLink: 	nil
		resultMatrixUpdateLinkLast: 	a MetaLink
		method: 	#byMatrix:
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in [ self value.
Processor terminateActive ] in BlockClosure...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in [ self value.
Processor terminateActive ] in BlockClosure...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(910998016))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	36667274
		lastStepMessage: 	nil
		lastCycleTime: 	36667299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36667274
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	36667274
		lastStepMessage: 	nil
		lastCycleTime: 	36667299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36667274
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	36667274
		lastStepMessage: 	nil
		lastCycleTime: 	36667299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	36667274
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
LayoutClassScope(LayoutAbstractScope)>>atName:
FixedLayout(PointerLayout)>>resolveSlot:
UndefinedObject class(ClassDescription)>>slotNamed:
MetalinkTargetResolver class>>lookupSlotNamed:in:
MetalinkTargetResolver class>>slotNamed:for:
MetaLinkInstaller>>installPermaLink:onSlotNamed:
MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
UndefinedObject(Object)>>link:toSlotNamed:option:
COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #result not found in Dictionary
1 May 2019 11:43:59.195677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aKey: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


RTComposer>>getGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>removeGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
		elements: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>replaceElementsInGroup:with:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupName: 	#result
		matrix: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated last in result';
	cr.
resultMatrixUpdateLinkLast uninstall.
semaphore signal.
process suspend ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn2:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
		resultMatrixUpdateLinkLast: 	a MetaLink
		value: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>last:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#last: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#last:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	last: aCOOMatrixNode
	last := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#last:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	a COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	a COOSparseMatrixNode
		rightMatrixMarker: 	a COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	113
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>getGroup:
RTComposer>>removeGroup:
RTComposer>>replaceElementsInGroup:with:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated last in result';
	cr.
resultMatrixUpdateLinkLast uninstall.
semaphore signal.
process suspend ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn2:
a subclass of COOSparseMatrix>>last:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 May 2019 11:44:46.378677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1023099136))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	37161119
		lastStepMessage: 	nil
		lastCycleTime: 	37161179
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	37161119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	37161119
		lastStepMessage: 	nil
		lastCycleTime: 	37161179
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	37161119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	37161119
		lastStepMessage: 	nil
		lastCycleTime: 	37161179
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	37161119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: No group with labels was found
1 May 2019 11:50:08.902677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ KeyNotFound signal: 'No group with ' , aName , ' was found' ] in RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


BlockClosure>>cull:
	Receiver: [ KeyNotFound signal: 'No group with ' , aName , ' was found' ]
	Arguments and temporary variables: 
		anArg: 	KeyNotFound: key #labels not found in Dictionary
	Receiver's instance variables: 
		outerContext: 	RTComposer>>groupToExisting:
		startpc: 	115
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #labels not found in Dictionary
		value: 	nil
	Receiver's instance variables: 
		sender: 	RTComposer>>groupToExisting:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ mapping at: aName ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #labels not found in Dictionary
	Receiver's instance variables: 
		sender: 	RTComposer>>groupToExisting:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ mapping at: aName ]


KeyNotFound(Exception)>>signal
	Receiver: KeyNotFound: key #labels not found in Dictionary
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'key #labels not found in Dictionary'
		tag: 	nil
		signaler: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a R...etc...
		signalContext: 	KeyNotFound(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	#labels


KeyNotFound class(NotFound class)>>signalFor:
	Receiver: KeyNotFound
	Arguments and temporary variables: 
		anObject: 	#labels
	Receiver's instance variables: 
		superclass: 	NotFound
		methodDict: 	a MethodDictionary(#key->KeyNotFound>>#key #key:->KeyNotFound>>#key...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#KeyNotFound
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered-Exceptions'


Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		aKey: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


Dictionary>>at:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


[ mapping at: aName ] in RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


BlockClosure>>on:do:
	Receiver: [ mapping at: aName ]
	Arguments and temporary variables: 
		exception: 	KeyNotFound
		handlerAction: 	[ KeyNotFound signal: 'No group with ' , aName , ' was found' ]
	Receiver's instance variables: 
		outerContext: 	RTComposer>>groupToExisting:
		startpc: 	105
		numArgs: 	0


RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


RTComposer>>redrawNamesFor:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupNames: 	#(#left #result #right #leftMarker #rightMarker)
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated first in result';
	cr ] in COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
		leftMarkerHighlightLink: 	nil
		rightMarkerHighlightLink: 	nil
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
		value: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>first:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	nil
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#first: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#first:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	first: aCOOMatrixNode
	first := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#first:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	121
		numArgs: 	0



--- The full stack ---
[ KeyNotFound signal: 'No group with ' , aName , ' was found' ] in RTComposer>>groupToExisting:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
KeyNotFound(Exception)>>signal
KeyNotFound class(NotFound class)>>signalFor:
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
[ mapping at: aName ] in RTComposer>>groupToExisting:
BlockClosure>>on:do:
RTComposer>>groupToExisting:
RTComposer>>redrawNamesFor:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated first in result';
	cr ] in COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
a subclass of COOSparseMatrix>>first:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
1 May 2019 11:50:27.831677 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(2000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (599@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(789797376))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	37522616
		lastStepMessage: 	nil
		lastCycleTime: 	37522671
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	37522616
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	37522616
		lastStepMessage: 	nil
		lastCycleTime: 	37522671
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	37522616
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	37522616
		lastStepMessage: 	nil
		lastCycleTime: 	37522671
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	37522616
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: No group with labels was found
3 May 2019 9:31:31.240683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ KeyNotFound signal: 'No group with ' , aName , ' was found' ] in RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


BlockClosure>>cull:
	Receiver: [ KeyNotFound signal: 'No group with ' , aName , ' was found' ]
	Arguments and temporary variables: 
		anArg: 	KeyNotFound: key #labels not found in Dictionary
	Receiver's instance variables: 
		outerContext: 	RTComposer>>groupToExisting:
		startpc: 	115
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #labels not found in Dictionary
		value: 	nil
	Receiver's instance variables: 
		sender: 	RTComposer>>groupToExisting:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ mapping at: aName ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #labels not found in Dictionary
	Receiver's instance variables: 
		sender: 	RTComposer>>groupToExisting:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ mapping at: aName ]


KeyNotFound(Exception)>>signal
	Receiver: KeyNotFound: key #labels not found in Dictionary
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'key #labels not found in Dictionary'
		tag: 	nil
		signaler: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a R...etc...
		signalContext: 	KeyNotFound(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	#labels


KeyNotFound class(NotFound class)>>signalFor:
	Receiver: KeyNotFound
	Arguments and temporary variables: 
		anObject: 	#labels
	Receiver's instance variables: 
		superclass: 	NotFound
		methodDict: 	a MethodDictionary(#key->KeyNotFound>>#key #key:->KeyNotFound>>#key...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#KeyNotFound
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered-Exceptions'


Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		aKey: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


Dictionary>>at:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


[ mapping at: aName ] in RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


BlockClosure>>on:do:
	Receiver: [ mapping at: aName ]
	Arguments and temporary variables: 
		exception: 	KeyNotFound
		handlerAction: 	[ KeyNotFound signal: 'No group with ' , aName , ' was found' ]
	Receiver's instance variables: 
		outerContext: 	RTComposer>>groupToExisting:
		startpc: 	105
		numArgs: 	0


RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


RTComposer>>redrawNamesFor:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupNames: 	#(#left #result #right #leftMarker #rightMarker)
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated first in result';
	cr ] in COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
		leftMarkerHighlightLink: 	nil
		rightMarkerHighlightLink: 	nil
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
		value: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>first:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	nil
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#first: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#first:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	first: aCOOMatrixNode
	first := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#first:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	121
		numArgs: 	0



--- The full stack ---
[ KeyNotFound signal: 'No group with ' , aName , ' was found' ] in RTComposer>>groupToExisting:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
KeyNotFound(Exception)>>signal
KeyNotFound class(NotFound class)>>signalFor:
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
[ mapping at: aName ] in RTComposer>>groupToExisting:
BlockClosure>>on:do:
RTComposer>>groupToExisting:
RTComposer>>redrawNamesFor:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated first in result';
	cr ] in COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
a subclass of COOSparseMatrix>>first:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------THERE_BE_DRAGONS_HERE
User Interrupt
3 May 2019 9:34:40.888683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(292190720))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	218408
		lastStepMessage: 	nil
		lastCycleTime: 	218428
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	218408
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	218408
		lastStepMessage: 	nil
		lastCycleTime: 	218428
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	218408
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	218408
		lastStepMessage: 	nil
		lastCycleTime: 	218428
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	218408
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyNotFound did not understand #addAll:
3 May 2019 9:59:20.131683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

KeyNotFound(Object)>>doesNotUnderstand: #addAll:
	Receiver: KeyNotFound: No group with labels was found
	Arguments and temporary variables: 
		aMessage: 	addAll: a RTGroup(a RTElement a RTElement a RTElement a RTElement a R...etc...
		exception: 	MessageNotUnderstood: KeyNotFound>>addAll:
		resumeValue: 	nil
	Receiver's instance variables: 
		messageText: 	'No group with labels was found'
		tag: 	nil
		signaler: 	a RTComposer
		signalContext: 	KeyNotFound(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		object: 	nil


RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	KeyNotFound: No group with labels was found
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


RTComposer>>redrawNamesFor:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupNames: 	#(#left #result #right #leftMarker #rightMarker)
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated first in result';
	cr ] in COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
		leftMarkerHighlightLink: 	nil
		rightMarkerHighlightLink: 	nil
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
		value: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>first:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	nil
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#first: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#first:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	first: aCOOMatrixNode
	first := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#first:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	121
		numArgs: 	0



--- The full stack ---
KeyNotFound(Object)>>doesNotUnderstand: #addAll:
RTComposer>>groupToExisting:
RTComposer>>redrawNamesFor:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated first in result';
	cr ] in COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
a subclass of COOSparseMatrix>>first:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: No group with labels was found
3 May 2019 9:59:45.357683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ KeyNotFound signal: 'No group with ' , aName , ' was found' ] in RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


BlockClosure>>cull:
	Receiver: [ KeyNotFound signal: 'No group with ' , aName , ' was found' ]
	Arguments and temporary variables: 
		anArg: 	KeyNotFound: key #labels not found in Dictionary
	Receiver's instance variables: 
		outerContext: 	RTComposer>>groupToExisting:
		startpc: 	115
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #labels not found in Dictionary
		value: 	nil
	Receiver's instance variables: 
		sender: 	RTComposer>>groupToExisting:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ mapping at: aName ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	KeyNotFound: key #labels not found in Dictionary
	Receiver's instance variables: 
		sender: 	RTComposer>>groupToExisting:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ mapping at: aName ]


KeyNotFound(Exception)>>signal
	Receiver: KeyNotFound: key #labels not found in Dictionary
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'key #labels not found in Dictionary'
		tag: 	nil
		signaler: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a R...etc...
		signalContext: 	KeyNotFound(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	#labels


KeyNotFound class(NotFound class)>>signalFor:
	Receiver: KeyNotFound
	Arguments and temporary variables: 
		anObject: 	#labels
	Receiver's instance variables: 
		superclass: 	NotFound
		methodDict: 	a MethodDictionary(#key->KeyNotFound>>#key #key:->KeyNotFound>>#key...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#KeyNotFound
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Unordered-Exceptions'


Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		aKey: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


Dictionary>>at:
	Receiver: a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement ...etc...
	Arguments and temporary variables: 
		key: 	#labels
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(nil #leftMarker->a RTGroup(a RTElement) #nowProcessing->a RTGro...etc...


[ mapping at: aName ] in RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


BlockClosure>>on:do:
	Receiver: [ mapping at: aName ]
	Arguments and temporary variables: 
		exception: 	KeyNotFound
		handlerAction: 	[ KeyNotFound signal: 'No group with ' , aName , ' was found' ]
	Receiver's instance variables: 
		outerContext: 	RTComposer>>groupToExisting:
		startpc: 	105
		numArgs: 	0


RTComposer>>groupToExisting:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		aName: 	#labels
		newGroup: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		existingGroup: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


RTComposer>>redrawNamesFor:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupNames: 	#(#left #result #right #leftMarker #rightMarker)
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#left->a RTGroup(a RTElement a RTElement a RTElement a RT...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated first in result';
	cr ] in COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	a COOSparseMatrix
		leftMarkerHighlightLink: 	nil
		rightMarkerHighlightLink: 	nil
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
		value: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>first:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	nil
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#first: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#first:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	first: aCOOMatrixNode
	first := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#first:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	121
		numArgs: 	0



--- The full stack ---
[ KeyNotFound signal: 'No group with ' , aName , ' was found' ] in RTComposer>>groupToExisting:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
KeyNotFound(Exception)>>signal
KeyNotFound class(NotFound class)>>signalFor:
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
[ mapping at: aName ] in RTComposer>>groupToExisting:
BlockClosure>>on:do:
RTComposer>>groupToExisting:
RTComposer>>redrawNamesFor:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ :value | 
self updateResultWith: value.
Transcript
	show: 'updated first in result';
	cr ] in COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
a subclass of COOSparseMatrix>>first:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 May 2019 9:59:46.344683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(248699904))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(235@272)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	1912532
		lastStepMessage: 	nil
		lastCycleTime: 	1912603
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	1912532
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	1912532
		lastStepMessage: 	nil
		lastCycleTime: 	1912603
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	1912532
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	1912532
		lastStepMessage: 	nil
		lastCycleTime: 	1912603
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	1912532
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This Delay has already been scheduled.
3 May 2019 11:29:05.045683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

DelaySemaphoreScheduler(Object)>>error:
	Receiver: a DelaySemaphoreScheduler(982366720) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aString: 	'This Delay has already been scheduled.'
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(1000 msecs; 700 msecs remaining) a Delay(2000 m...etc...
		activeDelay: 	a Delay(100 msecs; 16 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


DelaySemaphoreScheduler>>schedule:
	Receiver: a DelaySemaphoreScheduler(982366720) on DelayMicrosecondTicker
	Arguments and temporary variables: 
		aDelay: 	a Delay(1000 msecs; 695 msecs remaining)
	Receiver's instance variables: 
		ticker: 	a DelayMicrosecondTicker
		runTimerEventLoop: 	true
		timerEventLoop: 	a Process in DelayMicrosecondTicker>>waitForUserSignalled:orExp...etc...
		suspendedDelays: 	a Heap(a Delay(1000 msecs; 694 msecs remaining) a Delay(2000 m...etc...
		activeDelay: 	a Delay(100 msecs; 10 msecs remaining)
		suspendSemaphore: 	nil
		timingSemaphore: 	a Semaphore(a Process in DelayMicrosecondTicker>>waitForUserSi...etc...
		debug: 	false
		delayToStart: 	nil
		delayToStop: 	nil
		readyToSchedule: 	a Semaphore()
		readyToUnschedule: 	a Semaphore()


Delay>>schedule
	Receiver: a Delay(1000 msecs; 692 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore(a Process in nil)
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734368145751683


Delay>>wait
	Receiver: a Delay(1000 msecs; 688 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore(a Process in nil)
		beingWaitedOn: 	true
		millisecondDelayDuration: 	1000
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734368145751683


[ :value | 
self selectModel: value.
leftMarkerElement updateModelAndRedraw: value.
delay wait ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Halt
4 May 2019 12:09:41.572683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :result | 
self halt.
self updateResultWith: result.
Transcript
	show: 'updated last in result -> 2nd rec link';
	cr.
semaphore signal.
process suspend ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ :result | 
		self updateResultWith: result.
		Transcript
			show: 'updated first in result';
			cr ].
resultMatrixUpdateLinkFirst selector: #value:.
resultMatrixUpdateLinkFirst arguments: #(value).
resultMatrixUpdateLinkFirst control: #after.
resultMatrix
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ :result | 
		self halt.
		self updateResultWith: result.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend ].
resultMatrixUpdateLinkLast selector: #value:.
resultMatrixUpdateLinkLast arguments: #(value).
resultMatrixUpdateLinkLast control: #after.
resultMatrix
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write.
semaphore signal.
process suspend ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedLeftMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrix
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
		result: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>last:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#last: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#last:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	last: aCOOMatrixNode
	last := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#last:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(Object)>>halt
[ :result | 
self halt.
self updateResultWith: result.
Transcript
	show: 'updated last in result -> 2nd rec link';
	cr.
semaphore signal.
process suspend ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ :result | 
		self updateResultWith: result.
		Transcript
			show: 'updated first in result';
			cr ].
resultMatrixUpdateLinkFirst selector: #value:.
resultMatrixUpdateLinkFirst arguments: #(value).
resultMatrixUpdateLinkFirst control: #after.
resultMatrix
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ :result | 
		self halt.
		self updateResultWith: result.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend ].
resultMatrixUpdateLinkLast selector: #value:.
resultMatrixUpdateLinkLast arguments: #(value).
resultMatrixUpdateLinkLast control: #after.
resultMatrix
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write.
semaphore signal.
process suspend ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>last:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 12:10:02.592683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(902272512))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(327@172)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	9706735
		lastStepMessage: 	nil
		lastCycleTime: 	9706803
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	9706735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	9706735
		lastStepMessage: 	nil
		lastCycleTime: 	9706803
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	9706735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	9706735
		lastStepMessage: 	nil
		lastCycleTime: 	9706803
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	9706735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #row
4 May 2019 10:43:30.986683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #row
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: SmallInteger>>row
		resumeValue: 	nil
	Receiver's instance variables: 
1

[ :element | 
self highlightModel: element.
Transcript
	show: 'highlight left ' , (element row @ element column);
	cr.
delay wait ] in [ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value.
"bind the actual element to the highlight"
leftMarkerHighlightLink := MetaLink new.
leftMarkerHighlightLink
	metaObject: [ :element | 
		self highlightModel: element.
		Transcript
			show: 'highlight left ' , (element row @ element column);
			cr.
		delay wait ].
leftMarkerHighlightLink selector: #value:.
leftMarkerHighlightLink arguments: #(value).
leftMarkerHighlightLink control: #after.
value link: leftMarkerHighlightLink toSlotNamed: #value option: #read.
"draw the marker element on the view if its the initialization"
leftMarkerElement isNil
	ifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: leftMatrixMarker ]
	ifFalse: [ "select the element and update the view otherwise"
		self selectModel: value.
		leftMarkerElement updateModelAndRedraw: value ] ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrixNode
		leftMarkerHighlightLink: 	a MetaLink
		element: 	1
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrixNode>>value
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	1
		leftNeighbour: 	nil
		rightNeighbour: 	a COOSparseMatrixNode


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrixNode>>#value (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#value
		anArray: 	#()
		aReceiver: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		ast: 	value
	^ value
		class: 	a subclass of COOSparseMatrixNode
		compiledMethod: 	a subclass of COOSparseMatrixNode>>#value
		linkCount: 	1


[ :el | el value ] in COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScaled:
	Receiver: a COOSparseMatrixVisualizer
	Arguments and temporary variables: 
		scale: 	5
		comp: 	nil
		box: 	nil
		valueLabel: 	nil
		indexLabel: 	nil
		el: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | el value ]
	Arguments and temporary variables: 
		valueOrArray: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScale...etc...
		startpc: 	190
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :el | el value ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	55
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


RTLabel>>trachelShapeFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		c: 	Color white
		txt: 	nil
		lines: 	nil
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTLabel (0@0))
		shapeIndex: 	2
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection(an Array(a TRBoxShape (0@0)))
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	an a subclass of COOSparseMatrixNode
		shape: 	a RTCompositeShape
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTCompositeShape(RTShape)>>elementOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aModel: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


[ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value.
"bind the actual element to the highlight"
leftMarkerHighlightLink := MetaLink new.
leftMarkerHighlightLink
	metaObject: [ :element | 
		self highlightModel: element.
		Transcript
			show: 'highlight left ' , (element row @ element column);
			cr.
		delay wait ].
leftMarkerHighlightLink selector: #value:.
leftMarkerHighlightLink arguments: #(value).
leftMarkerHighlightLink control: #after.
value link: leftMarkerHighlightLink toSlotNamed: #value option: #read.
"draw the marker element on the view if its the initialization"
leftMarkerElement isNil
	ifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: leftMatrixMarker ]
	ifFalse: [ "select the element and update the view otherwise"
		self selectModel: value.
		leftMarkerElement updateModelAndRedraw: value ] ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrixNode
		leftMarkerHighlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode:THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 10:43:53.294683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(463815680))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(327@172)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	47744458
		lastStepMessage: 	nil
		lastCycleTime: 	47744500
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	47744458
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	47744458
		lastStepMessage: 	nil
		lastCycleTime: 	47744500
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	47744458
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	47744458
		lastStepMessage: 	nil
		lastCycleTime: 	47744500
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	47744458
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
4 May 2019 10:47:06.459683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

BlockClosure(Object)>>error:
	Receiver: [ self highlightModel: value.
Transcript
	show: 'highlight left ' , (value row @ value col...etc...
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	[ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value...etc...
		startpc: 	744
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ self highlightModel: value.
Transcript
	show: 'highlight left ' , (value row @ value col...etc...
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	[ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value...etc...
		startpc: 	744
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ self highlightModel: value.
Transcript
	show: 'highlight left ' , (value row @ value col...etc...
	Arguments and temporary variables: 
		anArg: 	1
	Receiver's instance variables: 
		outerContext: 	[ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value...etc...
		startpc: 	744
		numArgs: 	0


a subclass of COOSparseMatrixNode>>value
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	1
		leftNeighbour: 	nil
		rightNeighbour: 	a COOSparseMatrixNode


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrixNode>>#value (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#value
		anArray: 	#()
		aReceiver: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		ast: 	value
	^ value
		class: 	a subclass of COOSparseMatrixNode
		compiledMethod: 	a subclass of COOSparseMatrixNode>>#value
		linkCount: 	1


[ :el | el value ] in COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScaled:
	Receiver: a COOSparseMatrixVisualizer
	Arguments and temporary variables: 
		scale: 	5
		comp: 	nil
		box: 	nil
		valueLabel: 	nil
		indexLabel: 	nil
		el: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | el value ]
	Arguments and temporary variables: 
		valueOrArray: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScale...etc...
		startpc: 	190
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :el | el value ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	55
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


RTLabel>>trachelShapeFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		c: 	Color white
		txt: 	nil
		lines: 	nil
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTLabel (0@0))
		shapeIndex: 	2
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection(an Array(a TRBoxShape (0@0)))
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	an a subclass of COOSparseMatrixNode
		shape: 	a RTCompositeShape
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTCompositeShape(RTShape)>>elementOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aModel: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


[ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value.
"bind the actual element to the highlight"
leftMarkerHighlightLink := MetaLink new.
leftMarkerHighlightLink
	metaObject: [ self highlightModel: value.
		Transcript
			show: 'highlight left ' , (value row @ value column);
			cr.
		delay wait ].
leftMarkerHighlightLink selector: #value:.
leftMarkerHighlightLink arguments: #(value).
leftMarkerHighlightLink control: #after.
value link: leftMarkerHighlightLink toSlotNamed: #value option: #read.
"draw the marker element on the view if its the initialization"
leftMarkerElement isNil
	ifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: leftMatrixMarker ]
	ifFalse: [ "select the element and update the view otherwise"
		self selectModel: value.
		leftMarkerElement updateModelAndRedraw: value ] ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrixNode
		leftMarkerHighlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
a subclass of COOSparseMatrixNode>>value
ReflectiveMethod>>run:with:in:
[ :el | el value ] in COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScaled:
BlockClosure>>rtValue:
[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
BlockClosure>>rtValue:
RTLabel>>textFor:
RTLabel>>trachelShapeFor:
[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
OrderedCollection>>withIndexCollect:
OrderedCollection(SequenceableCollection)>>collectWithIndex:
RTCompositeShape>>trachelShapeFor:
RTElement(RTShapedObject)>>addShape:
RTCompositeShape(RTShape)>>elementOn:
[ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value.
"bind the actual element to the highlight"
leftMarkerHighlightLink := MetaLink new.
leftMarkerHighlightLink
	metaObject: [ self highlightModel: value.
		Transcript
			show: 'highlight left ' , (value row @ value column);
			cr.
		delay wait ].
leftMarkerHighlightLink selector: #value:.
leftMarkerHighlightLink arguments: #(value).
leftMarkerHighlightLink control: #after.
value link: leftMarkerHighlightLink toSlotNamed: #value option: #read.
"draw the marker element on the view if its the initialization"
leftMarkerElement isNil
	ifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: leftMatrixMarker ]
	ifFalse: [ "select the element and update the view otherwise"
		self selectModel: value.
		leftMarkerElement updateModelAndRedraw: value ] ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 10:47:24.147683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(963109376))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(327@172)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	47959951
		lastStepMessage: 	nil
		lastCycleTime: 	47959988
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	47959951
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	47959951
		lastStepMessage: 	nil
		lastCycleTime: 	47959988
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	47959951
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	47959951
		lastStepMessage: 	nil
		lastCycleTime: 	47959988
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	47959951
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of Point are not indexable
4 May 2019 10:48:22.936683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Point(Object)>>error:
	Receiver: (1@1)
	Arguments and temporary variables: 
		aString: 	'Instances of Point are not indexable'
	Receiver's instance variables: 
		x: 	1
		y: 	1


Point(Object)>>errorNotIndexable
	Receiver: (1@1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		x: 	1
		y: 	1


Point(Object)>>size
	Receiver: (1@1)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		x: 	1
		y: 	1


ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: 'highlight left '
	Arguments and temporary variables: 
		start: 	16
		stop: 	15
		replacementCollection: 	(1@1)
		newSequenceableCollection: 	nil
		newSize: 	nil
		endReplacement: 	nil
	Receiver's instance variables: 
'highlight left '

ByteString(SequenceableCollection)>>,
	Receiver: 'highlight left '
	Arguments and temporary variables: 
		otherCollection: 	(1@1)
	Receiver's instance variables: 
'highlight left '

[ self highlightModel: value.
Transcript
	show: 'highlight left ' , (value row @ value column);
	cr.
delay wait ] in [ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value.
"bind the actual element to the highlight"
leftMarkerHighlightLink := MetaLink new.
leftMarkerHighlightLink
	metaObject: [ self highlightModel: value.
		Transcript
			show: 'highlight left ' , (value row @ value column);
			cr.
		delay wait ].
leftMarkerHighlightLink selector: #value.
"leftMarkerHighlightLink arguments: #(value)."
leftMarkerHighlightLink control: #after.
value link: leftMarkerHighlightLink toSlotNamed: #value option: #read.
"draw the marker element on the view if its the initialization"
leftMarkerElement isNil
	ifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: leftMatrixMarker ]
	ifFalse: [ "select the element and update the view otherwise"
		self selectModel: value.
		leftMarkerElement updateModelAndRedraw: value ] ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrixNode
		leftMarkerHighlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrixNode>>value
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	1
		leftNeighbour: 	nil
		rightNeighbour: 	a COOSparseMatrixNode


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrixNode>>#value (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#value
		anArray: 	#()
		aReceiver: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		ast: 	value
	^ value
		class: 	a subclass of COOSparseMatrixNode
		compiledMethod: 	a subclass of COOSparseMatrixNode>>#value
		linkCount: 	1


[ :el | el value ] in COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScaled:
	Receiver: a COOSparseMatrixVisualizer
	Arguments and temporary variables: 
		scale: 	5
		comp: 	nil
		box: 	nil
		valueLabel: 	nil
		indexLabel: 	nil
		el: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		view: 	a RTView
		source: 	nil
		elementSize: 	30


BlockClosure>>rtValue:
	Receiver: [ :el | el value ]
	Arguments and temporary variables: 
		valueOrArray: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixVisualizer(MatrixVisualizer)>>getElementShapeScale...etc...
		startpc: 	190
		numArgs: 	1


[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ] in RTLabel>>text:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		aValueOrAOneArgBlock: 	[ :el | el value ]
		anElement: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


BlockClosure>>rtValue:
	Receiver: [ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
	Arguments and temporary variables: 
		valueOrArray: 	a RTElement
	Receiver's instance variables: 
		outerContext: 	RTLabel>>text:
		startpc: 	55
		numArgs: 	1


RTLabel>>textFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		element: 	a RTElement
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


RTLabel>>trachelShapeFor:
	Receiver: a RTLabel
	Arguments and temporary variables: 
		anElement: 	a RTElement
		c: 	Color white
		txt: 	nil
		lines: 	nil
	Receiver's instance variables: 
		color: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		scale: 	1
		rotation: 	0
		text: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		height: 	[ :anElement | aValueOrAOneArgBlock rtValue: anElement model ]
		fontName: 	'Source Sans Pro'
		rawFont: 	nil


[ :tupple :shapeIndex | 
| s |
s := tupple first trachelShapeFor: anElement.
Array with: s with: tupple second ] in RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
		tupple: 	an Array(a RTLabel (0@0))
		shapeIndex: 	2
		s: 	nil
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


OrderedCollection>>withIndexCollect:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
		newCollection: 	an OrderedCollection(an Array(a TRBoxShape (0@0)))
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(SequenceableCollection)>>collectWithIndex:
	Receiver: an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RTLabel ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :tupple :shapeIndex | 
| s |
s := tupple first trachelS...etc...
	Receiver's instance variables: 
		array: 	an Array(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) an Array(a RT...etc...
		firstIndex: 	1
		lastIndex: 	3


RTCompositeShape>>trachelShapeFor:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		anElement: 	a RTElement
		ss: 	nil
		trachelShape: 	a TRCompositeShape
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


RTElement(RTShapedObject)>>addShape:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aRTShape: 	a RTCompositeShape
	Receiver's instance variables: 
		announcer: 	nil
		attributes: 	nil
		isFixed: 	false
		model: 	an a subclass of COOSparseMatrixNode
		shape: 	a RTCompositeShape
		trachelShape: 	a TRNoShape
		view: 	nil
		connectedEdges: 	nil
		shouldUpdateEdges: 	true


RTCompositeShape(RTShape)>>elementOn:
	Receiver: a RTCompositeShape
	Arguments and temporary variables: 
		aModel: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		color: 	Color veryVeryLightGray
		scale: 	1
		rotation: 	0
		shapes: 	an OrderedCollection(an Array(a RTBox (0@0)) an Array(a RTLabel (0@0)) ...etc...
		shapeFraming: 	#yourself
		layout: 	#noLayout
		automaticallyUpdateLayout: 	false


[ :value | 
| leftMarkerHighlightLink |
leftMatrixMarker := value.
"bind the actual element to the highlight"
leftMarkerHighlightLink := MetaLink new.
leftMarkerHighlightLink
	metaObject: [ self highlightModel: value.
		Transcript
			show: 'highlight left ' , (value row @ value column);
			cr.
		delay wait ].
leftMarkerHighlightLink selector: #value.
"leftMarkerHighlightLink arguments: #(value)."
leftMarkerHighlightLink control: #after.
value link: leftMarkerHighlightLink toSlotNamed: #value option: #read.
"draw the marker element on the view if its the initialization"
leftMarkerElement isNil
	ifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: leftMatrixMarker ]
	ifFalse: [ "select the element and update the view otherwise"
		self selectModel: value.
		leftMarkerElement updateModelAndRedraw: value ] ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrixNode
		leftMarkerHighlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
Point(Object)>>error:
Point(Object)>>errorNotIndexable
Point(Object)>>size
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
ByteString(SequenceableCollection)>>,
[ self highlightModel: value.
Transcript
	show: 'highTHERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 10:48:38.208683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(222774272))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(327@172)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48036439
		lastStepMessage: 	nil
		lastCycleTime: 	48036490
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48036439
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48036439
		lastStepMessage: 	nil
		lastCycleTime: 	48036490
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48036439
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48036439
		lastStepMessage: 	nil
		lastCycleTime: 	48036490
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48036439
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#row was sent to nil
4 May 2019 10:54:04.798683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #row
[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 10:54:18.763683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(638666752))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@379.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48378306
		lastStepMessage: 	nil
		lastCycleTime: 	48378355
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48378306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48378306
		lastStepMessage: 	nil
		lastCycleTime: 	48378355
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48378306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48378306
		lastStepMessage: 	nil
		lastCycleTime: 	48378355
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48378306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #self
4 May 2019 10:56:01.975683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

BlockClosure(Object)>>doesNotUnderstand: #self
	Receiver: [ "set the rest of links" "self setLinksForMultiplicationOn: leftMatrix." "initialize the ...etc...
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: BlockClosure>>self
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	162
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	a COOSparseMatrix
		right: 	a COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	a COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in [ self value.
Processor terminateActive ] in BlockClosure...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection()
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(254646784))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@379.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48495595
		lastStepMessage: 	nil
		lastCycleTime: 	48495654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48495595
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48495595
		lastStepMessage: 	nil
		lastCycleTime: 	48495654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48495595
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48495595
		lastStepMessage: 	nil
		lastCycleTime: 	48495654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48495595
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #self
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #self
4 May 2019 10:56:34.788683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

BlockClosure(Object)>>doesNotUnderstand: #self
	Receiver: [ "set the rest of links" "self setLinksForMultiplicationOn: leftMatrix." "initialize the ...etc...
	Arguments and temporary variables: 
		aMessage: 	self
		exception: 	MessageNotUnderstood: BlockClosure>>self
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	162
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in [ self value.
Processor terminateActive ] in BlockClosure...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(862636032))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@379.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48528297
		lastStepMessage: 	nil
		lastCycleTime: 	48528358
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48528297
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48528297
		lastStepMessage: 	nil
		lastCycleTime: 	48528358
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48528297
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48528297
		lastStepMessage: 	nil
		lastCycleTime: 	48528358
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48528297
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #self
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#row was sent to nil
4 May 2019 10:57:15.354683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	129
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #row
[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 10:57:25.317683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


BlockClosure>>on:do:
	Receiver: [ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ "set the rest of links" "self setLinksForMultiplicationOn: lef...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	139
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(965697536))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@379.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48568890
		lastStepMessage: 	nil
		lastCycleTime: 	48568920
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48568890
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48568890
		lastStepMessage: 	nil
		lastCycleTime: 	48568920
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48568890
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48568890
		lastStepMessage: 	nil
		lastCycleTime: 	48568920
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48568890
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
BlockClosure>>on:do:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#row was sent to nil
4 May 2019 10:59:28.279683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	137
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #row
[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 10:59:40.052683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(423139840))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@379.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48701796
		lastStepMessage: 	nil
		lastCycleTime: 	48701850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48701796
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48701796
		lastStepMessage: 	nil
		lastCycleTime: 	48701850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48701796
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	48701796
		lastStepMessage: 	nil
		lastCycleTime: 	48701850
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48701796
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#row was sent to nil
4 May 2019 11:01:44.344683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	nil
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	145
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #row
[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 11:01:57.529683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(502759936))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@379.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	48837876
		lastStepMessage: 	nil
		lastCycleTime: 	48837923
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48837876
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	48837876
		lastStepMessage: 	nil
		lastCycleTime: 	48837923
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48837876
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	48837876
		lastStepMessage: 	nil
		lastCycleTime: 	48837923
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	48837876
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#row was sent to nil
4 May 2019 11:07:24.808683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :value | 
self deselectModel: value.
Transcript
	show: 'deselect left ' , (value row @ value column) asString;
	cr ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments anTHERE_BE_DRAGONS_HERE
SlotNotFound: Slot 'value' not found
4 May 2019 11:08:37.769683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ SlotNotFound signalForName: aName ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
		aBlock: 	[ SlotNotFound signalForName: aName ]
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope()
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope()


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		host: 	UndefinedObject
		compactClassIndex: 	0
		slotScope: 	a LayoutClassScope()


UndefinedObject class(ClassDescription)>>slotNamed:
	Receiver: UndefinedObject
	Arguments and temporary variables: 
		aName: 	#value
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependent:->UndefinedObject>>#addDependent: ...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#UndefinedObject
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'


MetalinkTargetResolver class>>lookupSlotNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>slotNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onSlotNamed:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aSlotName: 	#value
		slot: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnSlotNamed:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aSlotName: 	#value
		aClassOrObject: 	nil
		option: 	#read
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :value | 
self highlightModel: value.
delay wait ]
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


UndefinedObject(Object)>>link:toSlotNamed:option:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aSlotName: 	#value
		option: 	#read
	Receiver's instance variables: 
nil

COOSparseMatrixOperationVisualizer>>setLinksForMultiplicationOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerHighlightLink: 	a MetaLink
		rightMarkerHighlightLink: 	a MetaLink
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs; 959 msecs remaining)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs; 955 msecs remaining)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(271989248))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(175.0@379.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	49251268
		lastStepMessage: 	nil
		lastCycleTime: 	49251318
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	49251268
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorpTHERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 11:11:50.556683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(19 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	19
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734410310549683


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	64
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(19 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false
		millisecondDelayDuration: 	19
		scheduler: 	nil
		schedulerResumptionTime: 	nil
		ticker: 	a DelayMicrosecondTicker
		resumptionTick: 	3734410310549683


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		milliSecs: 	20
		wait: 	19
		wait2: 	19
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	49444233
		lastStepMessage: 	nil
		lastCycleTime: 	49444232
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	49444233
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	49444233
		lastStepMessage: 	nil
		lastCycleTime: 	49444232
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	49444233
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #result not found in Dictionary
4 May 2019 11:57:03.797683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aKey: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


RTComposer>>getGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>removeGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
		elements: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>replaceElementsInGroup:with:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupName: 	#result
		matrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self updateResultWith: value.
Transcript
	show: 'updated first in result -> 2nd rec link';
	cr ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value.
		Transcript
			show: 'updated first in result -> 2nd rec link';
			cr ].
resultMatrixUpdateLinkFirst selector: #value.
"resultMatrixUpdateLinkFirst arguments: #(value)."
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend.
		resultMatrixUpdateLinkLast uninstall.
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink
			metaObject: [ self updateResultWith: value.
				Transcript
					show: 'updated last in result -> 2nd rec link';
					cr ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write ].
resultMatrixUpdateLinkLast selector: #value.
"resultMatrixUpdateLinkLast arguments: #(value)."
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrix
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>first:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	nil
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#first: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#first:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	first: aCOOMatrixNode
	first := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#first:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	129
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>getGroup:
RTComposer>>removeGroup:
RTComposer>>replaceElementsInGroup:with:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ self updateResultWith: value.
Transcript
	show: 'updated first in result -> 2nd rec link';
	cr ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value.
		Transcript
			show: 'updated first in result -> 2nd rec link';
			cr ].
resultMatrixUpdateLinkFirst selector: #value.
"resultMatrixUpdateLinkFirst arguments: #(value)."
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend.
		resultMatrixUpdateLinkLast uninstall.
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink
			metaObject: [ self updateResultWith: value.
				Transcript
					show: 'updated last in result -> 2nd rec link';
					cr ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write ].
resultMatrixUpdateLinkLast selector: #value.
"resultMatrixUpdateLinkLast arguments: #(value)."
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>first:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 11:57:23.964683 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(627986432))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	52153117
		lastStepMessage: 	nil
		lastCycleTime: 	52153157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	52153117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	52153117
		lastStepMessage: 	nil
		lastCycleTime: 	52153157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	52153117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	52153117
		lastStepMessage: 	nil
		lastCycleTime: 	52153157
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	52153117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #result not found in Dictionary
4 May 2019 12:22:07.215683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aKey: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


RTComposer>>getGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>removeGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
		elements: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>replaceElementsInGroup:with:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupName: 	#result
		matrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self updateResultWith: value.
Transcript
	show: 'updated first in result -> 2nd rec link';
	cr ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value.
		Transcript
			show: 'updated first in result -> 2nd rec link';
			cr ].
resultMatrixUpdateLinkFirst selector: #value.
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend.
		resultMatrixUpdateLinkLast uninstall.
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink
			metaObject: [ self updateResultWith: value.
				Transcript
					show: 'updated last in result -> 2nd rec link';
					cr ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write ].
resultMatrixUpdateLinkLast selector: #value.
"resultMatrixUpdateLinkLast arguments: #(value)."
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrix
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>first:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	nil
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#first: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#first:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	first: aCOOMatrixNode
	first := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#first:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	129
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>getGroup:
RTComposer>>removeGroup:
RTComposer>>replaceElementsInGroup:with:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ self updateResultWith: value.
Transcript
	show: 'updated first in result -> 2nd rec link';
	cr ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value.
		Transcript
			show: 'updated first in result -> 2nd rec link';
			cr ].
resultMatrixUpdateLinkFirst selector: #value.
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend.
		resultMatrixUpdateLinkLast uninstall.
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink
			metaObject: [ self updateResultWith: value.
				Transcript
					show: 'updated last in result -> 2nd rec link';
					cr ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write ].
resultMatrixUpdateLinkLast selector: #value.
"resultMatrixUpdateLinkLast arguments: #(value)."
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>first:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 12:22:11.722683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1041922560))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	53656530
		lastStepMessage: 	nil
		lastCycleTime: 	53656557
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53656530
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	53656530
		lastStepMessage: 	nil
		lastCycleTime: 	53656557
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53656530
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	53656530
		lastStepMessage: 	nil
		lastCycleTime: 	53656557
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53656530
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #result not found in Dictionary
4 May 2019 12:23:42.487683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aKey: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


RTComposer>>getGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>removeGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
		elements: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>replaceElementsInGroup:with:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupName: 	#result
		matrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self updateResultWith: value.
Transcript
	show: 'updated first in result -> 2nd rec link';
	cr ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value.
		Transcript
			show: 'updated first in result -> 2nd rec link';
			cr ].
resultMatrixUpdateLinkFirst selector: #value.
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend.
		resultMatrixUpdateLinkLast uninstall.
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink
			metaObject: [ self updateResultWith: value.
				Transcript
					show: 'updated last in result -> 2nd rec link';
					cr ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write ].
resultMatrixUpdateLinkLast selector: #value.
"resultMatrixUpdateLinkLast arguments: #(value)."
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>first:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	nil
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#first: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#first:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	first: aCOOMatrixNode
	first := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#first:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	129
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>getGroup:
RTComposer>>removeGroup:
RTComposer>>replaceElementsInGroup:with:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ self updateResultWith: value.
Transcript
	show: 'updated first in result -> 2nd rec link';
	cr ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value.
		Transcript
			show: 'updated first in result -> 2nd rec link';
			cr ].
resultMatrixUpdateLinkFirst selector: #value.
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend.
		resultMatrixUpdateLinkLast uninstall.
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink
			metaObject: [ self updateResultWith: value.
				Transcript
					show: 'updated last in result -> 2nd rec link';
					cr ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write ].
resultMatrixUpdateLinkLast selector: #value.
"resultMatrixUpdateLinkLast arguments: #(value)."
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>first:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 12:23:52.316683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in COOSparseMatrixOperationVisualizer(MatrixOp...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1061671936))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	53751803
		lastStepMessage: 	nil
		lastCycleTime: 	53751842
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53751803
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	53751803
		lastStepMessage: 	nil
		lastCycleTime: 	53751842
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53751803
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	53751803
		lastStepMessage: 	nil
		lastCycleTime: 	53751842
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53751803
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #result not found in Dictionary
4 May 2019 12:24:07.872683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		aKey: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
		aBlock: 	[ self errorKeyNotFound: key ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


Dictionary>>at:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	#result
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


RTComposer>>getGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>removeGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
		elements: 	nil
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


RTComposer>>replaceElementsInGroup:with:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupName: 	#result
		matrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary()
		groups: 	an OrderedCollection()
		backgrounds: 	an OrderedCollection()
		names: 	an OrderedCollection()


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self updateResultWith: value.
Transcript
	show: 'updated first in result -> 2nd rec link';
	cr ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value.
		Transcript
			show: 'updated first in result -> 2nd rec link';
			cr ].
resultMatrixUpdateLinkFirst selector: #value.
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend.
		resultMatrixUpdateLinkLast uninstall.
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink
			metaObject: [ self updateResultWith: value.
				Transcript
					show: 'updated last in result -> 2nd rec link';
					cr ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write ].
resultMatrixUpdateLinkLast selector: #value.
"resultMatrixUpdateLinkLast arguments: #(value)."
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkInit: 	nil
		rightMarkerLinkInit: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	an a subclass of COOSparseMatrix
		resultMatrixUpdateLinkFirst: 	nil
		resultMatrixUpdateLinkLast: 	nil
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>first:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrixNode: 	a COOSparseMatrixNode
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	nil
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#first: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#first:
		anArray: 	an Array(a COOSparseMatrixNode)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	first: aCOOMatrixNode
	first := aCOOMatrixNode
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#first:
		linkCount: 	1


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	an a subclass of COOSparseMatrixNode
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	1
		currentRightColumn: 	1
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	an a subclass of COOSparseMatrix
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	an a subclass of COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	28


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	129
		numArgs: 	0



--- The full stack ---
Dictionary>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in Dictionary>>at:
Dictionary>>at:ifAbsent:
Dictionary>>at:
RTComposer>>getGroup:
RTComposer>>removeGroup:
RTComposer>>replaceElementsInGroup:with:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
[ self updateResultWith: value.
Transcript
	show: 'updated first in result -> 2nd rec link';
	cr ] in [ :value | 
| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |
resultMatrix := value.
resultMatrixUpdateLinkFirst := MetaLink new.
resultMatrixUpdateLinkFirst
	metaObject: [ self updateResultWith: value.
		Transcript
			show: 'updated first in result -> 2nd rec link';
			cr ].
resultMatrixUpdateLinkFirst selector: #value.
resultMatrixUpdateLinkFirst control: #after.
value
	link: resultMatrixUpdateLinkFirst
	toSlotNamed: #first
	option: #write.
resultMatrixUpdateLinkLast := MetaLink new.
resultMatrixUpdateLinkLast
	metaObject: [ | newResultUpdateLastLink |
		self updateResultWith: value.
		Transcript
			show: 'updated last in result -> 2nd rec link';
			cr.
		semaphore signal.
		process suspend.
		resultMatrixUpdateLinkLast uninstall.
		newResultUpdateLastLink := MetaLink new.
		newResultUpdateLastLink
			metaObject: [ self updateResultWith: value.
				Transcript
					show: 'updated last in result -> 2nd rec link';
					cr ].
		newResultUpdateLastLink selector: #value.
		newResultUpdateLastLink control: #after.
		value
			link: newResultUpdateLastLink
			toSlotNamed: #last
			option: #write ].
resultMatrixUpdateLinkLast selector: #value.
"resultMatrixUpdateLinkLast arguments: #(value)."
resultMatrixUpdateLinkLast control: #after.
value
	link: resultMatrixUpdateLinkLast
	toSlotNamed: #last
	option: #write ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>first:
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 12:24:13.469683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>on:do:
	Receiver: [ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	139
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	139
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	an a subclass of COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	an a subclass of COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(887700992))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	53777203
		lastStepMessage: 	nil
		lastCycleTime: 	53777241
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53777203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	53777203
		lastStepMessage: 	nil
		lastCycleTime: 	53777241
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53777203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	53777203
		lastStepMessage: 	nil
		lastCycleTime: 	53777241
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	53777203
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 1:14:20.889683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs; 692 msecs remaining)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>on:do:
	Receiver: [ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	123
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	123
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	a COOSparseMatrix
		process: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs; 680 msecs remaining)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(628155904))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(122.0@290.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	56773522
		lastStepMessage: 	nil
		lastCycleTime: 	56773559
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	56773522
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	56773522
		lastStepMessage: 	nil
		lastCycleTime: 	56773559
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	56773522
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	56773522
		lastStepMessage: 	nil
		lastCycleTime: 	56773559
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	56773522
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 May 2019 1:34:50.893683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(729672192)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@4857)
		owner: 	a TransformWithLayoutMorph(398923776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(738685952) a RubCursor(190717440...etc...
		fullBounds: 	(0@0) corner: (1491@4857)
		color: 	Color transparent
		extension: 	a MorphExtension (763956224) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(268491776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(190717440)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(8062976) a RubTextSegmentM...etc...
		getMenuPolicy: 	a RubEditingArea(729672192)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(729672192)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@4857)
		owner: 	a TransformWithLayoutMorph(398923776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(738685952) a RubCursor(190717440...etc...
		fullBounds: 	(0@0) corner: (1491@4857)
		color: 	Color transparent
		extension: 	a MorphExtension (763956224) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(268491776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(190717440)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(8062976) a RubTextSegmentM...etc...
		getMenuPolicy: 	a RubEditingArea(729672192)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(729672192)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@4857)
		owner: 	a TransformWithLayoutMorph(398923776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(738685952) a RubCursor(190717440...etc...
		fullBounds: 	(0@0) corner: (1491@4857)
		color: 	Color transparent
		extension: 	a MorphExtension (763956224) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(268491776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(190717440)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(8062976) a RubTextSegmentM...etc...
		getMenuPolicy: 	a RubEditingArea(729672192)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(729672192)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@4857)
		owner: 	a TransformWithLayoutMorph(398923776)
		submorphs: 	an Array(a RubPrimarySelectionMorph(738685952) a RubCursor(190717440...etc...
		fullBounds: 	(0@0) corner: (1491@4857)
		color: 	Color transparent
		extension: 	a MorphExtension (763956224) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(268491776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(190717440)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(8062976) a RubTextSegmentM...etc...
		getMenuPolicy: 	a RubEditingArea(729672192)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(729672192)
	Receiver's instance variables: 
		bounds: 	(586@602.0) corner: (602@618.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(586@602) mouseOver 301571900 nil]
		targetOffset: 	(560@3986)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 301571900 586 602 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(586@602.0) corner: (602@618.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(586@602) mouseOver 301571900 nil]
		targetOffset: 	(560@3986)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 301571900 586 602 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	58023783
		lastStepMessage: 	nil
		lastCycleTime: 	58023840
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(190717440)))
		lastAlarmTime: 	58023783
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#temporaryVariableNamed: was sent to nil
4 May 2019 1:50:26.141683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #temporaryVariableNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	temporaryVariableNamed: #temp
		exception: 	MessageNotUnderstood: receiver of "temporaryVariableNamed:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupTemporaryNamed:inMethod:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aTempVarName: 	#temp
		aMethodName: 	#methodWithTemp
		aClassOrObject: 	a TestReflCl
		class: 	TestReflCl
		method: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onTempVarNamed:inMethod:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aTempName: 	#temp
		aMethodName: 	#methodWithTemp
		temp: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnTempVarNamed:inMethod:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aTempName: 	#temp
		aMethodName: 	#methodWithTemp
		aClassOrObject: 	a TestReflCl
		option: 	#write
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :element | 
Transcript
	show: 'written to ' , (element row @ elem...etc...
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


TestReflCl(Object)>>link:toTemporaryNamed:inMethod:option:
	Receiver: a TestReflCl
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aTempVarName: 	#temp
		aMethodName: 	#methodWithTemp
		option: 	#write
	Receiver's instance variables: 
a TestReflCl

TestReflClLink>>setLinksWith:
	Receiver: a TestReflClLink
	Arguments and temporary variables: 
		readSlotInTempLink: 	nil
		instance: 	a TestReflCl
		writeTempLink: 	a MetaLink
	Receiver's instance variables: 
a TestReflClLink

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	test := TestReflCl new.
	testlink := TestReflClLink new setLinksWith...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(773725184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(773725184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(509591040)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(773725184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (538@69)
		owner: 	a TransformWithLayoutMorph(986216448)
		submorphs: 	an Array(a RubCursor(272316416) a RubPrimarySelectionMorph(534887424...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (490149376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(49861632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(272316416)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(193826304))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(135.0@75.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(509591040)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	58959773
		lastStepMessage: 	nil
		lastCycleTime: 	58959819
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	58959773
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	58959773
		lastStepMessage: 	nil
		lastCycleTime: 	58959819
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	58959773
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	58959773
		lastStepMessage: 	nil
		lastCycleTime: 	58959819
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	58959773
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #temporaryVariableNamed:
MetalinkTargetResolver class>>lookupTemporaryNamed:inMethod:for:
MetaLinkInstaller>>installPermaLink:onTempVarNamed:inMethod:
MetaLink>>installOnTempVarNamed:inMethod:for:option:instanceSpecific:
TestReflCl(Object)>>link:toTemporaryNamed:inMethod:option:
TestReflClLink>>setLinksWith:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyleTHERE_BE_DRAGONS_HERE
#temporaryVariableNamed: was sent to nil
4 May 2019 1:51:53.699683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #temporaryVariableNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	temporaryVariableNamed: #temp
		exception: 	MessageNotUnderstood: receiver of "temporaryVariableNamed:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupTemporaryNamed:inMethod:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aTempVarName: 	#temp
		aMethodName: 	#methodWithTemp
		aClassOrObject: 	a TestReflCl
		class: 	TestReflCl
		method: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetaLinkInstaller>>installPermaLink:onTempVarNamed:inMethod:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aPermaLink: 	a PermaLink
		aTempName: 	#temp
		aMethodName: 	#methodWithTemp
		temp: 	nil
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>installOnTempVarNamed:inMethod:for:option:instanceSpecific:
	Receiver: a MetaLink
	Arguments and temporary variables: 
		aTempName: 	#temp
		aMethodName: 	#methodWithTemp
		aClassOrObject: 	a TestReflCl
		option: 	#write
		instanceSpecific: 	true
		permalink: 	a PermaLink
	Receiver's instance variables: 
		arguments: 	#(#value)
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ :element | 
Transcript
	show: 'written to ' , (element row @ elem...etc...
		nodes: 	an IdentitySet()
		selector: 	#value:
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


TestReflCl(Object)>>link:toTemporaryNamed:inMethod:option:
	Receiver: a TestReflCl
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aTempVarName: 	#temp
		aMethodName: 	#methodWithTemp
		option: 	#write
	Receiver's instance variables: 
a TestReflCl

TestReflClLink>>setLinksWith:
	Receiver: a TestReflClLink
	Arguments and temporary variables: 
		readSlotInTempLink: 	nil
		instance: 	a TestReflCl
		writeTempLink: 	a MetaLink
	Receiver's instance variables: 
a TestReflClLink

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	test := TestReflCl new.
	testlink := TestReflClLink new setLinksWith...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(773725184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(773725184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(509591040)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(773725184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (538@69)
		owner: 	a TransformWithLayoutMorph(986216448)
		submorphs: 	an Array(a RubCursor(272316416) a RubPrimarySelectionMorph(534887424...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (490149376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(49861632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(272316416)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(66458112))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(274.0@145.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(509591040)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	59047319
		lastStepMessage: 	nil
		lastCycleTime: 	59047365
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59047319
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	59047319
		lastStepMessage: 	nil
		lastCycleTime: 	59047365
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59047319
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	59047319
		lastStepMessage: 	nil
		lastCycleTime: 	59047365
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59047319
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #temporaryVariableNamed:
MetalinkTargetResolver class>>lookupTemporaryNamed:inMethod:for:
MetaLinkInstaller>>installPermaLink:onTempVarNamed:inMethod:
MetaLink>>installOnTempVarNamed:inMethod:for:option:instanceSpecific:
TestReflCl(Object)>>link:toTemporaryNamed:inMethod:option:
TestReflClLink>>setLinksWith:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#@ was sent to nil
4 May 2019 1:55:52.317683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #@
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	@ nil
		exception: 	MessageNotUnderstood: receiver of "@" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :element | 
Transcript
	show: 'written to ' , (element row @ element column) asString.
readSlotInTempLink := MetaLink new.
readSlotInTempLink
	metaObject: [ Transcript
			show: 'read from ' , (element row @ element column) asString ].
readSlotInTempLink selector: #value.
readSlotInTempLink control: #after.
element link: readSlotInTempLink toSlotNamed: #value option: #read ] in TestReflClLink>>setLinksWith:
	Receiver: a TestReflClLink
	Arguments and temporary variables: 
		instance: 	an a subclass of TestReflCl
		writeTempLink: 	nil
		readSlotInTempLink: 	nil
		element: 	a COOSparseMatrixNode
	Receiver's instance variables: 
a TestReflClLink

a subclass of TestReflCl>>methodWithTemp:
	Receiver: an a subclass of TestReflCl
	Arguments and temporary variables: 
		arg: 	1
		RFReifyValueVar: 	nil
		temp: 	a COOSparseMatrixNode
	Receiver's instance variables: 
an a subclass of TestReflCl

ReflectiveMethod>>run:with:in:
	Receiver: a subclass of TestReflCl>>#methodWithTemp: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#methodWithTemp:
		anArray: 	#(1)
		aReceiver: 	an a subclass of TestReflCl
	Receiver's instance variables: 
		ast: 	methodWithTemp: arg
	| temp |
	temp := COOSparseMatrixNode new.
	temp valu...etc...
		class: 	a subclass of TestReflCl
		compiledMethod: 	a subclass of TestReflCl>>#methodWithTemp:
		linkCount: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	test := TestReflCl new.
	testlink := TestReflClLink new setLinksWith...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(773725184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(773725184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(509591040)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(773725184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (538@69)
		owner: 	a TransformWithLayoutMorph(986216448)
		submorphs: 	an Array(a RubCursor(272316416) a RubPrimarySelectionMorph(534887424...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (490149376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(49861632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(272316416)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(70571520))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(509591040)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	59285913
		lastStepMessage: 	nil
		lastCycleTime: 	59285965
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59285913
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	59285913
		lastStepMessage: 	nil
		lastCycleTime: 	59285965
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59285913
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(705938944) named: Pl...etc...
		lastStepTime: 	59285913
		lastStepMessage: 	nil
		lastCycleTime: 	59285965
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59285913
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #@
[ :element | 
Transcript
	show: 'written to ' , (element row @ element column) asString.
readSlotInTempLink := MetaLink new.
readSlotInTempLink
	metaObject: [ Transcript
			show: 'read from ' , (element row @ element column) asString ].
readSlotInTempLink selector: #value.
readSlotInTempLink control: #after.
element link: readSlotInTempLink toSlotNamed: #value option: #read ] in TestReflClLink>>setLinksWith:
a subclass of TestReflCl>>methodWithTemp:
ReflectiveMethod>>run:with:in:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#row was sent to nil
4 May 2019 1:58:16.336683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :element | 
Transcript
	show: 'written to ' , (element row @ element column) asString.
readSlotInTempLink := MetaLink new.
readSlotInTempLink
	metaObject: [ Transcript
			show: 'read from ' , (element row @ element column) asString ].
readSlotInTempLink selector: #value.
readSlotInTempLink control: #after.
element link: readSlotInTempLink toSlotNamed: #value option: #read ] in TestReflClLink>>setLinksWith:
	Receiver: a TestReflClLink
	Arguments and temporary variables: 
		instance: 	an a subclass of TestReflCl
		writeTempLink: 	nil
		readSlotInTempLink: 	a MetaLink
		element: 	nil
	Receiver's instance variables: 
a TestReflClLink

a subclass of TestReflCl>>methodWithTemp:
	Receiver: an a subclass of TestReflCl
	Arguments and temporary variables: 
		arg: 	1
		RFReifyValueVar: 	nil
		temp: 	nil
		first: 	an a subclass of COOSparseMatrixNode
		second: 	a COOSparseMatrixNode
	Receiver's instance variables: 
an a subclass of TestReflCl

ReflectiveMethod>>run:with:in:
	Receiver: a subclass of TestReflCl>>#methodWithTemp: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#methodWithTemp:
		anArray: 	#(1)
		aReceiver: 	an a subclass of TestReflCl
	Receiver's instance variables: 
		ast: 	methodWithTemp: arg
	| temp first second |
	first := COOSparseMatrixNode n...etc...
		class: 	a subclass of TestReflCl
		compiledMethod: 	a subclass of TestReflCl>>#methodWithTemp:
		linkCount: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	test := TestReflCl new.
	testlink := TestReflClLink new setLinksWith...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(773725184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(773725184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(509591040)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(773725184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (538@69)
		owner: 	a TransformWithLayoutMorph(986216448)
		submorphs: 	an Array(a RubCursor(272316416) a RubPrimarySelectionMorph(534887424...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (490149376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(49861632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(272316416)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(227678208))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(496.0@108.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(509591040)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	59429933
		lastStepMessage: 	nil
		lastCycleTime: 	59429969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59429933
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	59429933
		lastStepMessage: 	nil
		lastCycleTime: 	59429969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59429933
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	59429933
		lastStepMessage: 	nil
		lastCycleTime: 	59429969
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(272316416)))
		lastAlarmTime: 	59429933
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #row
[ :element | 
Transcript
	show: 'written to ' , (element row @ element column) asString.
readSlotInTempLink := MetaLink new.
readSlotInTempLink
	metaObject: [ Transcript
			show: 'read from ' , (element row @ element column) asString ].
readSlotInTempLink selector: #value.
readSlotInTempLink control: #after.
element link: readSlotInTempLink toSlotNamed: #value option: #read ] in TestReflClLink>>setLinksWith:
a subclass of TestReflCl>>methodWithTemp:
ReflectiveMethod>>run:with:in:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
4 May 2019 3:26:23.350683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
value isNotNil
	ifTrue: [ self deselectModel: value.
		self halt.
		Transcript
			show: 'deselect left ' , (value row @ value column) asString;
			cr ] ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		value: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :outer | 
"Switch to next row in left and reset right marker if right ended"
rightMatrixMarker isNil
	ifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.
		rightMatrixMarker := transposed first ].
"reset left marker to row beginning"
leftMatrixMarker := leftSavedMatrixMarker.
currentLeftRow := leftMatrixMarker row.
currentRightColumn := rightMatrixMarker row.
self
	withEscaper: [ :next | 
		[ leftMatrixMarker isNotNil
			and: [ rightMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
			whileTrue: [ priorityColumn := {leftMatrixMarker column.
				rightMatrixMarker THERE_BE_DRAGONS_HERE
Halt
4 May 2019 3:29:23.626683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
value isNotNil
	ifTrue: [ self deselectModel: value.
		self halt.
		Transcript
			show: 'deselect left ' , (value row @ value column) asString;
			cr ] ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	1
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :outer | 
"Switch to next row in left and reset right marker if right ended"
rightMatrixMarker isNil
	ifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.
		rightMatrixMarker := transposed first ].
"reset left marker to row beginning"
leftMatrixMarker := leftSavedMatrixMarker.
currentLeftRow := leftMatrixMarker row.
currentRightColumn := rightMatrixMarker row.
self
	withEscaper: [ :next | 
		[ leftMatrixMarker isNotNil
			and: [ rightMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
			whileTrue: [ priorityColumn := {leftMatrixMarker column.
				rightMatrixMarker column} max.
				"Find same column as prioritized or higher in left"
				[ leftMatrixMarker isNotNil
					and: [ leftMatrixMarker row = currentLeftRow
							and: [ leftMatrixMarker column < priorityColumn ] ] ]
					whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].
				leftMatrixMarker isNil
					ifTrue: [ [ rightMatrixMarker isNotNil
							and: [ rightMatrixMarker row = currentRightColumn ] ]
							whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].

						"If no intersection - end"
						rightMatrixMarker isNil
							ifTrue: [ end value ].
						"Else - continue loop"
						next value ].
				leftMatrixMarker row ~= currentLeftRow
					ifTrue: [ [ rightMatrixMarker isNotNil
							and: [ rightMatrixMarker row = currentRightColumn ] ]
							whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
						next value ].
				priorityColumn := leftMatrixMarker column.

				"Find same column as prioritized or higher in right"
				[ rightMatrixMarker isNotNil
					and: [ rightMatrixMarker row = currentRightColumn
							and: [ rightMatrixMarker column < priorityColumn ] ] ]
					whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
				rightMatrixMarker isNil
					ifTrue: [ [ leftMatrixMarker isNotNil
							and: [ leftMatrixMarker row = currentLeftRow ] ]
							whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].

						"If no intersections - end"
						leftMatrixMarker isNil
							ifTrue: [ end value ].
						"Else - continue loop"
						next value ].
				rightMatrixMarker row ~= currentRightColumn
					ifTrue: [ next value ].
				leftMatrixMarker column = rightMatrixMarker column
					ifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).
						leftMatrixMarker := leftMatrixMarker rightNeighbour.
						rightMatrixMarker := rightMatrixMarker rightNeighbour ]
					ifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].
sum = 0
	ifFalse: [ newNode := COOSparseMatrixNode
			row: currentLeftRow
			column: currentRightColumn
			value: sum.
		result last rightNeighbour: newNode.
		newNode leftNeighbour: result last.
		result last: newNode.
		sum := 0 ] ] in [ :end | 
[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]
	whileTrue: [ self
			withEscaper: [ :outer | 
				"Switch to next row in left and reset right marker if right ended"
				rightMatrixMarker isNil
					ifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.
						rightMatrixMarker := transposed first ].
				"reset left marker to row beginning"
				leftMatrixMarker := leftSavedMatrixMarker.
				currentLeftRow := leftMatrixMarker row.
				currentRightColumn := rightMatrixMarker row.
				self
					withEscaper: [ :next | 
						[ leftMatrixMarker isNotNil
							and: [ rightMatrixMarker isNotNil
									and: [ leftMatrixMarker row = currentLeftRow
											and: [ rightMatrixMarker row = currentRightColumn ] ] ] ]
							whileTrue: [ priorityColumn := {leftMatrixMarker column.
								rightMatrixMarker column} max.
								"Find same column as prioritized or higher in left"
								[ leftMatrixMarker isNotNil
									and: [ leftMatrixMarker row = currentLeftRow
											and: [ leftMatrixMarker column < priorityColumn ] ] ]
									whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].
								leftMatrixMarker isNil
									ifTrue: [ [ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn ] ]
											whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].

										"If no intersection - end"
										rightMatrixMarker isNil
											ifTrue: [ end value ].
										"Else - continue loop"
										next value ].
								leftMatrixMarker row ~= currentLeftRow
									ifTrue: [ [ rightMatrixMarker isNotNil
											and: [ rightMatrixMarker row = currentRightColumn ] ]
											whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
										next value ].
								priorityColumn := leftMatrixMarker column.

								"Find same column as prioritized or higher in right"
								[ rightMatrixMarker isNotNil
									and: [ rightMatrixMarker row = currentRightColumn
											and: [ rightMatrixMarker column < priorityColumn ] ] ]
									whileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].
								rightMatrixMarker isNil
									ifTrue: [ [ leftMatrixMarker isNotNil
											and: [ leftMatrixMarker row = currentLeftRow ] ]
											whileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].

										"If no intersections - end"
										leftMatrixMarker isNil
											ifTrue: [ end value ].
										"Else - continue loop"
										next value ].
								rightMatrixMarker row ~= currentRightColumn
									ifTrue: [ next value ].
								leftMatrixMarker column = rightMatrixMarker column
									ifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).
										leftMatrixMarker := leftMatrixMarker rightNeighbour.
										rightMatrixMarker := rightMatrixMarker rightNeighbour ]
									ifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].
				sum = 0
					ifFalse: [ newNode := COOSparseMatrixNode
							row: currentLeftRow
							column: currentRightColumn
							value: sum.
						result last rightNeighbour: newNode.
						newNode leftNeighbour: result last.
						result last: newNode.
						sum := 0 ] ].
		sum = 0
			ifFalse: [ newNode := COOSparseMatrixNode
					row: currentLeftRow
					column: currentRightColumn
					value: sum.
				result last rightNeighbour: newNode.
				newNode leftNeighbour: result last.
				result last: newNode.
				sum := 0 ] ] ] in a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: cannot remove an element that is not part of a view
4 May 2019 5:26:28.626683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

RTElement(Object)>>error:
	Receiver: a RTElement
	Arguments and temporary variables: 
		aString: 	'cannot remove an element that is not part of a view'
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTBox
		trachelShape: 	a TRBoxShape
		view: 	nil
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


RTElement>>remove
	Receiver: a RTElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#AlreadyGrouped->true )
		isFixed: 	false
		model: 	nil
		shape: 	a RTBox
		trachelShape: 	a TRBoxShape
		view: 	nil
		connectedEdges: 	a RTGroup()
		shouldUpdateEdges: 	true


ByteSymbol(Symbol)>>value:
	Receiver: #remove
	Arguments and temporary variables: 
		anObject: 	a RTElement
	Receiver's instance variables: 
#remove

RTGroup(OrderedCollection)>>do:
	Receiver: a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Arguments and temporary variables: 
		aBlock: 	#remove
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RTElement a RTElement a RTElement a RTElement nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4
		attributes: 	nil
		elementFromModelCache: 	nil


RTView>>removeElements:
	Receiver: a RTView
	Arguments and temporary variables: 
		someElements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#GlamourContext->a RTInteractiveViewContext )
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edges: 	a RTGroup(a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge...etc...
		trCanvas: 	a TRCanvas


RTComposer>>removeGroup:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupId: 	#result
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement)
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a ...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


RTComposer>>replaceElementsInGroup:with:
	Receiver: a RTComposer
	Arguments and temporary variables: 
		groupName: 	#result
		matrix: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		stack: 	nil
		view: 	a RTView
		gap: 	35
		mapping: 	a Dictionary(#labels->a RTGroup(a RTElement a RTElement a RTElement a ...etc...
		groups: 	an OrderedCollection(a RTGroup(a RTElement) a RTGroup(a RTElement) a RT...etc...
		backgrounds: 	an OrderedCollection(a TRRoundedBoxShape a TRRoundedBoxShape a TRR...etc...
		names: 	an OrderedCollection(a RTElement a RTElement a RTElement a RTElement a R...etc...


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>updateResultWith:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		result: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	1
		currentRightColumn: 	2
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


THERE_BE_DRAGONS_HERE
Halt
4 May 2019 10:05:07.087683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :element | 
rightMatrixMarker := element.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
self halt.
self selectModel: element.
Transcript
	show: 'select right ' , (element row @ element column) asString;
	cr.
rightMarkerElement updateModelAndRedraw: element.
delay wait ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftRowIndexLink: 	nil
		rightColumnIndexLink: 	nil
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		resultMatrixLink: 	nil
		transposedRightMatrixLink: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrix>>byMatrix:
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		leftMatrixMarker: 	a COOSparseMatrixNode
		priorityColumn: 	nil
		leftSavedMatrixMarker: 	a COOSparseMatrixNode
		rightMatrixMarker: 	a COOSparseMatrixNode
		newNode: 	nil
		sum: 	nil
		currentLeftRow: 	nil
		currentRightColumn: 	nil
		aCOOSparseMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		result: 	nil
		transposed: 	a COOSparseMatrix
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#byMatrix: (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#byMatrix:
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	byMatrix: aCOOSparseMatrix
	| result currentLeftRow currentRightColumn pri...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#byMatrix:
		linkCount: 	32


[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix byMatrix: rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	113
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(Object)>>halt
[ :element | 
rightMatrixMarker := element.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
self halt.
self selectModel: element.
Transcript
	show: 'select right ' , (element row @ element column) asString;
	cr.
rightMarkerElement updateModelAndRedraw: element.
delay wait ] in COOSparseMatrixOperationVisualizer>>setMultiInitLinksOn:
a subclass of COOSparseMatrix>>byMatrix:
ReflectiveMethod>>run:with:in:
[ leftMatrix byMatrix: rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
4 May 2019 10:05:28.737683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>on:do:
	Receiver: [ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	123
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>mu...etc...
		startpc: 	123
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	a COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setMultiInitLinksOn: leftMatrix.
pro...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(347399936)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(347399936)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (455@164)
		owner: 	a TransformWithLayoutMorph(819385088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(569633024) a RubCursor(702102272...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (212344320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(669776896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(702102272)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(203453952))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(297@231)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(907707904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	88639559
		lastStepMessage: 	nil
		lastCycleTime: 	88639600
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	88639559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	88639559
		lastStepMessage: 	nil
		lastCycleTime: 	88639600
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	88639559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	88639559
		lastStepMessage: 	nil
		lastCycleTime: 	88639600
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(702102272)))
		lastAlarmTime: 	88639559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setMultiInitLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>multiplyAnimated:by:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ texTHERE_BE_DRAGONS_HERE

4 May 2019 11:10:23.139683 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(629364224)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@1114)
		owner: 	a TransformWithLayoutMorph(297569280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(466004992) a RubCursor(37107200)...etc...
		fullBounds: 	(0@0) corner: (1491@1114)
		color: 	Color transparent
		extension: 	a MorphExtension (273573888) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(831752192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(37107200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(629364224)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@1114)
		owner: 	a TransformWithLayoutMorph(297569280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(466004992) a RubCursor(37107200)...etc...
		fullBounds: 	(0@0) corner: (1491@1114)
		color: 	Color transparent
		extension: 	a MorphExtension (273573888) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(831752192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(37107200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(629364224)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@1114)
		owner: 	a TransformWithLayoutMorph(297569280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(466004992) a RubCursor(37107200)...etc...
		fullBounds: 	(0@0) corner: (1491@1114)
		color: 	Color transparent
		extension: 	a MorphExtension (273573888) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(831752192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(37107200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(629364224)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@1114)
		owner: 	a TransformWithLayoutMorph(297569280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(466004992) a RubCursor(37107200)...etc...
		fullBounds: 	(0@0) corner: (1491@1114)
		color: 	Color transparent
		extension: 	a MorphExtension (273573888) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(831752192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(37107200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(629364224)
	Receiver's instance variables: 
		bounds: 	(717@371.0) corner: (733@387.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(717@371) mouseOver 336104806 nil]
		targetOffset: 	(691@851)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 336104806 717 371 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(717@371.0) corner: (733@387.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(717@371) mouseOver 336104806 nil]
		targetOffset: 	(691@851)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 336104806 717 371 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	92555980
		lastStepMessage: 	nil
		lastCycleTime: 	92556025
		alarms: 	a Heap()
		lastAlarmTime: 	92555980
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-03T21:27:46.525683+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 May 2019 11:16:32.522687 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(629364224)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@1114)
		owner: 	a TransformWithLayoutMorph(297569280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(469502976) a RubCursor(37107200)...etc...
		fullBounds: 	(0@0) corner: (1491@1114)
		color: 	Color transparent
		extension: 	a MorphExtension (7853056) [other:  (announcer -> an Announcer) (kmD...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(831752192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(37107200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(629364224)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@1114)
		owner: 	a TransformWithLayoutMorph(297569280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(469502976) a RubCursor(37107200)...etc...
		fullBounds: 	(0@0) corner: (1491@1114)
		color: 	Color transparent
		extension: 	a MorphExtension (7853056) [other:  (announcer -> an Announcer) (kmD...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(831752192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(37107200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(629364224)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@1114)
		owner: 	a TransformWithLayoutMorph(297569280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(469502976) a RubCursor(37107200)...etc...
		fullBounds: 	(0@0) corner: (1491@1114)
		color: 	Color transparent
		extension: 	a MorphExtension (7853056) [other:  (announcer -> an Announcer) (kmD...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(831752192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(37107200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(629364224)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1491@1114)
		owner: 	a TransformWithLayoutMorph(297569280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(469502976) a RubCursor(37107200)...etc...
		fullBounds: 	(0@0) corner: (1491@1114)
		color: 	Color transparent
		extension: 	a MorphExtension (7853056) [other:  (announcer -> an Announcer) (kmD...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(831752192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(37107200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(629364224)
	Receiver's instance variables: 
		bounds: 	(717@371.0) corner: (733@387.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(717@371) mouseOver 336104806 nil]
		targetOffset: 	(691@851)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 336104806 717 371 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(717@371.0) corner: (733@387.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(717@371) mouseOver 336104806 nil]
		targetOffset: 	(691@851)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 336104806 717 371 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1520@785)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	92555980
		lastStepMessage: 	nil
		lastCycleTime: 	92556025
		alarms: 	a Heap()
		lastAlarmTime: 	92555980
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 May 2019 12:20:08.464687 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (893291520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(492393472) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (893291520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(492393472) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (893291520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(492393472) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (893291520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(492393472) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(790795264)
	Receiver's instance variables: 
		bounds: 	(782@207.0) corner: (798@223.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(782@207) mouseOver 3894765 nil]
		targetOffset: 	(436@1609)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3894765 782 207 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(782@207.0) corner: (798@223.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(782@207) mouseOver 3894765 nil]
		targetOffset: 	(436@1609)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3894765 782 207 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	3815615
		lastStepMessage: 	nil
		lastCycleTime: 	3815649
		alarms: 	a Heap()
		lastAlarmTime: 	3815615
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-04T23:16:32.373687+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 May 2019 11:14:40.663583 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (376746240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(119595008) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (376746240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(119595008) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (376746240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(119595008) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (376746240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(119595008) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(790795264)
	Receiver's instance variables: 
		bounds: 	(782@207.0) corner: (798@223.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(782@207) mouseOver 3894765 nil]
		targetOffset: 	(436@1609)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3894765 782 207 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(782@207.0) corner: (798@223.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(782@207) mouseOver 3894765 nil]
		targetOffset: 	(436@1609)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3894765 782 207 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1520@785)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	3815615
		lastStepMessage: 	nil
		lastCycleTime: 	3815649
		alarms: 	a Heap()
		lastAlarmTime: 	3815615
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:14:40.497583+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:14:40.497583+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:14:40.497583+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:14:40.497583+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:14:40.497583+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:14:40.497583+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 May 2019 11:46:34.364083 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (376746240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(119595008) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (376746240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(119595008) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (376746240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(119595008) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(790795264)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2216)
		owner: 	a TransformWithLayoutMorph(119704576)
		submorphs: 	an Array(a RubCursor(68539392) a RubPrimarySelectionMorph(655463424)...etc...
		fullBounds: 	(0@0) corner: (777@2216)
		color: 	Color transparent
		extension: 	a MorphExtension (376746240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(756372480)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(68539392)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(119595008) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(790795264)
	Receiver's instance variables: 
		bounds: 	(782@207.0) corner: (798@223.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(782@207) mouseOver 3894765 nil]
		targetOffset: 	(436@1609)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3894765 782 207 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(782@207.0) corner: (798@223.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(782@207) mouseOver 3894765 nil]
		targetOffset: 	(436@1609)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3894765 782 207 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1520@785)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	3815615
		lastStepMessage: 	nil
		lastCycleTime: 	3815649
		alarms: 	a Heap()
		lastAlarmTime: 	3815615
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:46:34.232083+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:46:34.232083+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:46:34.232083+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:46:34.232083+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:46:34.232083+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T11:46:34.232083+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 12:26:58.906541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (576@240)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(943490048) a RubCursor(54255872)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(738997504))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(145@275)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	725521
		lastStepMessage: 	nil
		lastCycleTime: 	725542
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	725521
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScTHERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 12:28:13.123541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	nil
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	nil
		backgroundGroups: 	nil
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	nil
		rightMarkerElement: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (576@240)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(943490048) a RubCursor(54255872)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(610576128))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 1 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	750528
		lastStepMessage: 	nil
		lastCycleTime: 	750570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	750528
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	750528
		lastStepMessage: 	nil
		lastCycleTime: 	750570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	750528
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	750528
		lastStepMessage: 	nil
		lastCycleTime: 	750570
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	750528
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
5 May 2019 12:29:35.548541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
"check what the stack top after copy is - maybe it has the new object which we'll use to bind to value: and highlight both elements"
self halt.
self highlightModel: element.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :value | 
		"check what the stack top after copy is - maybe it has the new object which we'll use to bind to value: and highlight both elements"
		self halt.
		self highlightModel: element.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	a COOSparseMatrixNode
		rightMarkerHighlightLink: 	a MetaLink
		value: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


COOSparseMatrixNode(a subclass of COOSparseMatrixNode)>>copy
	Receiver: a COOSparseMatrixNode
	Arguments and temporary variables: 
		RFReifyValueVar: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	1
		leftNeighbour: 	nil
		rightNeighbour: 	a COOSparseMatrixNode


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrixNode>>#copy (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#copy
		anArray: 	#()
		aReceiver: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		ast: 	copy
	RFReifyValueVar := self
		rFwithArgs: {}
		executeMethod: #RFMetaBin...etc...
		class: 	a subclass of COOSparseMatrixNode
		compiledMethod: 	a subclass of COOSparseMatrixNode>>#copy
		linkCount: 	1


a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	a COOSparseMatrixNode
		rightMatrixMarker: 	a COOSparseMatrixNode
		result: 	an a subclass of COOSparseMatrix
		newNode: 	nil
		continue: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#+
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode continue...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#+
		linkCount: 	25


[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(Object)>>halt
[ :value | 
"check what the stack top after copy is - maybe it has the new object which we'll use to bind to value: and highlight both elements"
self halt.
self highlightModel: element.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :value | 
		"check what the stack top after copy is - maybe it has the new object which we'll use to bind to value: and highlight both elements"
		self halt.
		self highlightModel: element.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
COOSparseMatrixNode(a subclass of COOSparseMatrixNode)>>copy
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>+
ReflectiveMethod>>run:with:in:
[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 12:30:45.059541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (576@240)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(943490048) a RubCursor(54255872)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(579120896))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(463@256)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	894570
		lastStepMessage: 	nil
		lastCycleTime: 	894636
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	894570
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	894570
		lastStepMessage: 	nil
		lastCycleTime: 	894636
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	894570
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	894570
		lastStepMessage: 	nil
		lastCycleTime: 	894636
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	894570
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key a subclass of COOSparseMatrixNode not found in WeakKeyDictionary
5 May 2019 12:47:25.102541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

WeakKeyDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		aKey: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


[ self errorKeyNotFound: key ] in WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


WeakKeyDictionary>>removeKey:ifAbsent:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	3
		result: 	nil
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


WeakKeyDictionary(Dictionary)>>removeKey:
	Receiver: a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix a subc...etc...
	Arguments and temporary variables: 
		key: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	4
		array: 	an Array(a subclass of COOSparseMatrix->an a subclass of COOSparseMatrix...etc...
		expired: 	1
		finalizer: 	nil


MetaLinkAnonymousClassBuilder>>migrateObjectToOriginalClass:
	Receiver: a MetaLinkAnonymousClassBuilder
	Arguments and temporary variables: 
		anObject: 	an a subclass of COOSparseMatrixNode
		class: 	a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		classes: 	a Dictionary(COOSparseMatrix->a WeakSet(a subclass of COOSparseMatrix ...etc...
		migratedObjects: 	a WeakKeyDictionary(a subclass of COOSparseMatrix->an a subcla...etc...


[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ] in MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Collection)>>ifEmpty:
	Receiver: an IdentitySet()
	Arguments and temporary variables: 
		aBlock: 	[ anonSubclassesBuilder migrateObjectToOriginalClass: anObject ]
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MetaLinkInstaller>>uninstallNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLinkInstaller>>uninstall:fromNode:forObject:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aNode: 	value: aValue
	value := aValue
		anObject: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] in [ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
		node: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


IdentitySet(Set)>>do:
	Receiver: an IdentitySet(value: aValue
	value := aValue)
	Arguments and temporary variables: 
		aBlock: 	[ :node | 
(linkToNodesMapper isNode: node ownedBy: object)
	ifTrue: [ ...etc...
		index: 	3
		each: 	value: aValue
	value := aValue
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil value: aValue
	value := aValue nil nil)


[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNode: node ownedBy: object)
			ifTrue: [ self uninstall: aMetaLink fromNode: node forObject: object ] ] ] in MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


WeakSet>>do:
	Receiver: a WeakSet(an a subclass of COOSparseMatrixNode)
	Arguments and temporary variables: 
		aBlock: 	[ :object | 
aMetaLink nodes
	do: [ :node | 
		(linkToNodesMapper isNod...etc...
		index: 	3
		object: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		tally: 	1
		array: 	a WeakArray(an Object an Object an a subclass of COOSparseMatrixNode an ...etc...
		flag: 	an Object


MetaLinkInstaller>>uninstallFromAllAnonymousNodes:
	Receiver: a MetaLinkInstaller
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		objectsForLink: 	a WeakSet(an a subclass of COOSparseMatrixNode)
	Receiver's instance variables: 
		linksRegistry: 	a MetaLinkRegistry
		anonSubclassesBuilder: 	a MetaLinkAnonymousClassBuilder
		linkToNodesMapper: 	a MetaLinkNodesMapper
		superJumpLinks: 	an OrderedCollection()


MetaLink>>uninstall
	Receiver: a MetaLink
	Arguments and temporary variables: 

	Receiver's instance variables: 
		arguments: 	#()
		condition: 	nil
		conditionArguments: 	nil
		control: 	#after
		level: 	nil
		metaObject: 	[ self highlightModel: leftMatrixMarker.
leftMatrixMarkerHightlight...etc...
		nodes: 	an IdentitySet(value: aValue
	value := aValue)
		selector: 	#value
		options: 	a Set(#optionInlineMetaObject #optionInlineCondition #optionWeakAfter)...etc...


[ self highlightModel: leftMatrixMarker.
leftMatrixMarkerHightlightLink uninstall ] in [ :value | 
"value is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ self highlightModel: leftMatrixMarker.
		leftMatrixMarkerHightlightLink uninstall ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
value link: leftMatrixMarkerHightlightLink toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :value | 
		"value is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ self highlightModel: leftMatrixMarker.
				leftMatrixMarkerHightlightLink uninstall ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		value link: leftMatrixMarkerHightlightLink toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of COOSparseMatrixNode>>value:
	Receiver: an a subclass of COOSparseMatrixNode
	Arguments and temporary variables: 
		aValue: 	2
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	2
		leftNeighbour: 	nil
		rightNeighbour: 	nil


a subclass of COOSparseMatrixNode>>value:
	Receiver: an a subclass of COOSparseMatrixNodeTHERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 12:47:41.716541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (576@240)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(943490048) a RubCursor(54255872)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(647294976))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(463@256)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 3 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1007809024) named: P...etc...
		lastStepTime: 	1964132
		lastStepMessage: 	nil
		lastCycleTime: 	1964160
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	1964132
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1007809024) named: P...etc...
		lastStepTime: 	1964132
		lastStepMessage: 	nil
		lastCycleTime: 	1964160
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	1964132
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1007809024) named: P...etc...
		lastStepTime: 	1964132
		lastStepMessage: 	nil
		lastCycleTime: 	1964160
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	1964132
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
5 May 2019 1:04:43.477541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :value | 
"value is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ self highlightModel: leftMatrixMarker.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
value link: leftMatrixMarkerHightlightLink toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self halt.
self highlightModel: element.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :value | 
		"value is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ self highlightModel: leftMatrixMarker.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		value link: leftMatrixMarkerHightlightLink toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self halt.
		self highlightModel: element.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	a COOSparseMatrixNode
		rightMarkerHighlightLink: 	a MetaLink
		value: 	an a subclass of COOSparseMatrixNode
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


COOSparseMatrixNode(a subclass of COOSparseMatrixNode)>>copy
	Receiver: a COOSparseMatrixNode
	Arguments and temporary variables: 
		RFReifyValueVar: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	1
		leftNeighbour: 	nil
		rightNeighbour: 	a COOSparseMatrixNode


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrixNode>>#copy (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#copy
		anArray: 	#()
		aReceiver: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		ast: 	copy
	RFReifyValueVar := self
		rFwithArgs: {}
		executeMethod: #RFMetaBin...etc...
		class: 	a subclass of COOSparseMatrixNode
		compiledMethod: 	a subclass of COOSparseMatrixNode>>#copy
		linkCount: 	1


a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	a COOSparseMatrixNode
		rightMatrixMarker: 	a COOSparseMatrixNode
		result: 	an a subclass of COOSparseMatrix
		newNode: 	nil
		continue: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#+
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode continue...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#+
		linkCount: 	25


[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(Object)>>halt
[ :value | 
"value is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ self highlightModel: leftMatrixMarker.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
value link: leftMatrixMarkerHightlightLink toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self halt.
self highlightModel: element.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :value | 
		"value is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ self highlightModel: leftMatrixMarker.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		value link: leftMatrixMarkerHightlightLink toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self halt.
		self highlightModel: element.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
COOSparseMatrixNode(a subclass of COOSparseMatrixNode)>>copy
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>+
ReflectiveMethod>>run:with:in:
[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 1:04:44.071541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (473@240)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(943490048) a RubCursor(54255872)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(770198784))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(379.0@339.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1007809024) named: P...etc...
		lastStepTime: 	3001460
		lastStepMessage: 	nil
		lastCycleTime: 	3001526
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	3001460
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1007809024) named: P...etc...
		lastStepTime: 	3001460
		lastStepMessage: 	nil
		lastCycleTime: 	3001526
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	3001460
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1007809024) named: P...etc...
		lastStepTime: 	3001460
		lastStepMessage: 	nil
		lastCycleTime: 	3001526
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	3001460
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
5 May 2019 1:11:15.983541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

COOSparseMatrixOperationVisualizer(Object)>>halt
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ self highlightModel: leftMatrixMarker.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self halt.
self highlightModel: element.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ self highlightModel: leftMatrixMarker.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self halt.
		self highlightModel: element.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	a COOSparseMatrixNode
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	an a subclass of COOSparseMatrixNode
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


COOSparseMatrixNode(a subclass of COOSparseMatrixNode)>>copy
	Receiver: a COOSparseMatrixNode
	Arguments and temporary variables: 
		RFReifyValueVar: 	an a subclass of COOSparseMatrixNode
	Receiver's instance variables: 
		row: 	1
		column: 	1
		value: 	1
		leftNeighbour: 	nil
		rightNeighbour: 	a COOSparseMatrixNode


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrixNode>>#copy (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#copy
		anArray: 	#()
		aReceiver: 	a COOSparseMatrixNode
	Receiver's instance variables: 
		ast: 	copy
	RFReifyValueVar := self
		rFwithArgs: {}
		executeMethod: #RFMetaBin...etc...
		class: 	a subclass of COOSparseMatrixNode
		compiledMethod: 	a subclass of COOSparseMatrixNode>>#copy
		linkCount: 	1


a subclass of COOSparseMatrix>>+
	Receiver: an a subclass of COOSparseMatrix
	Arguments and temporary variables: 
		aCOOMatrix: 	an a subclass of COOSparseMatrix
		RFReifyValueVar: 	nil
		leftMatrixMarker: 	a COOSparseMatrixNode
		rightMatrixMarker: 	a COOSparseMatrixNode
		result: 	an a subclass of COOSparseMatrix
		newNode: 	nil
		continue: 	nil
	Receiver's instance variables: 
		first: 	a COOSparseMatrixNode
		last: 	a COOSparseMatrixNode
		rowNumber: 	4
		columnNumber: 	4


ReflectiveMethod>>run:with:in:
	Receiver: a subclass of COOSparseMatrix>>#+ (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#+
		anArray: 	an Array(an a subclass of COOSparseMatrix)
		aReceiver: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		ast: 	+ aCOOMatrix
	| leftMatrixMarker rightMatrixMarker result newNode continue...etc...
		class: 	a subclass of COOSparseMatrix
		compiledMethod: 	a subclass of COOSparseMatrix>>#+
		linkCount: 	25


[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in nil
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ leftMatrix + rightMatrix ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	105
		numArgs: 	0



--- The full stack ---
COOSparseMatrixOperationVisualizer(Object)>>halt
[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ self highlightModel: leftMatrixMarker.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self halt.
self highlightModel: element.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ self highlightModel: leftMatrixMarker.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self halt.
		self highlightModel: element.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
COOSparseMatrixNode(a subclass of COOSparseMatrixNode)>>copy
ReflectiveMethod>>run:with:in:
a subclass of COOSparseMatrix>>+
ReflectiveMethod>>run:with:in:
[ leftMatrix + rightMatrix ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
5 May 2019 1:11:19.112541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


BlockClosure>>on:do:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | Error signal: ex ]
	Receiver's instance variables: 
		outerContext: 	COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>ad...etc...
		startpc: 	115
		numArgs: 	0


COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		left: 	an a subclass of COOSparseMatrix
		right: 	an a subclass of COOSparseMatrix
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in MorphicUIManager>>debugProcess:context:label:fullView:not...etc...
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore(a Process in [ self setAdditionLinksOn: leftMatrix.
proc...etc...
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	a COOSparseMatrixNode
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	a COOSparseMatrixNode
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (473@240)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(943490048) a RubCursor(54255872)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(359219200))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(381.0@352.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	3394024
		lastStepMessage: 	nil
		lastCycleTime: 	3394064
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	3394024
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	3394024
		lastStepMessage: 	nil
		lastCycleTime: 	3394064
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	3394024
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(777675264) named: Pl...etc...
		lastStepTime: 	3394024
		lastStepMessage: 	nil
		lastCycleTime: 	3394064
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54255872)))
		lastAlarmTime: 	3394024
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
[ self setAdditionLinksOn: leftMatrix.
process resume.
semaphore wait ] in COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
BlockClosure>>on:do:
BlockClosure>>on:fork:
COOSparseMatrixOperationVisualizer(MatrixOperationVisualizer)>>addAnimated:to:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:17:23.430541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

ReflectiveMethod>>run:with:in:
	Receiver: a subclass of UndefinedObject>>#copy (ReflectiveMethod)
	Arguments and temporary variables: 
		aSelector: 	#copy
		anArray: 	#()
		aReceiver: 	nil
	Receiver's instance variables: 
		ast: 	copy
	RFReifyValueVar := self
		rFwithArgs: {}
		executeMethod: #RFMetaBin...etc...
		class: 	a subclass of UndefinedObject
		compiledMethod: 	a subclass of UndefinedObject>>#copy
		linkCount: 	2


RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparsTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:17:42.673541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=140771584 title=nil pane=a GLMPane(498807552 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(498807552 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(231761152 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=140771584 title=nil pane=a GLMPane(498807552 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=[ :elementCopy | 
"elementCopy is t...etc...
		newPane: 	a GLMPane(231761152 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(498807552 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(231761152 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=140771584 title=nil pane=a GLMPane(498807552 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=[ :element...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(498807552 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(231761152 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


[ :each | each outerPortEvent: aPortEvent ] in GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=913775360 title=nil pane=a GLMPane(498807552 root))
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:17:47.289541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=521620736 title=nil pane=a GLMPane(855492352 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(855492352 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(310345216 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=521620736 title=nil pane=a GLMPane(855492352 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=[ :elementCopy | 
"elementCopy is t...etc...
		newPane: 	a GLMPane(310345216 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(855492352 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(310345216 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=521620736 title=nil pane=a GLMPane(855492352 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=[ :element...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(855492352 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(310345216 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


[ :each | each outerPortEvent: aPortEvent ] in GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=810426112 title=nil pane=a GLMPane(855492352 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=[ :element...etc...
		each: 	a GLMPager(id=521620736 title=nil pane=a GLMPane(855492352 root))
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(855492352 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=521620736 title=nil pane=a GL...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=485632000 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMPager(id=521620736 title=nil pane=a GLMPane(855492352 root)))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMPager(id=521620736 title=nil pane=a GLMPane(855492352 root...etc...
		firstIndex: 	1
		lastIndex: 	1


GTDebuggerInspector(GLMCompositePresentation)>>do:
	Receiver: a GTDebuggerInspector(id=810426112 title=nil pane=a GLMPane(855492352 root))
	Arguments and temporary variables: 
		aBlock: 	[ :eaTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:17:48.979541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=82217984 title=nil pane=a GLMPane(1008091392 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(1008091392 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(981758464 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=82217984 title=nil pane=a GLMPane(1008091392 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=[ :elementCopy | 
"elementCopy is t...etc...
		newPane: 	a GLMPane(981758464 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(1008091392 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(981758464 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=82217984 title=nil pane=a GLMPane(1008091392 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=[ :element...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(1008091392 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(981758464 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


[ :each | each outerPortEvent: aPortEvent ] in GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=227928576 title=nil pane=a GLMPane(1008091392 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=[ :element...etc...
		each: 	a GLMPager(id=82217984 title=nil pane=a GLMPane(1008091392 root))
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(1008091392 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=82217984 title=nil pane=a GLM...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=556939264 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMPager(id=82217984 title=nil pane=a GLMPane(1008091392 root)))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMPager(id=82217984 title=nil pane=a GLMPane(1008091392 root...etc...
		firstIndex: 	1
		lastIndex: 	1


GTDebuggerInspector(GLMCompositePresentation)>>do:
	Receiver: a GTDebuggerInspector(id=227928576 title=nil pane=a GLMPane(1008091392 root))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(1008091392 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrdereTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:17:51.816541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (473@354)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(689574400) a RubCursor(54255872)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editiTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:18:11.816541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=438678272 title=nil pane=a GLMPane(558387456 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(558387456 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(636446720 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=438678272 title=nil pane=a GLMPane(558387456 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=RBMethodNode(RBProgramNode)>>postCo...etc...
		newPane: 	a GLMPane(636446720 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(558387456 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(636446720 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=438678272 title=nil pane=a GLMPane(558387456 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=RBMethodNo...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(558387456 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(636446720 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


[ :each | each outerPortEvent: aPortEvent ] in GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=146392320 title=nil pane=a GLMPane(558387456 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=RBMethodNo...etc...
		each: 	a GLMPager(id=438678272 title=nil pane=a GLMPane(558387456 root))
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(558387456 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=438678272 title=nil pane=a GL...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=710824448 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMPager(id=438678272 title=nil pane=a GLMPane(558387456 root)))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMPager(id=438678272 title=nil pane=a GLMPane(558387456 root...etc...
		firstIndex: 	1
		lastIndex: 	1


GTDebuggerInspector(GLMCompositePresentation)>>do:
	Receiver: a GTDebuggerInspector(id=146392320 title=nil pane=a GLMPane(558387456 root))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(558387456 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=438678272 title=nil pane=a GL...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=710824448 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=146392320 title=nil pane=a GLMPane(558387456 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=RBMethodNo...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(558387456 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmiTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:18:18.689541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	^ col2 := {{1 . 0 . 0 . 3}.
	{0 . 0 . 0 . -1}.
	{0 . 0 . 0 . 0}.
	{0 . 0 . 1 . 0}}
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ col2 := {{1 . 0 . 0 . 3}.
{0 . 0 . 0 . -1}.
{0 . 0 . 0 ....etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	^ col2 := {{1 . 0 . 0 . 3}.
	{0 . 0 . 0 . -1}.
	{0 . 0 . 0 . 0}.
	{0 . 0 . 1 . 0}}
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ col2 := {{1 . 0 . 0 . 3}.
{0 . 0 . 0 . -1}.
{0 . 0 . 0 ....etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	^ col2 := {{1 . 0 . 0 . 3}.
	{0 . 0 . 0 . -1}.
	{0 . 0 . 0 . 0}.
	{0 . 0 . 1 . 0}}
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ col2 := {{1 . 0 . 0 . 3}.
{0 . 0 . 0 . -1}.
{0 . 0 . 0 ....etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	^ col2 := {{1 . 0 . 0 . 3}.
	{0 . 0 . 0 . -1}.
	{0 . 0 . 0 . 0}.
	{0...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ col2 := {{1 . 0 . 0 . 3}.
	{0 . 0 . 0 . -1}.
	{0 . 0 . 0 . 0}.
	{0...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ col2 := {{1 . 0 . 0 . 3}.
	{0 . 0 . 0 . -1}.
	{0 . 0 . 0 . 0}.
	{0...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ col2 := {{1 . 0 . 0 . 3}.
	{0 . 0 . 0 . -1}.
	{0 . 0 . 0 . 0}.
	{0...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ col2 := {{1 . 0 . 0 . 3}.
	{0 . 0 . 0 . -1}.
	{0 . 0 . 0 . 0}.
	{0...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:18:47.873541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(517229056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(517229056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:19:00.847541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(517229056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(517229056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(862054912)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(517229056)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (320@31)
		owner: 	a TransformWithLayoutMorph(57088256)
		submorphs: 	an Array(a RubCursor(209800192) a RubPrimarySelectionMorph(849740032...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1021452288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(613617920)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(209800192)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(566742272))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(187@58)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(862054912)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1007809024) named: P...etc...
		lastStepTime: 	3862143
		lastStepMessage: 	nil
		lastCycleTime: 	3862207
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(209800192)))
		lastAlarmTime: 	3862143
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(1007809024) named: P...etc...
		lastStepTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:19:12.022541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=771232256 title=nil pane=a GLMPane(967002624 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(967002624 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(368955648 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=771232256 title=nil pane=a GLMPane(967002624 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=[ :elementCopy | 
"elementCopy is t...etc...
		newPane: 	a GLMPane(368955648 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(967002624 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(368955648 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=771232256 title=nil pane=a GLMPane(967002624 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=[ :element...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(967002624 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(368955648 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


[ :each | each outerPortEvent: aPortEvent ] in GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=180962304 title=nil pane=a GLMPane(967002624 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=[ :element...etc...
		each: 	a GLMPager(id=771232256 title=nil pane=a GLMPane(967002624 root))
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(967002624 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=771232256 title=nil pane=a GL...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=774331136 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMPager(id=771232256 title=nil pane=a GLMPane(967002624 root)))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMPager(id=771232256 title=nil pane=a GLMPane(967002624 root...etc...
		firstIndex: 	1
		lastIndex: 	1


GTDebuggerInspector(GLMCompositePresentation)>>do:
	Receiver: a GTDebuggerInspector(id=180962304 title=nil pane=a GLMPane(967002624 root))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(967002624 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime:THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:19:29.693541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (473@354)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(689574400) a RubCursor(54255872)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(236380672))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	a FormCanvas on: DisplayScreen(1536x801x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	3891026
		lastStepMessage: 	nil
		lastCycleTime: 	3891053
		alarms: 	THERE_BE_DRAGONS_HERE

5 May 2019 1:19:32.866541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (473@354)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(689574400) a RubCursor(54255872)...etc...
		fullBounds: 	(0@0) corner: (473@354)
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(236380672))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (473@354)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(689574400) a RubCursor(54255872)...etc...
		fullBounds: 	(0@0) corner: (473@354)
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(236380672))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (473@354)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(689574400) a RubCursor(54255872)...etc...
		fullBounds: 	(0@0) corner: (473@354)
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(236380672))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (473@354)
		owner: 	a TransformWithLayoutMorph(935162880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(689574400) a RubCursor(54255872)...etc...
		fullBounds: 	(0@0) corner: (473@354)
		color: 	Color transparent
		extension: 	a MorphExtension (811020032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(699999744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(54255872)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(236380672))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(617136128)
	Receiver's instance variables: 
		bounds: 	(540@151.0) corner: (556@167.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(540@151) mouseOver CTRL 3934734 nil]
		targetOffset: 	(11.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3934734 540 150 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(540@151.0) corner: (556@167.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(540@151) mouseOver CTRL 3934734 nil]
		targetOffset: 	(11.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3934734 540 150 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	3893460
		lastStepMessage: 	nil
		lastCycleTime: 	3893521
		alarms: 	a Heap()
		lastAlarmTime: 	3893460
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:22:20.328541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:22:56.352541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: ast
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#ast
		args: 	#()
		lookupClass: 	a subclass of UndefinedObject


a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	setTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:22:58.142541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: ast
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#ast
		args: 	#()
		lookupClass: 	a subclass of UndefinedObject


a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: ast
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#ast
		args: 	#()
		lookupClass: 	a subclass of UndefinedObject


a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:23:50.132541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=590779904 title=nil pane=a GLMPane(349619968 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(349619968 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(982323712 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=590779904 title=nil pane=a GLMPane(349619968 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=MetalinkTargetResolver class>>looku...etc...
		newPane: 	a GLMPane(982323712 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(349619968 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(982323712 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=590779904 title=nil pane=a GLMPane(349619968 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=MetalinkTa...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(349619968 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(982323712 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


[ :each | each outerPortEvent: aPortEvent ] in GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=261729280 title=nil pane=a GLMPane(349619968 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=MetalinkTa...etc...
		each: 	a GLMPager(id=590779904 title=nil pane=a GLMPane(349619968 root))
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(349619968 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=590779904 title=nil pane=a GL...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=876423424 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMPager(id=590779904 title=nil pane=a GLMPane(349619968 root)))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMPager(id=590779904 title=nil pane=a GLMPane(349619968 root...etc...
		firstIndex: 	1
		lastIndex:THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 1:24:59.107541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	^ MetaLink uninstallAll
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(^ MetaLink uninstallAll)
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ MetaLink uninstallAll
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(517229056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(517229056)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


THERE_BE_DRAGONS_HERE

5 May 2019 1:25:59.876541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (341184512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (341184512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (341184512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (341184512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(919331072)
	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	4280447
		lastStepMessage: 	nil
		lastCycleTime: 	4280506
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(48422400)))
		lastAlarmTime: 	4280447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-05-05T12:14:38.931541+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Unable to resolve external type: unsigned
5 May 2019 1:26:57.108541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

FFICallout(Object)>>error:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aString: 	'Unable to resolve external type: unsigned'
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFICallout>>resolveType:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aTypeName: 	'unsigned'
		name: 	'unsigned'
		newName: 	'unsigned'
		resolver: 	CairoFontFace
		binding: 	nil
		ptrArity: 	0
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFICallout>>typeName:pointerArity:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aName: 	'unsigned'
		ptrArity: 	0
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFICallout>>returnType:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aType: 	#('unsigned' 0)
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFIFunctionParser>>parseReturn
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		returnTypeTuple: 	#('unsigned' 0)
		returnType: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFIFunctionParser>>parseNamedFunction:
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		aFunctionDefinition: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#s...etc...
		argsSpec: 	{$s. $i. $z. $e. $_. $t. Character space. $h. $a. $n. $d. $l. $e. Cha...etc...
		typeAndName: 	{$u. $n. $s. $i. $g. $n. $e. $d. Character space. $i. $n. $t. Char...etc...
		fnName: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFICalloutMethodBuilder>>parseSignature:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #ha...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>generate
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>build:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	signature: functionSignature;
	sender: sender;
	...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutAPI>>function:module:
	Receiver: a FFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#siz...etc...
		moduleNameOrLibrary: 	CairoLibrary
		sender: 	CairoFontFace class>>countReferences:
		ffiMethod: 	nil
		ffiMethodSelector: 	#ffiCall:
	Receiver's instance variables: 
		context: 	CairoFontFace class>>countReferences:
		options: 	#()
		callingConvention: 	#stdcall


CairoFontFace class(Object)>>ffiCall:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		fnSpec: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #handle...etc...
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>countReferences:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>hasSharedResourceData:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFaceExecutor>>finalize
	Receiver: a CairoFontFaceExecutor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		session: 	a WorkingSession
		data: 	75997120
		resourceClass: 	CairoFontFace
		ftFace: 	a FreeTypeFace(@ 16r00BE4D30)<0xBE4D30>[Source Sans Pro Regular]


WeakFinalizerItem>>finalizeValues
	Receiver: a WeakFinalizerItem
	Arguments and temporary variables: 
		ex: 	a CairoFontFaceExecutor
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		executor: 	nil


[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
	Receiver: a WeakRegistry(<this WeakRegistry is locked>)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		valueDictionary: 	a WeakIdentityKeyDictionary(size 643)
		sema: 	a Semaphore()


BlockClosure>>on:do:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0



--- The full stack ---
FFICallout(Object)>>error:
FFICallout>>resolveType:
FFICallout>>typeName:pointerArity:
FFICallout>>returnType:
FFIFunctionParser>>parseReturn
FFIFunctionParser>>parseNamedFunction:
FFICalloutMethodBuilder>>parseSignature:
FFICalloutMethodBuilder>>generate
FFICalloutMethodBuilder>>build:
FFICalloutAPI>>function:module:
CairoFontFace class(Object)>>ffiCall:
CairoFontFace class>>countReferences:
CairoFontFace class>>hasSharedResourceData:
CairoFontFaceExecutor>>finalize
WeakFinalizerItem>>finalizeValues
[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Error did not understand #pointerArity:
5 May 2019 1:27:03.080541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	nil
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


FFICallout>>typeName:pointerArity:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aName: 	'unsigned'
		ptrArity: 	0
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFICallout>>returnType:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aType: 	#('unsigned' 0)
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFIFunctionParser>>parseReturn
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		returnTypeTuple: 	#('unsigned' 0)
		returnType: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFIFunctionParser>>parseNamedFunction:
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		aFunctionDefinition: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#s...etc...
		argsSpec: 	{$s. $i. $z. $e. $_. $t. Character space. $h. $a. $n. $d. $l. $e. Cha...etc...
		typeAndName: 	{$u. $n. $s. $i. $g. $n. $e. $d. Character space. $i. $n. $t. Char...etc...
		fnName: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFICalloutMethodBuilder>>parseSignature:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #ha...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>generate
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>build:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	signature: functionSignature;
	sender: sender;
	...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutAPI>>function:module:
	Receiver: a FFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#siz...etc...
		moduleNameOrLibrary: 	CairoLibrary
		sender: 	CairoFontFace class>>countReferences:
		ffiMethod: 	nil
		ffiMethodSelector: 	#ffiCall:
	Receiver's instance variables: 
		context: 	CairoFontFace class>>countReferences:
		options: 	#()
		callingConvention: 	#stdcall


CairoFontFace class(Object)>>ffiCall:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		fnSpec: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #handle...etc...
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>countReferences:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>hasSharedResourceData:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFaceExecutor>>finalize
	Receiver: a CairoFontFaceExecutor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		session: 	a WorkingSession
		data: 	75997120
		resourceClass: 	CairoFontFace
		ftFace: 	a FreeTypeFace(@ 16r00BE4D30)<0xBE4D30>[Source Sans Pro Regular]


WeakFinalizerItem>>finalizeValues
	Receiver: a WeakFinalizerItem
	Arguments and temporary variables: 
		ex: 	a CairoFontFaceExecutor
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		executor: 	nil


[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
	Receiver: a WeakRegistry(<this WeakRegistry is locked>)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		valueDictionary: 	a WeakIdentityKeyDictionary(size 643)
		sema: 	a Semaphore()


BlockClosure>>on:do:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0



--- The full stack ---
Error(Object)>>doesNotUnderstand: #pointerArity:
FFICallout>>typeName:pointerArity:
FFICallout>>returnType:
FFIFunctionParser>>parseReturn
FFIFunctionParser>>parseNamedFunction:
FFICalloutMethodBuilder>>parseSignature:
FFICalloutMethodBuilder>>generate
FFICalloutMethodBuilder>>build:
FFICalloutAPI>>function:module:
CairoFontFace class(Object)>>ffiCall:
CairoFontFace class>>countReferences:
CairoFontFace class>>hasSharedResourceData:
CairoFontFaceExecutor>>finalize
WeakFinalizerItem>>finalizeValues
[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Error did not understand #pointerArity:
5 May 2019 1:27:06.797541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	nil
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Message>>sentTo:
	Receiver: pointerArity: 0
	Arguments and temporary variables: 
		receiver: 	Error: Unable to resolve external type: unsigned
	Receiver's instance variables: 
		selector: 	#pointerArity:
		args: 	#(0)
		lookupClass: 	Error


Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	MessageNotUnderstood: Error>>pointerArity:
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


FFICallout>>typeName:pointerArity:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aName: 	'unsigned'
		ptrArity: 	0
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFICallout>>returnType:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aType: 	#('unsigned' 0)
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFIFunctionParser>>parseReturn
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		returnTypeTuple: 	#('unsigned' 0)
		returnType: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFIFunctionParser>>parseNamedFunction:
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		aFunctionDefinition: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#s...etc...
		argsSpec: 	{$s. $i. $z. $e. $_. $t. Character space. $h. $a. $n. $d. $l. $e. Cha...etc...
		typeAndName: 	{$u. $n. $s. $i. $g. $n. $e. $d. Character space. $i. $n. $t. Char...etc...
		fnName: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFICalloutMethodBuilder>>parseSignature:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #ha...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>generate
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>build:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	signature: functionSignature;
	sender: sender;
	...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutAPI>>function:module:
	Receiver: a FFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#siz...etc...
		moduleNameOrLibrary: 	CairoLibrary
		sender: 	CairoFontFace class>>countReferences:
		ffiMethod: 	nil
		ffiMethodSelector: 	#ffiCall:
	Receiver's instance variables: 
		context: 	CairoFontFace class>>countReferences:
		options: 	#()
		callingConvention: 	#stdcall


CairoFontFace class(Object)>>ffiCall:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		fnSpec: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #handle...etc...
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>countReferences:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>hasSharedResourceData:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFaceExecutor>>finalize
	Receiver: a CairoFontFaceExecutor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		session: 	a WorkingSession
		data: 	75997120
		resourceClass: 	CairoFontFace
		ftFace: 	a FreeTypeFace(@ 16r00BE4D30)<0xBE4D30>[Source Sans Pro Regular]


WeakFinalizerItem>>finalizeValues
	Receiver: a WeakFinalizerItem
	Arguments and temporary variables: 
		ex: 	a CairoFontFaceExecutor
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		executor: 	nil


[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
	Receiver: a WeakRegistry(<this WeakRegistry is locked>)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		valueDictionary: 	a WeakIdentityKeyDictionary(size 643)
		sema: 	a Semaphore()


BlockClosure>>on:do:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0



--- The full stack ---
Error(Object)>>doesNotUnderstand: #pointerArity:
Message>>sentTo:
Error(Object)>>doesNotUnderstand: #pointerArity:
FFICallout>>typeName:pointerArity:
FFICallout>>returnType:
FFIFunctionParser>>parseReturn
FFIFunctionParser>>parseNamedFunction:
FFICalloutMethodBuilder>>parseSignature:
FFICalloutMethodBuilder>>generate
FFICalloutMethodBuilder>>build:
FFICalloutAPI>>function:module:
CairoFontFace class(Object)>>ffiCall:
CairoFontFace class>>countReferences:
CairoFontFace class>>hasSharedResourceData:
CairoFontFaceExecutor>>finalize
WeakFinalizerItem>>finalizeValues
[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Error did not understand #pointerArity:
5 May 2019 1:27:08.023541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	nil
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Message>>sentTo:
	Receiver: pointerArity: 0
	Arguments and temporary variables: 
		receiver: 	Error: Unable to resolve external type: unsigned
	Receiver's instance variables: 
		selector: 	#pointerArity:
		args: 	#(0)
		lookupClass: 	Error


Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	MessageNotUnderstood: Error>>pointerArity:
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Message>>sentTo:
	Receiver: pointerArity: 0
	Arguments and temporary variables: 
		receiver: 	Error: Unable to resolve external type: unsigned
	Receiver's instance variables: 
		selector: 	#pointerArity:
		args: 	#(0)
		lookupClass: 	Error


Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	MessageNotUnderstood: Error>>pointerArity:
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


FFICallout>>typeName:pointerArity:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aName: 	'unsigned'
		ptrArity: 	0
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFICallout>>returnType:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aType: 	#('unsigned' 0)
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFIFunctionParser>>parseReturn
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		returnTypeTuple: 	#('unsigned' 0)
		returnType: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFIFunctionParser>>parseNamedFunction:
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		aFunctionDefinition: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#s...etc...
		argsSpec: 	{$s. $i. $z. $e. $_. $t. Character space. $h. $a. $n. $d. $l. $e. Cha...etc...
		typeAndName: 	{$u. $n. $s. $i. $g. $n. $e. $d. Character space. $i. $n. $t. Char...etc...
		fnName: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFICalloutMethodBuilder>>parseSignature:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #ha...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>generate
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>build:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	signature: functionSignature;
	sender: sender;
	...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutAPI>>function:module:
	Receiver: a FFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#siz...etc...
		moduleNameOrLibrary: 	CairoLibrary
		sender: 	CairoFontFace class>>countReferences:
		ffiMethod: 	nil
		ffiMethodSelector: 	#ffiCall:
	Receiver's instance variables: 
		context: 	CairoFontFace class>>countReferences:
		options: 	#()
		callingConvention: 	#stdcall


CairoFontFace class(Object)>>ffiCall:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		fnSpec: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #handle...etc...
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>countReferences:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>hasSharedResourceData:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFaceExecutor>>finalize
	Receiver: a CairoFontFaceExecutor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		session: 	a WorkingSession
		data: 	75997120
		resourceClass: 	CairoFontFace
		ftFace: 	a FreeTypeFace(@ 16r00BE4D30)<0xBE4D30>[Source Sans Pro Regular]


WeakFinalizerItem>>finalizeValues
	Receiver: a WeakFinalizerItem
	Arguments and temporary variables: 
		ex: 	a CairoFontFaceExecutor
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		executor: 	nil


[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
	Receiver: a WeakRegistry(<this WeakRegistry is locked>)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		valueDictionary: 	a WeakIdentityKeyDictionary(size 643)
		sema: 	a Semaphore()


BlockClosure>>on:do:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0



--- The full stack ---
Error(Object)>>doesNotUnderstand: #pointerArity:
Message>>sentTo:
Error(Object)>>doesNotUnderstand: #pointerArity:
Message>>sentTo:
Error(Object)>>doesNotUnderstand: #pointerArity:
FFICallout>>typeName:pointerArity:
FFICallout>>returnType:
FFIFunctionParser>>parseReturn
FFIFunctionParser>>parseNamedFunction:
FFICalloutMethodBuilder>>parseSignature:
FFICalloutMethodBuilder>>generate
FFICalloutMethodBuilder>>build:
FFICalloutAPI>>function:module:
CairoFontFace class(Object)>>ffiCall:
CairoFontFace class>>countReferences:
CairoFontFace class>>hasSharedResourceData:
CairoFontFaceExecutor>>finalize
WeakFinalizerItem>>finalizeValues
[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Error did not understand #pointerArity:
5 May 2019 1:27:08.830541 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	nil
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Message>>sentTo:
	Receiver: pointerArity: 0
	Arguments and temporary variables: 
		receiver: 	Error: Unable to resolve external type: unsigned
	Receiver's instance variables: 
		selector: 	#pointerArity:
		args: 	#(0)
		lookupClass: 	Error


Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	MessageNotUnderstood: Error>>pointerArity:
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Message>>sentTo:
	Receiver: pointerArity: 0
	Arguments and temporary variables: 
		receiver: 	Error: Unable to resolve external type: unsigned
	Receiver's instance variables: 
		selector: 	#pointerArity:
		args: 	#(0)
		lookupClass: 	Error


Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	MessageNotUnderstood: Error>>pointerArity:
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Message>>sentTo:
	Receiver: pointerArity: 0
	Arguments and temporary variables: 
		receiver: 	Error: Unable to resolve external type: unsigned
	Receiver's instance variables: 
		selector: 	#pointerArity:
		args: 	#(0)
		lookupClass: 	Error


Error(Object)>>doesNotUnderstand: #pointerArity:
	Receiver: Error: Unable to resolve external type: unsigned
	Arguments and temporary variables: 
		aMessage: 	pointerArity: 0
		exception: 	MessageNotUnderstood: Error>>pointerArity:
		resumeValue: 	MessageNotUnderstood: Error>>pointerArity:
	Receiver's instance variables: 
		messageText: 	'Unable to resolve external type: unsigned'
		tag: 	nil
		signaler: 	a FFICallout
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


FFICallout>>typeName:pointerArity:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aName: 	'unsigned'
		ptrArity: 	0
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFICallout>>returnType:
	Receiver: a FFICallout
	Arguments and temporary variables: 
		aType: 	#('unsigned' 0)
	Receiver's instance variables: 
		fnSpec: 	nil
		options: 	a Dictionary()
		requestor: 	CairoFontFace class
		methodArgs: 	#(#handle)
		receiver: 	nil
		method: 	nil


FFIFunctionParser>>parseReturn
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		returnTypeTuple: 	#('unsigned' 0)
		returnType: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFIFunctionParser>>parseNamedFunction:
	Receiver: a FFIFunctionParser
	Arguments and temporary variables: 
		aFunctionDefinition: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#s...etc...
		argsSpec: 	{$s. $i. $z. $e. $_. $t. Character space. $h. $a. $n. $d. $l. $e. Cha...etc...
		typeAndName: 	{$u. $n. $s. $i. $g. $n. $e. $d. Character space. $i. $n. $t. Char...etc...
		fnName: 	nil
	Receiver's instance variables: 
		requestor: 	a FFICallout
		stream: 	a ReadStream
		fnSpec: 	a FFIFunctionSpec


FFICalloutMethodBuilder>>parseSignature:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #ha...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>generate
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>build:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	signature: functionSignature;
	sender: sender;
	...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	CairoFontFace class>>countReferences:
		signature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #han...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutAPI>>function:module:
	Receiver: a FFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#siz...etc...
		moduleNameOrLibrary: 	CairoLibrary
		sender: 	CairoFontFace class>>countReferences:
		ffiMethod: 	nil
		ffiMethodSelector: 	#ffiCall:
	Receiver's instance variables: 
		context: 	CairoFontFace class>>countReferences:
		options: 	#()
		callingConvention: 	#stdcall


CairoFontFace class(Object)>>ffiCall:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		fnSpec: 	#(#unsigned #int #cairo_font_face_get_reference_count #(#size_t #handle...etc...
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>countReferences:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFace class>>hasSharedResourceData:
	Receiver: CairoFontFace
	Arguments and temporary variables: 
		handle: 	75997120
	Receiver's instance variables: 
		superclass: 	FFIExternalObject
		methodDict: 	a MethodDictionary(#ffiLibraryName->CairoFontFace>>#ffiLibraryName ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CairoFontFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefinitions FT2Constants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo-Text'


CairoFontFaceExecutor>>finalize
	Receiver: a CairoFontFaceExecutor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		session: 	a WorkingSession
		data: 	75997120
		resourceClass: 	CairoFontFace
		ftFace: 	a FreeTypeFace(@ 16r00BE4D30)<0xBE4D30>[Source Sans Pro Regular]


WeakFinalizerItem>>finalizeValues
	Receiver: a WeakFinalizerItem
	Arguments and temporary variables: 
		ex: 	a CairoFontFaceExecutor
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		executor: 	nil


[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
	Receiver: a WeakRegistry(<this WeakRegistry is locked>)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		valueDictionary: 	a WeakIdentityKeyDictionary(size 643)
		sema: 	a Semaphore()


BlockClosure>>on:do:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ each finalizeValues ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	[ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex ...etc...
		startpc: 	177
		numArgs: 	0



--- The full stack ---
Error(Object)>>doesNotUnderstand: #pointerArity:
Message>>sentTo:
Error(Object)>>doesNotUnderstand: #pointerArity:
Message>>sentTo:
Error(Object)>>doesNotUnderstand: #pointerArity:
Message>>sentTo:
Error(Object)>>doesNotUnderstand: #pointerArity:
FFICallout>>typeName:pointerArity:
FFICallout>>returnType:
FFIFunctionParser>>parseReturn
FFIFunctionParser>>parseNamedFunction:
FFICalloutMethodBuilder>>parseSignature:
FFICalloutMethodBuilder>>generate
FFICalloutMethodBuilder>>build:
FFICalloutAPI>>function:module:
CairoFontFace class(Object)>>ffiCall:
CairoFontFace class>>countReferences:
CairoFontFace class>>hasSharedResourceData:
CairoFontFaceExecutor>>finalize
WeakFinalizerItem>>finalizeValues
[ each finalizeValues ] in [ :each | [ each finalizeValues ] on: Exception fork: [ :ex | ex pass ] ] in WeakRegistry>>finalizeValues
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 May 2019 1:27:51.85539 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(919331072)
	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1520@785)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	4280447
		lastStepMessage: 	nil
		lastCycleTime: 	4280506
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(48422400)))
		lastAlarmTime: 	4280447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T13:27:51.79839+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T13:27:51.79839+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T13:27:51.79839+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T13:27:51.79839+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T13:27:51.79839+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T13:27:51.79839+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 2:25:42.09739 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 2:29:42.37339 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etcTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:05:39.91139 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:06:01.77539 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=865013760 title=nil pane=a GLMPane(897322496 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(897322496 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(129349632 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=865013760 title=nil pane=a GLMPane(897322496 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=MetalinkTargetResolver class>>looku...etc...
		newPane: 	a GLMPane(129349632 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(897322496 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(129349632 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=865013760 title=nil pane=a GLMPane(897322496 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=MetalinkTa...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(897322496 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(129349632 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


[ :each | each outerPortEvent: aPortEvent ] in GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=647951360 title=nil pane=a GLMPane(897322496 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=MetalinkTa...etc...
		each: 	a GLMPager(id=865013760 title=nil pane=a GLMPane(897322496 root))
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(897322496 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=865013760 title=nil pane=a GL...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=956736000 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMPager(id=865013760 title=nil pane=a GLMPane(897322496 root)))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMPager(id=865013760 title=nil pane=a GLMPane(897322496 root...etc...
		firstIndex: 	1
		lastIndex: 	1


GTDebuggerInspector(GLMCompositePresentation)>>do:
	Receiver: a GTDebuggerInspector(id=647951360 title=nil pane=a GLMPane(897322496 root))
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:07:13.91539 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BloTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:10:39.26239 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMImplicitBrowser)>>newTransmission
	Receiver: a GLMPager(id=824819200 title=nil pane=a GLMPane(730959872 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(730959872 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(1008589824 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	true
		fixedSizePanes: 	2
		lastActivePresentation: 	nil
		firstTransmission: 	nil
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	nil


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=824819200 title=nil pane=a GLMPane(730959872 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(730959872 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(1008589824 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	true
		fixedSizePanes: 	2
		lastActivePresentation: 	nil
		firstTransmission: 	nil
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	nil


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=824819200 title=nil pane=a GLMPane(730959872 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=File @ C:\Users\yaroslav\AppData\Ro...etc...
		newPane: 	a GLMPane(1008589824 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(730959872 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(1008589824 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	true
		fixedSizePanes: 	2
		lastActivePresentation: 	nil
		firstTransmission: 	nil
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	nil


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=824819200 title=nil pane=a GLMPane(730959872 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=File @ C:\...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(730959872 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(1008589824 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	true
		fixedSizePanes: 	2
		lastActivePresentation: 	nil
		firstTransmission: 	nil
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	nil


[ :each | each outerPortEvent: aPortEvent ] in GTInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTInspector(id=209685504 title='Inspector on a FileReference (C:\Users\yaroslav\AppData\...etc...
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=File @ C:\...etc...
		each: 	a GLMPager(id=824819200 title=nil pane=a GLMPane(730959872 root))
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(730959872 root)
		title: 	[ :anObject | 'Inspector on ' , (self printObjectAsAnItem: anObject) ]
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection(a GLMGenericAction a GLMGenericAction a GLMGeneri...etc...
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	true
		stepTime: 	1500
		stepCondition: 	nil
		wantsAutomaticRefresh: 	true
		presentations: 	an OrderedCollection(a GLMPager(id=824819200 title=nil pane=a GL...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter


OrderedCollection>>THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:12:23.94939 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkAfter rightMarker...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#setAdditionLinksOn:
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLink...etc...
		source: 	a Text for 'setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore ...etc...
		arguments: 	an OrderedCollection(RBArgumentNode(matrixInstance))
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMarkerLinkBefore leftMarkerLinkA...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	setAdditionLinksOn: matrixInstance
	| leftMaTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:13:47.55439 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMTransmission(Object)>>copy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		transmissionStrategy: 	a GLMReplacePresentationsStrategy
		transformation: 	nil
		condition: 	true


GLMPager(GLMFinder)>>newFirstTransmission
	Receiver: a GLMPager(id=1030135296 title=nil pane=a GLMPane(472363008 root))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(472363008 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(622953984 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>addPaneFromOuter:
	Receiver: a GLMPager(id=1030135296 title=nil pane=a GLMPane(472363008 root))
	Arguments and temporary variables: 
		aPort: 	Port (pane='root' name=#entity value=a subclass of UndefinedObject>>copy...etc...
		newPane: 	a GLMPane(622953984 1)
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(472363008 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(622953984 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


GLMPager(GLMFinder)>>outerPortEvent:
	Receiver: a GLMPager(id=1030135296 title=nil pane=a GLMPane(472363008 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=a subclass...etc...
		toReplace: 	nil
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(472363008 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		transmissions: 	an OrderedCollection()
		panes: 	an OrderedCollection(a GLMPane(622953984 1))
		initialExtent: 	nil
		watcherPane: 	nil
		presentations: 	nil
		transmission: 	GLMTransmission (origins=an OrderedCollection() destination=nil)
		hasFixedSizePanes: 	nil
		fixedSizePanes: 	nil
		lastActivePresentation: 	nil
		firstTransmission: 	GLMTransmission (origins=an OrderedCollection() destination=...etc...
		scrollButtonIconRenderBlock: 	nil
		minimumPageNumberForScrollbar: 	2


[ :each | each outerPortEvent: aPortEvent ] in GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=1007514112 title=nil pane=a GLMPane(472363008 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=a subclass...etc...
		each: 	a GLMPager(id=1030135296 title=nil pane=a GLMPane(472363008 root))
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(472363008 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=1030135296 title=nil pane=a G...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=504001536 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMPager(id=1030135296 title=nil pane=a GLMPane(472363008 root)))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMPager(id=1030135296 title=nil pane=a GLMPane(472363008 roo...etc...
		firstIndex: 	1
		lastIndex: 	1


GTDebuggerInspector(GLMCompositePresentation)>>do:
	Receiver: a GTDebuggerInspector(id=1007514112 title=nil pane=a GLMPane(472363008 root))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each outerPortEvent: aPortEvent ]
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(472363008 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		wantsAutomaticRefresh: 	nil
		presentations: 	an OrderedCollection(a GLMPager(id=1030135296 title=nil pane=a G...etc...
		arrangement: 	nil
		presentationFilter: 	a GTInspectorTagFilter
		debugger: 	a GTGenericStackDebugger(id=504001536 title='Instance of a subclass o...etc...
		notifyPaneRemoved: 	true


GTDebuggerInspector(GLMCompositePresentation)>>outerPortEvent:
	Receiver: a GTDebuggerInspector(id=1007514112 title=nil pane=a GLMPane(472363008 root))
	Arguments and temporary variables: 
		aPortEvent: 	a GLMPortEvent(port=Port (pane='root' name=#entity value=a subclass...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegisTHERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:16:53.65139 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: beRevertMode
	self title: 'Epicea - Revert Changes'.
	self toolbarPresenter beRevertMode.
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 3
		selector: 	#beRevertMode
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(self title: 'Epicea - Revert Changes'.
self toolbarPresent...etc...
		source: 	'beRevertMode
	self title: ''Epicea - Revert Changes''.
	self toolbarPr...etc...
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: beRevertMode
	self title: 'Epicea - Revert Changes'.
	self toolbarPresenter beRevertMode.
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 3
		selector: 	#beRevertMode
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(self title: 'Epicea - Revert Changes'.
self toolbarPresent...etc...
		source: 	'beRevertMode
	self title: ''Epicea - Revert Changes''.
	self toolbarPr...etc...
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: beRevertMode
	self title: 'Epicea - Revert Changes'.
	self toolbarPresenter beRevertMode.
...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 3
		selector: 	#beRevertMode
		keywordsPositions: 	an IntegerArray(1)
		body: 	RBSequenceNode(self title: 'Epicea - Revert Changes'.
self toolbarPresent...etc...
		source: 	'beRevertMode
	self title: ''Epicea - Revert Changes''.
	self toolbarPr...etc...
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	beRevertMode
	self title: 'Epicea - Revert Changes'.
	self toolbarPresente...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	beRevertMode
	self title: 'Epicea - Revert Changes'.
	self toolbarPresente...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	beRevertMode
	self title: 'Epicea - Revert Changes'.
	self toolbarPresente...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	beRevertMode
	self title: 'Epicea - Revert Changes'.
	self toolbarPresente...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


EpLogBrowserPresenter class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: EpLogBrowserPresenter
	Arguments and temporary variables: 
		text: 	'beRevertMode
	self title: ''Epicea - Revert Changes''.
	self toolbarPres...etc...
		category: 	#modes
		changeStamp: 	'AutoDeprecationRefactoring 5/5/2019 15:16'
		requestor: 	nil
		logSource: 	true
		method: 	nil
		selector: 	nil
	Receiver's instance variables: 
		superclass: 	ComposablePresenter
		methodDict: 	a MethodDictionary(#addFilter:->EpLogBrowserPresenter>>#addFilter: ...etc...
		format: 	65562
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{EpLogBrowserModel}
		name: 	#EpLogBrowserPresenter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'EpiceaBrowsers-UI-Log'


EpLogBrowserPresenter class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: EpLogBrowserPresenter
	Arguments and temporary variables: 
		text: 	'beRevertMode
	self title: ''Epicea - Revert Changes''.
	self toolbarPres...etc...
		category: 	#modes
		changeStamp: 	'AutoDeprecationRefactoring 5/5/2019 15:16'
		requestor: 	nil
	Receiver's instance variables: 
		superclass: 	ComposablePresenter
		methodDict: 	a MethodDictionary(#addFilter:->EpLogBrowserPresenter>>#addFilter: ...etc...
		format: 	65562
THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:17:12.27839 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
5 May 2019 3:27:32.74039 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

RBMethodNode(RBProgramNode)>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode>>postCopy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


RBMethodNode(Object)>>copy
	Receiver: DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . 0 . 0 . 0}}.
	co...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parent: 	nil
		properties: 	nil
		scope: 	an OCMethodScope 4
		selector: 	#DoIt
		keywordsPositions: 	nil
		body: 	RBSequenceNode(col := {{1 . -1 . 0 . 0}.
{0 . 3 . 0 . 0}.
{1 . 0 . 2 . 1}...etc...
		source: 	nil
		arguments: 	#()
		pragmas: 	nil
		replacements: 	a SortedCollection()
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


OpalCompiler>>callPlugins
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		plugins: 	an OrderedCollection(FFICompilerPlugin)
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :notification | 
self source: notification newSource.
notifica...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ...etc...
		startpc: 	237
		numArgs: 	0


[ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing
	do: [ :notification | 
		self source: notification newSource.
		notification retry ].
cm := compilationContext optionEmbeddSources
	ifTrue: [ ast generateWithSource ]
	ifFalse: [ ast generate: self compilationContext compiledMethodTrailer ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: ReparseAfterSourceEditing...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	233
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	col := {{1 . -1 . 0 . 0}.
	{0 . 3 . 0 . 0}.
	{1 . 0 . 2 . 1}.
	{0 . ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(617136128)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(984038400)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(617136128)
	Arguments and temporary variables: 
		eTHERE_BE_DRAGONS_HERE

5 May 2019 3:41:17.357305 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(919331072)
	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1520@785)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	4280447
		lastStepMessage: 	nil
		lastCycleTime: 	4280506
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(48422400)))
		lastAlarmTime: 	4280447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T15:41:17.293305+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T15:41:17.293305+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T15:41:17.293305+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T15:41:17.293305+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T15:41:17.293305+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T15:41:17.293305+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 May 2019 4:11:55.276749 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(919331072)
	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1520@785)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	4280447
		lastStepMessage: 	nil
		lastCycleTime: 	4280506
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(48422400)))
		lastAlarmTime: 	4280447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:55.217749+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:55.217749+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:55.217749+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:55.217749+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:55.217749+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:11:55.217749+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 May 2019 4:15:53.048144 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(919331072)
	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1520@785)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	4280447
		lastStepMessage: 	nil
		lastCycleTime: 	4280506
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(48422400)))
		lastAlarmTime: 	4280447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1520@785)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:15:52.987144+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:15:52.987144+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:15:52.987144+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:15:52.987144+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:15:52.987144+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-05-05T16:15:52.987144+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 September 2019 1:48:54.34774 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(919331072)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (777@2824)
		owner: 	a TransformWithLayoutMorph(56513280)
		submorphs: 	an Array(a RubPrimarySelectionMorph(289989888) a RubCursor(48422400)...etc...
		fullBounds: 	(0@0) corner: (777@2824)
		color: 	Color transparent
		extension: 	a MorphExtension (452280320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(633344512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(48422400)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(359182336) a ClyCr...etc...
		getMenuPolicy: 	a RubEditingArea(919331072)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(919331072)
	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(307716864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(360@268.0) corner: (376@284.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (863608832)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@268) mouseOver 4321078 nil]
		targetOffset: 	(125@778)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4321078 358 267 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
		hand: 	a HandMorph(307716864)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(307716864))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(307716864))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(307716864))
		viewBox: 	(0@0) corner: (1536@801)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(830400512) named: Pl...etc...
		lastStepTime: 	4280447
		lastStepMessage: 	nil
		lastCycleTime: 	4280506
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(48422400)))
		lastAlarmTime: 	4280447
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(307716864)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1536@801)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(867515136) a TaskbarMorph(1061383936) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (492582912) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T13:48:54.26174+03:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T13:48:54.26174+03:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T13:48:54.26174+03:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T13:48:54.26174+03:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T13:48:54.26174+03:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-09-20T13:48:54.26174+03:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of a subclass of UndefinedObject did not understand #ast
20 September 2019 1:49:11.26674 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

a subclass of UndefinedObject(Object)>>doesNotUnderstand: #ast
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	ast
		exception: 	MessageNotUnderstood: a subclass of UndefinedObject>>ast
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MetalinkTargetResolver class>>lookupASTForMethodNamed:in:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
		class: 	UndefinedObject
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


MetalinkTargetResolver class>>methodNamed:for:
	Receiver: MetalinkTargetResolver
	Arguments and temporary variables: 
		aMethodName: 	#value:
		aClassOrObject: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#MetalinkTargetResolver
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Reflectivity-Installer'


a subclass of UndefinedObject(Object)>>link:toMethodNamed:
	Receiver: nil
	Arguments and temporary variables: 
		aMetaLink: 	a MetaLink
		aMethodName: 	#value:
	Receiver's instance variables: 
nil

[ :elementCopy | 
"elementCopy is the copied object which we use to set a link to value:"
"with that we know if it's selecting left and right markers or only one of them"
| leftMatrixMarkerHightlightLink |
leftMatrixMarkerHightlightLink := MetaLink new.
leftMatrixMarkerHightlightLink
	metaObject: [ "the link is set to right only according to the method code"
		"left is never the object which is copied in this situation"
		self highlightModel: leftMatrixMarker inGroup: #left.
		Transcript
			show:
				'highlight left '
					, (leftMatrixMarker row @ leftMatrixMarker column) asString;
			cr.
		delay wait
		"leftMatrixMarkerHightlightLink uninstall" ].
leftMatrixMarkerHightlightLink selector: #value.
leftMatrixMarkerHightlightLink control: #after.
elementCopy
	link: leftMatrixMarkerHightlightLink
	toMethodNamed: #value:.
"highlight the right marker and uninstall itself after first use"
self highlightModel: element inGroup: #right.
Transcript
	show: 'highlight right ' , (element row @ element column) asString;
	cr.
delay wait.
"add to metaLinks in case it won't run to uninstall after animation ends"
metaLinks add: leftMatrixMarkerHightlightLink.
rightMarkerHighlightLink uninstall ] in [ :element | 
| rightMarkerHighlightLink |
rightMatrixMarker := element.
"highlights marker if it was copied - most common path in the method"
"uninstalls itself after one use since the algorithm does not revert"
rightMarkerHighlightLink := MetaLink new.
rightMarkerHighlightLink
	metaObject: [ :elementCopy | 
		"elementCopy is the copied object which we use to set a link to value:"
		"with that we know if it's selecting left and right markers or only one of them"
		| leftMatrixMarkerHightlightLink |
		leftMatrixMarkerHightlightLink := MetaLink new.
		leftMatrixMarkerHightlightLink
			metaObject: [ "the link is set to right only according to the method code"
				"left is never the object which is copied in this situation"
				self highlightModel: leftMatrixMarker inGroup: #left.
				Transcript
					show:
						'highlight left '
							, (leftMatrixMarker row @ leftMatrixMarker column) asString;
					cr.
				delay wait
				"leftMatrixMarkerHightlightLink uninstall" ].
		leftMatrixMarkerHightlightLink selector: #value.
		leftMatrixMarkerHightlightLink control: #after.
		elementCopy
			link: leftMatrixMarkerHightlightLink
			toMethodNamed: #value:.
		"highlight the right marker and uninstall itself after first use"
		self highlightModel: element inGroup: #right.
		Transcript
			show: 'highlight right ' , (element row @ element column) asString;
			cr.
		delay wait.
		"add to metaLinks in case it won't run to uninstall after animation ends"
		metaLinks add: leftMatrixMarkerHightlightLink.
		rightMarkerHighlightLink uninstall ].
rightMarkerHighlightLink selector: #value:.
rightMarkerHighlightLink arguments: #(value).
rightMarkerHighlightLink control: #after.
element link: rightMarkerHighlightLink toMethodNamed: #copy.
metaLinks add: rightMarkerHighlightLink.
rightMarkerElement isNil
	ifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new
			getElementShapeScaled: 5) elementOn: element ].
element isNotNil
	ifTrue: [ self selectModel: element inGroup: #right.
		Transcript
			show: 'select right ' , (element row @ element column) asString;
			cr.
		rightMarkerElement updateModelAndRedraw: element.
		delay wait ] ] in COOSparseMatrixOperationVisualizer>>setAdditionLinksOn:
	Receiver: a COOSparseMatrixOperationVisualizer
	Arguments and temporary variables: 
		matrixInstance: 	an a subclass of COOSparseMatrix
		leftMarkerLinkBefore: 	nil
		leftMarkerLinkAfter: 	nil
		rightMarkerLinkBefore: 	nil
		rightMarkerLinkAfter: 	nil
		method: 	nil
		sumLink: 	nil
		element: 	nil
		rightMarkerHighlightLink: 	a MetaLink
		elementCopy: 	nil
		leftMatrixMarkerHightlightLink: 	a MetaLink
	Receiver's instance variables: 
		leftMatrix: 	an a subclass of COOSparseMatrix
		rightMatrix: 	an a subclass of COOSparseMatrix
		resultMatrix: 	an a subclass of COOSparseMatrix
		process: 	a Process in Process>>terminate
		composer: 	a RTComposer
		namedGroups: 	#(#left #result #right #leftMarker #rightMarker)
		backgroundGroups: 	#(#left #result #right)
		elementSize: 	nil
		metaLinks: 	an OrderedCollection(a MetaLink a MetaLink a MetaLink a MetaLink a M...etc...
		delay: 	a Delay(1000 msecs)
		semaphore: 	a Semaphore()
		currentLeftRow: 	0
		currentRightColumn: 	0
		leftMatrixMarker: 	nil
		leftSavedMatrixMarker: 	nil
		rightMatrixMarker: 	nil
		nowProcessingElementIndex: 	a RTElement
		leftMarkerElement: 	a RTElement
		rightMarkerElement: 	a RTElement


a subclass of UndefinedObject>>copy
	Receiver: nil
	Arguments and temporary variables: 
		RFReifyValueVar: 	nil
	Receiver's instance variables: 
nil

GLMTransmission>>postCopy
	Receiver: GLMTransmission (origins=an OrderedCollection() destination=nil)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		suspendedAnnouncemets: 	nil
		logger: 	a GLMNullLogger
		context: 	nil
		destination: 	nil
		browser: 	nil
		origins: 	an OrderedCollection()
		trans