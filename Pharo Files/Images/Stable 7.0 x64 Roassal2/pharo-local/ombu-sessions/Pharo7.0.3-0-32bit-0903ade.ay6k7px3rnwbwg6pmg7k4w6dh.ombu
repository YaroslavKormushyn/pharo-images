OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T14:01:05.754677+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.scjm52grftcht1481f9xhzq9', '121' ],		#self : OmReference [ '1' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @33				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @33			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @33,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T14:12:01.103677+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MetaLinkTest,				#isMetaSide : false			},			#name : #testInstallOnTempVarNamedInMethodForOptionInstanceSpecific,			#protocol : #test,			#sourceCode : 'testInstallOnTempVarNamedInMethodForOptionInstanceSpecific\r\r\tself flag: #toImplement.\r\tself assert: false',			#stamp : 'YaroslavKormusyn 5/1/2019 14:12',			#package : #Reflectivity-Tests		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T14:50:23.870677+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r|leftRowIndexLink rightColumnIndexLink leftMarkerLink leftSavedMarkerLink rightMarkerLink your |\r\t\tleftRowIndexLink := MetaLink new.\r\t\t \rleftRowIndexLink metaObject: [:value| ...your custom code where "value" is your temporary variable...].\rleftRowIndexLink selector: #value:. "Here value takes a : at the end, because you are passing a parameter (your temp)"\rleftRowIndexLink arguments: #(value). "specifies arguments to pass to your selector, value being the temporary variable value here)"\r\r',			#stamp : 'YaroslavKormusyn 5/1/2019 14:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T14:50:41.253677+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r|leftRowIndexLink rightColumnIndexLink leftMarkerLink leftSavedMarkerLink rightMarkerLink your |\r\t\tleftRowIndexLink := MetaLink new.\r\t\t \rleftRowIndexLink metaObject: [:value| ...your custom code where "value" is your temporary variable...].\rleftRowIndexLink selector: #value:. "Here value takes a : at the end, because you are passing a parameter (your temp)"\rleftRowIndexLink arguments: #(value). "specifies arguments to pass to your selector, value being the temporary variable value here)"\r\r',			#stamp : 'YaroslavKormusyn 5/1/2019 14:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r|leftRowIndexLink rightColumnIndexLink leftMarkerLink leftSavedMarkerLink rightMarkerLink your |\r\t\tleftRowIndexLink := MetaLink new.\r\t\t \rleftRowIndexLink metaObject: [:value| ""].\rleftRowIndexLink selector: #value:. "Here value takes a : at the end, because you are passing a parameter (your temp)"\rleftRowIndexLink arguments: #(value). "specifies arguments to pass to your selector, value being the temporary variable value here)"',			#stamp : 'YaroslavKormusyn 5/1/2019 14:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:17:43.541677+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker metaLinks\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @43				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @43			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @43,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:18:35.871677+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.',			#stamp : 'YaroslavKormusyn 4/30/2019 19:54',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\tmetaLinks := OrderedCollection new.',			#stamp : 'YaroslavKormusyn 5/1/2019 15:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:19:13.402677+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r|leftRowIndexLink rightColumnIndexLink leftMarkerLink leftSavedMarkerLink rightMarkerLink your |\r\t\tleftRowIndexLink := MetaLink new.\r\t\t \rleftRowIndexLink metaObject: [:value| ""].\rleftRowIndexLink selector: #value:. "Here value takes a : at the end, because you are passing a parameter (your temp)"\rleftRowIndexLink arguments: #(value). "specifies arguments to pass to your selector, value being the temporary variable value here)"',			#stamp : 'YaroslavKormusyn 5/1/2019 14:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLink your |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftRowIndexLink arguments: #(currentLeftRow).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftRowIndexLink control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\rmetaLinks addAll: { leftMarkerLinkBefore . leftMarkerLinkAfter }.\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:19:59.700677+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:54',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ |  priorityColumn  leftMarkerElement rightMarkerElement nowProcessingElementIndex  |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:20:32.798677+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLink your |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftRowIndexLink arguments: #(currentLeftRow).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftRowIndexLink control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\rmetaLinks addAll: { leftMarkerLinkBefore . leftMarkerLinkAfter }.\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLink |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftRowIndexLink arguments: #(currentLeftRow).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftRowIndexLink control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:20',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:21:15.515677+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLink |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftRowIndexLink arguments: #(currentLeftRow).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftRowIndexLink control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:20',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLink |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:21',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:23:04.054677+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #unlink,			#protocol : #'as yet unclassified',			#sourceCode : 'unlink \r\tmetaLinks do: [ :link | link uninstall ].\r\tmetaLinks removeAll',			#stamp : 'YaroslavKormusyn 5/1/2019 15:23',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:23:04.080677+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #unlink,			#protocol : #'as yet unclassified',			#sourceCode : 'unlink \r\tmetaLinks do: [ :link | link uninstall ].\r\tmetaLinks removeAll',			#stamp : 'YaroslavKormusyn 5/1/2019 15:23',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #unlink,			#protocol : #accessing,			#sourceCode : 'unlink \r\tmetaLinks do: [ :link | link uninstall ].\r\tmetaLinks removeAll',			#stamp : 'YaroslavKormusyn 5/1/2019 15:23',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:24:08.590677+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ |  priorityColumn  leftMarkerElement rightMarkerElement nowProcessingElementIndex  |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:25:15.194677+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:25:57.611677+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:28:35.773677+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tvisualizer getComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:34:18.369677+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tvisualizer getComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\tvisualizer setLinksForMultiplicationOn: self.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\t"visualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}."\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t"visualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}."\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 15:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:35:09.377677+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLink |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:21',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLink |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self halt. self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self halt. self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:35',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:37:42.270677+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLink |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self halt. self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self halt. self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:35',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter|\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\r\rrightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:40:08.566677+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter|\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\r\rrightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tself halt.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:46:07.630677+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tself halt.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker before\' ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T15:46:12.574677+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker before\' ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:46',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker before\' ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker after\' ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T16:23:13.070677+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\t"visualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}."\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t"visualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}."\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 16:23',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T16:26:14.140677+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker before\' ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker after\' ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 15:46',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker before\' ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker after\' ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 16:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T16:37:08.187677+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\t"visualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}."\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t"visualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}."\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ "visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer selectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t"visualizer deselectModel: leftMatrixMarker inGroup: #left."\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 16:23',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 16:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T16:39:07.312677+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'deselectModels:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'deselectModels: modelCollection\r\tmodelCollection\r\t\tdo: [ :model | \r\t\t\t[ (self view elementFromModel: model) color: Color blue ]\r\t\t\t\ton: Error\r\t\t\t\tdo: [ :exception | nil ] ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 16:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T16:40:19.164677+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 16:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tself halt.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 16:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:03:45.673677+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker before\' ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker after\' ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 16:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker before\';cr ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker after\';cr ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 17:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:08:04.658677+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #getVisualizedClass,			#protocol : #'as yet unclassified',			#sourceCode : 'getVisualizedClass\r\tError subclassResponsibility',			#stamp : 'YaroslavKormusyn 5/1/2019 17:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:08:31.039677+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #getVisualizedClass,			#protocol : #'as yet unclassified',			#sourceCode : 'getVisualizedClass\r\tError subclassResponsibility',			#stamp : 'YaroslavKormusyn 5/1/2019 17:08',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #getVisualizedClass,			#protocol : #'as yet unclassified',			#sourceCode : 'getVisualizedClass\r\tself subclassResponsibility',			#stamp : 'YaroslavKormusyn 5/1/2019 17:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:08:56.570677+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #getVisualizedClass,			#protocol : #'as yet unclassified',			#sourceCode : 'getVisualizedClass \r^ COOSparseMatrix ',			#stamp : 'YaroslavKormusyn 5/1/2019 17:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:09:09.001677+03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LILSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #getVisualizedClass,			#protocol : #'as yet unclassified',			#sourceCode : 'getVisualizedClass\r\t^ LILSparseMatrix',			#stamp : 'YaroslavKormusyn 5/1/2019 17:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:09:19.536677+03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TWSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #getVisualizedClass,			#protocol : #'as yet unclassified',			#sourceCode : 'getVisualizedClass\r\t^ TWSparseMatrix',			#stamp : 'YaroslavKormusyn 5/1/2019 17:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:10:18.802677+03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aMatrix\r\tsubclasses\r\t\tdo: [ :subclass | \r\t\t\t((\'\'\r\t\t\t\tjoin:\r\t\t\t\t\t{aMatrix class .\r\t\t\t\t\t\'Visualizer\'}) = (subclass name substrings: \'#\') first )\r\t\t\t\tifTrue: [ ^ subclass on: aMatrix ] ]',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aMatrix\r\tsubclasses\r\t\tdo: [ :subclass | \r\t\t\t"(\'\'\r\t\t\t\tjoin:\r\t\t\t\t\t{aMatrix class.\r\t\t\t\t\t\'Visualizer\'}) = (subclass name substrings: \'#\') first"\r\t\t\t\t\t(aMatrix isKindOf: subclass getVisualizedClass)\r\t\t\t\tifTrue: [ ^ subclass on: aMatrix ] ]',			#stamp : 'YaroslavKormusyn 5/1/2019 17:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:12:29.155677+03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'on:withView:',			#protocol : #'instance creation',			#sourceCode : 'on: aMatrix withView: aView\r\tsubclasses\r\t\tdo: [ :subclass | \r\t\t\t(\'\'\r\t\t\t\tjoin:\r\t\t\t\t\t{aMatrix class.\r\t\t\t\t\t\'Visualizer\'}) = (subclass name substrings: \'#\') first\r\t\t\t\tifTrue: [ ^ subclass on: aMatrix withView: aView] ]',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'on:withView:',			#protocol : #'instance creation',			#sourceCode : 'on: aMatrix withView: aView\r\tsubclasses\r\t\tdo: [ :subclass | \r\t\t\t"(\'\'\r\t\t\t\tjoin:\r\t\t\t\t\t{aMatrix class.\r\t\t\t\t\t\'Visualizer\'}) = (subclass name substrings: \'#\') first"\r\t\t\t(aMatrix isKindOf: subclass getVisualizedClass)\r\t\t\t\tifTrue: [ ^ subclass on: aMatrix withView: aView ] ]',			#stamp : 'YaroslavKormusyn 5/1/2019 17:12',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:14:28.239677+03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tself halt.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 16:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:14',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:14:50.411677+03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #'on:withView:',			#protocol : #'instance creation',			#sourceCode : 'on: aCOOSparseMatrix withView: aView\r\t(aCOOSparseMatrix isMemberOf: COOSparseMatrix)\r\t\tifFalse: [ Error\r\t\t\t\tsignal: \'Matrix should be of class \' , COOSparseMatrix className ].\r\t^ (self new withView: aView) on: aCOOSparseMatrix',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #'on:withView:',			#protocol : #'instance creation',			#sourceCode : 'on: aCOOSparseMatrix withView: aView\r\t(aCOOSparseMatrix isKindOf: COOSparseMatrix)\r\t\tifFalse: [ Error\r\t\t\t\tsignal: \'Matrix should be of class \' , COOSparseMatrix className ].\r\t^ (self new withView: aView) on: aCOOSparseMatrix',			#stamp : 'YaroslavKormusyn 5/1/2019 17:14',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:17:03.460677+03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:14',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\tself halt.\r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:24:54.952677+03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\tself halt.\r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result.\r\tvisualizer unlink ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\tself halt.\r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:27:14.837677+03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\tself halt.\r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tself halt.visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:27',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:28:26.980677+03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker before\';cr ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript show: \'Im in left marker after\';cr ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 17:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript\r\t\t\t\tshow: \'Im in left marker before\';\r\t\t\t\tcr ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript\r\t\t\t\tshow: \'Im in left marker after\';\r\t\t\t\tcr ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value}.Transcript\r\t\t\t\tshow: \'Im in right marker before\';\r\t\t\t\tcr ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value}.Transcript\r\t\t\t\tshow: \'Im in right marker after\';\r\t\t\t\tcr ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 17:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:29:26.216677+03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript\r\t\t\t\tshow: \'Im in left marker before\';\r\t\t\t\tcr ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript\r\t\t\t\tshow: \'Im in left marker after\';\r\t\t\t\tcr ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value}.Transcript\r\t\t\t\tshow: \'Im in right marker before\';\r\t\t\t\tcr ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value}.Transcript\r\t\t\t\tshow: \'Im in right marker after\';\r\t\t\t\tcr ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 17:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript\r\t\t\tshow: value row @ value column;\r\t\t\t\tshow: \'Im in left marker before\';\r\t\t\t\tcr ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript\r\t\t\tshow: value row @ value column;\r\t\t\t\tshow: \'Im in left marker after\';\r\t\t\t\tcr ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript\r\t\t\tshow: value row @ value column;\r\t\t\t\tshow: \'Im in right marker before\';\r\t\t\t\tcr ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript\r\t\t\tshow: value row @ value column;\r\t\t\t\tshow: \'Im in right marker after\';\r\t\t\t\tcr ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 17:29',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:31:48.502677+03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript\r\t\t\tshow: value row @ value column;\r\t\t\t\tshow: \'Im in left marker before\';\r\t\t\t\tcr ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript\r\t\t\tshow: value row @ value column;\r\t\t\t\tshow: \'Im in left marker after\';\r\t\t\t\tcr ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tTranscript\r\t\t\tshow: value row @ value column;\r\t\t\t\tshow: \'Im in right marker before\';\r\t\t\t\tcr ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tTranscript\r\t\t\tshow: value row @ value column;\r\t\t\t\tshow: \'Im in right marker after\';\r\t\t\t\tcr ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 17:29',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tvalue isNotNil ifTrue: [Transcript\r\t\t\t\tshow: value row @ value column.].\r\t\t\t\tTranscript\r\t\t\t\tshow: \'Im in left marker before\';\r\t\t\t\tcr ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tvalue isNotNil ifTrue: [Transcript\r\t\t\t\tshow: value row @ value column.].\r\t\t\t\tTranscript\r\t\t\t\tshow: \'Im in left marker after\';\r\t\t\t\tcr ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tvalue isNotNil ifTrue: [Transcript\r\t\t\t\tshow: value row @ value column.].\r\t\t\t\tTranscript\r\t\t\t\tshow: \'Im in right marker before\';\r\t\t\t\tcr ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tvalue isNotNil ifTrue: [Transcript\r\t\t\t\tshow: value row @ value column.].\r\t\t\t\tTranscript\r\t\t\t\tshow: \'Im in right marker after\';\r\t\t\t\tcr ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 17:31',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T17:34:08.747677+03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tself halt.visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:visualizer:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay visualizer: viz\r\t| result transposed newNode sum operationProcess operationBlock visualizer currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := viz.\r\tvisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ | priorityColumn leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: leftMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 5/1/2019 17:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:01:19.910677+03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tvalue isNotNil ifTrue: [Transcript\r\t\t\t\tshow: value row @ value column.].\r\t\t\t\tTranscript\r\t\t\t\tshow: \'Im in left marker before\';\r\t\t\t\tcr ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tvalue isNotNil ifTrue: [Transcript\r\t\t\t\tshow: value row @ value column.].\r\t\t\t\tTranscript\r\t\t\t\tshow: \'Im in left marker after\';\r\t\t\t\tcr ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}.\r\t\t\tvalue isNotNil ifTrue: [Transcript\r\t\t\t\tshow: value row @ value column.].\r\t\t\t\tTranscript\r\t\t\t\tshow: \'Im in right marker before\';\r\t\t\t\tcr ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}.\r\t\t\tvalue isNotNil ifTrue: [Transcript\r\t\t\t\tshow: value row @ value column.].\r\t\t\t\tTranscript\r\t\t\t\tshow: \'Im in right marker after\';\r\t\t\t\tcr ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 17:31',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 18:01',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:02:51.253677+03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:03:25.922677+03:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:03:39.552677+03:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:04:44.619677+03:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 18:04',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:05:01.019677+03:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModels: {value}].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModels: {value}].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 18:01',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:05:23.562677+03:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 18:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:05:38.228677+03:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\t composer move: #leftMarker below: #left.\r\t composer move: #rightMarker below: #right.\r\t composer move: #nowProcessing above: #right.\r\t composer nameGroup: #leftMarker as: \'left marker\'.\r\t composer nameGroup: #rightMarker as: \'right marker\'.\r\t composer groupToExisting: #labels.',			#stamp : 'YaroslavKormusyn 4/30/2019 20:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:05:42.798677+03:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForCOOMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForCOOMultiplication\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 4/30/2019 20:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:06:57.828677+03:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance',			#stamp : 'YaroslavKormusyn 5/1/2019 18:06',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:07:05.144677+03:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication',			#stamp : 'YaroslavKormusyn 5/1/2019 18:07',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:07:12.382677+03:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication',			#stamp : 'YaroslavKormusyn 5/1/2019 18:07',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:07:19.505677+03:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance',			#stamp : 'YaroslavKormusyn 5/1/2019 18:07',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:07:58.299677+03:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModel:',			#protocol : #'as yet unclassified',			#sourceCode : 'deselectModel: model\r\tcomposer deselectModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:07',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:08:25.570677+03:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'deselectModel:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'deselectModel: model\r\t[ (self view elementFromModel: model) color: Color blue ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 18:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:08:33.604677+03:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'selectModel:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'selectModel: model\r\t[ (self view elementFromModel: model) color: Color red ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 18:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:08:54.890677+03:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'highlightModel:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'highlightModel: model\r\t[ (view elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 18:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:09:02.211677+03:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'deselectModel:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'deselectModel: model\r\t[ (self view elementFromModel: model) color: Color blue ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 18:08',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'deselectModel:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'deselectModel: model\r\t[ (view elementFromModel: model) color: Color blue ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 18:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:09:08.796677+03:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'selectModel:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'selectModel: model\r\t[ (self view elementFromModel: model) color: Color red ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 18:08',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'selectModel:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'selectModel: model\r\t[ (view elementFromModel: model) color: Color red ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 18:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:09:48.740677+03:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'highlightModels:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'highlightModels: modelCollection\r\tmodelCollection\r\t\tdo: [ :model | \r\t\t\t[ (view elementFromModel: model) color: Color red ]\r\t\t\t\ton: Error\r\t\t\t\tdo: [ :exception | nil ] ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 5/1/2019 18:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:10:48.111677+03:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModel:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlightModel: model\r\tcomposer highlightModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:11:00.583677+03:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModel:',			#protocol : #'as yet unclassified',			#sourceCode : 'selectModel: model\r\tcomposer selectModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:11',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:17:15.927677+03:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:17:15.978677+03:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:17:16.017677+03:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:17:16.024677+03:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker metaLinks\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize metaLinks\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @45				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @45				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @45				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @45				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @45				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @45				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @45				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @45			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @45,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:17:21.234677+03:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:20:23.327677+03:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:20:23.370677+03:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:20:23.415677+03:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @31				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @31,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:20:23.421677+03:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize metaLinks\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize metaLinks delay\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @35				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @35			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @35,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:23:31.187677+03:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:23:31.231677+03:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:23:31.278677+03:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @31				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @31,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:23:31.284677+03:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize metaLinks delay\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer namedGroups backgroundGroups elementSize metaLinks delay\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @37				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @37			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @37,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:23:39.318677+03:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: [ leftMatrix byMatrix: rightMatrix ] newProcess.',			#stamp : 'YaroslavKormusyn 5/1/2019 18:23',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:28:02.768677+03:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @31				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @31,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:28:06.769677+03:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize \rsuper initialize.\rnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])',			#stamp : 'YaroslavKormusyn 5/1/2019 18:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:28:06.776677+03:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize \rsuper initialize.\rnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])',			#stamp : 'YaroslavKormusyn 5/1/2019 18:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize \rsuper initialize.\rnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])',			#stamp : 'YaroslavKormusyn 5/1/2019 18:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:50:08.070677+03:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | self ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(currentLeftRow).\t\r\tleftRowIndexLink control: #before.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:withDelay:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 18:04',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | nowProcessingElementIndex model: { value . rightColumnIndexLink } ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(value).\t\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 18:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:50:18.012677+03:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | nowProcessingElementIndex model: { value . rightColumnIndexLink } ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(value).\t\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 18:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | nowProcessingElementIndex model: { value . rightColumnIndexLink } ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(value).\t\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self halt.self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 18:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:51:55.141677+03:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'delay:',			#protocol : #'as yet unclassified',			#sourceCode : 'delay: delayTime\rdelay := delayTime ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T18:51:55.147677+03:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'delay:',			#protocol : #'as yet unclassified',			#sourceCode : 'delay: delayTime\rdelay := delayTime ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:51',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'delay:',			#protocol : #accessing,			#sourceCode : 'delay: delayTime\rdelay := delayTime ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:02:14.296677+03:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\t"leftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | nowProcessingElementIndex model: { value . rightColumnIndexLink } ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(value).\t\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrixAnimated:\r\t\toption: #write."\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self halt.self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 18:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | currentLeftRow := value. nowProcessingElementIndex model: { value . currentRightColumn } ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(value).\t\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:02',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:05:26.425677+03:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink metaObject: [ :value | currentLeftRow := value. nowProcessingElementIndex model: { value . currentRightColumn } ].\r\tleftRowIndexLink selector: #value:.\t\r\tleftRowIndexLink arguments: #(value).\t\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:02',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.nowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\t\r\t\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\t\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:06:11.189677+03:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize \rsuper initialize.\rnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])',			#stamp : 'YaroslavKormusyn 5/1/2019 18:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.',			#stamp : 'YaroslavKormusyn 5/1/2019 19:06',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:12:26.551677+03:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @33				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @33			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @33,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:14:49.905677+03:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.',			#stamp : 'YaroslavKormusyn 5/1/2019 19:06',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself setPositionsForMultiplication.\r\t\r\t\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right)',			#stamp : 'YaroslavKormusyn 5/1/2019 19:14',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:15:40.333677+03:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself setPositionsForMultiplication.\r\t\r\t\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right)',			#stamp : 'YaroslavKormusyn 5/1/2019 19:14',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\t\t\t\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right)\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself setPositionsForMultiplication.',			#stamp : 'YaroslavKormusyn 5/1/2019 19:15',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:15:46.358677+03:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\t\t\t\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right)\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself setPositionsForMultiplication.',			#stamp : 'YaroslavKormusyn 5/1/2019 19:15',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\t self\r\t\tadd: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself setPositionsForMultiplication',			#stamp : 'YaroslavKormusyn 5/1/2019 19:15',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:26:10.204677+03:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\t self\r\t\tadd: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself setPositionsForMultiplication',			#stamp : 'YaroslavKormusyn 5/1/2019 19:15',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcurrentLeftRow := currentRightColumn := 0.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\t',			#stamp : 'YaroslavKormusyn 5/1/2019 19:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:26:52.093677+03:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'leftMatrix rightMatrix resultMatrix currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @37				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @37			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @37,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:27:40.623677+03:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 18:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\t\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself setPositionsForMultiplication composer\r\t\tmove: #leftMarker\r\t\tbelow: #left.\r\t\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:27',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:37:03.216677+03:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.nowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\t\r\t\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\t\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value. ].\r\tresultMatrixLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\t\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:37:08.471677+03:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value. ].\r\tresultMatrixLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\t\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:39:02.455677+03:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\t\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:40:54.301677+03:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:40:54.343677+03:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:40:54.430677+03:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'leftMatrix rightMatrix resultMatrix currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'leftMatrix rightMatrix resultMatrix currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @43				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @43			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @43,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:40:54.549677+03:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer namedGroups backgroundGroups elementSize metaLinks delay\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'process composer namedGroups backgroundGroups elementSize metaLinks delay\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @33				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @33			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @33,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:44:45.603677+03:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\t\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself setPositionsForMultiplication composer\r\t\tmove: #leftMarker\r\t\tbelow: #left.\r\t\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:27',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself \r\t\tmove: #leftMarker\r\t\tbelow: #left.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:45:13.929677+03:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself \r\t\tmove: #leftMarker\r\t\tbelow: #left.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:45:55.604677+03:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:45',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:46:46.510677+03:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:45',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer group: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:48:10.946677+03:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: [ leftMatrix byMatrix: rightMatrix ] newProcess.',			#stamp : 'YaroslavKormusyn 5/1/2019 18:23',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\rprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tprocess resume.\r\tself setPositionsForMultiplication.\r\tself\r\t\tsetUpMenuWithProcess: process.\r\t\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 19:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:49:58.934677+03:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\t\t\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: #byMatrix:\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: #byMatrixAnimated:withDelay:visualizer:\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:39',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method|\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:50:50.193677+03:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method|\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself halt.\r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\tleftMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\tleftMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\t"Here value takes a : at the end, because you are passing a parameter (your temp)"\r\trightMarkerLinkBefore arguments: #(value).\t"specifies arguments to pass to your selector, value being the temporary variable value here)"\r\trightMarkerLinkBefore control: #before.\t"possible values: before, instead, after - either executes before, instead or after the variable access"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:52:00.946677+03:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tself deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModels: {value} ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModels: {value} ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter}\r\t"leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker"',			#stamp : 'YaroslavKormusyn 5/1/2019 19:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModel: value ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModel: value ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink. rightColumnIndexLink .leftMarkerLinkBefore .leftMarkerLinkAfter .leftSavedMarkerLink .rightMarkerLinkBefore. rightMarkerLinkAfter .resultMatrixLink .transposedLeftMatrixLink }',			#stamp : 'YaroslavKormusyn 5/1/2019 19:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:52:07.193677+03:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModel: value ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | self selectModel: value ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink. rightColumnIndexLink .leftMarkerLinkBefore .leftMarkerLinkAfter .leftSavedMarkerLink .rightMarkerLinkBefore. rightMarkerLinkAfter .resultMatrixLink .transposedLeftMatrixLink }',			#stamp : 'YaroslavKormusyn 5/1/2019 19:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 19:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T19:52:15.330677+03:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter leftSavedMarkerLink rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 19:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 19:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:05:48.832677+03:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'delay:',			#protocol : #accessing,			#sourceCode : 'delay: delayTime\rdelay := delayTime ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:51',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'delay:',			#protocol : #accessing,			#sourceCode : 'delay: delayTime\r\tdelay := Delay forSeconds: delayTime',			#stamp : 'YaroslavKormusyn 5/1/2019 20:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:07:21.069677+03:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 19:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value. process suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:07',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:10:31.989677+03:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value. process suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter metaObject: [ :value | self selectModel: value ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:07',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter metaObject: [ :value | self selectModel: value. delay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter metaObject: [ :value | self selectModel: value. delay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:11:42.840677+03:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter metaObject: [ :value | self selectModel: value. delay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter metaObject: [ :value | self selectModel: value. delay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:10',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:11',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:12:03.719677+03:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:11',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:12',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:19:51.222677+03:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:12',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | self highlightModel: value.delay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.delay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:30:12.607677+03:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | self highlightModel: value.delay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.delay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix \r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix \r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:30:43.562677+03:00' ],		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result transposed newNode sum currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker priorityColumn |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0. ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:31:47.193677+03:00' ],		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result transposed newNode sum currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker priorityColumn |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0. ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:30',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:31',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:32:38.882677+03:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\thead := tail := COOSparseMatrixNode new rightNeighbour: nil.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:31',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult first: ((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\t\t\t\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:32',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:34:11.056677+03:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult first: ((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\t\t\t\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\ttail rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\t\t\ttail := newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\thead rightNeighbour leftNeighbour: nil.\r\tresult\r\t\tfirst: head rightNeighbour;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:32',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:34:30.207677+03:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:34:37.908677+03:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode head tail sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:37:22.863677+03:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\rprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tprocess resume.\r\tself setPositionsForMultiplication.\r\tself\r\t\tsetUpMenuWithProcess: process.\r\t\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 19:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\rprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\r\tprocess resume.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself\r\t\tsetUpMenuWithProcess: process.\r\t\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:39:18.965677+03:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\rprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\r\tprocess resume.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself\r\t\tsetUpMenuWithProcess: process.\r\t\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tprocess resume.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:41:45.441677+03:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setHighlightsOn:inMethod:',			#protocol : #'as yet unclassified',			#sourceCode : 'setHighlightsOn: matrixInstance inMethod: method\r|leftMarkerHighlightLink rightMarkerHighlightLink|\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:41',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:41:45.450677+03:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setHighlightsOn:inMethod:',			#protocol : #'as yet unclassified',			#sourceCode : 'setHighlightsOn: matrixInstance inMethod: method\r|leftMarkerHighlightLink rightMarkerHighlightLink|\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:41',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setHighlightsOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setHighlightsOn: matrixInstance inMethod: method\r|leftMarkerHighlightLink rightMarkerHighlightLink|\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:41',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:44:03.296677+03:00' ],		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setHighlightsOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setHighlightsOn: matrixInstance inMethod: method\r|leftMarkerHighlightLink rightMarkerHighlightLink|\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:41',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setHighlightsOn:inMethod:',			#protocol : #'as yet unclassified',			#sourceCode : 'setHighlightsOn: matrixInstance inMethod: method\r|leftMarkerHighlightLink rightMarkerHighlightLink|\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:41',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:44:03.297677+03:00' ],		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setHighlightsOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setHighlightsOn: matrixInstance inMethod: method\r|leftMarkerHighlightLink rightMarkerHighlightLink|\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:41',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:48:39.518677+03:00' ],		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r|leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast method|\r\r\tmethod := #byMatrix:.\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\t\t\r\t\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:48:39.527677+03:00' ],		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r|leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast method|\r\r\tmethod := #byMatrix:.\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\t\t\r\t\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r|leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast method|\r\r\tmethod := #byMatrix:.\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\t\t\r\t\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:50:34.264677+03:00' ],		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix \r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix \r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:30',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast method |\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/1/2019 20:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:50:37.352677+03:00' ],		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast method |\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/1/2019 20:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/1/2019 20:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:50:46.054677+03:00' ],		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r|leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast method|\r\r\tmethod := #byMatrix:.\rleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\t\t\r\t\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.',			#stamp : 'YaroslavKormusyn 5/1/2019 20:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t\r\t| leftMarkerHighlightLink rightMarkerHighlightLink leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\t\r\t\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:50:55.171677+03:00' ],		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t\r\t| leftMarkerHighlightLink rightMarkerHighlightLink leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\t\r\t\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t|  leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink  transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:51:45.918677+03:00' ],		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tprocess resume.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:39',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:52:50.484677+03:00' ],		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setMultiInitLinksOn: matrixInstance\rself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 20:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:52:50.490677+03:00' ],		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setMultiInitLinksOn: matrixInstance\rself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 20:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\rself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 20:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:53:50.047677+03:00' ],		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:53',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:54:54.596677+03:00' ],		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:54:54.641677+03:00' ],		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:54:54.692677+03:00' ],		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'leftMatrix rightMatrix resultMatrix currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'leftMatrix rightMatrix resultMatrix currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @43				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @43			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @43,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:54:54.741677+03:00' ],		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'process composer namedGroups backgroundGroups elementSize metaLinks delay\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'process composer namedGroups backgroundGroups elementSize metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @35				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @35			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @35,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:55:41.605677+03:00' ],		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:51',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:55',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:57:17.535677+03:00' ],		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #private,			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 20:57',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T20:57:54.676677+03:00' ],		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:55',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\t"semaphore wait."\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:57',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:08:59.684677+03:00' ],		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t|  leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink  transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 20:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\t\t\r\t\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | leftMatrixMarker := value ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\t\rmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t\r\t\trightMarkerLinkInit := MetaLink new.\r\t\trightMarkerLinkInit\r\t\tmetaObject: [ :value | rightMatrixMarker := value ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\t\rmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t\r\t\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\t\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:11:40.916677+03:00' ],		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\t\t\r\t\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | leftMatrixMarker := value ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\t\rmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t\r\t\trightMarkerLinkInit := MetaLink new.\r\t\trightMarkerLinkInit\r\t\tmetaObject: [ :value | rightMatrixMarker := value ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\t\rmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t\r\t\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\t\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:08',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit metaObject: [ :value | leftMatrixMarker := value ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | rightMatrixMarker := value ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:11',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:11:54.010677+03:00' ],		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\t"semaphore wait."\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 20:57',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 21:11',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:14:12.539677+03:00' ],		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\tmetaLinks := OrderedCollection new.',			#stamp : 'YaroslavKormusyn 5/1/2019 15:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\tmetaLinks := OrderedCollection new.\r\tsemaphore := Semaphore new.',			#stamp : 'YaroslavKormusyn 5/1/2019 21:14',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:19:54.969677+03:00' ],		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit metaObject: [ :value | leftMatrixMarker := value ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | rightMatrixMarker := value ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:11',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tself halt.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit metaObject: [ :value | leftMatrixMarker := value ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | rightMatrixMarker := value ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:24:35.812677+03:00' ],		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tself halt.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit metaObject: [ :value | leftMatrixMarker := value ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | rightMatrixMarker := value ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMatrixMarker updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tself halt.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit metaObject: [ :value | leftMatrixMarker := value.\r\t\t leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | rightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\t\r\t\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:25:11.564677+03:00' ],		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer group: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 19:46',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\t\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer group: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 21:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:26:45.471677+03:00' ],		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 21:11',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\t"semaphore wait."\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 21:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:42:42.245677+03:00' ],		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\t"semaphore wait."\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 21:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 21:42',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:43:20.418677+03:00' ],		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tself halt.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit metaObject: [ :value | leftMatrixMarker := value.\r\t\t leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | rightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\t\r\t\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\t\r\t\t\tself halt.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:44:22.307677+03:00' ],		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\t\r\t\t\tself halt.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T21:44:57.920677+03:00' ],		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer',			#stamp : 'YaroslavKormusyn 5/1/2019 21:42',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:23:41.420677+03:00' ],		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'leftMatrix rightMatrix resultMatrix currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @43				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @43				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @43			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @43,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:23:48.075677+03:00' ],		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #LILSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #LILSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LILSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LILSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LILSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:23:48.122677+03:00' ],		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #TWSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #TWSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:23:48.176677+03:00' ],		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'MatrixOperationVisualizer subclass: #COOSparseMatrixOperationVisualizer\r\tinstanceVariableNames: \'currentLeftRow currentRightColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker nowProcessingElementIndex leftMarkerElement rightMarkerElement\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'MatrixOperationVisualizer'			},			#name : #COOSparseMatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentLeftRow,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #currentRightColumn,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrixMarker,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftSavedMatrixMarker,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrixMarker,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #nowProcessingElementIndex,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMarkerElement,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMarkerElement,					#parent : @37				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @37			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @37,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:23:48.229677+03:00' ],		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'process composer namedGroups backgroundGroups elementSize metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'leftMatrix rightMatrix resultMatrix process composer namedGroups backgroundGroups elementSize metaLinks delay semaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #resultMatrix,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @37				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @37			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @37,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:25:48.247677+03:00' ],		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: leftMatrix by: rightMatrix\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: left by: right\rleftMatrix := left.\rrightMatrix := right.\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 23:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:28:23.127677+03:00' ],		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/1/2019 20:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | self updateResultWith: value. Transcript show: \'updated first in result\';cr ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | self updateResultWith: value. Transcript show: \'updated last in result\';cr ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/1/2019 23:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.513677+03:00' ],		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.549677+03:00' ],		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.584677+03:00' ],		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.616677+03:00' ],		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.649677+03:00' ],		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.687677+03:00' ],		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.726677+03:00' ],		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'withAll:',			#protocol : #'as yet unclassified',			#sourceCode : 'withAll: aCollection\r\t| list |\r\tlist := ((1 to: aCollection size)\r\t\tcollect: [ :rowIndex | \r\t\t\t(1 to: (aCollection at: rowIndex) size)\r\t\t\t\tcollect: [ :colIndex | \r\t\t\t\t\tCOOSparseMatrixNode\r\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\tcolumn: colIndex\r\t\t\t\t\t\tvalue: ((aCollection at: rowIndex) at: colIndex) ]\r\t\t\t\tthenReject: [ :node | node value = 0 or: [ node value isNil ] ] ]) asOrderedCollection.\r\tlist := list inject: OrderedCollection new into: [ :array :each | array , each ].\r\t(list at: 1) rightNeighbour: (list at: 2).\r\tlist at: list size put: ((list at: list size) leftNeighbour: (list at: list size - 1)).\r\t(2 to: list size - 1)\r\t\tdo:\r\t\t\t[ :index | (list at: index) rightNeighbour: (list at: index + 1) leftNeighbour: (list at: index - 1) ].\r\tfirst := list at: 1.\r\tlast := list at: list size',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.875677+03:00' ],		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 21:14',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:17.987677+03:00' ],		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:26',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.019677+03:00' ],		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:26',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.048677+03:00' ],		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:26',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.092677+03:00' ],		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:26',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.130677+03:00' ],		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:26',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.169677+03:00' ],		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'withAll:',			#protocol : #'as yet unclassified',			#sourceCode : 'withAll: aCollection\r\t| list |\r\tlist := ((1 to: aCollection size)\r\t\tcollect: [ :rowIndex | \r\t\t\t(1 to: (aCollection at: rowIndex) size)\r\t\t\t\tcollect: [ :colIndex | \r\t\t\t\t\tCOOSparseMatrixNode\r\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\tcolumn: colIndex\r\t\t\t\t\t\tvalue: ((aCollection at: rowIndex) at: colIndex) ]\r\t\t\t\tthenReject: [ :node | node value = 0 or: [ node value isNil ] ] ]) asOrderedCollection.\r\tlist := list inject: OrderedCollection new into: [ :array :each | array , each ].\r\t(list at: 1) rightNeighbour: (list at: 2).\r\tlist at: list size put: ((list at: list size) leftNeighbour: (list at: list size - 1)).\r\t(2 to: list size - 1)\r\t\tdo:\r\t\t\t[ :index | (list at: index) rightNeighbour: (list at: index + 1) leftNeighbour: (list at: index - 1) ].\r\tfirst := list at: 1.\r\tlast := list at: list size',			#stamp : 'YaroslavKormusyn 5/1/2019 23:26',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.201677+03:00' ],		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:26',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.245677+03:00' ],		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.281677+03:00' ],		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.316677+03:00' ],		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'removeAt:at:',			#protocol : #'as yet unclassified',			#sourceCode : 'removeAt: rowIndex at: columnIndex\r\t| marker |\r\t(self validAt: rowIndex at: columnIndex)\r\t\tifFalse: [SubscriptOutOfBounds signal: \'Invalid index\'].\r\tself isEmpty\r\t\tifTrue: [ ^ self ].\r\t\r\t( first row = rowIndex ) & ( first column = columnIndex )\r\t\tifTrue: [ first rightNeighbour isNotNil\r\t\t\t\t\tifTrue: [ first rightNeighbour leftNeighbour: nil. \r\t\t\t\t\t\t\tfirst := first rightNeighbour]\r\t\t\t\t\tifFalse: [ first := nil.\r\t\t\t\t\t\t\tlast := nil ] ].\r\t\r\t( last row = rowIndex ) & ( last column = columnIndex )\r\t\tifTrue: [ last leftNeighbour isNotNil\r\t\t\t\t\tifTrue: [ last leftNeighbour rightNeighbour: nil. \r\t\t\t\t\t\t\tlast := last leftNeighbour ]\r\t\t\t\t\tifFalse: [ last := nil.\r\t\t\t\t\t\t\tfirst := nil ] ].\r\t\r\tmarker := first .\r\t[(marker rightNeighbour isNotNil) and: [(marker rightNeighbour row < rowIndex)]]\r\t\t\t\t\t\twhileTrue: [ marker := marker rightNeighbour ].\r\t\r\t(marker rightNeighbour isNotNil and: [marker rightNeighbour row = rowIndex])\r\t\tifTrue: [\r\t\t\t[(marker rightNeighbour isNotNil) and: [ (marker rightNeighbour row = rowIndex) and: [(marker rightNeighbour column < columnIndex)]]]\r\t\t\t\t\t\twhileTrue: [ marker := marker rightNeighbour ]]\r\t\tifFalse: [ ^ self ].\r\t(marker rightNeighbour isNotNil and: [marker rightNeighbour row = rowIndex and: [(marker rightNeighbour column < columnIndex)]])\r\tifTrue: [\r\t\tmarker leftNeighbour rightNeighbour: marker rightNeighbour.\r\t\tmarker rightNeighbour leftNeighbour: marker leftNeighbour].\r\t^ self',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.351677+03:00' ],		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'withAll:',			#protocol : #'as yet unclassified',			#sourceCode : 'withAll: aCollection\r\t| list |\r\tlist := ((1 to: aCollection size)\r\t\tcollect: [ :rowIndex | \r\t\t\t(1 to: (aCollection at: rowIndex) size)\r\t\t\t\tcollect: [ :colIndex | \r\t\t\t\t\tCOOSparseMatrixNode\r\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\tcolumn: colIndex\r\t\t\t\t\t\tvalue: ((aCollection at: rowIndex) at: colIndex) ]\r\t\t\t\tthenReject: [ :node | node value = 0 or: [ node value isNil ] ] ]) asOrderedCollection.\r\tlist := list inject: OrderedCollection new into: [ :array :each | array , each ].\r\t(list at: 1) rightNeighbour: (list at: 2).\r\tlist at: list size put: ((list at: list size) leftNeighbour: (list at: list size - 1)).\r\t(2 to: list size - 1)\r\t\tdo:\r\t\t\t[ :index | (list at: index) rightNeighbour: (list at: index + 1) leftNeighbour: (list at: index - 1) ].\r\tfirst := list at: 1.\r\tlast := list at: list size',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.383677+03:00' ],		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'at:at:put:',			#protocol : #'as yet unclassified',			#sourceCode : 'at: rowIndex at: columnIndex put: aValue\r\t| leftNeighbour rightNeighbour newNode |\r\t(self validAt: rowIndex at: columnIndex)\r\t\tifFalse: [ SubscriptOutOfBounds signal: \'Invalid index.\' ].\r\taValue = 0\r\t\tifTrue: [ ^ self removeAt: rowIndex at: columnIndex ].\r\tnewNode := COOSparseMatrixNode row: rowIndex column: columnIndex value: aValue.\r\tself isEmpty\r\t\tifTrue: [ first := newNode.\r\t\t\tlast := newNode.\r\t\t\t^ self ].\r\t(newNode row < first row or: [ newNode row = first row and: [ newNode column < first column ] ])\r\t\tifTrue: [ first leftNeighbour: newNode.\r\t\t\tnewNode rightNeighbour: first.\r\t\t\tfirst := newNode.\r\t\t\t^ self ].\r\t(newNode row > last row or: [ newNode row = last row and: [ newNode column > last column ] ])\r\t\tifTrue: [ last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: last.\r\t\t\tlast := newNode.\r\t\t\t^ self ].\r\tleftNeighbour := first.\r\tleftNeighbour row = rowIndex & (leftNeighbour column = columnIndex)\r\t\tifTrue: [ leftNeighbour value: aValue.\r\t\t\t^ self ].\r\t[ leftNeighbour rightNeighbour isNotNil\r\t\tand: [ leftNeighbour rightNeighbour row < rowIndex or: [ leftNeighbour rightNeighbour row = rowIndex and: [ leftNeighbour rightNeighbour column < columnIndex ] ] ] ]\r\t\twhileTrue: [ leftNeighbour := leftNeighbour rightNeighbour ].\r\t(leftNeighbour rightNeighbour row = rowIndex and: [ leftNeighbour rightNeighbour column = columnIndex ])\r\t\tifTrue: [ leftNeighbour rightNeighbour value: aValue.\r\t\t\t^ self ].\r\trightNeighbour := leftNeighbour rightNeighbour.\r\tnewNode rightNeighbour: rightNeighbour leftNeighbour: leftNeighbour.\r\trightNeighbour leftNeighbour: newNode.\r\tleftNeighbour rightNeighbour: newNode',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.466677+03:00' ],		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.503677+03:00' ],		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.544677+03:00' ],		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.585677+03:00' ],		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.615677+03:00' ],		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.650677+03:00' ],		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'at:at:put:',			#protocol : #'as yet unclassified',			#sourceCode : 'at: rowIndex at: columnIndex put: aValue\r\t| leftNeighbour rightNeighbour newNode |\r\t(self validAt: rowIndex at: columnIndex)\r\t\tifFalse: [ SubscriptOutOfBounds signal: \'Invalid index.\' ].\r\taValue = 0\r\t\tifTrue: [ ^ self removeAt: rowIndex at: columnIndex ].\r\tnewNode := COOSparseMatrixNode row: rowIndex column: columnIndex value: aValue.\r\tself isEmpty\r\t\tifTrue: [ first := newNode.\r\t\t\tlast := newNode.\r\t\t\t^ self ].\r\t(newNode row < first row or: [ newNode row = first row and: [ newNode column < first column ] ])\r\t\tifTrue: [ first leftNeighbour: newNode.\r\t\t\tnewNode rightNeighbour: first.\r\t\t\tfirst := newNode.\r\t\t\t^ self ].\r\t(newNode row > last row or: [ newNode row = last row and: [ newNode column > last column ] ])\r\t\tifTrue: [ last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: last.\r\t\t\tlast := newNode.\r\t\t\t^ self ].\r\tleftNeighbour := first.\r\tleftNeighbour row = rowIndex & (leftNeighbour column = columnIndex)\r\t\tifTrue: [ leftNeighbour value: aValue.\r\t\t\t^ self ].\r\t[ leftNeighbour rightNeighbour isNotNil\r\t\tand: [ leftNeighbour rightNeighbour row < rowIndex or: [ leftNeighbour rightNeighbour row = rowIndex and: [ leftNeighbour rightNeighbour column < columnIndex ] ] ] ]\r\t\twhileTrue: [ leftNeighbour := leftNeighbour rightNeighbour ].\r\t(leftNeighbour rightNeighbour row = rowIndex and: [ leftNeighbour rightNeighbour column = columnIndex ])\r\t\tifTrue: [ leftNeighbour rightNeighbour value: aValue.\r\t\t\t^ self ].\r\trightNeighbour := leftNeighbour rightNeighbour.\r\tnewNode rightNeighbour: rightNeighbour leftNeighbour: leftNeighbour.\r\trightNeighbour leftNeighbour: newNode.\r\tleftNeighbour rightNeighbour: newNode',			#stamp : 'YaroslavKormusyn 5/1/2019 21:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.684677+03:00' ],		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.717677+03:00' ],		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'removeAt:at:',			#protocol : #'as yet unclassified',			#sourceCode : 'removeAt: rowIndex at: columnIndex\r\t| marker |\r\t(self validAt: rowIndex at: columnIndex)\r\t\tifFalse: [SubscriptOutOfBounds signal: \'Invalid index\'].\r\tself isEmpty\r\t\tifTrue: [ ^ self ].\r\t\r\t( first row = rowIndex ) & ( first column = columnIndex )\r\t\tifTrue: [ first rightNeighbour isNotNil\r\t\t\t\t\tifTrue: [ first rightNeighbour leftNeighbour: nil. \r\t\t\t\t\t\t\tfirst := first rightNeighbour]\r\t\t\t\t\tifFalse: [ first := nil.\r\t\t\t\t\t\t\tlast := nil ] ].\r\t\r\t( last row = rowIndex ) & ( last column = columnIndex )\r\t\tifTrue: [ last leftNeighbour isNotNil\r\t\t\t\t\tifTrue: [ last leftNeighbour rightNeighbour: nil. \r\t\t\t\t\t\t\tlast := last leftNeighbour ]\r\t\t\t\t\tifFalse: [ last := nil.\r\t\t\t\t\t\t\tfirst := nil ] ].\r\t\r\tmarker := first .\r\t[(marker rightNeighbour isNotNil) and: [(marker rightNeighbour row < rowIndex)]]\r\t\t\t\t\t\twhileTrue: [ marker := marker rightNeighbour ].\r\t\r\t(marker rightNeighbour isNotNil and: [marker rightNeighbour row = rowIndex])\r\t\tifTrue: [\r\t\t\t[(marker rightNeighbour isNotNil) and: [ (marker rightNeighbour row = rowIndex) and: [(marker rightNeighbour column < columnIndex)]]]\r\t\t\t\t\t\twhileTrue: [ marker := marker rightNeighbour ]]\r\t\tifFalse: [ ^ self ].\r\t(marker rightNeighbour isNotNil and: [marker rightNeighbour row = rowIndex and: [(marker rightNeighbour column < columnIndex)]])\r\tifTrue: [\r\t\tmarker leftNeighbour rightNeighbour: marker rightNeighbour.\r\t\tmarker rightNeighbour leftNeighbour: marker leftNeighbour].\r\t^ self',			#stamp : 'YaroslavKormusyn 5/1/2019 21:45',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.774677+03:00' ],		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.806677+03:00' ],		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.877677+03:00' ],		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.911677+03:00' ],		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:24',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.949677+03:00' ],		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:46',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:18.983677+03:00' ],		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:46',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.020677+03:00' ],		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:46',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.054677+03:00' ],		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:46',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.088677+03:00' ],		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:46',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.120677+03:00' ],		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:46',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.156677+03:00' ],		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'at:at:put:',			#protocol : #'as yet unclassified',			#sourceCode : 'at: rowIndex at: columnIndex put: aValue\r\t| leftNeighbour rightNeighbour newNode |\r\t(self validAt: rowIndex at: columnIndex)\r\t\tifFalse: [ SubscriptOutOfBounds signal: \'Invalid index.\' ].\r\taValue = 0\r\t\tifTrue: [ ^ self removeAt: rowIndex at: columnIndex ].\r\tnewNode := COOSparseMatrixNode row: rowIndex column: columnIndex value: aValue.\r\tself isEmpty\r\t\tifTrue: [ first := newNode.\r\t\t\tlast := newNode.\r\t\t\t^ self ].\r\t(newNode row < first row or: [ newNode row = first row and: [ newNode column < first column ] ])\r\t\tifTrue: [ first leftNeighbour: newNode.\r\t\t\tnewNode rightNeighbour: first.\r\t\t\tfirst := newNode.\r\t\t\t^ self ].\r\t(newNode row > last row or: [ newNode row = last row and: [ newNode column > last column ] ])\r\t\tifTrue: [ last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: last.\r\t\t\tlast := newNode.\r\t\t\t^ self ].\r\tleftNeighbour := first.\r\tleftNeighbour row = rowIndex & (leftNeighbour column = columnIndex)\r\t\tifTrue: [ leftNeighbour value: aValue.\r\t\t\t^ self ].\r\t[ leftNeighbour rightNeighbour isNotNil\r\t\tand: [ leftNeighbour rightNeighbour row < rowIndex or: [ leftNeighbour rightNeighbour row = rowIndex and: [ leftNeighbour rightNeighbour column < columnIndex ] ] ] ]\r\t\twhileTrue: [ leftNeighbour := leftNeighbour rightNeighbour ].\r\t(leftNeighbour rightNeighbour row = rowIndex and: [ leftNeighbour rightNeighbour column = columnIndex ])\r\t\tifTrue: [ leftNeighbour rightNeighbour value: aValue.\r\t\t\t^ self ].\r\trightNeighbour := leftNeighbour rightNeighbour.\r\tnewNode rightNeighbour: rightNeighbour leftNeighbour: leftNeighbour.\r\trightNeighbour leftNeighbour: newNode.\r\tleftNeighbour rightNeighbour: newNode',			#stamp : 'YaroslavKormusyn 5/1/2019 21:46',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.190677+03:00' ],		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'removeAt:at:',			#protocol : #'as yet unclassified',			#sourceCode : 'removeAt: rowIndex at: columnIndex\r\t| marker |\r\t(self validAt: rowIndex at: columnIndex)\r\t\tifFalse: [SubscriptOutOfBounds signal: \'Invalid index\'].\r\tself isEmpty\r\t\tifTrue: [ ^ self ].\r\t\r\t( first row = rowIndex ) & ( first column = columnIndex )\r\t\tifTrue: [ first rightNeighbour isNotNil\r\t\t\t\t\tifTrue: [ first rightNeighbour leftNeighbour: nil. \r\t\t\t\t\t\t\tfirst := first rightNeighbour]\r\t\t\t\t\tifFalse: [ first := nil.\r\t\t\t\t\t\t\tlast := nil ] ].\r\t\r\t( last row = rowIndex ) & ( last column = columnIndex )\r\t\tifTrue: [ last leftNeighbour isNotNil\r\t\t\t\t\tifTrue: [ last leftNeighbour rightNeighbour: nil. \r\t\t\t\t\t\t\tlast := last leftNeighbour ]\r\t\t\t\t\tifFalse: [ last := nil.\r\t\t\t\t\t\t\tfirst := nil ] ].\r\t\r\tmarker := first .\r\t[(marker rightNeighbour isNotNil) and: [(marker rightNeighbour row < rowIndex)]]\r\t\t\t\t\t\twhileTrue: [ marker := marker rightNeighbour ].\r\t\r\t(marker rightNeighbour isNotNil and: [marker rightNeighbour row = rowIndex])\r\t\tifTrue: [\r\t\t\t[(marker rightNeighbour isNotNil) and: [ (marker rightNeighbour row = rowIndex) and: [(marker rightNeighbour column < columnIndex)]]]\r\t\t\t\t\t\twhileTrue: [ marker := marker rightNeighbour ]]\r\t\tifFalse: [ ^ self ].\r\t(marker rightNeighbour isNotNil and: [marker rightNeighbour row = rowIndex and: [(marker rightNeighbour column < columnIndex)]])\r\tifTrue: [\r\t\tmarker leftNeighbour rightNeighbour: marker rightNeighbour.\r\t\tmarker rightNeighbour leftNeighbour: marker leftNeighbour].\r\t^ self',			#stamp : 'YaroslavKormusyn 5/1/2019 21:46',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.230677+03:00' ],		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 23:23',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.287677+03:00' ],		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'byMatrix:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrix: aCOOSparseMatrix\r\t| result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\t\r\ttransposed := aCOOSparseMatrix transpose.\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ leftMatrixMarker isNotNil or: [ rightMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ leftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMatrixMarker := transposed first ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ rightMatrixMarker := rightMatrixMarker rightNeighbour ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ leftMatrixMarker := leftMatrixMarker rightNeighbour ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ sum := sum + (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0 ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0 ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/1/2019 23:26',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.359677+03:00' ],		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.401677+03:00' ],		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.437677+03:00' ],		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.479677+03:00' ],		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.509677+03:00' ],		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.539677+03:00' ],		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.575677+03:00' ],		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'withAll:',			#protocol : #'as yet unclassified',			#sourceCode : 'withAll: aCollection\r\t| list |\r\tlist := ((1 to: aCollection size)\r\t\tcollect: [ :rowIndex | \r\t\t\t(1 to: (aCollection at: rowIndex) size)\r\t\t\t\tcollect: [ :colIndex | \r\t\t\t\t\tCOOSparseMatrixNode\r\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\tcolumn: colIndex\r\t\t\t\t\t\tvalue: ((aCollection at: rowIndex) at: colIndex) ]\r\t\t\t\tthenReject: [ :node | node value = 0 or: [ node value isNil ] ] ]) asOrderedCollection.\r\tlist := list inject: OrderedCollection new into: [ :array :each | array , each ].\r\t(list at: 1) rightNeighbour: (list at: 2).\r\tlist at: list size put: ((list at: list size) leftNeighbour: (list at: list size - 1)).\r\t(2 to: list size - 1)\r\t\tdo:\r\t\t\t[ :index | (list at: index) rightNeighbour: (list at: index + 1) leftNeighbour: (list at: index - 1) ].\r\tfirst := list at: 1.\r\tlast := list at: list size',			#stamp : 'YaroslavKormusyn 5/1/2019 21:43',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.651677+03:00' ],		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.681677+03:00' ],		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.711677+03:00' ],		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #copy,			#protocol : #'as yet unclassified',			#sourceCode : 'copy\r^ self class row: row column: column value: value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.756677+03:00' ],		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrixNode',				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value\r\t^ value ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.796677+03:00' ],		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.835677+03:00' ],		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:29:19.868677+03:00' ],		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'removeAt:at:',			#protocol : #'as yet unclassified',			#sourceCode : 'removeAt: rowIndex at: columnIndex\r\t| marker |\r\t(self validAt: rowIndex at: columnIndex)\r\t\tifFalse: [SubscriptOutOfBounds signal: \'Invalid index\'].\r\tself isEmpty\r\t\tifTrue: [ ^ self ].\r\t\r\t( first row = rowIndex ) & ( first column = columnIndex )\r\t\tifTrue: [ first rightNeighbour isNotNil\r\t\t\t\t\tifTrue: [ first rightNeighbour leftNeighbour: nil. \r\t\t\t\t\t\t\tfirst := first rightNeighbour]\r\t\t\t\t\tifFalse: [ first := nil.\r\t\t\t\t\t\t\tlast := nil ] ].\r\t\r\t( last row = rowIndex ) & ( last column = columnIndex )\r\t\tifTrue: [ last leftNeighbour isNotNil\r\t\t\t\t\tifTrue: [ last leftNeighbour rightNeighbour: nil. \r\t\t\t\t\t\t\tlast := last leftNeighbour ]\r\t\t\t\t\tifFalse: [ last := nil.\r\t\t\t\t\t\t\tfirst := nil ] ].\r\t\r\tmarker := first .\r\t[(marker rightNeighbour isNotNil) and: [(marker rightNeighbour row < rowIndex)]]\r\t\t\t\t\t\twhileTrue: [ marker := marker rightNeighbour ].\r\t\r\t(marker rightNeighbour isNotNil and: [marker rightNeighbour row = rowIndex])\r\t\tifTrue: [\r\t\t\t[(marker rightNeighbour isNotNil) and: [ (marker rightNeighbour row = rowIndex) and: [(marker rightNeighbour column < columnIndex)]]]\r\t\t\t\t\t\twhileTrue: [ marker := marker rightNeighbour ]]\r\t\tifFalse: [ ^ self ].\r\t(marker rightNeighbour isNotNil and: [marker rightNeighbour row = rowIndex and: [(marker rightNeighbour column < columnIndex)]])\r\tifTrue: [\r\t\tmarker leftNeighbour rightNeighbour: marker rightNeighbour.\r\t\tmarker rightNeighbour leftNeighbour: marker leftNeighbour].\r\t^ self',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:35:01.170677+03:00' ],		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 21:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink resultMatrixUpdateLinkLast method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"set a one-time metalink to update the result view and uninstall itself"\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr.\r\t\t\t\tresultMatrixUpdateLinkLast uninstall ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:35',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:35:21.644677+03:00' ],		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink resultMatrixUpdateLinkLast method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"set a one-time metalink to update the result view and uninstall itself"\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr.\r\t\t\t\tresultMatrixUpdateLinkLast uninstall ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:35',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink resultMatrixUpdateLinkLast method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\t"set a one-time metalink to update the result view and uninstall itself"\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr.\r\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:35',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:41:50.388677+03:00' ],		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink resultMatrixUpdateLinkLast method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\t"set a one-time metalink to update the result view and uninstall itself"\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr.\r\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:35',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink resultMatrixUpdateLinkLast method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value.\r\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\t\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:41',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:42:31.511677+03:00' ],		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink resultMatrixUpdateLinkLast method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value.\r\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\t\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:41',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink resultMatrixUpdateLinkLast method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value.\r\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:42',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:43:04.624677+03:00' ],		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn2:',			#protocol : #'as yet unclassified',			#sourceCode : 'setMultiInitLinksOn2: matrixInstance\r|resultMatrixUpdateLinkLast|\r"set a one-time metalink to update the result view and uninstall itself"\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr.\r\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\t',			#stamp : 'YaroslavKormusyn 5/1/2019 23:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:43:04.628677+03:00' ],		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn2:',			#protocol : #'as yet unclassified',			#sourceCode : 'setMultiInitLinksOn2: matrixInstance\r|resultMatrixUpdateLinkLast|\r"set a one-time metalink to update the result view and uninstall itself"\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr.\r\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\t',			#stamp : 'YaroslavKormusyn 5/1/2019 23:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn2:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn2: matrixInstance\r|resultMatrixUpdateLinkLast|\r"set a one-time metalink to update the result view and uninstall itself"\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr.\r\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write.\r\t',			#stamp : 'YaroslavKormusyn 5/1/2019 23:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:43:17.037677+03:00' ],		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink resultMatrixUpdateLinkLast method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink metaObject: [ :value | resultMatrix := value.\r\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:42',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiInitLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiInitLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkInit rightMarkerLinkInit leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedLeftMatrixLink method |\r\tmethod := #byMatrix:.\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\tresultMatrix := value.\r\t\t\tsemaphore signal.\r\t\t\tprocess suspend ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: method\r\t\toption: #write.\r\ttransposedLeftMatrixLink := MetaLink new.\r\ttransposedLeftMatrixLink metaObject: [ :value | leftMatrix := value ].\r\ttransposedLeftMatrixLink selector: #value:.\r\ttransposedLeftMatrixLink arguments: #(value).\r\ttransposedLeftMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedLeftMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: method\r\t\toption: #write.\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: method\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkInit := MetaLink new.\r\tleftMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\tleftMatrixMarker := value.\r\t\t\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\t\t\tleftMarkerLinkInit uninstall ].\r\tleftMarkerLinkInit selector: #value:.\r\tleftMarkerLinkInit arguments: #(value).\r\tleftMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkInit\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkInit := MetaLink new.\r\trightMarkerLinkInit\r\t\tmetaObject: [ :value | \r\t\t\trightMatrixMarker := value.\r\t\t\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\t\t\trightMarkerLinkInit uninstall ].\r\trightMarkerLinkInit selector: #value:.\r\trightMarkerLinkInit arguments: #(value).\r\trightMarkerLinkInit control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkInit\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\tleftMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | self deselectModel: value ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :value | \r\t\t\tself selectModel: value.\r\t\t\trightMarkerElement updateModelAndRedraw: value.\r\t\t\tdelay wait ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedLeftMatrixLink}',			#stamp : 'YaroslavKormusyn 5/1/2019 23:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:43:45.433677+03:00' ],		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: left by: right\rleftMatrix := left.\rrightMatrix := right.\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 23:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: left by: right\r\tleftMatrix := left.\r\trightMatrix := right.\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setMultiInitLinksOn2: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 23:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:48:04.859677+03:00' ],		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #'as yet unclassified',			#sourceCode : 'initializeView\r',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:48:04.861677+03:00' ],		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #'as yet unclassified',			#sourceCode : 'initializeView\r',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #initialization,			#sourceCode : 'initializeView\r',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:48:28.197677+03:00' ],		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #'as yet unclassified',			#sourceCode : 'initializeView ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:48:28.199677+03:00' ],		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #'as yet unclassified',			#sourceCode : 'initializeView ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #initialization,			#sourceCode : 'initializeView ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:48:45.908677+03:00' ],		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #initialization,			#sourceCode : 'initializeView ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #initialization,			#sourceCode : 'initializeView\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\t',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:48:49.062677+03:00' ],		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\t\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer group: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 21:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer group: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:48:55.665677+03:00' ],		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeMultiplicationView,			#protocol : #initialization,			#sourceCode : 'initializeMultiplicationView\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:49:15.741677+03:00' ],		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeMultiplicationView,			#protocol : #initialization,			#sourceCode : 'initializeMultiplicationView\rself subclassResponsibility \r\t',			#stamp : 'YaroslavKormusyn 5/1/2019 23:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:49:21.858677+03:00' ],		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #initialization,			#sourceCode : 'initializeView\r',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeView,			#protocol : #initialization,			#sourceCode : 'initializeView\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 23:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:49:36.775677+03:00' ],		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: left by: right\r\tleftMatrix := left.\r\trightMatrix := right.\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setMultiInitLinksOn2: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 23:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: left by: right\r\tleftMatrix := left.\r\trightMatrix := right.\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\t\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself initializeMultiplicationView.\r\tself setPositionsForMultiplication.\r\tself setMultiInitLinksOn2: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 23:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-01T23:49:48.392677+03:00' ],		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: left by: right\r\tleftMatrix := left.\r\trightMatrix := right.\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\t\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself initializeMultiplicationView.\r\tself setPositionsForMultiplication.\r\tself setMultiInitLinksOn2: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 23:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: left by: right\r\tleftMatrix := left.\r\trightMatrix := right.\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\tself setMultiInitLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\tself setLinksForMultiplicationOn: leftMatrix.\r\tself initializeMultiplicationView.\r\tself setMultiInitLinksOn2: leftMatrix.\r\tprocess resume.\r\tsemaphore wait.\r\t\r\tself setPositionsForMultiplication.\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/1/2019 23:49',			#package : #LNU-SparseMatrix		}	}}