OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:17:07.366687+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.5l4c9t85ihx7gd5t31eb5q337', '737' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForRightMatrixOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForRightMatrixOn: matrixInstance inMethod: methodName\r|transposedRightMatrixLink|\rtransposedRightMatrixLink := MetaLink new.\r\ttransposedRightMatrixLink\r\t\tmetaObject: [ :value | rightMatrix := value ].\r\ttransposedRightMatrixLink selector: #value:.\r\ttransposedRightMatrixLink arguments: #(value).\r\ttransposedRightMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedRightMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: methodName\r\t\toption: #write.',			#stamp : 'YaroslavKormusyn 5/4/2019 23:04',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForRightMatrixOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForRightMatrixOn: matrixInstance inMethod: methodName\r\t| transposedRightMatrixLink |\r\t"reset the right matrix according to the algorithm in the method"\r\ttransposedRightMatrixLink := MetaLink new.\r\ttransposedRightMatrixLink\r\t\tmetaObject: [ :value | rightMatrix := value ].\r\ttransposedRightMatrixLink selector: #value:.\r\ttransposedRightMatrixLink arguments: #(value).\r\ttransposedRightMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedRightMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: methodName\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/4/2019 23:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:17:32.770687+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'updated first in result -> 2nd rec link\';\r\t\t\t\t\t\tcr ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\t\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/4/2019 23:09',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value. ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/4/2019 23:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:18:16.646687+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedRightMatrixLink method sumLink |\r\tmethod := #byMatrix:.\r\tself setMultiLinksForCurrProcElementIndexOn: matrixInstance inMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\t\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t\t\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow:\r\t\t\t\t\t\t\t\'highlight \'\r\t\t\t\t\t\t\t\t, (leftMatrixMarker row @ leftMatrixMarker column) asString\r\t\t\t\t\t\t\t\t, \'&\'\r\t\t\t\t\t\t\t\t, (rightMatrixMarker row @ rightMatrixMarker column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'deselect left \' , (value row @ value column) asString;\r\t\t\t\t\t\tcr ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select left \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'deselect right \' , (value row @ value column) asString;\r\t\t\t\t\t\tcr ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select right \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedRightMatrixLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedRightMatrixLink method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow:\r\t\t\t\t\t\t\t\'highlight \'\r\t\t\t\t\t\t\t\t, (leftMatrixMarker row @ leftMatrixMarker column) asString\r\t\t\t\t\t\t\t\t, \'&\'\r\t\t\t\t\t\t\t\t, (rightMatrixMarker row @ rightMatrixMarker column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'deselect left \' , (value row @ value column) asString;\r\t\t\t\t\t\tcr ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select left \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'deselect right \' , (value row @ value column) asString;\r\t\t\t\t\t\tcr ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select right \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedRightMatrixLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:20:19.457687+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedRightMatrixLink method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow:\r\t\t\t\t\t\t\t\'highlight \'\r\t\t\t\t\t\t\t\t, (leftMatrixMarker row @ leftMatrixMarker column) asString\r\t\t\t\t\t\t\t\t, \'&\'\r\t\t\t\t\t\t\t\t, (rightMatrixMarker row @ rightMatrixMarker column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'deselect left \' , (value row @ value column) asString;\r\t\t\t\t\t\tcr ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select left \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'deselect right \' , (value row @ value column) asString;\r\t\t\t\t\t\tcr ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tTranscript\r\t\t\t\t\t\tshow: \'select right \' , (element row @ element column) asString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedRightMatrixLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedRightMatrixLink method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.\r\t\t\t\t\t ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.]].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedRightMatrixLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:20',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:21:52.293687+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t| leftRowIndexLink rightColumnIndexLink leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter resultMatrixLink transposedRightMatrixLink method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.\r\t\t\t\t\t ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value.]].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftRowIndexLink.\r\t\t\trightColumnIndexLink.\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tresultMatrixLink.\r\t\t\ttransposedRightMatrixLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:20',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t|  leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:21',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:24:55.443687+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t|  leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{\r\t\t\tleftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:21',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksOn:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.sumLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:25:14.002687+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForRightMatrixOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForRightMatrixOn: matrixInstance inMethod: methodName\r\t| transposedRightMatrixLink |\r\t"reset the right matrix according to the algorithm in the method"\r\ttransposedRightMatrixLink := MetaLink new.\r\ttransposedRightMatrixLink\r\t\tmetaObject: [ :value | rightMatrix := value ].\r\ttransposedRightMatrixLink selector: #value:.\r\ttransposedRightMatrixLink arguments: #(value).\r\ttransposedRightMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedRightMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: methodName\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/4/2019 23:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForRightMatrixOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForRightMatrixOn: matrixInstance inMethod: methodName\r\t| transposedRightMatrixLink |\r\t"reset the right matrix according to the algorithm in the method"\r\ttransposedRightMatrixLink := MetaLink new.\r\ttransposedRightMatrixLink\r\t\tmetaObject: [ :value | rightMatrix := value ].\r\ttransposedRightMatrixLink selector: #value:.\r\ttransposedRightMatrixLink arguments: #(value).\r\ttransposedRightMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: transposedRightMatrixLink\r\t\ttoTemporaryNamed: #transposed\r\t\tinMethod: methodName\r\t\toption: #write.\r\t\tmetaLinks\r\t\tadd: transposedRightMatrixLink ',			#stamp : 'YaroslavKormusyn 5/4/2019 23:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:26:09.481687+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value. ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/4/2019 23:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\t\tmetaLinks\r\t\taddAll: { resultMatrixUpdateLinkFirst .resultMatrixUpdateLinkLast } ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\t\tmetaLinks\r\t\tadd:resultMatrixLink',			#stamp : 'YaroslavKormusyn 5/4/2019 23:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:26:35.597687+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForCurrProcElementIndexOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForCurrProcElementIndexOn: matrixInstance inMethod: methodName\r"Set links for the index in label \'Now processing\'"\r\t| leftRowIndexLink rightColumnIndexLink |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: methodName\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: methodName\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/4/2019 23:06',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setMultiLinksForCurrProcElementIndexOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setMultiLinksForCurrProcElementIndexOn: matrixInstance inMethod: methodName\r\t"Set links for the index in label \'Now processing\'"\r\r\t| leftRowIndexLink rightColumnIndexLink |\r\tleftRowIndexLink := MetaLink new.\r\tleftRowIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentLeftRow := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{value.\r\t\t\t\t\tcurrentRightColumn}.\r\t\t\tnowProcessingElementIndex update ].\r\tleftRowIndexLink selector: #value:.\r\tleftRowIndexLink arguments: #(value).\r\tleftRowIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: leftRowIndexLink\r\t\ttoTemporaryNamed: #currentLeftRow\r\t\tinMethod: methodName\r\t\toption: #write.\r\trightColumnIndexLink := MetaLink new.\r\trightColumnIndexLink\r\t\tmetaObject: [ :value | \r\t\t\tcurrentRightColumn := value.\r\t\t\tnowProcessingElementIndex\r\t\t\t\tmodel:\r\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\tvalue}.\r\t\t\tnowProcessingElementIndex update ].\r\trightColumnIndexLink selector: #value:.\r\trightColumnIndexLink arguments: #(value).\r\trightColumnIndexLink control: #after.\r\tmatrixInstance\r\t\tlink: rightColumnIndexLink\r\t\ttoTemporaryNamed: #currentRightColumn\r\t\tinMethod: methodName\r\t\toption: #write.\r\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{leftRowIndexLink.\r\t\t\t\t\trightColumnIndexLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:27:46.919687+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated first in result\';\r\t\t\t\tcr ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/4/2019 00:01',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'deprecated - compatibility layer',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\t| leftMarkerHighlightLink rightMarkerHighlightLink resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\tleftMarkerHighlightLink := MetaLink new.\r\tleftMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\tleftMarkerHighlightLink selector: #value:.\r\tleftMarkerHighlightLink arguments: #(value).\r\tleftMarkerHighlightLink control: #after.\r\trightMarkerHighlightLink := MetaLink new.\r\trightMarkerHighlightLink\r\t\tmetaObject: [ :value | \r\t\t\tself highlightModel: value.\r\t\t\tdelay wait ].\r\trightMarkerHighlightLink selector: #value:.\r\trightMarkerHighlightLink arguments: #(value).\r\trightMarkerHighlightLink control: #after.\r\tleftMatrixMarker\r\t\tlink: leftMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\trightMatrixMarker\r\t\tlink: rightMarkerHighlightLink\r\t\ttoSlotNamed: #value\r\t\toption: #read.\r\tresultMatrixUpdateLinkFirst := MetaLink new.\r\tresultMatrixUpdateLinkFirst\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated first in result\';\r\t\t\t\tcr ].\r\tresultMatrixUpdateLinkFirst selector: #value:.\r\tresultMatrixUpdateLinkFirst arguments: #(value).\r\tresultMatrixUpdateLinkFirst control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkFirst\r\t\ttoSlotNamed: #first\r\t\toption: #write.\r\tresultMatrixUpdateLinkLast := MetaLink new.\r\tresultMatrixUpdateLinkLast\r\t\tmetaObject: [ :value | \r\t\t\tself updateResultWith: value.\r\t\t\tTranscript\r\t\t\t\tshow: \'updated last in result\';\r\t\t\t\tcr ].\r\tresultMatrixUpdateLinkLast selector: #value:.\r\tresultMatrixUpdateLinkLast arguments: #(value).\r\tresultMatrixUpdateLinkLast control: #after.\r\tresultMatrix\r\t\tlink: resultMatrixUpdateLinkLast\r\t\ttoSlotNamed: #last\r\t\toption: #write',			#stamp : 'YaroslavKormusyn 5/4/2019 00:01',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:28:11.277687+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer group: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #initialization,			#sourceCode : 'setPositionsForMultiplication\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer group: #labels',			#stamp : 'YaroslavKormusyn 5/1/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:28:53.478687+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initializeAdditionView,			#protocol : #initialization,			#sourceCode : 'initializeAdditionView\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tself add: nowProcessingElementIndex.\r\tself group: #nowProcessing.\r\tself add: leftMarkerElement.\r\tself group: #leftMarker.\r\tself add: rightMarkerElement.\r\tself group: #rightMarker.\r\tself\r\t\tselectModels:\r\t\t\t{leftMarkerElement model.\r\t\t\trightMarkerElement model}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:30:12.010687+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result head tail newNode continue |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\'].\r\t(rowNumber = aCOOMatrix rowNumber and: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tresult := self class rows: rowNumber columns: columnNumber.\r\tleftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ head := leftMatrixMarker copy.\r\t\t\ttail := head.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ head := rightMatrixMarker copy.\r\t\t\t\t\ttail := head.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ tail := head := COOSparseMatrixNode row: 0 column: 0 value: 0 ]\r\t\t\t\t\t\tifFalse: [ head := rightMatrixMarker copy value: rightMatrixMarker value + leftMatrixMarker value.\r\t\t\t\t\t\t\ttail := head ].\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ continue := true ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ tail rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\ttail := newNode.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\ttail rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: tail.\r\t\t\ttail := newNode ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\ttail rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: tail.\r\t\t\ttail := newNode ].\r\r\t"remove the dummy head if zero"\r\thead value = 0\r\t\tifTrue: [ head := head rightNeighbour ].\r\tresult\r\t\tfirst: head;\r\t\tlast: tail.\r\t^ result',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result head tail newNode continue |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tleftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tresult := self class rows: rowNumber columns: columnNumber.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ head := leftMatrixMarker copy.\r\t\t\ttail := head.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ head := rightMatrixMarker copy.\r\t\t\t\t\ttail := head.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ tail := head := COOSparseMatrixNode row: 0 column: 0 value: 0 ]\r\t\t\t\t\t\tifFalse: [ head := rightMatrixMarker copy\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value.\r\t\t\t\t\t\t\ttail := head ].\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ continue := true ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ tail rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\ttail := newNode.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\ttail rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: tail.\r\t\t\ttail := newNode ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\ttail rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: tail.\r\t\t\ttail := newNode ].\r\r\t"remove the dummy head if zero"\r\thead value = 0\r\t\tifTrue: [ head := head rightNeighbour ].\r\tresult\r\t\tfirst: head;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/4/2019 23:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:33:02.027687+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'addAnimated:to:',			#protocol : #'as yet unclassified',			#sourceCode : 'addAnimated: left to: right\r\t"remember matrices for reference in links"\r\r\tleftMatrix := left.\r\trightMatrix := right.\r\t"process of multiplication"\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\t"set initial links to initialize the view"\r\r\t"the process runs until all the initialization is done and the view is in its initial state"\r\t[ self setMultiLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/4/2019 23:33',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:33:37.239687+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'add:',			#protocol : #'as yet unclassified',			#sourceCode : 'add: anElement\r\tcomposer view add: anElement',			#stamp : 'YaroslavKormusyn 4/30/2019 20:38',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'add:',			#protocol : #convenience,			#sourceCode : 'add: anElement\r\tcomposer view add: anElement',			#stamp : 'YaroslavKormusyn 4/30/2019 20:38',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:33:52.675687+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModel:',			#protocol : #'as yet unclassified',			#sourceCode : 'deselectModel: model\r\tcomposer deselectModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:07',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModel:',			#protocol : #convenience,			#sourceCode : 'deselectModel: model\r\tcomposer deselectModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:07',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:33:55.739687+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModel:inGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'deselectModel: model inGroup: groupName\r\tcomposer deselectModel: model inGroup: groupName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModel:inGroup:',			#protocol : #convenience,			#sourceCode : 'deselectModel: model inGroup: groupName\r\tcomposer deselectModel: model inGroup: groupName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:33:58.268687+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModels:',			#protocol : #'as yet unclassified',			#sourceCode : 'deselectModels: modelCollection\r\tcomposer deselectModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:36',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModels:',			#protocol : #convenience,			#sourceCode : 'deselectModels: modelCollection\r\tcomposer deselectModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:34:21.748687+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: left with: right result: result\r\tMatrixVisualizer on: left withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: right withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 19:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'deprecated - compatibility layer',			#sourceCode : 'getComposedViewOf: left with: right result: result\r\tMatrixVisualizer on: left withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: right withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 19:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:34:27.601687+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'group:',			#protocol : #'as yet unclassified',			#sourceCode : 'group: aName\r\tcomposer group: aName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:39',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'group:',			#protocol : #convenience,			#sourceCode : 'group: aName\r\tcomposer group: aName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:34:30.116687+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModel:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlightModel: model\r\tcomposer highlightModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:10',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModel:',			#protocol : #convenience,			#sourceCode : 'highlightModel: model\r\tcomposer highlightModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:34:32.455687+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModel:inGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlightModel: model inGroup: groupName\r\tcomposer highlightModel: model inGroup: groupName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:45',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModel:inGroup:',			#protocol : #convenience,			#sourceCode : 'highlightModel: model inGroup: groupName\r\tcomposer highlightModel: model inGroup: groupName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:34:35.570687+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModels:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlightModels: modelCollection\r\tcomposer highlightModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:38',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModels:',			#protocol : #convenience,			#sourceCode : 'highlightModels: modelCollection\r\tcomposer highlightModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:38',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:34:40.064687+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModel:',			#protocol : #'as yet unclassified',			#sourceCode : 'selectModel: model\r\tcomposer selectModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:11',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModel:',			#protocol : #convenience,			#sourceCode : 'selectModel: model\r\tcomposer selectModel: model',			#stamp : 'YaroslavKormusyn 5/1/2019 18:11',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:34:41.808687+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModel:inGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'selectModel: model inGroup: groupName\r\tcomposer selectModel: model inGroup: groupName\r',			#stamp : 'YaroslavKormusyn 4/30/2019 20:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModel:inGroup:',			#protocol : #convenience,			#sourceCode : 'selectModel: model inGroup: groupName\r\tcomposer selectModel: model inGroup: groupName\r',			#stamp : 'YaroslavKormusyn 4/30/2019 20:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:34:44.844687+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModels:',			#protocol : #'as yet unclassified',			#sourceCode : 'selectModels: modelCollection\r\tcomposer selectModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:29',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModels:',			#protocol : #convenience,			#sourceCode : 'selectModels: modelCollection\r\tcomposer selectModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:29',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:35:06.677687+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setLinksForMultiplicationOn:',			#protocol : #'deprecated - compatibility layer',			#sourceCode : 'setLinksForMultiplicationOn: matrixInstance\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:35:12.370687+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #initialization,			#sourceCode : 'setPositionsForMultiplication\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/1/2019 18:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:35:43.021687+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setUpMenuWithProcess:',			#protocol : #'as yet unclassified',			#sourceCode : 'setUpMenuWithProcess: operationProcess\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 20:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setUpMenuWithProcess:',			#protocol : #'build ui',			#sourceCode : 'setUpMenuWithProcess: operationProcess\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 20:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:35:50.963687+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #update,			#protocol : #'as yet unclassified',			#sourceCode : 'update\r\tcomposer view signalUpdate ',			#stamp : 'YaroslavKormusyn 4/30/2019 20:41',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #update,			#protocol : #convenience,			#sourceCode : 'update\r\tcomposer view signalUpdate ',			#stamp : 'YaroslavKormusyn 4/30/2019 20:41',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:35:57.246687+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'updateResultWith:',			#protocol : #'as yet unclassified',			#sourceCode : 'updateResultWith: result\rcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'updateResultWith:',			#protocol : #'build ui',			#sourceCode : 'updateResultWith: result\rcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:36:02.197687+03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #view,			#protocol : #'as yet unclassified',			#sourceCode : 'view \r^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:51',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #view,			#protocol : #accessing,			#sourceCode : 'view \r^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:36:19.754687+03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiplyAnimated: left by: right\r\t"remember matrices for reference in links"\r\r\tleftMatrix := left.\r\trightMatrix := right.\r\t"process of multiplication"\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\t"set initial links to initialize the view"\r\r\t"the process runs until all the initialization is done and the view is in its initial state"\r\t[ self setMultiLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/4/2019 23:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'multiplyAnimated:by:',			#protocol : #animations,			#sourceCode : 'multiplyAnimated: left by: right\r\t"remember matrices for reference in links"\r\r\tleftMatrix := left.\r\trightMatrix := right.\r\t"process of multiplication"\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\t"set initial links to initialize the view"\r\r\t"the process runs until all the initialization is done and the view is in its initial state"\r\t[ self setMultiLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/4/2019 23:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:36:23.876687+03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'addAnimated:to:',			#protocol : #'as yet unclassified',			#sourceCode : 'addAnimated: left to: right\r\t"remember matrices for reference in links"\r\r\tleftMatrix := left.\r\trightMatrix := right.\r\t"process of multiplication"\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\t"set initial links to initialize the view"\r\r\t"the process runs until all the initialization is done and the view is in its initial state"\r\t[ self setMultiLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/4/2019 23:33',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'addAnimated:to:',			#protocol : #animations,			#sourceCode : 'addAnimated: left to: right\r\t"remember matrices for reference in links"\r\r\tleftMatrix := left.\r\trightMatrix := right.\r\t"process of multiplication"\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\t"set initial links to initialize the view"\r\r\t"the process runs until all the initialization is done and the view is in its initial state"\r\t[ self setMultiLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/4/2019 23:33',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:36:47.002687+03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'addAnimated:to:',			#protocol : #animations,			#sourceCode : 'addAnimated: left to: right\r\t"remember matrices for reference in links"\r\r\tleftMatrix := left.\r\trightMatrix := right.\r\t"process of multiplication"\r\tprocess := [ leftMatrix byMatrix: rightMatrix ] newProcess.\r\t"set initial links to initialize the view"\r\r\t"the process runs until all the initialization is done and the view is in its initial state"\r\t[ self setMultiLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/4/2019 23:33',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'addAnimated:to:',			#protocol : #animations,			#sourceCode : 'addAnimated: left to: right\r\t"remember matrices for reference in links"\r\r\tleftMatrix := left.\r\trightMatrix := right.\r\t"process of multiplication"\r\tprocess := [ leftMatrix + rightMatrix ] newProcess.\r\t"set initial links to initialize the view"\r\r\t"the process runs until all the initialization is done and the view is in its initial state"\r\t[ self setAdditionLinksOn: leftMatrix.\r\tprocess resume.\r\tsemaphore wait ] on: Error fork: [ :ex | Error signal: ex ].\r\tself setUpMenuWithProcess: process.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 5/4/2019 23:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:37:26.023687+03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #animations,			#sourceCode : 'setAdditionLinksOn: matrixInstance',			#stamp : 'YaroslavKormusyn 5/4/2019 23:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:37:35.608687+03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #animations,			#sourceCode : 'setAdditionLinksOn: matrixInstance',			#stamp : 'YaroslavKormusyn 5/4/2019 23:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #animations,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/4/2019 23:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:38:03.068687+03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #animations,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/4/2019 23:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\tself subclassResponsibility ',			#stamp : 'YaroslavKormusyn 5/4/2019 23:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:38:27.140687+03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:38',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:48:53.718687+03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result head tail newNode continue |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tleftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tresult := self class rows: rowNumber columns: columnNumber.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ head := leftMatrixMarker copy.\r\t\t\ttail := head.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ head := rightMatrixMarker copy.\r\t\t\t\t\ttail := head.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ tail := head := COOSparseMatrixNode row: 0 column: 0 value: 0 ]\r\t\t\t\t\t\tifFalse: [ head := rightMatrixMarker copy\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value.\r\t\t\t\t\t\t\ttail := head ].\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ continue := true ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ tail rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: tail.\r\t\t\t\t\ttail := newNode.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\ttail rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: tail.\r\t\t\ttail := newNode ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\ttail rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: tail.\r\t\t\ttail := newNode ].\r\r\t"remove the dummy head if zero"\r\thead value = 0\r\t\tifTrue: [ head := head rightNeighbour ].\r\tresult\r\t\tfirst: head;\r\t\tlast: tail.\r\t^ result',			#stamp : 'YaroslavKormusyn 5/4/2019 23:30',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aCOOMatrix\r\t| leftMatrixMarker rightMatrixMarker result newNode continue |\r\t(aCOOMatrix isMemberOf: self class)\r\t\tifFalse: [ Error signal: \'Convert matrix\' ].\r\t(rowNumber = aCOOMatrix rowNumber\r\t\tand: [ columnNumber = aCOOMatrix columnNumber ])\r\t\tifFalse: [ Error signal: \'Matrices must be of same size\' ].\r\tleftMatrixMarker := first.\r\trightMatrixMarker := aCOOMatrix first.\r\tresult := self class rows: rowNumber columns: columnNumber.\r\t(leftMatrixMarker preceeds: rightMatrixMarker)\r\t\tifTrue: [ result first: leftMatrixMarker copy.\r\t\t\tresult last: result first.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\tifTrue: [ result first: rightMatrixMarker copy.\r\t\t\t\t\tresult last: result first.\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ rightMatrixMarker value + leftMatrixMarker value = 0\r\t\t\t\t\t\tifTrue: [ result first: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\t\t\t\t\t\t\tresult last: result first ]\r\t\t\t\t\t\tifFalse: [ result first: (rightMatrixMarker copy\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value + leftMatrixMarker value).\r\t\t\t\t\t\t\tresult last: result first ].\r\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ].\r\t[ leftMatrixMarker isNotNil and: [ rightMatrixMarker isNotNil ] ]\r\t\twhileTrue: [ (leftMatrixMarker preceeds: rightMatrixMarker)\r\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ]\r\t\t\t\tifFalse: [ (leftMatrixMarker follows: rightMatrixMarker)\r\t\t\t\t\t\tifTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: rightMatrixMarker row\r\t\t\t\t\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\t\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour ]\r\t\t\t\t\t\tifFalse: [ (leftMatrixMarker row = rightMatrixMarker row\r\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column = rightMatrixMarker column ])\r\t\t\t\t\t\t\t\tifTrue: [ leftMatrixMarker value + rightMatrixMarker value = 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ continue := true ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\trow: leftMatrixMarker row\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: leftMatrixMarker value + rightMatrixMarker value ].\r\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour ] ] ].\r\t\t\tnewNode isNil\r\t\t\t\tifFalse: [ result last rightNeighbour: newNode.\r\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\tresult last: newNode.\r\t\t\t\t\tnewNode := nil ] ].\r\t[ leftMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: leftMatrixMarker row\r\t\t\t\tcolumn: leftMatrixMarker column\r\t\t\t\tvalue: leftMatrixMarker value.\r\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode ].\r\t[ rightMatrixMarker isNotNil ]\r\t\twhileTrue: [ newNode := COOSparseMatrixNode\r\t\t\t\trow: rightMatrixMarker row\r\t\t\t\tcolumn: rightMatrixMarker column\r\t\t\t\tvalue: rightMatrixMarker value.\r\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\tresult last rightNeighbour: newNode.\r\t\t\tnewNode leftNeighbour: result last.\r\t\t\tresult last: newNode ].\r\r\t"remove the dummy result first if zero"\r\tresult first value = 0\r\t\tifTrue: [ result first: result first rightNeighbour.\r\t\t\tresult first leftNeighbour: nil ].\r\t^ result',			#stamp : 'YaroslavKormusyn 5/4/2019 23:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:54:05.176687+03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\tself\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method.\r\tself setMultiLinksForResultOn: matrixInstance inMethod: method.\r\tself setMultiLinksForRightMatrixOn: matrixInstance inMethod: method.\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:38',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:54',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:55:43.545687+03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormusyn 5/4/2019 23:55',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:58:57.591687+03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeMultiplicationView.\r\t\t\tself setPositionsForMultiplication.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormusyn 5/4/2019 23:55',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksForResultOn:inMethod:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksForResultOn: matrixInstance inMethod: methodName\r\t"Set links for result matrix update on viewer"\r\r\t| resultMatrixLink |\r\tresultMatrixLink := MetaLink new.\r\tresultMatrixLink\r\t\tmetaObject: [ :value | \r\t\t\t| resultMatrixUpdateLinkFirst resultMatrixUpdateLinkLast |\r\t\t\tresultMatrix := value.\r\t\t\t"initialize the view for the updates not to fail"\r\t\t\tself initializeAdditionView.\r\t\t\tself setPositionsForAddition.\r\t\t\tresultMatrixUpdateLinkFirst := MetaLink new.\r\t\t\tresultMatrixUpdateLinkFirst\r\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\tresultMatrixUpdateLinkFirst selector: #value.\r\t\t\tresultMatrixUpdateLinkFirst control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkFirst\r\t\t\t\ttoSlotNamed: #first\r\t\t\t\toption: #write.\r\t\t\tresultMatrixUpdateLinkLast := MetaLink new.\r\t\t\tresultMatrixUpdateLinkLast\r\t\t\t\tmetaObject: [ | newResultUpdateLastLink |\r\t\t\t\t\tself updateResultWith: value.\r\t\t\t\t\t"uninstall the initial block which suspends the process"\r\t\t\t\t\tresultMatrixUpdateLinkLast uninstall.\r\t\t\t\t\t"replace it with a new one without the suspend"\r\t\t\t\t\tnewResultUpdateLastLink := MetaLink new.\r\t\t\t\t\tnewResultUpdateLastLink\r\t\t\t\t\t\tmetaObject: [ self updateResultWith: value ].\r\t\t\t\t\tnewResultUpdateLastLink selector: #value.\r\t\t\t\t\tnewResultUpdateLastLink control: #after.\r\t\t\t\t\tvalue\r\t\t\t\t\t\tlink: newResultUpdateLastLink\r\t\t\t\t\t\ttoSlotNamed: #last\r\t\t\t\t\t\toption: #write.\r\t\t\t\t\t"signal to root multiplication method that we finished initializing"\r\t\t\t\t\tsemaphore signal.\r\t\t\t\t\t"wait for input before starting the operation"\r\t\t\t\t\tprocess suspend ].\r\t\t\tresultMatrixUpdateLinkLast selector: #value.\r\t\t\tresultMatrixUpdateLinkLast control: #after.\r\t\t\tvalue\r\t\t\t\tlink: resultMatrixUpdateLinkLast\r\t\t\t\ttoSlotNamed: #last\r\t\t\t\toption: #write.\r\t\t\tmetaLinks\r\t\t\t\taddAll:\r\t\t\t\t\t{resultMatrixUpdateLinkFirst.\r\t\t\t\t\tresultMatrixUpdateLinkLast} ].\r\tresultMatrixLink selector: #value:.\r\tresultMatrixLink arguments: #(value).\r\tresultMatrixLink control: #after.\r\tmatrixInstance\r\t\tlink: resultMatrixLink\r\t\ttoTemporaryNamed: #result\r\t\tinMethod: methodName\r\t\toption: #write.\r\tmetaLinks add: resultMatrixLink',			#stamp : 'YaroslavKormusyn 5/4/2019 23:58',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-04T23:59:19.928687+03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForAddition,			#protocol : #initialization,			#sourceCode : 'setPositionsForAddition\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer group: #labels',			#stamp : 'YaroslavKormusyn 5/4/2019 23:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-05T00:13:55.431687+03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\tsumLink := MetaLink new.\r\tsumLink\r\t\tmetaObject: [ :sumValue | \r\t\t\tsumValue ~= 0\r\t\t\t\tifTrue: [ self\r\t\t\t\t\t\thighlightModels:\r\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\tdelay wait ] ].\r\tsumLink selector: #value:.\r\tsumLink arguments: #(value).\r\tsumLink control: #after.\r\tmatrixInstance\r\t\tlink: sumLink\r\t\ttoTemporaryNamed: #sum\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\tleftMatrixMarker := element.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\trightMatrixMarker := element.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/4/2019 23:54',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\t\r\t\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| leftMarkerHighlightLink |\r\t\t\tleftMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\tleftMarkerHighlightLink := MetaLink new.\r\t\t\tleftMarkerHighlightLink metaObject: [ self highlightModel: element. leftMarkerHighlightLink uninstall].\r\t\t\tleftMarkerHighlightLink selector: #value.\r\t\t\tleftMarkerHighlightLink control: #after.\r\t\t\telement link: leftMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: leftMarkerHighlightLink.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t|rightMarkerHighlightLink|\r\t\t\trightMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\trightMarkerHighlightLink := MetaLink new.\r\t\t\trightMarkerHighlightLink metaObject: [ self highlightModel: element. rightMarkerHighlightLink uninstall].\r\t\t\trightMarkerHighlightLink selector: #value.\r\t\t\trightMarkerHighlightLink control: #after.\r\t\t\telement link: rightMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: rightMarkerHighlightLink .\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/5/2019 00:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-05T00:18:24.303687+03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\t\r\t\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| leftMarkerHighlightLink |\r\t\t\tleftMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\tleftMarkerHighlightLink := MetaLink new.\r\t\t\tleftMarkerHighlightLink metaObject: [ self highlightModel: element. leftMarkerHighlightLink uninstall].\r\t\t\tleftMarkerHighlightLink selector: #value.\r\t\t\tleftMarkerHighlightLink control: #after.\r\t\t\telement link: leftMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: leftMarkerHighlightLink.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t|rightMarkerHighlightLink|\r\t\t\trightMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\trightMarkerHighlightLink := MetaLink new.\r\t\t\trightMarkerHighlightLink metaObject: [ self highlightModel: element. rightMarkerHighlightLink uninstall].\r\t\t\trightMarkerHighlightLink selector: #value.\r\t\t\trightMarkerHighlightLink control: #after.\r\t\t\telement link: rightMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: rightMarkerHighlightLink .\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/5/2019 00:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\r\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| leftMarkerHighlightLink |\r\t\t\tleftMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\tleftMarkerHighlightLink := MetaLink new.\r\t\t\tleftMarkerHighlightLink\r\t\t\t\tmetaObject: [ self highlightModel: element.\r\t\t\t\t\tleftMarkerHighlightLink uninstall ].\r\t\t\tleftMarkerHighlightLink selector: #value.\r\t\t\tleftMarkerHighlightLink control: #after.\r\t\t\telement link: leftMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: leftMarkerHighlightLink.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| rightMarkerHighlightLink |\r\t\t\trightMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\trightMarkerHighlightLink := MetaLink new.\r\t\t\trightMarkerHighlightLink\r\t\t\t\tmetaObject: [ :value |\r\t\t\t\t\tself halt.\r\t\t\t\t\tself highlightModel: element.\r\t\t\t\t\trightMarkerHighlightLink uninstall ].\r\t\t\trightMarkerHighlightLink selector: #value:.\r\t\t\trightMarkerHighlightLink arguments: #(value).\r\t\t\trightMarkerHighlightLink control: #after.\r\t\t\telement link: rightMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: rightMarkerHighlightLink.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/5/2019 00:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-05-05T00:20:03.192687+03:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\r\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| leftMarkerHighlightLink |\r\t\t\tleftMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\tleftMarkerHighlightLink := MetaLink new.\r\t\t\tleftMarkerHighlightLink\r\t\t\t\tmetaObject: [ self highlightModel: element.\r\t\t\t\t\tleftMarkerHighlightLink uninstall ].\r\t\t\tleftMarkerHighlightLink selector: #value.\r\t\t\tleftMarkerHighlightLink control: #after.\r\t\t\telement link: leftMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: leftMarkerHighlightLink.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| rightMarkerHighlightLink |\r\t\t\trightMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\trightMarkerHighlightLink := MetaLink new.\r\t\t\trightMarkerHighlightLink\r\t\t\t\tmetaObject: [ :value |\r\t\t\t\t\tself halt.\r\t\t\t\t\tself highlightModel: element.\r\t\t\t\t\trightMarkerHighlightLink uninstall ].\r\t\t\trightMarkerHighlightLink selector: #value:.\r\t\t\trightMarkerHighlightLink arguments: #(value).\r\t\t\trightMarkerHighlightLink control: #after.\r\t\t\telement link: rightMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: rightMarkerHighlightLink.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/5/2019 00:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setAdditionLinksOn:',			#protocol : #initialization,			#sourceCode : 'setAdditionLinksOn: matrixInstance\r\t| leftMarkerLinkBefore leftMarkerLinkAfter rightMarkerLinkBefore rightMarkerLinkAfter method sumLink |\r\tmethod := #byMatrix:.\r\t"self\r\t\tsetMultiLinksForCurrProcElementIndexOn: matrixInstance\r\t\tinMethod: method."\r\tself setAdditionLinksForResultOn: matrixInstance inMethod: method.\r\t"self setAdditionLinksForRightMatrixOn: matrixInstance inMethod: method."\r\t"set highlights on elements which were added to sum according to algorithm in the method"\r\r\r\t"remove selection from previous marker element"\r\tleftMarkerLinkBefore := MetaLink new.\r\tleftMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\tleftMarkerLinkBefore selector: #value:.\r\tleftMarkerLinkBefore arguments: #(value).\r\tleftMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkBefore\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current marker element"\r\tleftMarkerLinkAfter := MetaLink new.\r\tleftMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| leftMarkerHighlightLink |\r\t\t\tleftMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\tleftMarkerHighlightLink := MetaLink new.\r\t\t\tleftMarkerHighlightLink\r\t\t\t\tmetaObject: [ self highlightModel: element.\r\t\t\t\t\tleftMarkerHighlightLink uninstall ].\r\t\t\tleftMarkerHighlightLink selector: #value.\r\t\t\tleftMarkerHighlightLink control: #after.\r\t\t\telement link: leftMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: leftMarkerHighlightLink.\r\t\t\t"draw the marker element on the view if its the initialization"\r\t\t\tleftMarkerElement isNil\r\t\t\t\tifTrue: [ leftMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\t"select the element and update the view"\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\tleftMarkerLinkAfter selector: #value:.\r\tleftMarkerLinkAfter arguments: #(value).\r\tleftMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: leftMarkerLinkAfter\r\t\ttoTemporaryNamed: #leftMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"remove selection from previous marker element"\r\trightMarkerLinkBefore := MetaLink new.\r\trightMarkerLinkBefore\r\t\tmetaObject: [ :value | \r\t\t\tvalue isNotNil\r\t\t\t\tifTrue: [ self deselectModel: value ] ].\r\trightMarkerLinkBefore selector: #value:.\r\trightMarkerLinkBefore arguments: #(value).\r\trightMarkerLinkBefore control: #before.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkBefore\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\t"select current right matrix marker element"\r\trightMarkerLinkAfter := MetaLink new.\r\trightMarkerLinkAfter\r\t\tmetaObject: [ :element | \r\t\t\t| rightMarkerHighlightLink |\r\t\t\trightMatrixMarker := element.\r\t\t\t"highlights marker if it was copied - most common path in the method"\r\t\t\t"uninstalls itself after one use since the algorithm does not revert"\r\t\t\trightMarkerHighlightLink := MetaLink new.\r\t\t\trightMarkerHighlightLink\r\t\t\t\tmetaObject: [ :value | \r\t\t\t\t\t"check what the stack top after copy is - maybe it has the new object which we\'ll use to bind to value: and highlight both elements"\r\t\t\t\t\tself halt.\r\t\t\t\t\tself highlightModel: element.\r\t\t\t\t\trightMarkerHighlightLink uninstall ].\r\t\t\trightMarkerHighlightLink selector: #value:.\r\t\t\trightMarkerHighlightLink arguments: #(value).\r\t\t\trightMarkerHighlightLink control: #after.\r\t\t\telement link: rightMarkerHighlightLink toMethodNamed: #copy.\r\t\t\tmetaLinks add: rightMarkerHighlightLink.\r\t\t\trightMarkerElement isNil\r\t\t\t\tifTrue: [ rightMarkerElement := (COOSparseMatrixVisualizer new\r\t\t\t\t\t\tgetElementShapeScaled: 5) elementOn: element ].\r\t\t\telement isNotNil\r\t\t\t\tifTrue: [ self selectModel: element.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: element.\r\t\t\t\t\tdelay wait ] ].\r\trightMarkerLinkAfter selector: #value:.\r\trightMarkerLinkAfter arguments: #(value).\r\trightMarkerLinkAfter control: #after.\r\tmatrixInstance\r\t\tlink: rightMarkerLinkAfter\r\t\ttoTemporaryNamed: #rightMatrixMarker\r\t\tinMethod: method\r\t\toption: #write.\r\tmetaLinks\r\t\taddAll:\r\t\t\t{leftMarkerLinkBefore.\r\t\t\tleftMarkerLinkAfter.\r\t\t\trightMarkerLinkBefore.\r\t\t\trightMarkerLinkAfter.\r\t\t\tsumLink}',			#stamp : 'YaroslavKormusyn 5/5/2019 00:20',			#package : #LNU-SparseMatrix		}	}}