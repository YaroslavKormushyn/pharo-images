OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2019-04-30T14:23:43.473881+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.22z7uhxjhp5kymjwznxox718a', '14385' ],		#self : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #LNU-SparseMatrix-Roassal-Extensions,		#affectedPackageName : #LNU-SparseMatrix	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2019-04-30T14:23:50.067881+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpBehaviorCategoryChange {		#oldCategory : #LNU-SparseMatrix,		#newCategory : #LNU-SparseMatrix-Roassal-Extensions,		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'RTAttachPoint subclass: #RTHorizontalRightAttachPoint\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Roassal-Extensions\'',				#superclassName : 'RTAttachPoint'			},			#name : #RTHorizontalRightAttachPoint,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RTHorizontalRightAttachPoint class\r\tinstanceVariableNames: \'\''				},				#name : #'RTHorizontalRightAttachPoint class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RTHorizontalRightAttachPoint,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Roassal-Extensions,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2019-04-30T14:23:53.279881+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpBehaviorCategoryChange {		#oldCategory : #LNU-SparseMatrix,		#newCategory : #LNU-SparseMatrix-Roassal-Extensions,		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'RTAttachPoint subclass: #RTVerticalBottomAttachPoint\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Roassal-Extensions\'',				#superclassName : 'RTAttachPoint'			},			#name : #RTVerticalBottomAttachPoint,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RTVerticalBottomAttachPoint class\r\tinstanceVariableNames: \'\''				},				#name : #'RTVerticalBottomAttachPoint class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RTVerticalBottomAttachPoint,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Roassal-Extensions,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T14:34:11.210881+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := RTLabel text: [:indices |\'Now processing \', indices first, \'@\', indices last ].\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 14:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'AutoDeprecationRefactoring',		#time : DateAndTime [ '2019-04-30T14:47:21.036881+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GtAbstractExampleMethod,				#isMetaSide : false			},			#name : #provider,			#protocol : #accessing-dynamic,			#sourceCode : 'provider \r\tself exists ifFalse: [ ^ nil ].\r\t^ self methodClass isMeta\r\t\tifTrue: [ self methodClass theNonMetaClass ]\r\t\tifFalse: [ self methodClass theNonMetaClass new ]',			#stamp : '',			#package : #GToolkit-Examples		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GtAbstractExampleMethod,				#isMetaSide : false			},			#name : #provider,			#protocol : #accessing-dynamic,			#sourceCode : 'provider\r\tself exists\r\t\tifFalse: [ ^ nil ].\r\t^ self methodClass isMeta\r\t\tifTrue: [ self methodClass theNonMetaClass ]\r\t\tifFalse: [ self methodClass instanceSide new ]',			#stamp : 'AutoDeprecationRefactoring 4/30/2019 14:47',			#package : #GToolkit-Examples		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T14:52:52.715881+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := RTLabel text: [:indices |\'Now processing \', indices first, \'@\', indices last ].\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 14:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', indices first, \'@\', indices last ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 14:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T14:59:43.355881+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', indices first, \'@\', indices last ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 14:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', indices first @ indices last ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 14:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T15:00:12.951881+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', indices first @ indices last ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 14:59',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:00',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T15:02:10.515881+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:00',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \' + (indices first @ indices last) ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:02',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T15:05:09.835881+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \' + (indices first @ indices last) ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:02',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \' + (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T15:05:35.272881+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \' + (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:05',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T15:09:40.441881+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex updateModelAndRedraw: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:05',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex model: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T15:14:09.465881+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock operationWindow resultView resultWindow leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex model: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:09',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock  leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex model: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:14',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T15:14:26.721881+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock  leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\t"resultView := (MatrixVisualizer on: result) view."\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex model: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t"operationWindow := composer view openTitled: \'Multiplication\'.\r\tresultWindow := resultView openTitled: \'Result\'.\r\tcomposer view\r\t\taddMenu: \'Close\'\r\t\tcallback: [ operationWindow createWindowGroup addWindow: resultWindow\r\t\t\toperationProcess terminate.\r\t\t\toperationWindow close\r\t\t\tresultWindow close ]."\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:14',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock  leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex model: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:14',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T15:28:00.611881+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer semaphore |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 15:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:06:48.595881+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix',			#stamp : 'YaroslavKormusyn 4/30/2019 16:06',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:12:08.359881+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix',			#stamp : 'YaroslavKormusyn 4/30/2019 16:06',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t|composer|\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tresultMatrix\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresultMatrix last: resultMatrix first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:12',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:13:24.607881+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'getSelfViewWith:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getSelfViewWith: rightMatrix result: result\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: self withView: composer view.\r\tcomposer group: #left.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\t"composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result."\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:13:28.498881+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock  leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self getSelfViewWith: transposed result: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel text: [:indices |\'Now processing \', (indices first @ indices last) asString ]) elementOn: { currentLeftRow . currentRightColumn }.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex model: {currentLeftRow . currentRightColumn }.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 15:14',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:16:49.304881+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceElementsInGroup: groupName with: matrix\r\tMatrixVisualizer on: matrix withView: view.\r\tself replaceExistingGroup: groupName.\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:16',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:17:04.674881+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceElementsInGroup: groupName with: matrix\r\tMatrixVisualizer on: matrix withView: view.\r\tself replaceExistingGroup: groupName.\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:16',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceElementsInGroup: groupName with: matrix\r\tMatrixVisualizer on: matrix withView: view.\r\tself replaceExistingGroup: groupName.\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:16',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:28:11.820881+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer getComposedViewOf: self with: transposed result: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tself replaceElementsInGroup: #result with: result on: composer ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tself replaceElementsInGroup: #result with: result on: composer.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:28:49.401881+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result\r\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:28:57.281881+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceElementsInGroup: group with: model on: composer\r\tMatrixVisualizer on: model withView: composer view.\r\tcomposer replaceExistingGroup: group.\r\tcomposer view signalUpdate',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:30:15.914881+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'selectModel:inGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'selectModel: model inGroup: group\r\t[ ((self getGroup: group) elementFromModel: model)\r\t\tcolor: Color red ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:30',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:30:25.847881+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'selectModel:inGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'selectModel: model inGroup: group\r\t[ ((self getGroup: group) elementFromModel: model)\r\t\tcolor: Color red ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:30',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'selectModel:inGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'selectModel: model inGroup: group\r\t[ ((self getGroup: group) elementFromModel: model)\r\t\tcolor: Color red ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:30',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:31:23.450881+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'deselectModel:inGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'deselectModel: model inGroup: group\r\t[ ((self getGroup: group) elementFromModel: model) color: Color blue ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:31',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:31:39.270881+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'highlightModel:inGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'highlightModel: model inGroup: group\r\t[ ((self getGroup: group) elementFromModel: model) color: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:31',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:35:17.877881+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself activate: leftMatrixMarker in: #left on: composer.\r\trightMatrixMarker := transposed first.\r\tself activate: rightMatrixMarker in: #right on: composer.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self highlight: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself highlight: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deactivate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeactivate: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tin: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\ton: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: leftMatrixMarker in: #left on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself activate: rightMatrixMarker in: #right on: composer.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\treplaceElementsInGroup: #result\r\t\t\t\t\t\t\t\t\t\twith: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself selectModel: leftMatrixMarker inGroup: #left .\r\trightMatrixMarker := transposed first.\r\tself selectModel: rightMatrixMarker inGroup: #right .\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deselectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer highlightModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deselectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:35',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:35:30.941881+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'activate:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'activate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model) color: Color red]\ron: Error do: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:35:40.622881+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'deactivate:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'deactivate: model in: group on: composer\r\t[((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color blue]on: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:35:43.650881+03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'highlight:in:on:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlight: model in: group on: composer\r\t[ ((composer getGroup: group) elementFromModel: model)\r\t\tcolor: Color yellow ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ].\r\tcomposer view signalUpdate',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:36:02.559881+03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #'as yet unclassified',			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #elementsAsCollection,			#protocol : #utility,			#sourceCode : 'elementsAsCollection\r\t| marker result |\r\tself isEmpty\r\t\tifTrue: [ ^ OrderedCollection new: 0  ].\r\tmarker := self first.\r\tresult := OrderedCollection new.\r\t[ marker isNotNil ]\r\t\twhileTrue: [ result add: marker.\r\t\t\tmarker := marker rightNeighbour ].\r\t^ result',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:37:35.611881+03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:38:18.099881+03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'multiply:by:',			#protocol : #'instance creation',			#sourceCode : 'multiply: leftMatrix by: rightMatrix\r\t| composer innerContext |\r\tcomposer := RTComposer new.\r\tcomposer gap: 35.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'second\'.\r\tinnerContext := [ leftMatrix * rightMatrix ].\r\tinnerContext := innerContext fork.\r\t^ composer view',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'multiply:by:',			#protocol : #'as yet unclassified',			#sourceCode : 'multiply: leftMatrix by: rightMatrix\r\t| composer innerContext |\r\tcomposer := RTComposer new.\r\tcomposer gap: 35.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'second\'.\r\tinnerContext := [ leftMatrix * rightMatrix ].\r\tinnerContext := innerContext fork.\r\t^ composer view',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:38:18.140881+03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'multiply:by:',			#protocol : #'instance creation',			#sourceCode : 'multiply: leftMatrix by: rightMatrix\r\t| composer innerContext |\r\tcomposer := RTComposer new.\r\tcomposer gap: 35.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'second\'.\r\tinnerContext := [ leftMatrix * rightMatrix ].\r\tinnerContext := innerContext fork.\r\t^ composer view',			#stamp : 'CompatibleUserName 4/27/2019 00:07:48',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:40:12.617881+03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself selectModel: leftMatrixMarker inGroup: #left .\r\trightMatrixMarker := transposed first.\r\tself selectModel: rightMatrixMarker inGroup: #right .\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deselectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer highlightModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deselectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left .\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right .\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:35',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\t\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tself selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:40:25.094881+03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t|composer|\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\tresultMatrix\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresultMatrix last: resultMatrix first.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:12',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:40:37.031881+03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tMatrixVisualizer on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tself class on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:43:36.199881+03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\t\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tself selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tself selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tself deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ self deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tself selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:45:07.026881+03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\t| composer |\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 15:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:46:01.689881+03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self class\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:46:22.516881+03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := self class\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:46',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:47:22.671881+03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tself class on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:40',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tself on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:47',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T16:50:33.138881+03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #redrawNamesAndBackgrounds,			#protocol : #'as yet unclassified',			#sourceCode : 'redrawNamesAndBackgrounds',			#stamp : 'YaroslavKormusyn 4/30/2019 16:50',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:01:23.245881+03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesAndBackgroundsFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'redrawNamesAndBackgroundsFor: groupNames\rself removeAllBackgrounds; removeAllNames.\r\tgroupNames do: [ :name |\r\tself setBackgroundColor: (Color gray alpha: 0.2) forGroup: name.\r\tself nameGroup: name as: name]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:01',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:01:45.996881+03:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #redrawNamesAndBackgrounds,			#protocol : #'as yet unclassified',			#sourceCode : 'redrawNamesAndBackgrounds',			#stamp : 'YaroslavKormusyn 4/30/2019 16:50',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:07:34.576881+03:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'setBackgroundColor:forGroup:',			#protocol : #public-background,			#sourceCode : 'setBackgroundColor: aColor forGroup: aName\r\r\t| backgroundBox g outterGap |\r\toutterGap := 5 @ 5.\r\t\r\tbackgroundBox := TRRoundedBoxShape new.\r\tbackgroundBox color: aColor.\r\tbackgroundBox strokeWidth: 0.\r\tbackgroundBox borderRadius: 5.\r\t\r\tg := mapping at: aName.\r\tbackgroundBox translateTo: g center.\r\tbackgroundBox extent: g extent + outterGap.\r\t\r\tview canvas addShape: backgroundBox.\r\tbackgroundBox pushBack.\r\t\r\tbackgrounds add: backgroundBox.\r\t\r\t^ backgroundBox',			#stamp : '',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'setBackgroundColor:forGroup:',			#protocol : #public-background,			#sourceCode : 'setBackgroundColor: aColor forGroup: aName\r\t| backgroundBox g outterGap |\r\toutterGap := 5 @ 5.\r\tbackgroundBox := TRRoundedBoxShape new.\r\tbackgroundBox color: aColor.\r\tbackgroundBox strokeWidth: 0.\r\tbackgroundBox borderRadius: 5.\r\tg := mapping at: aName.\r\tbackgroundBox translateTo: g center.\r\tbackgroundBox extent: g extent + outterGap.\r\tTRConstraint keepExtentOf: backgroundBox like: g plus: outterGap.\r\tview canvas addShape: backgroundBox.\r\tbackgroundBox pushBack.\r\tbackgrounds add: backgroundBox.\r\t^ backgroundBox',			#stamp : 'YaroslavKormusyn 4/30/2019 17:07',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:10:01.732881+03:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'setBackgroundColor:forGroup:',			#protocol : #public-background,			#sourceCode : 'setBackgroundColor: aColor forGroup: aName\r\t| backgroundBox g outterGap |\r\toutterGap := 5 @ 5.\r\tbackgroundBox := TRRoundedBoxShape new.\r\tbackgroundBox color: aColor.\r\tbackgroundBox strokeWidth: 0.\r\tbackgroundBox borderRadius: 5.\r\tg := mapping at: aName.\r\tbackgroundBox translateTo: g center.\r\tbackgroundBox extent: g extent + outterGap.\r\tTRConstraint keepExtentOf: backgroundBox like: g plus: outterGap.\r\tview canvas addShape: backgroundBox.\r\tbackgroundBox pushBack.\r\tbackgrounds add: backgroundBox.\r\t^ backgroundBox',			#stamp : 'YaroslavKormusyn 4/30/2019 17:07',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'setBackgroundColor:forGroup:',			#protocol : #public-background,			#sourceCode : 'setBackgroundColor: aColor forGroup: aName\r\t| backgroundBox g outterGap |\r\toutterGap := 5 @ 5.\r\tbackgroundBox := TRRoundedBoxShape new.\r\tbackgroundBox color: aColor.\r\tbackgroundBox strokeWidth: 0.\r\tbackgroundBox borderRadius: 5.\r\tg := mapping at: aName.\r\tbackgroundBox translateTo: g center.\r\tbackgroundBox extent: g extent + outterGap.\r\t"TRConstraint keepExtentOf: backgroundBox like: g plus: outterGap."\r\tview canvas addShape: backgroundBox.\r\tbackgroundBox pushBack.\r\tbackgrounds add: backgroundBox.\r\t^ backgroundBox',			#stamp : 'YaroslavKormusyn 4/30/2019 17:10',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:10:51.705881+03:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesAndBackgroundsFor:',			#protocol : #'as yet unclassified',			#sourceCode : 'redrawNamesAndBackgroundsFor: groupNames\rself removeAllBackgrounds; removeAllNames.\r\tgroupNames do: [ :name |\r\tself setBackgroundColor: (Color gray alpha: 0.2) forGroup: name.\r\tself nameGroup: name as: name]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:01',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesAndBackgroundsFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawNamesAndBackgroundsFor: groupNames\rself removeAllBackgrounds; removeAllNames.\r\tgroupNames do: [ :name |\r\tself setBackgroundColor: (Color gray alpha: 0.2) forGroup: name.\r\tself nameGroup: name as: name]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:01',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:19:35.291881+03:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #result.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 16:46',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesAndBackgroundsFor: #(#result) ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:19',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:23:22.899881+03:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesAndBackgroundsFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawNamesAndBackgroundsFor: groupNames\rself removeAllBackgrounds; removeAllNames.\r\tgroupNames do: [ :name |\r\tself setBackgroundColor: (Color gray alpha: 0.2) forGroup: name.\r\tself nameGroup: name as: name]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:01',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesAndBackgroundsFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawNamesAndBackgroundsFor: groupNames\r\tself\r\t\tremoveAllBackgrounds;\r\t\tremoveAllNames.\r\tgroupNames\r\t\tdo: [ :name | \r\t\t\tself setBackgroundColor: (Color gray alpha: 0.2) forGroup: name.\r\t\t\tself nameGroup: name as: name asString ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:23',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:24:55.785881+03:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesAndBackgroundsFor: #(#result) ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:19',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups|\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left, #result, #right, #leftMarker, #rightMarker).\r\tbackgroundGroups := #(#left, #result, #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesAndBackgroundsFor: #(#result) ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:25:13.238881+03:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawNamesFor: groupNames\r\tself\r\t\tremoveAllBackgrounds;\r\t\tremoveAllNames.\r\tgroupNames\r\t\tdo: [ :name | \r\t\t\tself nameGroup: name as: name asString ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:25:25.626881+03:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawBackgroundsFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawBackgroundsFor: groupNames\r\tself\r\t\tremoveAllBackgrounds;\r\t\tremoveAllNames.\r\tgroupNames\r\t\tdo: [ :name | \r\t\t\tself setBackgroundColor: (Color gray alpha: 0.2) forGroup: name ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:25:30.276881+03:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawBackgroundsFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawBackgroundsFor: groupNames\r\tself\r\t\tremoveAllBackgrounds;\r\t\tremoveAllNames.\r\tgroupNames\r\t\tdo: [ :name | \r\t\t\tself setBackgroundColor: (Color gray alpha: 0.2) forGroup: name ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawBackgroundsFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawBackgroundsFor: groupNames\r\tself\r\t\tremoveAllBackgrounds.\r\tgroupNames\r\t\tdo:\r\t\t\t[ :name | self setBackgroundColor: (Color gray alpha: 0.2) forGroup: name ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:25:37.286881+03:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawNamesFor: groupNames\r\tself\r\t\tremoveAllBackgrounds;\r\t\tremoveAllNames.\r\tgroupNames\r\t\tdo: [ :name | \r\t\t\tself nameGroup: name as: name asString ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawNamesFor: groupNames\r\tself\r\t\tremoveAllNames.\r\tgroupNames do: [ :name | self nameGroup: name as: name asString ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:26:43.211881+03:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups|\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left, #result, #right, #leftMarker, #rightMarker).\r\tbackgroundGroups := #(#left, #result, #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesAndBackgroundsFor: #(#result) ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left , #result , #right , #leftMarker , #rightMarker).\r\tbackgroundGroups := #(#left , #result , #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups. ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesAndBackgroundsFor: #(#result) ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:26:57.663881+03:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left , #result , #right , #leftMarker , #rightMarker).\r\tbackgroundGroups := #(#left , #result , #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups. ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesAndBackgroundsFor: #(#result) ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesAndBackgroundsFor: #(#result) ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left , #result , #right , #leftMarker , #rightMarker).\r\tbackgroundGroups := #(#left , #result , #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups.] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups. ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:28:26.175881+03:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left , #result , #right , #leftMarker , #rightMarker).\r\tbackgroundGroups := #(#left , #result , #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups.] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups. ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 17:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:41:41.725881+03:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\texistingGroup remove; removeAll.\r\texistingGroup addAll: newGroup elements',			#stamp : '',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\texistingGroup view removeElements: existingGroup elements.\r\texistingGroup removeAll.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormusyn 4/30/2019 17:41',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T17:46:39.943881+03:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\texistingGroup view removeElements: existingGroup elements.\r\texistingGroup removeAll.\r\texistingGroup addAll: newGroup elements',			#stamp : 'YaroslavKormusyn 4/30/2019 17:41',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\t\tself removeGroup: aName.\r\tgroups add: newGroup.\r\tmapping at: aName put: newGroup',			#stamp : 'YaroslavKormusyn 4/30/2019 17:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:06:23.593881+03:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceElementsInGroup: groupName with: matrix\r\tMatrixVisualizer on: matrix withView: view.\r\tself replaceExistingGroup: groupName.\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 16:16',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceElementsInGroup:with:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceElementsInGroup: groupName with: matrix\r\tself removeGroup: groupName.\r\tMatrixVisualizer on: matrix withView: view.\r\tself group: groupName.\r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 18:06',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:06:30.292881+03:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\t\tself removeGroup: aName.\r\tgroups add: newGroup.\r\tmapping at: aName put: newGroup',			#stamp : 'YaroslavKormusyn 4/30/2019 17:46',			#package : #Roassal2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\t\tself removeGroup: aName.\r\tgroups add: newGroup.\r\tmapping at: aName put: newGroup',			#stamp : 'YaroslavKormusyn 4/30/2019 17:46',			#package : #Roassal2		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:06:30.294881+03:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'replaceExistingGroup:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'replaceExistingGroup: aName\r\t"Add to existing group any new elements added to the view"\r\r\t| newGroup existingGroup |\r\tnewGroup := self newElementsAsGroup.\r\texistingGroup := [ mapping at: aName ]\r\t\ton: KeyNotFound\r\t\tdo: [ KeyNotFound signal: \'No group with \' , aName , \' was found\' ].\r\t\tself removeGroup: aName.\r\tgroups add: newGroup.\r\tmapping at: aName put: newGroup',			#stamp : 'YaroslavKormusyn 4/30/2019 17:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:07:47.955881+03:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 18:07',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:13:13.569881+03:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addComposerMenu:process:block:',			#protocol : #'as yet unclassified',			#sourceCode : 'addComposerMenu: composer process: operationProcess block: operationBlock\rcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 18:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:13:13.577881+03:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addComposerMenu:process:block:',			#protocol : #'as yet unclassified',			#sourceCode : 'addComposerMenu: composer process: operationProcess block: operationBlock\rcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 18:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addComposerMenu:process:block:',			#protocol : #adding,			#sourceCode : 'addComposerMenu: composer process: operationProcess block: operationBlock\rcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 18:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:57:00.495881+03:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 18:07',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself addComposerMenu: composer process: operationProcess block: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 18:57',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:57:36.792881+03:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself addComposerMenu: composer process: operationProcess block: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 18:57',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 18:57',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:58:22.727881+03:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawNamesFor: groupNames\r\tself\r\t\tremoveAllNames.\r\tgroupNames do: [ :name | self nameGroup: name as: name asString ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawNamesFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawNamesFor: groupNames\r\tself removeAllNames.\r\tgroupNames do: [ :name | self nameGroup: name as: name asString ].\r\tself groupToExisting: #labels.',			#stamp : 'YaroslavKormusyn 4/30/2019 18:58',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T18:59:18.072881+03:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tself on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 16:47',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tself on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\tself halt.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 18:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:00:05.129881+03:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tself on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\tself halt.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 18:59',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MatrixVisualizer class',				#isMetaSide : true			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: leftMatrix with: rightMatrix result: resultMatrix\r\t| composer |\r\tcomposer := self getComposer.\r\tself on: leftMatrix withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: rightMatrix withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: resultMatrix withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 19:00',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:09:42.913881+03:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawBackgroundsFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawBackgroundsFor: groupNames\r\tself\r\t\tremoveAllBackgrounds.\r\tgroupNames\r\t\tdo:\r\t\t\t[ :name | self setBackgroundColor: (Color gray alpha: 0.2) forGroup: name ]',			#stamp : 'YaroslavKormusyn 4/30/2019 17:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'redrawBackgroundsFor:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'redrawBackgroundsFor: groupNames\r\tself removeAllBackgrounds.\r\tgroupNames\r\t\tdo:\r\t\t\t[ :name | self setBackgroundColor: (Color gray alpha: 0.2) forGroup: name ].\r\t\tself groupToExisting: #labels.',			#stamp : 'YaroslavKormusyn 4/30/2019 19:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:29:38.224881+03:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 18:57',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement \r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 19:29',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:36:02.397881+03:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RTComposer,				#isMetaSide : false			},			#name : #'selectModels:',			#protocol : #'*LNU-SparseMatrix',			#sourceCode : 'selectModels: modelCollection\r\tmodelCollection do: [ :model | \r\t\t[ (self view elementFromModel: model) color: Color red ]\r\t\ton: Error\r\t\tdo: [ :exception | nil ]]. \r\tself view signalUpdate',			#stamp : 'YaroslavKormusyn 4/30/2019 19:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:36:22.998881+03:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement \r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 19:29',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModels: {leftMatrixMarker . rightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 19:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:37:48.340881+03:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModels: {leftMatrixMarker . rightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 19:36',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModels: {leftMatrixMarker . rightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil ifTrue:[\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModels: {leftMatrixMarker . rightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 19:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:50:35.992881+03:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix elementSize\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:51:33.076881+03:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 19:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:52:41.049881+03:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: left with: right result: result\r\tself on: left withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: right withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 19:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:52:51.884881+03:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: left with: right result: result\r\tself on: left withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: right withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 19:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'getComposedViewOf:with:result:',			#protocol : #'as yet unclassified',			#sourceCode : 'getComposedViewOf: left with: right result: result\r\tMatrixVisualizer on: left withView: composer view.\r\tcomposer group: #left.\r\t"add result and new right matrices to the view and update the view"\r\tMatrixVisualizer on: right withView: composer view.\r\tcomposer group: #right.\r\tMatrixVisualizer on: result withView: composer view.\r\tcomposer group: #result.\r\tcomposer move: #left onTheLeftOf: #right.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #right.\r\tcomposer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #left.\r\tcomposer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #result.\r\tcomposer nameGroup: #left as: \'left\'.\r\tcomposer nameGroup: #right as: \'right\'.\r\tcomposer nameGroup: #result as: \'result\'.\r\tcomposer group: #labels.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 19:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:53:26.100881+03:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\rcomposer:= self getComposer.',			#stamp : 'YaroslavKormusyn 4/30/2019 19:53',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:53:26.104881+03:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\rcomposer:= self getComposer.',			#stamp : 'YaroslavKormusyn 4/30/2019 19:53',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\rcomposer:= self getComposer.',			#stamp : 'YaroslavKormusyn 4/30/2019 19:53',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:54:01.505881+03:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\rcomposer:= self getComposer.',			#stamp : 'YaroslavKormusyn 4/30/2019 19:53',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.',			#stamp : 'YaroslavKormusyn 4/30/2019 19:54',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:54:05.359881+03:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #getComposer,			#protocol : #'as yet unclassified',			#sourceCode : 'getComposer\r\tcomposer := RTComposer new.\r\tcomposer view: composer view @ RTZoomableView.\r\tcomposer gap: 35.\r\t^ composer',			#stamp : 'YaroslavKormusyn 4/30/2019 19:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:59:02.596881+03:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix elementSize\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #MatrixOperationVisualizer\r\tinstanceVariableNames: \'composer leftMatrix rightMatrix namedGroups backgroundGroups elementSize\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #MatrixOperationVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @29				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #leftMatrix,					#parent : @29				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #rightMatrix,					#parent : @29				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @29				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @29				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MatrixOperationVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @29				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MatrixOperationVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'MatrixOperationVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @29			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MatrixOperationVisualizer,					#isMetaSide : false				},				#parent : @29,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:59:10.838881+03:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'updateResultWith:',			#protocol : #'as yet unclassified',			#sourceCode : 'updateResultWith: result\rcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:59:42.115881+03:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'namedGroups:',			#protocol : #'as yet unclassified',			#sourceCode : 'namedGroups: aCollection\rnamedGroups := aCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:59:42.122881+03:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'namedGroups:',			#protocol : #'as yet unclassified',			#sourceCode : 'namedGroups: aCollection\rnamedGroups := aCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'namedGroups:',			#protocol : #accessing,			#sourceCode : 'namedGroups: aCollection\rnamedGroups := aCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T19:59:52.448881+03:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'backgroundnamedGroups:',			#protocol : #accessing,			#sourceCode : 'backgroundnamedGroups: aCollection\r\tbackgroundGroups := aCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:00:03.413881+03:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'backgroundGroups:',			#protocol : #accessing,			#sourceCode : 'backgroundGroups: aCollection\r\tbackgroundGroups := aCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:00',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:00:05.088881+03:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'backgroundnamedGroups:',			#protocol : #accessing,			#sourceCode : 'backgroundnamedGroups: aCollection\r\tbackgroundGroups := aCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'backgroundnamedGroups:',			#protocol : #'as yet unclassified',			#sourceCode : 'backgroundnamedGroups: aCollection\r\tbackgroundGroups := aCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:00:05.089881+03:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'backgroundnamedGroups:',			#protocol : #accessing,			#sourceCode : 'backgroundnamedGroups: aCollection\r\tbackgroundGroups := aCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 19:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:03:09.811881+03:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModels: {leftMatrixMarker . rightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil ifTrue:[\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModels: {leftMatrixMarker . rightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 19:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModels: { rightMatrixMarker . leftMatrixMarker }.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:03:19.172881+03:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModels: { rightMatrixMarker . leftMatrixMarker }.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:03:56.943881+03:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil ifTrue: [rightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:04:41.451881+03:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil ifTrue: [rightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil ifTrue: [rightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil ifTrue: [leftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:04',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:26:28.870881+03:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex namedGroups backgroundGroups |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tcomposer := MatrixVisualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\trightMatrixMarker := transposed first.\r\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tnamedGroups := #(#left #result #right #leftMarker #rightMarker).\r\tbackgroundGroups := #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: 1) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tcomposer replaceElementsInGroup: #result with: result.\r\t\t\t\t\t\t\tcomposer move: #result onTheRightOf: #right.\r\t\t\t\t\t\t\tcomposer redrawNamesFor: namedGroups.\r\t\t\t\t\t\t\tcomposer redrawBackgroundsFor: backgroundGroups ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tcomposer replaceElementsInGroup: #result with: result.\r\tcomposer move: #result onTheRightOf: #right.\r\tcomposer redrawNamesFor: namedGroups.\r\tcomposer redrawBackgroundsFor: backgroundGroups ].\r\toperationProcess := operationBlock newProcess.\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\tcomposer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ].\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 18:06',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix\r\tself byMatrixAnimated: aCOOSparseMatrix withDelay: 1',			#stamp : 'YaroslavKormusyn 4/30/2019 20:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:28:10.701881+03:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker transposed newNode sum operationProcess operationBlock leftMarkerElement rightMarkerElement nowProcessingElementIndex visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ leftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil ifTrue: [rightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil ifTrue: [leftMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: leftMatrixMarker].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:04',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result  transposed newNode sum operationProcess operationBlock  visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ \r\t\t| currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\t\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:28:18.060881+03:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result  transposed newNode sum operationProcess operationBlock  visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ \r\t\t| currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\t\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result transposed newNode sum operationProcess operationBlock visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ \r\t\t| currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:29:09.397881+03:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModels:',			#protocol : #'as yet unclassified',			#sourceCode : 'selectModels: modelCollection\r\tcomposer selectModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:29',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:36:10.147881+03:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModels:',			#protocol : #'as yet unclassified',			#sourceCode : 'deselectModels: modelCollection\r\tcomposer deselectModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:38:30.962881+03:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModels:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlightModels: modelCollection\r\tcomposer highlightModels: modelCollection',			#stamp : 'YaroslavKormusyn 4/30/2019 20:38',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:38:54.819881+03:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'add:',			#protocol : #'as yet unclassified',			#sourceCode : 'add: anElement\r\tcomposer view add: anElement',			#stamp : 'YaroslavKormusyn 4/30/2019 20:38',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:39:23.150881+03:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'group:',			#protocol : #'as yet unclassified',			#sourceCode : 'group: aName\r\tcomposer group: aName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:39',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:41:14.432881+03:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #update,			#protocol : #'as yet unclassified',			#sourceCode : 'update\r\tcomposer view signalUpdate ',			#stamp : 'YaroslavKormusyn 4/30/2019 20:41',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:43:11.064881+03:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForMultiplication\r\t composer move: #leftMarker below: #left.\r\t composer move: #rightMarker below: #right.\r\t composer move: #nowProcessing above: #right.\r\t composer nameGroup: #leftMarker as: \'left marker\'.\r\t composer nameGroup: #rightMarker as: \'right marker\'.\r\t composer groupToExisting: #labels.',			#stamp : 'YaroslavKormusyn 4/30/2019 20:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:43:53.725881+03:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #setPositionsForCOOMultiplication,			#protocol : #'as yet unclassified',			#sourceCode : 'setPositionsForCOOMultiplication\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels',			#stamp : 'YaroslavKormusyn 4/30/2019 20:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:44:53.773881+03:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'selectModel:inGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'selectModel: model inGroup: groupName\r\tcomposer selectModel: model inGroup: groupName\r',			#stamp : 'YaroslavKormusyn 4/30/2019 20:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:44:59.003881+03:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'deselectModel:inGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'deselectModel: model inGroup: groupName\r\tcomposer deselectModel: model inGroup: groupName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:45:11.735881+03:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'highlightModel:inGroup:',			#protocol : #'as yet unclassified',			#sourceCode : 'highlightModel: model inGroup: groupName\r\tcomposer highlightModel: model inGroup: groupName',			#stamp : 'YaroslavKormusyn 4/30/2019 20:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:46:56.104881+03:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #COOSparseMatrix\r\tinstanceVariableNames: \'first last rowNumber columnNumber\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Data\'',				#superclassName : 'Object'			},			#name : #COOSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #first,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #last,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #rowNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #COOSparseMatrix,						#isMetaSide : false					},					#name : #columnNumber,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'COOSparseMatrix class\r\tinstanceVariableNames: \'\''				},				#name : #'COOSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #COOSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a sparse matrix of numbers.\r\rI store a low-density table of numbers. l know my size, first and last element in the table as a sequence of rows left to right.\r\rMy main collaborator is COOMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnNumbers\r- rowNumbers\r- at: at:\r- at:at:put:\r- copy\r- removeAt:at:\r- transpose\r- copy\r- withAll:\r\rInstance creation:\r1) An empty matrix of size [ number_of_rows x number_of_columns ]\r- COOSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- COOSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tcolumnNumber:\t\t<SmallInteger>\r\trowNumber:\t\t\t<SmallInteger>\r\tfirst:\t\t\t\t<COOMatrixNode>\r\tlast:\t\t\t\t\t<COOMatrixNode>\r\rImplementation Points\rMy internal representation of values is a sorted linked list, each node represented by COOSparseMatrixNode.',				#stamp : 'YaroslavKormushyn 4/18/2018 11:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Data,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#protocol : #adding	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:46:56.120881+03:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addComposerMenu:process:block:',			#protocol : #adding,			#sourceCode : 'addComposerMenu: composer process: operationProcess block: operationBlock\rcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 18:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addComposerMenu:process:block:',			#protocol : #'as yet unclassified',			#sourceCode : 'addComposerMenu: composer process: operationProcess block: operationBlock\rcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 18:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:49:15.244881+03:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setUpMenuWithProcess:',			#protocol : #'as yet unclassified',			#sourceCode : 'setUpMenuWithProcess: operationProcess\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ]',			#stamp : 'YaroslavKormusyn 4/30/2019 20:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:49:41.338881+03:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setUpMenuWithProcess:',			#protocol : #'as yet unclassified',			#sourceCode : 'setUpMenuWithProcess: operationProcess\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ]',			#stamp : 'YaroslavKormusyn 4/30/2019 20:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setUpMenuWithProcess:',			#protocol : #'as yet unclassified',			#sourceCode : 'setUpMenuWithProcess: operationProcess\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ]\r\t\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 20:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:49:50.602881+03:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setUpMenuWithProcess:',			#protocol : #'as yet unclassified',			#sourceCode : 'setUpMenuWithProcess: operationProcess\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ]\r\t\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 20:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #'setUpMenuWithProcess:',			#protocol : #'as yet unclassified',			#sourceCode : 'setUpMenuWithProcess: operationProcess\r\tcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 20:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:50:03.993881+03:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'addComposerMenu:process:block:',			#protocol : #'as yet unclassified',			#sourceCode : 'addComposerMenu: composer process: operationProcess block: operationBlock\rcomposer view\r\t\taddMenu: \'Save\'\r\t\tcallback: [ (RTCanvasExporter canvas: composer view canvas)\r\t\t\t\twithoutFixedShapes;\r\t\t\t\twhole;\r\t\t\t\tscale: 5;\r\t\t\t\toversizedBy: 20 @ 20;\r\t\t\t\tformat: #png;\r\t\t\t\tfileName:\r\t\t\t\t\t((TRPlatform current\r\t\t\t\t\t\tdialogRequest: \'Please enter file name\'\r\t\t\t\t\t\tinitialAnswer: \'export.png\') ifNil: [ ^ nil ]);\r\t\t\t\texport ].\r\tcomposer view addMenu: \'Pause\' callback: [ operationProcess suspend ].\r\tcomposer view addMenu: \'Resume\' callback: [ operationProcess resume ].\r\t"composer view\r\t\taddMenu: \'Stop\'\r\t\tcallback: [ operationProcess terminate.\r\t\t\toperationProcess := operationBlock newProcess ]."',			#stamp : 'YaroslavKormusyn 4/30/2019 18:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:51:58.504881+03:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MatrixOperationVisualizer,				#isMetaSide : false			},			#name : #view,			#protocol : #'as yet unclassified',			#sourceCode : 'view \r^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:52:14.065881+03:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result transposed newNode sum operationProcess operationBlock visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ \r\t\t| currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tself\r\t\taddComposerMenu: composer\r\t\tprocess: operationProcess\r\t\tblock: operationBlock.\r\t^ composer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result transposed newNode sum operationProcess operationBlock visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormusyn',		#time : DateAndTime [ '2019-04-30T20:54:30.626881+03:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| composer result transposed newNode sum operationProcess operationBlock visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new.\r\tcomposer := visualizer\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tcomposer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tcomposer view add: nowProcessingElementIndex.\r\tcomposer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tcomposer view add: leftMarkerElement.\r\tcomposer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tcomposer view add: rightMarkerElement.\r\tcomposer group: #rightMarker.\r\tcomposer move: #leftMarker below: #left.\r\tcomposer move: #rightMarker below: #right.\r\tcomposer move: #nowProcessing above: #right.\r\tcomposer nameGroup: #leftMarker as: \'left marker\'.\r\tcomposer nameGroup: #rightMarker as: \'right marker\'.\r\tcomposer groupToExisting: #labels.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tcomposer view signalUpdate.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ composer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ composer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tcomposer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:withDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'byMatrixAnimated: aCOOSparseMatrix withDelay: delay\r\t| result transposed newNode sum operationProcess operationBlock visualizer |\r\tcolumnNumber = aCOOSparseMatrix rowNumber\r\t\tifFalse: [ Error signal: \'Invalid matrix size\' ].\r\t(aCOOSparseMatrix isEmpty or: [ self isEmpty ])\r\t\tifTrue:\r\t\t\t[ ^ self class rows: rowNumber columns: aCOOSparseMatrix columnNumber ].\r\tresult := self class\r\t\trows: rowNumber\r\t\tcolumns: aCOOSparseMatrix columnNumber.\r\tresult\r\t\tfirst:\r\t\t\t((COOSparseMatrixNode new row: 0 column: 0 value: 0)\r\t\t\t\trightNeighbour: nil).\r\tresult last: result first.\r\ttransposed := aCOOSparseMatrix transpose.\r\tvisualizer := MatrixOperationVisualizer new\r\t\tgetComposedViewOf: self\r\t\twith: transposed\r\t\tresult: result.\r\toperationBlock := [ | currentLeftRow currentRightColumn priorityColumn leftMatrixMarker leftSavedMatrixMarker rightMatrixMarker leftMarkerElement rightMarkerElement nowProcessingElementIndex |\r\tleftSavedMatrixMarker := leftMatrixMarker := first.\r\trightMatrixMarker := transposed first.\r\tvisualizer\r\t\tselectModels:\r\t\t\t{rightMatrixMarker.\r\t\t\tleftMatrixMarker}.\r\tcurrentLeftRow := leftMatrixMarker row.\r\tcurrentRightColumn := rightMatrixMarker row.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn:\r\t\t\t{currentLeftRow.\r\t\t\tcurrentRightColumn}.\r\tvisualizer add: nowProcessingElementIndex.\r\tvisualizer group: #nowProcessing.\r\tleftMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: leftMatrixMarker.\r\tvisualizer add: leftMarkerElement.\r\tvisualizer group: #leftMarker.\r\trightMarkerElement := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5) elementOn: rightMatrixMarker.\r\tvisualizer add: rightMarkerElement.\r\tvisualizer group: #rightMarker.\r\tvisualizer setPositionsForCOOMultiplication.\r\tvisualizer\r\t\tnamedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvisualizer backgroundGroups: #(#left #result #right).\r\tvisualizer update.\r\tsum := 0.\r\tself\r\t\twithEscaper: [ :end | \r\t\t\t[ rightMatrixMarker isNotNil or: [ leftMatrixMarker isNotNil ] ]\r\t\t\t\twhileTrue: [ self\r\t\t\t\t\t\twithEscaper: [ :outer | \r\t\t\t\t\t\t\t"Switch to next row in left and reset right marker if right ended"\r\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\tifTrue: [ rightMatrixMarker := transposed first.\r\t\t\t\t\t\t\t\t\tleftSavedMatrixMarker := leftMatrixMarker.\r\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t"reset left marker to row beginning"\r\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tleftMatrixMarker := leftSavedMatrixMarker.\r\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\tcurrentLeftRow := leftMatrixMarker row.\r\t\t\t\t\t\t\tcurrentRightColumn := rightMatrixMarker row.\r\t\t\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t\t\t{currentLeftRow.\r\t\t\t\t\t\t\t\t\tcurrentRightColumn}.\r\t\t\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\t\t\tself\r\t\t\t\t\t\t\t\twithEscaper: [ :next | \r\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ] ] ]\r\t\t\t\t\t\t\t\t\t\twhileTrue: [ priorityColumn := {leftMatrixMarker column.\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker column} max.\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in left"\r\t\t\t\t\t\t\t\t\t\t\t[ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersection - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker row ~= currentLeftRow\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMarkerElement\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: rightMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ] ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\tpriorityColumn := leftMatrixMarker column.\r\r\t\t\t\t\t\t\t\t\t\t\t"Find same column as prioritized or higher in right"\r\t\t\t\t\t\t\t\t\t\t\t[ rightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker row = currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ rightMatrixMarker column < priorityColumn ] ] ]\r\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ [ leftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tand: [ leftMatrixMarker row = currentLeftRow ] ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\twhileTrue: [ visualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer selectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ leftMarkerElement updateModelAndRedraw: leftMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ].\r\r\t\t\t\t\t\t\t\t\t\t\t\t\t"If no intersections - end"\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ end value ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t"Else - continue loop"\r\t\t\t\t\t\t\t\t\t\t\t\t\tnext value ].\r\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker row ~= currentRightColumn\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ next value ].\r\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker column = rightMatrixMarker column\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ visualizer highlightModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightModel: rightMatrixMarker\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tsum := sum\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (leftMatrixMarker value * rightMatrixMarker value).\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: leftMatrixMarker inGroup: #left.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer deselectModel: rightMatrixMarker inGroup: #right.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMatrixMarker := leftMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker := rightMatrixMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker isNotNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarkerElement updateModelAndRedraw: rightMatrixMarker ].\r\t\t\t\t\t\t\t\t\t\t\t\t\tvisualizer\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectModels:\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{leftMatrixMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trightMatrixMarker}.\r\t\t\t\t\t\t\t\t\t\t\t\t\t(Delay forSeconds: delay) wait ]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ priorityColumn := rightMatrixMarker column ] ] ].\r\t\t\t\t\t\t\tsum = 0\r\t\t\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ].\r\t\t\t\t\tsum = 0\r\t\t\t\t\t\tifFalse: [ newNode := COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: currentLeftRow\r\t\t\t\t\t\t\t\tcolumn: currentRightColumn\r\t\t\t\t\t\t\t\tvalue: sum.\r\t\t\t\t\t\t\tresult last rightNeighbour: newNode.\r\t\t\t\t\t\t\tnewNode leftNeighbour: result last.\r\t\t\t\t\t\t\tresult last: newNode.\r\t\t\t\t\t\t\tsum := 0.\r\t\t\t\t\t\t\tvisualizer updateResultWith: result ] ] ].\r\t"nil the reference to dummy head"\r\tresult first rightNeighbour leftNeighbour: nil.\r\tresult first: result first rightNeighbour.\r\tvisualizer updateResultWith: result ].\r\toperationProcess := operationBlock newProcess.\r\tvisualizer setUpMenuWithProcess: operationProcess.\r\t^ visualizer view',			#stamp : 'YaroslavKormusyn 4/30/2019 20:54',			#package : #LNU-SparseMatrix		}	}}