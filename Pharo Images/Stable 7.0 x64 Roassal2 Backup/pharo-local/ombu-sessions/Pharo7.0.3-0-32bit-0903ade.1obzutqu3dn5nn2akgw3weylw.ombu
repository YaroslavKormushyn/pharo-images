OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:35:41.93482+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.dua8exxq09ocr5btwrr2uaju5', '16' ],		#self : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkType\r\tinstanceVariableNames: \'value\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkType,						#isMetaSide : false					},					#name : #value,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkType class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkType,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:36:28.03182+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #tempVar,			#protocol : #'as yet unclassified',			#sourceCode : 'tempVar\r^ self new value: #tempVar',			#stamp : 'YaroslavKormushyn 9/24/2019 17:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:36:40.03882+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #slot,			#protocol : #'as yet unclassified',			#sourceCode : 'slot\r\t^ self new value: #slot',			#stamp : 'YaroslavKormushyn 9/24/2019 17:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:36:49.71082+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #classVar,			#protocol : #'as yet unclassified',			#sourceCode : 'classVar\r\t^ self new value: #classVar',			#stamp : 'YaroslavKormushyn 9/24/2019 17:36',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:37:03.85182+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value \r^ value\r',			#stamp : 'YaroslavKormushyn 9/24/2019 17:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:37:03.86582+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #value,			#protocol : #'as yet unclassified',			#sourceCode : 'value \r^ value\r',			#stamp : 'YaroslavKormushyn 9/24/2019 17:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value \r^ value\r',			#stamp : 'YaroslavKormushyn 9/24/2019 17:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:37:20.86182+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'value:',			#protocol : #evaluating,			#sourceCode : 'value: aValue\r\tvalue := aValue',			#stamp : 'YaroslavKormushyn 9/24/2019 17:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:37:48.86682+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'=',			#protocol : #evaluating,			#sourceCode : '= anEnum\r^self class = anEnum class and: [ self value = anEnum value ]',			#stamp : 'YaroslavKormushyn 9/24/2019 17:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:38:08.32782+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #hash,			#protocol : #evaluating,			#sourceCode : 'hash \r^ self class hash bitXor: self value hash',			#stamp : 'YaroslavKormushyn 9/24/2019 17:38',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:38:42.89482+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #evaluating,			#sourceCode : 'printOn: aStream\rsuper printOn: aStream.\raStream << \'(\' << self value asString << \')\'',			#stamp : 'YaroslavKormushyn 9/24/2019 17:38',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:39:58.96582+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkType\r\tinstanceVariableNames: \'value\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkType,						#isMetaSide : false					},					#name : #value,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkType class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkType,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent an enum of permitted link types for LinkedDataVizualizer.\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tvalue:\t\t<Object>\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/24/2019 17:39'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent an enum of permitted link types for LinkedDataVizualizer.\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tvalue:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : 'YaroslavKormushyn 9/24/2019 17:39'	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:40:24.53482+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes operation operands process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore linkMessages\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operation,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operands,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #linkMessages,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkedDataVisualizer\r\tinstanceVariableNames: \'gap elementSize colors shapes operation operands process operationBlock composer namedGroups backgroundGroups metaLinks delay semaphore linkMessageConfigs\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkedDataVisualizer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #gap,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #elementSize,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #colors,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #shapes,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operation,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operands,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #process,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #operationBlock,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #composer,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #namedGroups,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #backgroundGroups,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #metaLinks,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #delay,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #semaphore,					#parent : @51				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkedDataVisualizer,						#isMetaSide : false					},					#name : #linkMessageConfigs,					#parent : @51				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkedDataVisualizer class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkedDataVisualizer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @51			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkedDataVisualizer,					#isMetaSide : false				},				#parent : @51,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\rI represent a base class for visualizing a linked data structure and its operations.\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rI can show a unary or a binary operation on a linked data structure given the right initialization.\rI know of the elements of a given data structure and the links between them.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rI use Roassal2 and its main components like RTView, TRCanvas for displaying output.\r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : 'YaroslavKormushyn 9/23/2019 12:03'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:40:37.57982+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'addLinkMessages:',			#protocol : #accessing,			#sourceCode : 'addLinkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'No messages in collection.\' ].\r\tlinkMessages addAll: (messages collect: [ :msg | msg asSymbol ])',			#stamp : 'YaroslavKormushyn 9/24/2019 13:53',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkedDataVisualizer,				#isMetaSide : false			},			#name : #'addLinkMessages:',			#protocol : #accessing,			#sourceCode : 'addLinkMessages: messages\r\tmessages isCollection\r\t\tifFalse: [ Error signal: \'You should add messages to a collection.\' ].\r\tmessages isEmpty\r\t\tifTrue: [ Error signal: \'No messages in collection.\' ].\r\tlinkMessageConfigs addAll: (messages collect: [ :msg | msg asSymbol ])',			#stamp : 'YaroslavKormushyn 9/24/2019 17:40',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:41:30.88682+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkMessageConfig\r\tinstanceVariableNames: \'command commandBlock control instance linkType when\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkMessageConfig,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #command,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #commandBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #control,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #instance,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #linkType,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #when,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkMessageConfig class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkMessageConfig class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkMessageConfig,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:45:03.26882+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkMessageConfig class',				#isMetaSide : true			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t^ self new command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl',			#stamp : 'YaroslavKormushyn 9/24/2019 17:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:46:53.03082+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkMessageConfig class',				#isMetaSide : true			},			#name : #'commandBlock:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'commandBlock: aBlock control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t^ self new\r\t\tcommandBlock: aBlock\r\t\tcontrol: aControl\r\t\tinstance: anInstance\r\t\tlinkType: aLinkType\r\t\twhen: whenControl',			#stamp : 'YaroslavKormushyn 9/24/2019 17:46',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:47:09.54682+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkMessageConfig class',				#isMetaSide : true			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t^ self new command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl',			#stamp : 'YaroslavKormushyn 9/24/2019 17:45',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:47:09.57482+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t^ self new command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl',			#stamp : 'YaroslavKormushyn 9/24/2019 17:47',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:47:25.96382+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t^ self new command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl',			#stamp : 'YaroslavKormushyn 9/24/2019 17:47',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:47:25.99782+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkMessageConfig class',				#isMetaSide : true			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t^ self new command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl',			#stamp : 'YaroslavKormushyn 9/24/2019 17:47',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:50:48.88982+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r"check for command contain"\r',			#stamp : 'YaroslavKormushyn 9/24/2019 17:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:53:07.90782+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkMessageConfig\r\tinstanceVariableNames: \'command commandBlock control instance linkType when\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkMessageConfig,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #command,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #commandBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #control,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #instance,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #linkType,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #when,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkMessageConfig class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkMessageConfig class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkMessageConfig,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkMessageConfig\r\tinstanceVariableNames: \'command commandBlock control instance linkType when operControls\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkMessageConfig,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #command,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #commandBlock,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #control,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #instance,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #linkType,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #when,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #operControls,					#parent : @33				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkMessageConfig class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkMessageConfig class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @33			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkMessageConfig,					#isMetaSide : false				},				#parent : @33,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:53:09.68582+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkMessageConfig\r\tinstanceVariableNames: \'command commandBlock control instance linkType when operControls\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkMessageConfig,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #command,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #commandBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #control,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #instance,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #linkType,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #when,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #operControls,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkMessageConfig class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkMessageConfig class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkMessageConfig,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LinkMessageConfig\r\tinstanceVariableNames: \'command commandBlock control instance linkType when operControls varControls\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Visual\'',				#superclassName : 'Object'			},			#name : #LinkMessageConfig,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #command,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #commandBlock,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #control,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #instance,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #linkType,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #when,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #operControls,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LinkMessageConfig,						#isMetaSide : false					},					#name : #varControls,					#parent : @35				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LinkMessageConfig class\r\tinstanceVariableNames: \'\''				},				#name : #'LinkMessageConfig class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @35			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LinkMessageConfig,					#isMetaSide : false				},				#parent : @35,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Visual,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:53:09.78882+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize \roperControls := #(#before #after #instead #onError).\rvarControls := #(#write #read #both).',			#stamp : 'YaroslavKormushyn 9/24/2019 17:53',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:53:09.79182+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize \roperControls := #(#before #after #instead #onError).\rvarControls := #(#write #read #both).',			#stamp : 'YaroslavKormushyn 9/24/2019 17:53',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize \roperControls := #(#before #after #instead #onError).\rvarControls := #(#write #read #both).',			#stamp : 'YaroslavKormushyn 9/24/2019 17:53',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T17:59:00.68982+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r"check for command contain"\r',			#stamp : 'YaroslavKormushyn 9/24/2019 17:50',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t"check for command contain"\r(operControls contains: aControl)\rifFalse: [ Error signal: \'Invalid operation control: \', aControl asString ].\r(varControls contains: whenControl)\rifFalse: [ Error signal: \'Invalid variable control: \', whenControl asString ].\ranInstance isNil \rifTrue: [ Error signal: \'Binding instance cannot be nil.\' ].\r(LinkType hasDefined: aLinkType)\rifFalse: [ Error signal: \'Unknown link type: \', aLinkType value asString ]\r\t',			#stamp : 'YaroslavKormushyn 9/24/2019 17:59',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:17:49.49482+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'hasDefined:',			#protocol : #'as yet unclassified',			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods collect: [ :msg | (msg name substrings: \'#\') second ]) contains: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:17:49.51082+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'hasDefined:',			#protocol : #'as yet unclassified',			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods collect: [ :msg | (msg name substrings: \'#\') second ]) contains: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'hasDefined:',			#protocol : #testing,			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods collect: [ :msg | (msg name substrings: \'#\') second ]) contains: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:18:29.25382+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'hasDefined:',			#protocol : #testing,			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods collect: [ :msg | (msg name substrings: \'#\') second ]) contains: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'hasDefined:',			#protocol : #'as yet unclassified',			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods collect: [ :msg | (msg name substrings: \'#\') second ]) contains: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:18:29.28282+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkType,				#isMetaSide : false			},			#name : #'hasDefined:',			#protocol : #testing,			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods collect: [ :msg | (msg name substrings: \'#\') second ]) contains: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:18:29.31482+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #'hasDefined:',			#protocol : #testing,			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods collect: [ :msg | (msg name substrings: \'#\') second ]) contains: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:18',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:28:51.68482+03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #'hasDefined:',			#protocol : #testing,			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods collect: [ :msg | (msg name substrings: \'#\') second ]) contains: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:18',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #'hasDefined:',			#protocol : #testing,			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods\r\t\tcollect: [ :msg | (msg name substrings: \'#\') second ])\r\t\tincludes: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:29:04.87682+03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #'hasDefined:',			#protocol : #testing,			#sourceCode : 'hasDefined: aLinkType\r\t(self class methods\r\t\tcollect: [ :msg | (msg name substrings: \'#\') second ])\r\t\tincludes: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #'hasDefined:',			#protocol : #testing,			#sourceCode : 'hasDefined: aLinkType\r\t^ (self class methods\r\t\tcollect: [ :msg | (msg name substrings: \'#\') second ])\r\t\tincludes: aLinkType value',			#stamp : 'YaroslavKormushyn 9/24/2019 18:29',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:29:52.17982+03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LinkType class',				#isMetaSide : true			},			#name : #'hasDefinedSymbol:',			#protocol : #testing,			#sourceCode : 'hasDefinedSymbol: aSymbol\r\t^ (self class methods\r\t\tcollect: [ :msg | (msg name substrings: \'#\') second ])\r\t\tincludes: aSymbol',			#stamp : 'YaroslavKormushyn 9/24/2019 18:29',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-09-24T18:35:25.05582+03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t"check for command contain"\r(operControls contains: aControl)\rifFalse: [ Error signal: \'Invalid operation control: \', aControl asString ].\r(varControls contains: whenControl)\rifFalse: [ Error signal: \'Invalid variable control: \', whenControl asString ].\ranInstance isNil \rifTrue: [ Error signal: \'Binding instance cannot be nil.\' ].\r(LinkType hasDefined: aLinkType)\rifFalse: [ Error signal: \'Unknown link type: \', aLinkType value asString ]\r\t',			#stamp : 'YaroslavKormushyn 9/24/2019 17:59',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LinkMessageConfig,				#isMetaSide : false			},			#name : #'command:control:instance:linkType:when:',			#protocol : #'as yet unclassified',			#sourceCode : 'command: aCommand control: aControl instance: anInstance linkType: aLinkType when: whenControl\r\t"check for command contain"\r\t| newLinkType |\r\t(operControls contains: aControl)\r\t\tifFalse: [ Error signal: \'Invalid operation control: \' , aControl asString ].\r\t(varControls contains: whenControl)\r\t\tifFalse: [ Error signal: \'Invalid variable control: \' , whenControl asString ].\r\tanInstance isNil\r\t\tifTrue: [ Error signal: \'Binding instance cannot be nil.\' ].\r\t\t(aLinkType isKindOf: LinkType)\r\t\tifFalse: [ (LinkType hasDefinedSymbol: aLinkType) ifFalse: [ Error signal: \'Unknown link type: \', aLinkType asString ]. newLinkType := LinkType perform: aLinkType ]\r\t.(LinkType hasDefined: aLinkType)\r\tifTrue: [ newLinkType := aLinkType ]\r\t\tifFalse: [ Error signal: \'Unknown link type: \' , aLinkType value asString ]',			#stamp : 'YaroslavKormushyn 9/24/2019 18:35',			#package : #LNU-SparseMatrix		}	}}