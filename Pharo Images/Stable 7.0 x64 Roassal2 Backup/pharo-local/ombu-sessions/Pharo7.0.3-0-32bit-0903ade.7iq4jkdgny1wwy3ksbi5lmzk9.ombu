OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2019-05-09T18:43:37.424257+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.e3mf28w58wdevoc6j9bfr2f6c', '29' ],		#self : OmReference [ '1' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '7iq4jkdptknrth0l11swvubjl', '1' ]		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2019-05-09T18:43:43.278257+03:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp elements |\r\tcomp := self getElementShape.\r\taCollection isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: aCollection.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T18:43:49.652257+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '7iq4jkdr59sdblzuteq9z534h', '1' ]		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2019-05-09T18:43:49.672257+03:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #'onNodeCollection:withView:',			#protocol : #'instance creation',			#sourceCode : 'onNodeCollection: aCollection withView: aView\r\t(aCollection isKindOf: Collection)\r\t\tifFalse: [ Error\r\t\t\t\tsignal: \'Not a collection\' ].\r\t^ (self new withView: aView) onCollection: aCollection',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T18:43:56.814257+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '7iq4jkew0vx1deaw7692y8iap', '1' ]		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2019-05-09T18:43:56.902257+03:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tsourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\tmarker isNotNil ifTrue: [vis selectModel: marker]. ].\r\t\t\ttempList reSort.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait. ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait. ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ]] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T18:44:02.114257+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '7iq4jkb6feqgzu5s76h2glwkh', '1' ]		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2019-05-09T18:44:02.135257+03:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := COOSparseMatrix withAll: col.\r\tcooanimvis := COOSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T18:44:07.564257+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '7iq4jkdiz71qm1tcotn4k4p4h', '1' ]		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2019-05-09T18:44:07.614257+03:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tsourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\tmarker isNotNil ifTrue: [vis selectModel: marker]. ].\r\t\t\ttempList reSort.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait. ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait. ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ]] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T18:44:11.640257+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '7iq4jkgxcmb59d23ruvsl5h6h', '1' ]		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2019-05-09T18:44:11.689257+03:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #transpose,			#protocol : #transformation,			#sourceCode : 'transpose\r\t| result tempList marker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ tempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\tmarker copy.\r\t\t\t\t\tmarker := marker rightNeighbour ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/5/2019 16:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #transpose,			#protocol : #transformation,			#sourceCode : 'transpose\r\t| result tempList marker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ tempList add: (COOSparseMatrixNode row: marker column column: marker row value: marker value).\r\t\t\t\t\tmarker := marker rightNeighbour ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T18:44:16.202257+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpRedo {		#entryReferences : OrderedCollection [			OmReference [ '7iq4jke49zqhdb75s4xv3355d', '1' ]		]	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2019-05-09T18:44:16.249257+03:00' ],		#trigger : @3	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\t(COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: marker column\r\t\t\t\t\t\t\t\tcolumn: marker row\r\t\t\t\t\t\t\t\tvalue: marker value).\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		}	}}