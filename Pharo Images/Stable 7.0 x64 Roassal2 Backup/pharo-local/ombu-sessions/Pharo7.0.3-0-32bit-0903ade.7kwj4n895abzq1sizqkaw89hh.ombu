OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T20:37:58.738493+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.e3mf28w58wdevoc6j9bfr2f6c', '29' ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex|\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\t\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: aMatrix result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := aMatrix rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\t\t\r\t\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\t\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\trowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (aMatrix columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ leftMarker := leftMarker rightNeighbour ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarker := rightMarker belowNeighbour ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ sum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode ] ] ].\r\tresult rows\r\t\twithIndexDo:\r\t\t\t[ :rowHead :rowIndex | (lastInRowMarkers at: rowIndex) rightNeighbour: rowHead ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :colHead :colIndex | (lastInColumnMarkers at: colIndex) belowNeighbour: colHead ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/8/2019 20:37',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T21:09:05.983493+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex|\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\t\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: aMatrix result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := aMatrix rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\t\t\r\t\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\t\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\trowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (aMatrix columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ leftMarker := leftMarker rightNeighbour ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ rightMarker := rightMarker belowNeighbour ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ sum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode ] ] ].\r\tresult rows\r\t\twithIndexDo:\r\t\t\t[ :rowHead :rowIndex | (lastInRowMarkers at: rowIndex) rightNeighbour: rowHead ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :colHead :colIndex | (lastInColumnMarkers at: colIndex) belowNeighbour: colHead ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/8/2019 20:37',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue|\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: aMatrix result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := aMatrix rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t\t\toperationProcess := [ \r\trowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (aMatrix columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.vis delay wait ].\r\t\t\trightMarker column ~= 0\r\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.vis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex model: { rowIndex . columnIndex }.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker. \r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.vis delay wait ]]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker. \r\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.vis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.vis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.vis delay wait ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo:\r\t\t\t[ :rowHead :rowIndex | (lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :colHead :colIndex | (lastInColumnMarkers at: colIndex) belowNeighbour: colHead.vis updateResultWith: result.\r\t\t\t\t\t\t\tvis delay wait ].] newProcess.\r\t\t\t\t\t\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 21:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T21:13:24.256493+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue|\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: aMatrix result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := aMatrix rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t\t\toperationProcess := [ \r\trowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (aMatrix columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.vis delay wait ].\r\t\t\trightMarker column ~= 0\r\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.vis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex model: { rowIndex . columnIndex }.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker. \r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.vis delay wait ]]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker. \r\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.vis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.vis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.vis delay wait ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo:\r\t\t\t[ :rowHead :rowIndex | (lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :colHead :colIndex | (lastInColumnMarkers at: colIndex) belowNeighbour: colHead.vis updateResultWith: result.\r\t\t\t\t\t\t\tvis delay wait ].] newProcess.\r\t\t\t\t\t\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 21:09',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: aMatrix result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := aMatrix rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\t\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (aMatrix columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 21:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T21:34:23.644493+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: aMatrix result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := aMatrix rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\t\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (aMatrix rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (aMatrix columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 21:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy|\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\t\t\t\t\t\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\t\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 21:34',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T21:35:52.358493+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy|\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\t\t\t\t\t\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\t\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 21:34',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 21:35',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T22:08:36.651493+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 21:35',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\t\t\t\tvis composer deselectModels: {rightMarker.leftMarker}.\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:08',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T22:10:03.662493+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\t\t\t\tvis composer deselectModels: {rightMarker.leftMarker}.\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:08',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\t\t\t\t"rightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ]."\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T22:10:36.356493+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\t\t\t\t"rightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ]."\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:10',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:10',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T22:11:56.233493+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:10',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:11',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T22:13:04.468493+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:11',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\t\t\t\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:13',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T22:15:04.596493+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\t\t\t\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\tvis updateResultWith: result.\r\t\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:13',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\t"vis updateResultWith: result.\r\t\t\tvis delay wait "].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\t"vis updateResultWith: result.\r\t\t\tvis delay wait" ].\r\t\tvis updateResultWith: result. ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:15',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-08T22:17:19.854493+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead.\r\t\t\t"vis updateResultWith: result.\r\t\t\tvis delay wait "].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead.\r\t\t\t"vis updateResultWith: result.\r\t\t\tvis delay wait" ].\r\t\tvis updateResultWith: result. ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:15',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis composer removeGroup: #nowProcessing.\r\tvis composer removeGroup: #newElementValue.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead\r\t\t\t"vis updateResultWith: result.\r\t\t\tvis delay wait " ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead\r\t\t\t"vis updateResultWith: result.\r\t\t\tvis delay wait" ].\r\tvis updateResultWith: result ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/8/2019 22:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T12:31:23.535493+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'last:',			#protocol : #'as yet unclassified',			#sourceCode : 'last: aCOOMatrixNode\r\tlast := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/9/2019 12:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T12:32:14.510493+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'a subclass of COOSparseMatrix',				#isMetaSide : false			},			#name : #'first:',			#protocol : #'as yet unclassified',			#sourceCode : 'first: aCOOMatrixNode\r\tfirst := aCOOMatrixNode ',			#stamp : 'YaroslavKormushyn 5/9/2019 12:31',			#package : #_UnpackagedPackage		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T13:16:43.290493+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #'onNodeCollection:withView:',			#protocol : #'instance creation',			#sourceCode : 'onNodeCollection: aCollection withView: aView\r\t(aCollection isKindOf: Collection)\r\t\tifFalse: [ Error\r\t\t\t\tsignal: \'Not a collection\' ].\r\t^ (self new withView: aView) onCollection: aCollection',			#stamp : 'YaroslavKormushyn 5/9/2019 13:16',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T13:17:37.615493+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp nodes elements |\r\tcomp := self getElementShape.\r\tnodes isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: nodes.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 13:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T13:17:47.621493+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp nodes elements |\r\tcomp := self getElementShape.\r\tnodes isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: nodes.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 13:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp nodes elements |\r\tcomp := self getElementShape.\r\taCollection isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: aCollection.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 13:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T13:17:50.937493+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp nodes elements |\r\tcomp := self getElementShape.\r\taCollection isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: aCollection.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 13:17',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp elements |\r\tcomp := self getElementShape.\r\taCollection isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: aCollection.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 13:17',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T13:47:50.908493+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup|\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ \r\t\t\t\t\t(vis composer hasGroup: #transpositionList) ifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer onNodeCollection: tempList withView: vis view.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\t ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/9/2019 13:47',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T14:21:22.355493+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup|\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer setBackgroundColor: (Color gray alpha: 0.2) forGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ \r\t\t\t\t\t(vis composer hasGroup: #transpositionList) ifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer onNodeCollection: tempList withView: vis view.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\t ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/9/2019 13:47',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tsourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\tmarker isNotNil ifTrue: [vis selectModel: marker]. ].\r\t\t\ttempList reSort.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait. ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait. ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ]] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:21',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T14:22:25.315493+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := COOSparseMatrix withAll: col.\r\tcooanimvis := COOSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : 'YaroslavKormushyn 5/9/2019 14:22',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T14:24:42.590493+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tsourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\tmarker isNotNil ifTrue: [vis selectModel: marker]. ].\r\t\t\ttempList reSort.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait. ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\tvis delay wait. ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ]] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:21',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\t\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.vis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker updateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0 )] ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:24',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T14:25:35.137493+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\t\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.vis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker updateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0 )] ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:24',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:25',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T14:28:27.604493+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #transpose,			#protocol : #transformation,			#sourceCode : 'transpose\r\t| result tempList marker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ tempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\tmarker copy.\r\t\t\t\t\tmarker := marker rightNeighbour ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/5/2019 16:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #transpose,			#protocol : #transformation,			#sourceCode : 'transpose\r\t| result tempList marker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ tempList add: (COOSparseMatrixNode row: marker column column: marker row value: marker value).\r\t\t\t\t\tmarker := marker rightNeighbour ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/9/2019 14:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T14:28:41.341493+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: marker copy.\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:25',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: (COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: marker column\r\t\t\t\t\t\t\t\tcolumn: marker row\r\t\t\t\t\t\t\t\tvalue: marker value).\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:28',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T14:29:26.452493+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList add: (COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: marker column\r\t\t\t\t\t\t\t\tcolumn: marker row\r\t\t\t\t\t\t\t\tvalue: marker value).\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:28',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\t(COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: marker column\r\t\t\t\t\t\t\t\tcolumn: marker row\r\t\t\t\t\t\t\t\tvalue: marker value).\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 14:29',			#package : #LNU-SparseMatrix		}	}}