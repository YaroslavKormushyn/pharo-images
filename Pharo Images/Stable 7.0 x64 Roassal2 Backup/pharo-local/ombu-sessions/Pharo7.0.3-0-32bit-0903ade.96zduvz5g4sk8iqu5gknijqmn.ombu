OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T22:51:27.038295+03:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.7iq4jkdgny1wwy3ksbi5lmzk9', '14' ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker|\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source  #sourceMarker).\r\tvis backgroundGroups: #(#source ).\r\toperationProcess := [|newRowGroup captionLabel|\r\t\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\t\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\t\t\t\telement.\r\t\t\t\t\tvis add: captionLabel.\r\t\t\t\t\tvis group: #newRowLabel.\r\t\t\t\t\tvis composer move: #newRowLabel below: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t\tvis composer selectUsing: [ :model | model column = columnIndex ]\r\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\r\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\tvis composer deselectUsing: [ :model | model column = columnIndex ]\r\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait ] ] ] ].\r\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait\r\t\t ].]newProcess.\rvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 22:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T22:52:18.106295+03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LILSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := LILSparseMatrix withAll: col.\r\tcooanimvis := LILSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : 'YaroslavKormushyn 5/9/2019 22:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:02:15.250295+03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker|\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source  #sourceMarker).\r\tvis backgroundGroups: #(#source ).\r\toperationProcess := [|newRowGroup captionLabel|\r\t\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\t\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\t\t\t\telement.\r\t\t\t\t\tvis add: captionLabel.\r\t\t\t\t\tvis group: #newRowLabel.\r\t\t\t\t\tvis composer move: #newRowLabel below: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t\tvis composer selectUsing: [ :model | model column = columnIndex ]\r\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\r\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\tvis composer deselectUsing: [ :model | model column = columnIndex ]\r\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait ] ] ] ].\r\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait\r\t\t ].]newProcess.\rvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 22:51',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker).\r\tvis backgroundGroups: #(#source).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index )]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index ) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:02',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:03:01.139295+03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker).\r\tvis backgroundGroups: #(#source).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index )]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index ) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:02',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:03:26.870295+03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:03:50.527295+03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:03',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:09:09.955295+03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis updateResultWith: result.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:03',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:09',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:14:19.836295+03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:09',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\t\tsourceMarker updateModelAndRedraw: ((self rows at: rowIndex) at: index).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled.  ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:14',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:16:22.967295+03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ vis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\t\tsourceMarker updateModelAndRedraw: ((self rows at: rowIndex) at: index).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: ((self rows at: rowIndex) at: index) value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = ((self rows at: rowIndex) at: index) ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled.  ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:14',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t\t|sourceElement|\r\t\t\t\t\t\t\t\t\tsourceElement := ((self rows at: rowIndex) at: index).\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: (MatrixElement row: sourceElement row column: sourceElement column value: sourceElement value source: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:16',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:16:54.047295+03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\t\t\t|sourceElement|\r\t\t\t\t\t\t\t\t\tsourceElement := ((self rows at: rowIndex) at: index).\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw: (MatrixElement row: sourceElement row column: sourceElement column value: sourceElement value source: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:16',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ | sourceElement |\r\t\t\t\t\t\t\t\t\tsourceElement := (self rows at: rowIndex) at: index.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw:\r\t\t\t\t\t\t\t\t\t\t\t(MatrixElement\r\t\t\t\t\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: sourceElement column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value\r\t\t\t\t\t\t\t\t\t\t\t\tsource: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode column: rowIndex value: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:16',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:26:57.793295+03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ | sourceElement |\r\t\t\t\t\t\t\t\t\tsourceElement := (self rows at: rowIndex) at: index.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw:\r\t\t\t\t\t\t\t\t\t\t\t(MatrixElement\r\t\t\t\t\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: sourceElement column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value\r\t\t\t\t\t\t\t\t\t\t\t\tsource: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast:\r\t\t\t\t\t\t\t\t\t\t\t(LILSparseMatrixNode column: rowIndex value: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:16',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (LILSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (MatrixElement row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ | sourceElement |\r\t\t\t\t\t\t\t\t\tsourceElement := (self rows at: rowIndex) at: index.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw:\r\t\t\t\t\t\t\t\t\t\t\t(MatrixElement\r\t\t\t\t\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: sourceElement column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value\r\t\t\t\t\t\t\t\t\t\t\t\tsource: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast: (LILSparseMatrixNode column: rowIndex value: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:49:48.785295+03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker|\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\t\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\t\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ \r\tcolumnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait. ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\t\tvis composer removeGroup: #sourceMarker.\r\t\tvis composer namedGroups: (vis composer namedGroups copyWithout: #sourceMarker).\r\t\tvis redrawNamesAndBackgrounds .\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait.]newProcess .\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:49',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:50:14.028295+03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TWSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := TWSparseMatrix withAll: col.\r\tcooanimvis := TWSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : 'YaroslavKormushyn 5/9/2019 23:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:51:17.397295+03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker|\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\t\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\t\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ \r\tcolumnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait. ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\t\tvis composer removeGroup: #sourceMarker.\r\t\tvis composer namedGroups: (vis composer namedGroups copyWithout: #sourceMarker).\r\t\tvis redrawNamesAndBackgrounds .\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait.]newProcess .\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:49',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis composer\r\t\tnamedGroups: (vis composer namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:51',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:52:52.272295+03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis composer\r\t\tnamedGroups: (vis composer namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:51',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis composer\r\t\tnamedGroups: (vis composer namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:52:54.960295+03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis composer\r\t\tnamedGroups: (vis composer namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis composer\r\t\tnamedGroups: (vis composer namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:53:28.925295+03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis composer\r\t\tnamedGroups: (vis composer namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:52',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis composer\r\t\tnamedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:53',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-09T23:54:46.278295+03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis composer\r\t\tnamedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:53',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:54',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:01:34.284295+03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TWSparseMatrix\r\tinstanceVariableNames: \'rows columns rowsNumber columnsNumber\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Data\'',				#superclassName : 'Object'			},			#name : #TWSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TWSparseMatrix,						#isMetaSide : false					},					#name : #rows,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TWSparseMatrix,						#isMetaSide : false					},					#name : #columns,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TWSparseMatrix,						#isMetaSide : false					},					#name : #rowsNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TWSparseMatrix,						#isMetaSide : false					},					#name : #columnsNumber,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrix class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a sparse matrix of numbers.\n\nI can be multiplied with other matrices, added to other matrices, multiplied by a number, transposed.\nI store a low-density table of numbers. l know my dimensions.\n\nMy main collaborator is TWMatrixNode, which is the internal representaion of my elements.\n\nPublic API and Key Messages\n- columnsNumber\n- rowsNumber\n- at: at:\n- at:at:put:\n- removeAt:at:\n- copy\n- transpose\n- isEmpty\n\nInstance creation:\n1) An empty matrix of size number_of_rows x number_of_columns\n- TWSparseMatrix rows: number_of_rows columns: number_of_columns\n2) Matrix of size 2x2\n\t\t\t[ 1 0 ]\n\t\t\t[ 2 0 ]\n- LILSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\n   \n    Instance Variables\n\tcolumnsNumber:\t\t<SmallInteger>\n\trowsNumber:\t\t<SmallInteger>\n\trows:\t\t\t\t<Array>\n\tcolumns:\t\t\t<Array>\n',				#stamp : 'YaroslavKormushyn 4/18/2018 11:18'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Data,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a sparse matrix of numbers.\r\rI can be multiplied with other matrices, added to other matrices, multiplied by a number, transposed.\rI store a low-density table of numbers. l know my dimensions.\r\rMy main collaborator is TWMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnsNumber\r- rowsNumber\r- at: at:\r- at:at:put:\r- removeAt:at:\r- copy\r- transpose\r- isEmpty\r\rInstance creation:\r1) An empty matrix of size number_of_rows x number_of_columns\r- TWSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- LILSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \r    Instance Variables\r\tcolumnsNumber:\t\t<SmallInteger>\r\trowsNumber:\t\t<SmallInteger>\r\trows:\t\t\t\t<Array>\r\tcolumns:\t\t\t<Array>\r',		#newComment : 'I represent a sparse matrix of numbers.\n\nI can be multiplied with other matrices, added to other matrices, multiplied by a number, transposed.\nI store a low-density table of numbers. l know my dimensions.\n\nMy main collaborator is TWMatrixNode, which is the internal representaion of my elements.\n\nPublic API and Key Messages\n- columnsNumber\n- rowsNumber\n- at: at:\n- at:at:put:\n- removeAt:at:\n- copy\n- transpose\n- isEmpty\n\nInstance creation:\n1) An empty matrix of size number_of_rows x number_of_columns\n- TWSparseMatrix rows: number_of_rows columns: number_of_columns\n2) Matrix of size 2x2\n\t\t\t[ 1 0 ]\n\t\t\t[ 2 0 ]\n- LILSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\n   \n    Instance Variables\n\tcolumnsNumber:\t\t<SmallInteger>\n\trowsNumber:\t\t<SmallInteger>\n\trows:\t\t\t\t<Array>\n\tcolumns:\t\t\t<Array>\n',		#oldStamp : 'YaroslavKormushyn 4/18/2018 11:18',		#newStamp : 'YaroslavKormushyn 4/18/2018 11:18'	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:01:34.478295+03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'byMatrixAnimated:delay:',			#protocol : #private,			#sourceCode : 'byMatrixAnimated: aMatrix delay: delay\r\t| result rowNumbers columnNumbers lastInRowMarkers lastInColumnMarkers leftMarker rightMarker sum newNode vis operationProcess leftMarkerElement rightMarkerElement nowProcessingElementIndex newElementValue leftCopy |\r\tself columnsNumber ~= aMatrix rowsNumber\r\t\tifTrue: [ Error\r\t\t\t\tsignal:\r\t\t\t\t\t\'Size mismatch. Left: \' , self columnsNumber , \' Right: \'\r\t\t\t\t\t\t, aMatrix rowsNumber ].\r\tresult := self class new\r\t\trows: self rowsNumber\r\t\tcolumns: aMatrix columnsNumber.\r\t(self isEmpty or: aMatrix isEmpty)\r\t\tifTrue: [ ^ result ].\r\tleftCopy := aMatrix copy.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tvis getComposedViewOf: self with: leftCopy result: result.\r\tvis namedGroups: #(#left #result #right #leftMarker #rightMarker).\r\tvis backgroundGroups: #(#left #result #right).\r\tleftMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: leftMarkerElement.\r\tvis group: #leftMarker.\r\trightMarkerElement := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: rightMarkerElement.\r\tvis group: #rightMarker.\r\tnowProcessingElementIndex := (RTLabel\r\t\ttext:\r\t\t\t[ :indices | \'Now processing \' , (indices first @ indices last) asString ])\r\t\telementOn: {0 . 0}.\r\tvis add: nowProcessingElementIndex.\r\tvis group: #nowProcessing.\r\tnewElementValue := (RTLabel\r\t\ttext: [ :value | \'New element value: \' , value asString ])\r\t\telementOn: 0.\r\tvis add: newElementValue.\r\tvis group: #newElementValue.\r\tvis composer move: #leftMarker below: #left.\r\tvis composer move: #rightMarker below: #right.\r\tvis composer move: #nowProcessing above: #right.\r\tvis composer move: #newElementValue onTheRightOf: #nowProcessing.\r\tvis redrawNamesAndBackgrounds.\r\tvis composer groupToExisting: #labels.\r\tvis update.\r\tlastInRowMarkers := result rows copy.\r\tlastInColumnMarkers := result columns copy.\r\trowNumbers := self rows\r\t\treject: [ :rowHead | rowHead rightNeighbour = rowHead ]\r\t\tthenCollect: [ :rowHead | rowHead row ].\r\tcolumnNumbers := leftCopy rows\r\t\treject: [ :colHead | colHead belowNeighbour = colHead ]\r\t\tthenCollect: [ :colHead | colHead row ].\r\r\t"gray out rows which are empty"\r\t((1 to: self rowsNumber) copyWithoutAll: rowNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxLeft backgroundBoxResult outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxLeft := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxLeft color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxLeft strokeWidth: 0.\r\t\t\tbackgroundBoxLeft borderRadius: 5.\r\t\t\tbackgroundBoxLeft\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #left) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxLeft\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #left) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis composer getGroup: #result) center x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis composer getGroup: #result) extent x\r\t\t\t\t\t\t@ (vis view elementFromModel: (result rows at: rowIndex)) extent y\r\t\t\t\t\t\t+ outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxLeft.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\t"gray out empty columns"\r\t((1 to: self columnsNumber) copyWithoutAll: columnNumbers)\r\t\tdo: [ :rowIndex | \r\t\t\t| backgroundBoxResult backgroundBoxRight outterGap |\r\t\t\toutterGap := 5 @ 5.\r\t\t\tbackgroundBoxRight := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxRight color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxRight strokeWidth: 0.\r\t\t\tbackgroundBoxRight borderRadius: 5.\r\t\t\tbackgroundBoxRight\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) center y.\r\t\t\tbackgroundBoxRight\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (leftCopy rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #right) extent y + outterGap.\r\t\t\tbackgroundBoxResult := TRRoundedBoxShape new.\r\t\t\tbackgroundBoxResult color: (Color gray alpha: 0.5).\r\t\t\tbackgroundBoxResult strokeWidth: 0.\r\t\t\tbackgroundBoxResult borderRadius: 5.\r\t\t\tbackgroundBoxResult\r\t\t\t\ttranslateTo:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) center x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) center y.\r\t\t\tbackgroundBoxResult\r\t\t\t\textent:\r\t\t\t\t\t(vis view elementFromModel: (result rows at: rowIndex)) extent x\r\t\t\t\t\t\t@ (vis composer getGroup: #result) extent y + outterGap.\r\t\t\tvis view canvas addShape: backgroundBoxRight.\r\t\t\tvis view canvas addShape: backgroundBoxResult.\r\t\t\t(vis composer hasGroup: #shade)\r\t\t\t\tifTrue: [ vis composer groupToExisting: #shade ]\r\t\t\t\tifFalse: [ vis group: #shade ] ].\r\toperationProcess := [ rowNumbers\r\t\tdo: [ :rowIndex | \r\t\t\tcolumnNumbers\r\t\t\t\tdo: [ :columnIndex | \r\t\t\t\t\tleftMarker := (self rows at: rowIndex) rightNeighbour.\r\t\t\t\t\trightMarker := (leftCopy columns at: columnIndex) belowNeighbour.\r\t\t\t\t\tnowProcessingElementIndex\r\t\t\t\t\t\tmodel:\r\t\t\t\t\t\t\t{rowIndex.\r\t\t\t\t\t\t\tcolumnIndex}.\r\t\t\t\t\tsum := 0.\r\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\tnewElementValue update.\r\t\t\t\t\tnowProcessingElementIndex update.\r\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\t[ leftMarker column ~= 0 and: [ rightMarker row ~= 0 ] ]\r\t\t\t\t\t\twhileTrue: [ leftMarker column < rightMarker row\r\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\tifFalse: [ leftMarker column > rightMarker row\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ]\r\t\t\t\t\t\t\t\t\t\tifFalse: [ vis composer highlightModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer highlightModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t\t\tsum := sum + (leftMarker value * rightMarker value).\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue model: sum.\r\t\t\t\t\t\t\t\t\t\t\tnewElementValue update.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis composer deselectModel: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarker := rightMarker belowNeighbour.\r\t\t\t\t\t\t\t\t\t\t\tleftMarker := leftMarker rightNeighbour.\r\t\t\t\t\t\t\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: rightMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer selectModel: leftMarker ].\r\t\t\t\t\t\t\t\t\t\t\tleftMarkerElement updateModelAndRedraw: leftMarker.\r\t\t\t\t\t\t\t\t\t\t\trightMarkerElement updateModelAndRedraw: rightMarker.\r\t\t\t\t\t\t\t\t\t\t\tvis delay wait ] ] ].\r\t\t\t\t\trightMarker row ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: rightMarker ].\r\t\t\t\t\tleftMarker column ~= 0\r\t\t\t\t\t\tifTrue: [ vis composer deselectModel: leftMarker ].\r\t\t\t\t\tsum ~= 0\r\t\t\t\t\t\tifTrue: [ newNode := TWMatrixNode new\r\t\t\t\t\t\t\t\tvalue: sum\r\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\tcolumn: columnIndex.\r\t\t\t\t\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: newNode.\r\t\t\t\t\t\t\t(lastInColumnMarkers at: columnIndex) belowNeighbour: newNode.\r\t\t\t\t\t\t\tlastInRowMarkers at: rowIndex put: newNode.\r\t\t\t\t\t\t\tlastInColumnMarkers at: columnIndex put: newNode.\r\t\t\t\t\t\t\tvis updateResultWith: result.\r\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\tvis delay wait ] ] ].\r\tvis composer removeGroup: #leftMarker.\r\tvis composer removeGroup: #rightMarker.\r\tvis composer removeGroup: #nowProcessing.\r\tvis composer removeGroup: #newElementValue.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithoutAll: #(#leftMarker #rightMarker)).\r\tvis redrawNamesAndBackgrounds.\r\tresult rows\r\t\twithIndexDo: [ :rowHead :rowIndex | \r\t\t\t(lastInRowMarkers at: rowIndex) rightNeighbour: rowHead\r\t\t\t"vis updateResultWith: result.\r\t\t\tvis delay wait " ].\r\tresult columns\r\t\twithIndexDo: [ :colHead :colIndex | \r\t\t\t(lastInColumnMarkers at: colIndex) belowNeighbour: colHead\r\t\t\t"vis updateResultWith: result.\r\t\t\tvis delay wait" ].\r\tvis updateResultWith: result ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.250295+03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TWSparseMatrix\r\tinstanceVariableNames: \'rows columns rowsNumber columnsNumber\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'LNU-SparseMatrix-Data\'',				#superclassName : 'Object'			},			#name : #TWSparseMatrix,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TWSparseMatrix,						#isMetaSide : false					},					#name : #rows,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TWSparseMatrix,						#isMetaSide : false					},					#name : #columns,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TWSparseMatrix,						#isMetaSide : false					},					#name : #rowsNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TWSparseMatrix,						#isMetaSide : false					},					#name : #columnsNumber,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TWSparseMatrix class\r\tinstanceVariableNames: \'\''				},				#name : #'TWSparseMatrix class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TWSparseMatrix,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a sparse matrix of numbers.\r\rI can be multiplied with other matrices, added to other matrices, multiplied by a number, transposed.\rI store a low-density table of numbers. l know my dimensions.\r\rMy main collaborator is TWMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnsNumber\r- rowsNumber\r- at: at:\r- at:at:put:\r- removeAt:at:\r- copy\r- transpose\r- isEmpty\r\rInstance creation:\r1) An empty matrix of size number_of_rows x number_of_columns\r- TWSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- LILSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \r    Instance Variables\r\tcolumnsNumber:\t\t<SmallInteger>\r\trowsNumber:\t\t<SmallInteger>\r\trows:\t\t\t\t<Array>\r\tcolumns:\t\t\t<Array>\r',				#stamp : 'YaroslavKormushyn 4/18/2018 11:18'			},			#classVariables : OrderedCollection [ ],			#category : #LNU-SparseMatrix-Data,			#package : #LNU-SparseMatrix,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'I represent a sparse matrix of numbers.\n\nI can be multiplied with other matrices, added to other matrices, multiplied by a number, transposed.\nI store a low-density table of numbers. l know my dimensions.\n\nMy main collaborator is TWMatrixNode, which is the internal representaion of my elements.\n\nPublic API and Key Messages\n- columnsNumber\n- rowsNumber\n- at: at:\n- at:at:put:\n- removeAt:at:\n- copy\n- transpose\n- isEmpty\n\nInstance creation:\n1) An empty matrix of size number_of_rows x number_of_columns\n- TWSparseMatrix rows: number_of_rows columns: number_of_columns\n2) Matrix of size 2x2\n\t\t\t[ 1 0 ]\n\t\t\t[ 2 0 ]\n- LILSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\n   \n    Instance Variables\n\tcolumnsNumber:\t\t<SmallInteger>\n\trowsNumber:\t\t<SmallInteger>\n\trows:\t\t\t\t<Array>\n\tcolumns:\t\t\t<Array>\n',		#newComment : 'I represent a sparse matrix of numbers.\r\rI can be multiplied with other matrices, added to other matrices, multiplied by a number, transposed.\rI store a low-density table of numbers. l know my dimensions.\r\rMy main collaborator is TWMatrixNode, which is the internal representaion of my elements.\r\rPublic API and Key Messages\r- columnsNumber\r- rowsNumber\r- at: at:\r- at:at:put:\r- removeAt:at:\r- copy\r- transpose\r- isEmpty\r\rInstance creation:\r1) An empty matrix of size number_of_rows x number_of_columns\r- TWSparseMatrix rows: number_of_rows columns: number_of_columns\r2) Matrix of size 2x2\r\t\t\t[ 1 0 ]\r\t\t\t[ 2 0 ]\r- LILSparseMatrix withAll: { { 1 . 0 } . { 2 . 0 } }\r   \r    Instance Variables\r\tcolumnsNumber:\t\t<SmallInteger>\r\trowsNumber:\t\t<SmallInteger>\r\trows:\t\t\t\t<Array>\r\tcolumns:\t\t\t<Array>\r',		#oldStamp : 'YaroslavKormushyn 4/18/2018 11:18',		#newStamp : 'YaroslavKormushyn 4/18/2018 11:18'	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.433295+03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : '',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.435295+03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.551295+03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LILSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := LILSparseMatrix withAll: col.\r\tcooanimvis := LILSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : 'YaroslavKormushyn 5/9/2019 22:52',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.610295+03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\t(COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: marker column\r\t\t\t\t\t\t\t\tcolumn: marker row\r\t\t\t\t\t\t\t\tvalue: marker value).\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\t(COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: marker column\r\t\t\t\t\t\t\t\tcolumn: marker row\r\t\t\t\t\t\t\t\tvalue: marker value).\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.612295+03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\t(COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: marker column\r\t\t\t\t\t\t\t\tcolumn: marker row\r\t\t\t\t\t\t\t\tvalue: marker value).\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.647295+03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TWSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := TWSparseMatrix withAll: col.\r\tcooanimvis := TWSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : 'YaroslavKormushyn 5/9/2019 23:50',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.680295+03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (LILSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (MatrixElement row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ | sourceElement |\r\t\t\t\t\t\t\t\t\tsourceElement := (self rows at: rowIndex) at: index.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw:\r\t\t\t\t\t\t\t\t\t\t\t(MatrixElement\r\t\t\t\t\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: sourceElement column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value\r\t\t\t\t\t\t\t\t\t\t\t\tsource: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast: (LILSparseMatrixNode column: rowIndex value: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:26',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #'as yet unclassified',			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (LILSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (MatrixElement row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ | sourceElement |\r\t\t\t\t\t\t\t\t\tsourceElement := (self rows at: rowIndex) at: index.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw:\r\t\t\t\t\t\t\t\t\t\t\t(MatrixElement\r\t\t\t\t\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: sourceElement column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value\r\t\t\t\t\t\t\t\t\t\t\t\tsource: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast: (LILSparseMatrixNode column: rowIndex value: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.682295+03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (LILSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (MatrixElement row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ | sourceElement |\r\t\t\t\t\t\t\t\t\tsourceElement := (self rows at: rowIndex) at: index.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw:\r\t\t\t\t\t\t\t\t\t\t\t(MatrixElement\r\t\t\t\t\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: sourceElement column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value\r\t\t\t\t\t\t\t\t\t\t\t\tsource: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast: (LILSparseMatrixNode column: rowIndex value: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : 'YaroslavKormushyn 5/9/2019 23:26',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.711295+03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := COOSparseMatrix withAll: col.\r\tcooanimvis := COOSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.743295+03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp elements |\r\tcomp := self getElementShape.\r\taCollection isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: aCollection.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'as yet unclassified',			#sourceCode : 'onCollection: aCollection\r\t| comp elements |\r\tcomp := self getElementShape.\r\taCollection isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: aCollection.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.744295+03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp elements |\r\tcomp := self getElementShape.\r\taCollection isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: aCollection.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.775295+03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #'onNodeCollection:withView:',			#protocol : #'instance creation',			#sourceCode : 'onNodeCollection: aCollection withView: aView\r\t(aCollection isKindOf: Collection)\r\t\tifFalse: [ Error\r\t\t\t\tsignal: \'Not a collection\' ].\r\t^ (self new withView: aView) onCollection: aCollection',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #'onNodeCollection:withView:',			#protocol : #'as yet unclassified',			#sourceCode : 'onNodeCollection: aCollection withView: aView\r\t(aCollection isKindOf: Collection)\r\t\tifFalse: [ Error\r\t\t\t\tsignal: \'Not a collection\' ].\r\t^ (self new withView: aView) onCollection: aCollection',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.776295+03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #'onNodeCollection:withView:',			#protocol : #'instance creation',			#sourceCode : 'onNodeCollection: aCollection withView: aView\r\t(aCollection isKindOf: Collection)\r\t\tifFalse: [ Error\r\t\t\t\tsignal: \'Not a collection\' ].\r\t^ (self new withView: aView) onCollection: aCollection',			#stamp : 'YaroslavKormushyn 5/9/2019 18:43',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:36.812295+03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #transpose,			#protocol : #transformation,			#sourceCode : 'transpose\r\t| result tempList marker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ tempList add: (COOSparseMatrixNode row: marker column column: marker row value: marker value).\r\t\t\t\t\tmarker := marker rightNeighbour ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : 'YaroslavKormushyn 5/9/2019 18:44',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #transpose,			#protocol : #transformation,			#sourceCode : 'transpose\r\t| result tempList marker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ tempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\tmarker copy.\r\t\t\t\t\tmarker := marker rightNeighbour ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:53.939295+03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := COOSparseMatrix withAll: col.\r\tcooanimvis := COOSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:53.941295+03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TWSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := TWSparseMatrix withAll: col.\r\tcooanimvis := TWSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:53.944295+03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'COOSparseMatrixVisualizer class',				#isMetaSide : true			},			#name : #'onNodeCollection:withView:',			#protocol : #'instance creation',			#sourceCode : 'onNodeCollection: aCollection withView: aView\r\t(aCollection isKindOf: Collection)\r\t\tifFalse: [ Error\r\t\t\t\tsignal: \'Not a collection\' ].\r\t^ (self new withView: aView) onCollection: aCollection',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:53.945295+03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrixVisualizer,				#isMetaSide : false			},			#name : #'onCollection:',			#protocol : #'instance creation',			#sourceCode : 'onCollection: aCollection\r\t| comp elements |\r\tcomp := self getElementShape.\r\taCollection isEmpty\r\t\tifTrue: [ ^ RTView new ].\r\telements := comp elementsOn: aCollection.\r\telements @ RTDraggable.\r\telements @ RTPopup.\r\tview addAll: elements.\r\tRTGridLayout on: elements.\r\tself drawEdgesWith: elements.\r\tself setPositionsFor: elements',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:53.951295+03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #transpose,			#protocol : #transformation,			#sourceCode : 'transpose\r\t| result tempList marker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ tempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\tmarker copy.\r\t\t\t\t\tmarker := marker rightNeighbour ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : '',			#package : #LNU-SparseMatrix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #transpose,			#protocol : #transformation,			#sourceCode : 'transpose\r\t| result tempList marker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tself isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ tempList add: (COOSparseMatrixNode row: marker column column: marker row value: marker value).\r\t\t\t\t\tmarker := marker rightNeighbour ].\r\t\t\ttempList reSort.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1) ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1) ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ].\r\t^ result',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:53.998295+03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #COOSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList marker vis operationProcess sourceMarker rightMarkerElement nowProcessingElementIndex newElementValue captionLabel newRowGroup |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tsourceMarker := (COOSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (COOSparseMatrixNode row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #transpositionList #sourceMarker).\r\tvis backgroundGroups: #(#source #transpositionList).\r\toperationProcess := [ self isEmpty\r\t\tifFalse: [ marker := first.\r\t\t\tvis selectModel: marker.\r\t\t\ttempList := SortedCollection new\r\t\t\t\tsortBlock: [ :left :right | \r\t\t\t\t\tleft row < right row\r\t\t\t\t\t\tor: [ left row = right row and: [ left column < right column ] ] ].\r\t\t\t[ marker isNotNil ]\r\t\t\t\twhileTrue: [ (vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\ttempList\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\t(COOSparseMatrixNode\r\t\t\t\t\t\t\t\trow: marker column\r\t\t\t\t\t\t\t\tcolumn: marker row\r\t\t\t\t\t\t\t\tvalue: marker value).\r\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: marker.\r\t\t\t\t\tmarker := marker rightNeighbour.\r\t\t\t\t\tmarker isNotNil\r\t\t\t\t\t\tifTrue: [ sourceMarker updateModelAndRedraw: marker.\r\t\t\t\t\t\t\tvis selectModel: marker ]\r\t\t\t\t\t\tifFalse: [ sourceMarker\r\t\t\t\t\t\t\t\tupdateModelAndRedraw: (COOSparseMatrixNode row: 0 column: 0 value: 0) ] ].\r\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\ttempList reSort.\r\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\tonNodeCollection: tempList\r\t\t\t\twithView: vis view.\r\t\t\tvis composer group: #transpositionList.\r\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\tvis delay wait.\r\t\t\ttempList\r\t\t\t\tkeysAndValuesDo: [ :index :element | \r\t\t\t\t\tindex - 1 > 0\r\t\t\t\t\t\tifTrue: [ element leftNeighbour: (tempList at: index - 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ].\r\t\t\t\t\tindex < tempList size\r\t\t\t\t\t\tifTrue: [ element rightNeighbour: (tempList at: index + 1).\r\t\t\t\t\t\t\t(vis composer hasGroup: #transpositionList)\r\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #transpositionList ].\r\t\t\t\t\t\t\tCOOSparseMatrixVisualizer\r\t\t\t\t\t\t\t\tonNodeCollection: tempList\r\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\tvis composer group: #transpositionList.\r\t\t\t\t\t\t\tvis composer move: #transpositionList below: #source.\r\t\t\t\t\t\t\tvis redrawNamesAndBackgrounds.\r\t\t\t\t\t\t\tvis delay wait ] ].\r\t\t\tresult first: tempList first.\r\t\t\tresult last: tempList last ] ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:54.003295+03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LILSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| result tempList index vis operationProcess sourceMarker |\r\tresult := self class rows: columnNumber columns: rowNumber.\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (LILSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (MatrixElement row: 0 column: 0 value: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer nameGroup: #sourceMarker as: \'sourceMarker\'.\r\tvis composer nameGroup: #source as: \'source\'.\r\tvis composer nameGroup: #result as: \'result\'.\r\tvis composer\r\t\tsetBackgroundColor: (Color gray alpha: 0.2)\r\t\tforGroup: #source.\r\tvis composer group: #labels.\r\tvis namedGroups: #(#source #sourceMarker #result).\r\tvis backgroundGroups: #(#source #result).\r\toperationProcess := [ | newRowGroup captionLabel |\r\t1 to: columnNumber do: [ :columnIndex | \r\t\ttempList := LinkedList new.\r\t\tnewRowGroup := #newRow.\r\t\tcaptionLabel := (RTLabel\r\t\t\ttext: Character arrowLeft asString , \'List for row \' , columnIndex asString)\r\t\t\telement.\r\t\tvis add: captionLabel.\r\t\tvis group: #newRowLabel.\r\t\tvis composer move: #newRowLabel above: #source.\r\t\t1 to: rowNumber do: [ :rowIndex | \r\t\t\t(self rows at: rowIndex) isEmpty\r\t\t\t\tifFalse: [ (self rows at: rowIndex) first\r\t\t\t\t\t\tifNotNil: [ index := (self rows at: rowIndex)\r\t\t\t\t\t\t\t\tfindFirst: [ :element | element column = columnIndex ].\r\t\t\t\t\t\t\tindex = 0\r\t\t\t\t\t\t\t\tifFalse: [ | sourceElement |\r\t\t\t\t\t\t\t\t\tsourceElement := (self rows at: rowIndex) at: index.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tsourceMarker\r\t\t\t\t\t\t\t\t\t\tupdateModelAndRedraw:\r\t\t\t\t\t\t\t\t\t\t\t(MatrixElement\r\t\t\t\t\t\t\t\t\t\t\t\trow: rowIndex\r\t\t\t\t\t\t\t\t\t\t\t\tcolumn: sourceElement column\r\t\t\t\t\t\t\t\t\t\t\t\tvalue: sourceElement value\r\t\t\t\t\t\t\t\t\t\t\t\tsource: sourceElement).\r\t\t\t\t\t\t\t\t\tvis delay wait.\r\t\t\t\t\t\t\t\t\t(vis composer hasGroup: #newRow)\r\t\t\t\t\t\t\t\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\t\t\t\t\t\t\t\ttempList\r\t\t\t\t\t\t\t\t\t\taddLast: (LILSparseMatrixNode column: rowIndex value: sourceElement value).\r\t\t\t\t\t\t\t\t\tLILSparseMatrixVisualizer\r\t\t\t\t\t\t\t\t\t\tonLinkedList: tempList\r\t\t\t\t\t\t\t\t\t\tinRow: columnIndex\r\t\t\t\t\t\t\t\t\t\twithView: vis view.\r\t\t\t\t\t\t\t\t\tvis group: newRowGroup.\r\t\t\t\t\t\t\t\t\tvis composer\r\t\t\t\t\t\t\t\t\t\tdeselectUsing: [ :model | model source = sourceElement ]\r\t\t\t\t\t\t\t\t\t\tinGroup: #source.\r\t\t\t\t\t\t\t\t\tvis composer move: newRowGroup onTheRightOf: #newRowLabel.\r\t\t\t\t\t\t\t\t\tvis composer redrawNamesFor: vis namedGroups.\r\t\t\t\t\t\t\t\t\tvis composer redrawBackgroundsFor: vis backgroundGroups.\r\t\t\t\t\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\t\t\t\t\tvis delay wait ] ] ] ].\r\t\t(vis composer hasGroup: #newRow)\r\t\t\tifTrue: [ vis composer removeGroup: #newRow ].\r\t\tvis composer removeGroup: #newRowLabel.\r\t\tresult rows at: columnIndex put: tempList.\r\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\tvis composer move: #result onTheRightOf: #source.\r\t\tvis composer view canvas focusOnCenterScaled.\r\t\tvis delay wait ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis namedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer view canvas focusOnCenterScaled ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:54.007295+03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TWSparseMatrix,				#isMetaSide : false			},			#name : #'transposeAnimatedDelay:',			#protocol : #transformation,			#sourceCode : 'transposeAnimatedDelay: delay\r\t| copy rowMarker result columnMarkers vis operationProcess sourceMarker |\r\tresult := self class rows: columnsNumber columns: rowsNumber.\r\tself isEmpty\r\t\tifTrue: [ ^ result ].\r\tvis := MatrixOperationVisualizer new.\r\tvis delay: delay.\r\tMatrixVisualizer on: self withView: vis view.\r\tvis composer group: #source.\r\tMatrixVisualizer on: result withView: vis view.\r\tvis composer group: #result.\r\tsourceMarker := (TWSparseMatrixVisualizer new\r\t\tgetElementShapeScaled: 5)\r\t\telementOn: (TWMatrixNode new value: 0 row: 0 column: 0).\r\tvis add: sourceMarker.\r\tvis group: #sourceMarker.\r\tvis composer move: #sourceMarker below: #source.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis namedGroups: #(#source #result #sourceMarker).\r\tvis backgroundGroups: #(#source #result).\r\tvis redrawNamesAndBackgrounds.\r\toperationProcess := [ columnMarkers := result columns copy.\r\tresult rows\r\t\twithIndexDo: [ :each :rowIndex | \r\t\t\tcopy := self columns at: rowIndex.\r\t\t\trowMarker := each.\r\t\t\t[ copy belowNeighbour row ~= 0 ]\r\t\t\t\twhileTrue: [ copy := copy belowNeighbour.\r\t\t\t\t\tvis selectModel: copy.\r\t\t\t\t\trowMarker\r\t\t\t\t\t\trightNeighbour: (TWMatrixNode new value: copy value row: copy column column: copy row).\r\t\t\t\t\t(columnMarkers at: copy row)\r\t\t\t\t\t\tbelowNeighbour: rowMarker rightNeighbour.\r\t\t\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\t\t\tvis delay wait.\r\t\t\t\t\tvis deselectModel: copy.\r\t\t\t\t\tcolumnMarkers at: copy row put: rowMarker rightNeighbour.\r\t\t\t\t\trowMarker := rowMarker rightNeighbour ].\r\t\t\trowMarker rightNeighbour: each.\r\t\t\tvis composer replaceElementsInGroup: #result with: result.\r\t\t\tvis composer move: #result onTheRightOf: #source.\r\t\t\tvis composer view canvas focusOnCenterScaled.\r\t\t\tvis delay wait ].\r\tresult columns\r\t\twithIndexDo:\r\t\t\t[ :each :columnIndex | (columnMarkers at: columnIndex) belowNeighbour: each ].\r\tvis composer removeGroup: #sourceMarker.\r\tvis\r\t\tnamedGroups: (vis namedGroups copyWithout: #sourceMarker).\r\tvis redrawNamesAndBackgrounds.\r\tvis composer replaceElementsInGroup: #result with: result.\r\tvis composer move: #result onTheRightOf: #source.\r\tvis composer view canvas focusOnCenterScaled.\r\tvis delay wait ] newProcess.\r\tvis setUpMenuWithProcess: operationProcess.\r\t^ vis view',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}OmEntry {	#tags : {		#author : 'YaroslavKormushyn',		#time : DateAndTime [ '2019-05-10T00:02:54.009295+03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LILSparseMatrixOperationVisualizer class',				#isMetaSide : true			},			#name : #exampleTransposition,			#protocol : #'as yet unclassified',			#sourceCode : 'exampleTransposition\r\t| col coo cooanimvis |\r\tcol := {{1 . -1 . 0 . 0}.\r\t{0 . 3 . 0 . 0}.\r\t{1 . 0 . 2 . 1}.\r\t{0 . 0 . 0 . 0}}.\r\tcoo := LILSparseMatrix withAll: col.\r\tcooanimvis := LILSparseMatrixOperationVisualizer new.\r\tcooanimvis delay: 1.\r\t^ coo transposeAnimatedDelay: 1',			#stamp : '',			#package : #LNU-SparseMatrix		}	}}